
fruit_ninja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e3c  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801072c  0801072c  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801072c  0801072c  0002072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010734  08010734  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010734  08010734  00020734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010738  08010738  00020738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801073c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009170  200000a4  080107e0  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009214  080107e0  00039214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f100  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b35  00000000  00000000  0005f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00065d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bf8  00000000  00000000  000681b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037cc3  00000000  00000000  00069da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032e60  00000000  00000000  000a1a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013681b  00000000  00000000  000d48cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fe4  00000000  00000000  0020b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  002150cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e8d8 	.word	0x0800e8d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800e8d8 	.word	0x0800e8d8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f803 	bl	80005ec <BSP_LCD_InitEx>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80005f6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000604:	f000 f934 	bl	8000870 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000608:	f000 fd92 	bl	8001130 <LCD_IO_GetID>
 800060c:	4603      	mov	r3, r0
 800060e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000612:	2b11      	cmp	r3, #17
 8000614:	d001      	beq.n	800061a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000616:	2301      	movs	r3, #1
 8000618:	e111      	b.n	800083e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800061a:	f000 fd91 	bl	8001140 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000620:	4a8a      	ldr	r2, [pc, #552]	; (800084c <BSP_LCD_InitEx+0x260>)
 8000622:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000624:	4888      	ldr	r0, [pc, #544]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000626:	f004 fa6f 	bl	8004b08 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800062e:	2305      	movs	r3, #5
 8000630:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800063a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	4a82      	ldr	r2, [pc, #520]	; (8000850 <BSP_LCD_InitEx+0x264>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	0a9b      	lsrs	r3, r3, #10
 800064e:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000650:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800065a:	f004 f939 	bl	80048d0 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800066a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800066e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800067c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 8000680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000684:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000692:	2301      	movs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000696:	230f      	movs	r3, #15
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800069a:	2310      	movs	r3, #16
 800069c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80006dc:	4a5f      	ldr	r2, [pc, #380]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e6:	fb03 f202 	mul.w	r2, r3, r2
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	441a      	add	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	441a      	add	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000716:	fb03 f202 	mul.w	r2, r3, r2
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800072a:	4a4c      	ldr	r2, [pc, #304]	; (800085c <BSP_LCD_InitEx+0x270>)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <BSP_LCD_InitEx+0x270>)
 800073e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000746:	2210      	movs	r2, #16
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BSP_LCD_InitEx+0x270>)
 800074c:	2200      	movs	r2, #0
 800074e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <BSP_LCD_InitEx+0x270>)
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <BSP_LCD_InitEx+0x270>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <BSP_LCD_InitEx+0x270>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000784:	f004 fb18 	bl	8004db8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800078e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	3b01      	subs	r3, #1
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800079a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <BSP_LCD_InitEx+0x268>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	441a      	add	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4413      	add	r3, r2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	441a      	add	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	441a      	add	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007d2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007f0:	f007 f87e 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <BSP_LCD_InitEx+0x27c>)
 8000816:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <BSP_LCD_InitEx+0x270>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800081c:	f006 faf2 	bl	8006e04 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000822:	f006 f847 	bl	80068b4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000828:	f004 fe20 	bl	800546c <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <BSP_LCD_InitEx+0x280>)
 800082e:	f000 f911 	bl	8000a54 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f000 ff9a 	bl	8001770 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000022c 	.word	0x2000022c
 800084c:	40016c00 	.word	0x40016c00
 8000850:	43215e57 	.word	0x43215e57
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004
 800085c:	200000c0 	.word	0x200000c0
 8000860:	20000184 	.word	0x20000184
 8000864:	20000264 	.word	0x20000264
 8000868:	40016800 	.word	0x40016800
 800086c:	20000030 	.word	0x20000030

08000870 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <BSP_LCD_Reset+0x68>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008a6:	f004 ff05 	bl	80056b4 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008b2:	f005 f9b7 	bl	8005c24 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80008b6:	2014      	movs	r0, #20
 80008b8:	f003 fb82 	bl	8003fc0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008c4:	f005 f9ae 	bl	8005c24 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f003 fb79 	bl	8003fc0 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40022400 	.word	0x40022400

080008e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <BSP_LCD_GetXSize+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <BSP_LCD_GetYSize+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004

08000910 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000920:	f7ff ffde 	bl	80008e0 <BSP_LCD_GetXSize>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800092c:	f7ff ffe4 	bl	80008f8 <BSP_LCD_GetYSize>
 8000930:	4603      	mov	r3, r0
 8000932:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000960:	f7ff ffbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000964:	4603      	mov	r3, r0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000968:	f7ff ffc6 	bl	80008f8 <BSP_LCD_GetYSize>
 800096c:	4603      	mov	r3, r0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800097a:	f006 f86b 	bl	8006a54 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3740      	adds	r7, #64	; 0x40
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000184 	.word	0x20000184
 80009c8:	2000024c 	.word	0x2000024c
 80009cc:	20000030 	.word	0x20000030

080009d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <BSP_LCD_SelectLayer+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000248 	.word	0x20000248

080009f0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <BSP_LCD_SetTextColor+0x28>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <BSP_LCD_SetTextColor+0x2c>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000248 	.word	0x20000248
 8000a1c:	2000024c 	.word	0x2000024c

08000a20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <BSP_LCD_SetBackColor+0x2c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <BSP_LCD_SetBackColor+0x30>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3304      	adds	r3, #4
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000248 	.word	0x20000248
 8000a50:	2000024c 	.word	0x2000024c

08000a54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <BSP_LCD_SetFont+0x2c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4908      	ldr	r1, [pc, #32]	; (8000a84 <BSP_LCD_SetFont+0x30>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000248 	.word	0x20000248
 8000a84:	2000024c 	.word	0x2000024c

08000a88 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <BSP_LCD_GetFont+0x24>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <BSP_LCD_GetFont+0x28>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000248 	.word	0x20000248
 8000ab0:	2000024c 	.word	0x2000024c

08000ab4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <BSP_LCD_Clear+0x48>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <BSP_LCD_Clear+0x48>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <BSP_LCD_Clear+0x4c>)
 8000ac6:	2134      	movs	r1, #52	; 0x34
 8000ac8:	fb01 f303 	mul.w	r3, r1, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	335c      	adds	r3, #92	; 0x5c
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	461e      	mov	r6, r3
 8000ad4:	f7ff ff04 	bl	80008e0 <BSP_LCD_GetXSize>
 8000ad8:	4605      	mov	r5, r0
 8000ada:	f7ff ff0d 	bl	80008f8 <BSP_LCD_GetYSize>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	462a      	mov	r2, r5
 8000aec:	4631      	mov	r1, r6
 8000aee:	4620      	mov	r0, r4
 8000af0:	f000 fc6e 	bl	80013d0 <LL_FillBuffer>
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	20000248 	.word	0x20000248
 8000b00:	20000184 	.word	0x20000184

08000b04 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <BSP_LCD_DisplayChar+0x80>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	491b      	ldr	r1, [pc, #108]	; (8000b88 <BSP_LCD_DisplayChar+0x84>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	3308      	adds	r3, #8
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <BSP_LCD_DisplayChar+0x80>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4c14      	ldr	r4, [pc, #80]	; (8000b88 <BSP_LCD_DisplayChar+0x84>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4423      	add	r3, r4
 8000b42:	3308      	adds	r3, #8
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b48:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <BSP_LCD_DisplayChar+0x80>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <BSP_LCD_DisplayChar+0x84>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4423      	add	r3, r4
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	3307      	adds	r3, #7
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	da00      	bge.n	8000b6a <BSP_LCD_DisplayChar+0x66>
 8000b68:	3307      	adds	r3, #7
 8000b6a:	10db      	asrs	r3, r3, #3
 8000b6c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b70:	18ca      	adds	r2, r1, r3
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fb72 	bl	8001260 <DrawChar>
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	20000248 	.word	0x20000248
 8000b88:	2000024c 	.word	0x2000024c

08000b8c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4603      	mov	r3, r0
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	81bb      	strh	r3, [r7, #12]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	83fb      	strh	r3, [r7, #30]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000bb6:	e002      	b.n	8000bbe <BSP_LCD_DisplayStringAt+0x32>
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	617a      	str	r2, [r7, #20]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f6      	bne.n	8000bb8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000bca:	f7ff fe89 	bl	80008e0 <BSP_LCD_GetXSize>
 8000bce:	4601      	mov	r1, r0
 8000bd0:	4b50      	ldr	r3, [pc, #320]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4850      	ldr	r0, [pc, #320]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4403      	add	r3, r0
 8000be0:	3308      	adds	r3, #8
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	889b      	ldrh	r3, [r3, #4]
 8000be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bea:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d01c      	beq.n	8000c2c <BSP_LCD_DisplayStringAt+0xa0>
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	dc33      	bgt.n	8000c5e <BSP_LCD_DisplayStringAt+0xd2>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d002      	beq.n	8000c00 <BSP_LCD_DisplayStringAt+0x74>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d019      	beq.n	8000c32 <BSP_LCD_DisplayStringAt+0xa6>
 8000bfe:	e02e      	b.n	8000c5e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	1ad1      	subs	r1, r2, r3
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4843      	ldr	r0, [pc, #268]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4403      	add	r3, r0
 8000c16:	3308      	adds	r3, #8
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	889b      	ldrh	r3, [r3, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	4413      	add	r3, r2
 8000c28:	83fb      	strh	r3, [r7, #30]
      break;
 8000c2a:	e01b      	b.n	8000c64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	83fb      	strh	r3, [r7, #30]
      break;
 8000c30:	e018      	b.n	8000c64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4836      	ldr	r0, [pc, #216]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4403      	add	r3, r0
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	889b      	ldrh	r3, [r3, #4]
 8000c50:	fb11 f303 	smulbb	r3, r1, r3
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	83fb      	strh	r3, [r7, #30]
      break;
 8000c5c:	e002      	b.n	8000c64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	83fb      	strh	r3, [r7, #30]
      break;
 8000c62:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c64:	8bfb      	ldrh	r3, [r7, #30]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <BSP_LCD_DisplayStringAt+0xe6>
 8000c6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da1d      	bge.n	8000cae <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c76:	e01a      	b.n	8000cae <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	89b9      	ldrh	r1, [r7, #12]
 8000c7e:	8bfb      	ldrh	r3, [r7, #30]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff3f 	bl	8000b04 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4923      	ldr	r1, [pc, #140]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	3308      	adds	r3, #8
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	889a      	ldrh	r2, [r3, #4]
 8000c9c:	8bfb      	ldrh	r3, [r7, #30]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
    i++;
 8000ca8:	8bbb      	ldrh	r3, [r7, #28]
 8000caa:	3301      	adds	r3, #1
 8000cac:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2dc      	uxtb	r4, r3
 8000cbc:	f7ff fe10 	bl	80008e0 <BSP_LCD_GetXSize>
 8000cc0:	8bb9      	ldrh	r1, [r7, #28]
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4d14      	ldr	r5, [pc, #80]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	442b      	add	r3, r5
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	889b      	ldrh	r3, [r3, #4]
 8000cd8:	fb01 f303 	mul.w	r3, r1, r3
 8000cdc:	1ac3      	subs	r3, r0, r3
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <BSP_LCD_DisplayStringAt+0x188>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <BSP_LCD_DisplayStringAt+0x18c>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4403      	add	r3, r0
 8000cf0:	3308      	adds	r3, #8
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	889b      	ldrh	r3, [r3, #4]
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	bf2c      	ite	cs
 8000cfa:	2301      	movcs	r3, #1
 8000cfc:	2300      	movcc	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4023      	ands	r3, r4
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1b7      	bne.n	8000c78 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000248 	.word	0x20000248
 8000d18:	2000024c 	.word	0x2000024c

08000d1c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000d28:	f7ff feae 	bl	8000a88 <BSP_LCD_GetFont>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	88db      	ldrh	r3, [r3, #6]
 8000d30:	88fa      	ldrh	r2, [r7, #6]
 8000d32:	fb12 f303 	smulbb	r3, r2, r3
 8000d36:	b299      	uxth	r1, r3
 8000d38:	2303      	movs	r3, #3
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff25 	bl	8000b8c <BSP_LCD_DisplayStringAt>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	460b      	mov	r3, r1
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <BSP_LCD_DrawHLine+0x70>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <BSP_LCD_DrawHLine+0x74>)
 8000d68:	2134      	movs	r1, #52	; 0x34
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	335c      	adds	r3, #92	; 0x5c
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	f7ff fdb4 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	fb03 f202 	mul.w	r2, r3, r2
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4423      	add	r3, r4
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <BSP_LCD_DrawHLine+0x70>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	887c      	ldrh	r4, [r7, #2]
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <BSP_LCD_DrawHLine+0x70>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4d0b      	ldr	r5, [pc, #44]	; (8000dc4 <BSP_LCD_DrawHLine+0x78>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	442b      	add	r3, r5
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	2300      	movs	r3, #0
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	4622      	mov	r2, r4
 8000dae:	f000 fb0f 	bl	80013d0 <LL_FillBuffer>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000248 	.word	0x20000248
 8000dc0:	20000184 	.word	0x20000184
 8000dc4:	2000024c 	.word	0x2000024c

08000dc8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	f1c3 0303 	rsb	r3, r3, #3
 8000de2:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8000dec:	e0c7      	b.n	8000f7e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4413      	add	r3, r2
 8000df6:	b298      	uxth	r0, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	b299      	uxth	r1, r3
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4c64      	ldr	r4, [pc, #400]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4423      	add	r3, r4
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f000 f9fd 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	b298      	uxth	r0, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	88ba      	ldrh	r2, [r7, #4]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4c59      	ldr	r4, [pc, #356]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4423      	add	r3, r4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f000 f9e7 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4c4e      	ldr	r4, [pc, #312]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4423      	add	r3, r4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f000 f9d1 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	88ba      	ldrh	r2, [r7, #4]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b299      	uxth	r1, r3
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4c43      	ldr	r4, [pc, #268]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4423      	add	r3, r4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f000 f9bb 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b299      	uxth	r1, r3
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4c38      	ldr	r4, [pc, #224]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4423      	add	r3, r4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f000 f9a5 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b298      	uxth	r0, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	b299      	uxth	r1, r3
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4c2d      	ldr	r4, [pc, #180]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4423      	add	r3, r4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f000 f98f 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	4413      	add	r3, r2
 8000efe:	b298      	uxth	r0, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4c22      	ldr	r4, [pc, #136]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4423      	add	r3, r4
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f000 f979 	bl	8001214 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b298      	uxth	r0, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	b299      	uxth	r1, r3
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <BSP_LCD_DrawCircle+0x1cc>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4c17      	ldr	r4, [pc, #92]	; (8000f98 <BSP_LCD_DrawCircle+0x1d0>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4423      	add	r3, r4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f000 f963 	bl	8001214 <BSP_LCD_DrawPixel>

    if (D < 0)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da06      	bge.n	8000f62 <BSP_LCD_DrawCircle+0x19a>
    {
      D += (CurX << 2) + 6;
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	009a      	lsls	r2, r3, #2
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3306      	adds	r3, #6
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	009a      	lsls	r2, r3, #2
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	330a      	adds	r3, #10
 8000f70:	617b      	str	r3, [r7, #20]
      CurY--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	f67f af33 	bls.w	8000dee <BSP_LCD_DrawCircle+0x26>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000248 	.word	0x20000248
 8000f98:	2000024c 	.word	0x2000024c

08000f9c <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	f1c3 0303 	rsb	r3, r3, #3
 8000fb6:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <BSP_LCD_FillCircle+0x138>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4944      	ldr	r1, [pc, #272]	; (80010d8 <BSP_LCD_FillCircle+0x13c>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd0c 	bl	80009f0 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8000fd8:	e061      	b.n	800109e <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d021      	beq.n	8001024 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f7ff fea5 	bl	8000d4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b29b      	uxth	r3, r3
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b298      	uxth	r0, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	b29b      	uxth	r3, r3
 8001010:	88ba      	ldrh	r2, [r7, #4]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b299      	uxth	r1, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b29b      	uxth	r3, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	f7ff fe94 	bl	8000d4c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d021      	beq.n	800106e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	b29b      	uxth	r3, r3
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b298      	uxth	r0, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	b29b      	uxth	r3, r3
 8001038:	88ba      	ldrh	r2, [r7, #4]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	b299      	uxth	r1, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	b29b      	uxth	r3, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	f7ff fe80 	bl	8000d4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	b29b      	uxth	r3, r3
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b298      	uxth	r0, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b29a      	uxth	r2, r3
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	b299      	uxth	r1, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	b29b      	uxth	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	f7ff fe6f 	bl	8000d4c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da06      	bge.n	8001082 <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	009a      	lsls	r2, r3, #2
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4413      	add	r3, r2
 800107c:	3306      	adds	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	009a      	lsls	r2, r3, #2
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4413      	add	r3, r2
 800108e:	330a      	adds	r3, #10
 8001090:	617b      	str	r3, [r7, #20]
      CurY--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3b01      	subs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3301      	adds	r3, #1
 800109c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d999      	bls.n	8000fda <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <BSP_LCD_FillCircle+0x138>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	490b      	ldr	r1, [pc, #44]	; (80010d8 <BSP_LCD_FillCircle+0x13c>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc99 	bl	80009f0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	88b9      	ldrh	r1, [r7, #4]
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe7f 	bl	8000dc8 <BSP_LCD_DrawCircle>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000248 	.word	0x20000248
 80010d8:	2000024c 	.word	0x2000024c

080010dc <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d80d      	bhi.n	8001108 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	2215      	movs	r2, #21
 80010fe:	2100      	movs	r1, #0
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <DSI_IO_WriteCmd+0x50>)
 8001102:	f004 f9ef 	bl	80054e4 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001106:	e00d      	b.n	8001124 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2239      	movs	r2, #57	; 0x39
 800111c:	2100      	movs	r1, #0
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <DSI_IO_WriteCmd+0x50>)
 8001120:	f004 fa02 	bl	8005528 <HAL_DSI_LongWrite>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000022c 	.word	0x2000022c

08001130 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001134:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 800114c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	4a2b      	ldr	r2, [pc, #172]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001168:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4a28      	ldr	r2, [pc, #160]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001170:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001174:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 8001194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001198:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011a4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	4a13      	ldr	r2, [pc, #76]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <BSP_LCD_MspInit+0xd0>)
 80011d0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80011d4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2103      	movs	r1, #3
 80011da:	2058      	movs	r0, #88	; 0x58
 80011dc:	f002 ffcc 	bl	8004178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011e0:	2058      	movs	r0, #88	; 0x58
 80011e2:	f002 ffe5 	bl	80041b0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2103      	movs	r1, #3
 80011ea:	205a      	movs	r0, #90	; 0x5a
 80011ec:	f002 ffc4 	bl	8004178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011f0:	205a      	movs	r0, #90	; 0x5a
 80011f2:	f002 ffdd 	bl	80041b0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2103      	movs	r1, #3
 80011fa:	2062      	movs	r0, #98	; 0x62
 80011fc:	f002 ffbc 	bl	8004178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001200:	2062      	movs	r0, #98	; 0x62
 8001202:	f002 ffd5 	bl	80041b0 <HAL_NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	603a      	str	r2, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	460b      	mov	r3, r1
 8001222:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <BSP_LCD_DrawPixel+0x44>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <BSP_LCD_DrawPixel+0x48>)
 800122a:	2134      	movs	r1, #52	; 0x34
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	335c      	adds	r3, #92	; 0x5c
 8001234:	681c      	ldr	r4, [r3, #0]
 8001236:	88bd      	ldrh	r5, [r7, #4]
 8001238:	f7ff fb52 	bl	80008e0 <BSP_LCD_GetXSize>
 800123c:	4603      	mov	r3, r0
 800123e:	fb03 f205 	mul.w	r2, r3, r5
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4423      	add	r3, r4
 800124a:	461a      	mov	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bdb0      	pop	{r4, r5, r7, pc}
 8001258:	20000248 	.word	0x20000248
 800125c:	20000184 	.word	0x20000184

08001260 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	460b      	mov	r3, r1
 800126e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <DrawChar+0x168>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4953      	ldr	r1, [pc, #332]	; (80013cc <DrawChar+0x16c>)
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3308      	adds	r3, #8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	88db      	ldrh	r3, [r3, #6]
 800128e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <DrawChar+0x168>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	494d      	ldr	r1, [pc, #308]	; (80013cc <DrawChar+0x16c>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80012a8:	8a3b      	ldrh	r3, [r7, #16]
 80012aa:	3307      	adds	r3, #7
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da00      	bge.n	80012b2 <DrawChar+0x52>
 80012b0:	3307      	adds	r3, #7
 80012b2:	10db      	asrs	r3, r3, #3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	8a3b      	ldrh	r3, [r7, #16]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e076      	b.n	80013b6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80012c8:	8a3b      	ldrh	r3, [r7, #16]
 80012ca:	3307      	adds	r3, #7
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da00      	bge.n	80012d2 <DrawChar+0x72>
 80012d0:	3307      	adds	r3, #7
 80012d2:	10db      	asrs	r3, r3, #3
 80012d4:	461a      	mov	r2, r3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	3307      	adds	r3, #7
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da00      	bge.n	80012ec <DrawChar+0x8c>
 80012ea:	3307      	adds	r3, #7
 80012ec:	10db      	asrs	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <DrawChar+0x98>
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d004      	beq.n	8001300 <DrawChar+0xa0>
 80012f6:	e00c      	b.n	8001312 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	617b      	str	r3, [r7, #20]
      break;
 80012fe:	e016      	b.n	800132e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	3201      	adds	r2, #1
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
      break;
 8001310:	e00d      	b.n	800132e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3301      	adds	r3, #1
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	4313      	orrs	r3, r2
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	3202      	adds	r2, #2
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
      break;
 800132c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	e036      	b.n	80013a2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001334:	8a3a      	ldrh	r2, [r7, #16]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad2      	subs	r2, r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4413      	add	r3, r2
 800133e:	3b01      	subs	r3, #1
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	461a      	mov	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d012      	beq.n	8001376 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	b29a      	uxth	r2, r3
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4413      	add	r3, r2
 8001358:	b298      	uxth	r0, r3
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <DrawChar+0x168>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	491b      	ldr	r1, [pc, #108]	; (80013cc <DrawChar+0x16c>)
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff ff50 	bl	8001214 <BSP_LCD_DrawPixel>
 8001374:	e012      	b.n	800139c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	b29a      	uxth	r2, r3
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4413      	add	r3, r2
 800137e:	b298      	uxth	r0, r3
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <DrawChar+0x168>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4911      	ldr	r1, [pc, #68]	; (80013cc <DrawChar+0x16c>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3304      	adds	r3, #4
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff ff3c 	bl	8001214 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	3301      	adds	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	8a3b      	ldrh	r3, [r7, #16]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3c4      	bcc.n	8001334 <DrawChar+0xd4>
      }
    }
    Ypos++;
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	3301      	adds	r3, #1
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	8a7b      	ldrh	r3, [r7, #18]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d384      	bcc.n	80012c8 <DrawChar+0x68>
  }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000248 	.word	0x20000248
 80013cc:	2000024c 	.word	0x2000024c

080013d0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <LL_FillBuffer+0x68>)
 80013e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013e4:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <LL_FillBuffer+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <LL_FillBuffer+0x68>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <LL_FillBuffer+0x68>)
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <LL_FillBuffer+0x6c>)
 80013f6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <LL_FillBuffer+0x68>)
 80013fa:	f002 ff79 	bl	80042f0 <HAL_DMA2D_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d115      	bne.n	8001430 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	480c      	ldr	r0, [pc, #48]	; (8001438 <LL_FillBuffer+0x68>)
 8001408:	f003 f8e0 	bl	80045cc <HAL_DMA2D_ConfigLayer>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10e      	bne.n	8001430 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69f9      	ldr	r1, [r7, #28]
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <LL_FillBuffer+0x68>)
 800141e:	f002 ffc1 	bl	80043a4 <HAL_DMA2D_Start>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001428:	210a      	movs	r1, #10
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <LL_FillBuffer+0x68>)
 800142c:	f002 ffe5 	bl	80043fa <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000012c 	.word	0x2000012c
 800143c:	4002b000 	.word	0x4002b000

08001440 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	80fb      	strh	r3, [r7, #6]
 800144c:	4613      	mov	r3, r2
 800144e:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <BSP_TS_Init+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <BSP_TS_Init+0xb4>)
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	b292      	uxth	r2, r2
 8001462:	4610      	mov	r0, r2
 8001464:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <BSP_TS_Init+0xb0>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2054      	movs	r0, #84	; 0x54
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	2b11      	cmp	r3, #17
 8001476:	d009      	beq.n	800148c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <BSP_TS_Init+0xb0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2070      	movs	r0, #112	; 0x70
 800147e:	4798      	blx	r3
 8001480:	4603      	mov	r3, r0
 8001482:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <BSP_TS_Init+0xb4>)
 8001486:	2270      	movs	r2, #112	; 0x70
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e002      	b.n	8001492 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <BSP_TS_Init+0xb4>)
 800148e:	2254      	movs	r2, #84	; 0x54
 8001490:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	2b11      	cmp	r3, #17
 8001496:	d002      	beq.n	800149e <BSP_TS_Init+0x5e>
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b11      	cmp	r3, #17
 800149c:	d121      	bne.n	80014e2 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <BSP_TS_Init+0xb8>)
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <BSP_TS_Init+0xb0>)
 80014a2:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d203      	bcs.n	80014b4 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <BSP_TS_Init+0xbc>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e002      	b.n	80014ba <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <BSP_TS_Init+0xbc>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <BSP_TS_Init+0xb8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <BSP_TS_Init+0xb4>)
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	b292      	uxth	r2, r2
 80014cc:	4610      	mov	r0, r2
 80014ce:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <BSP_TS_Init+0xb8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <BSP_TS_Init+0xb4>)
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	b292      	uxth	r2, r2
 80014dc:	4610      	mov	r0, r2
 80014de:	4798      	blx	r3
    if(ts_status == TS_OK)
 80014e0:	e001      	b.n	80014e6 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80014e2:	2303      	movs	r3, #3
 80014e4:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008
 80014f4:	200002f9 	.word	0x200002f9
 80014f8:	200002f4 	.word	0x200002f4
 80014fc:	200002f8 	.word	0x200002f8

08001500 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f90d 	bl	800172c <ft6x06_GetInstance>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2bff      	cmp	r3, #255	; 0xff
 800151a:	d10e      	bne.n	800153a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f905 	bl	800172c <ft6x06_GetInstance>
 8001522:	4603      	mov	r3, r0
 8001524:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8001526:	7bbb      	ldrb	r3, [r7, #14]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d806      	bhi.n	800153a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <ft6x06_Init+0x44>)
 8001534:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8001536:	f002 f833 	bl	80035a0 <TS_IO_Init>
    }
  }
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002fc 	.word	0x200002fc

08001548 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001568:	f002 f81a 	bl	80035a0 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	21a8      	movs	r1, #168	; 0xa8
 8001572:	4618      	mov	r0, r3
 8001574:	f002 f838 	bl	80035e8 <TS_IO_Read>
 8001578:	4603      	mov	r3, r0
 800157a:	b29b      	uxth	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f8bc 	bl	800170e <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f88d 	bl	80016b8 <ft6x06_TS_DisableIT>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f813 	bl	80035e8 <TS_IO_Read>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <ft6x06_TS_DetectTouch+0x50>)
 80015e4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <ft6x06_TS_DetectTouch+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000300 	.word	0x20000300

080015fc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <ft6x06_TS_GetXY+0x90>)
 8001610:	789a      	ldrb	r2, [r3, #2]
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <ft6x06_TS_GetXY+0x90>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	429a      	cmp	r2, r3
 8001618:	d234      	bcs.n	8001684 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <ft6x06_TS_GetXY+0x90>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <ft6x06_TS_GetXY+0x2c>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d003      	beq.n	800162e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8001626:	e005      	b.n	8001634 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001628:	2303      	movs	r3, #3
 800162a:	75fb      	strb	r3, [r7, #23]
      break;
 800162c:	e002      	b.n	8001634 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800162e:	2309      	movs	r3, #9
 8001630:	75fb      	strb	r3, [r7, #23]
      break;
 8001632:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	b2d8      	uxtb	r0, r3
 8001638:	f107 0210 	add.w	r2, r7, #16
 800163c:	7df9      	ldrb	r1, [r7, #23]
 800163e:	2304      	movs	r3, #4
 8001640:	f001 fff0 	bl	8003624 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8001644:	7c3b      	ldrb	r3, [r7, #16]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21b      	sxth	r3, r3
 800164a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800164e:	b21a      	sxth	r2, r3
 8001650:	7c7b      	ldrb	r3, [r7, #17]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800165e:	7cbb      	ldrb	r3, [r7, #18]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001668:	b21a      	sxth	r2, r3
 800166a:	7cfb      	ldrb	r3, [r7, #19]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <ft6x06_TS_GetXY+0x90>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <ft6x06_TS_GetXY+0x90>)
 8001682:	709a      	strb	r2, [r3, #2]
  }
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000300 	.word	0x20000300

08001690 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	21a4      	movs	r1, #164	; 0xa4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 ff82 	bl	80035b4 <TS_IO_Write>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	21a4      	movs	r1, #164	; 0xa4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ff6e 	bl	80035b4 <TS_IO_Write>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e00b      	b.n	8001758 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <ft6x06_GetInstance+0x40>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	b29b      	uxth	r3, r3
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	429a      	cmp	r2, r3
 800174c:	d101      	bne.n	8001752 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	e006      	b.n	8001760 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d9f0      	bls.n	8001740 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800175e:	23ff      	movs	r3, #255	; 0xff
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002fc 	.word	0x200002fc

08001770 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800177a:	49c1      	ldr	r1, [pc, #772]	; (8001a80 <OTM8009A_Init+0x310>)
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fcad 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001782:	49c0      	ldr	r1, [pc, #768]	; (8001a84 <OTM8009A_Init+0x314>)
 8001784:	2003      	movs	r0, #3
 8001786:	f7ff fca9 	bl	80010dc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800178a:	49bf      	ldr	r1, [pc, #764]	; (8001a88 <OTM8009A_Init+0x318>)
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fca5 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001792:	49be      	ldr	r1, [pc, #760]	; (8001a8c <OTM8009A_Init+0x31c>)
 8001794:	2002      	movs	r0, #2
 8001796:	f7ff fca1 	bl	80010dc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800179a:	49bb      	ldr	r1, [pc, #748]	; (8001a88 <OTM8009A_Init+0x318>)
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fc9d 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80017a2:	49bb      	ldr	r1, [pc, #748]	; (8001a90 <OTM8009A_Init+0x320>)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fc99 	bl	80010dc <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 80017aa:	200a      	movs	r0, #10
 80017ac:	f002 fc08 	bl	8003fc0 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80017b0:	49b8      	ldr	r1, [pc, #736]	; (8001a94 <OTM8009A_Init+0x324>)
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fc92 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80017b8:	49b7      	ldr	r1, [pc, #732]	; (8001a98 <OTM8009A_Init+0x328>)
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc8e 	bl	80010dc <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f002 fbfd 	bl	8003fc0 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80017c6:	49b5      	ldr	r1, [pc, #724]	; (8001a9c <OTM8009A_Init+0x32c>)
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fc87 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80017ce:	49b4      	ldr	r1, [pc, #720]	; (8001aa0 <OTM8009A_Init+0x330>)
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fc83 	bl	80010dc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80017d6:	49b3      	ldr	r1, [pc, #716]	; (8001aa4 <OTM8009A_Init+0x334>)
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fc7f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80017de:	49b2      	ldr	r1, [pc, #712]	; (8001aa8 <OTM8009A_Init+0x338>)
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fc7b 	bl	80010dc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80017e6:	49b1      	ldr	r1, [pc, #708]	; (8001aac <OTM8009A_Init+0x33c>)
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fc77 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80017ee:	49b0      	ldr	r1, [pc, #704]	; (8001ab0 <OTM8009A_Init+0x340>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fc73 	bl	80010dc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80017f6:	49a2      	ldr	r1, [pc, #648]	; (8001a80 <OTM8009A_Init+0x310>)
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fc6f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80017fe:	49ad      	ldr	r1, [pc, #692]	; (8001ab4 <OTM8009A_Init+0x344>)
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fc6b 	bl	80010dc <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001806:	49ac      	ldr	r1, [pc, #688]	; (8001ab8 <OTM8009A_Init+0x348>)
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fc67 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800180e:	49ab      	ldr	r1, [pc, #684]	; (8001abc <OTM8009A_Init+0x34c>)
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fc63 	bl	80010dc <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001816:	49aa      	ldr	r1, [pc, #680]	; (8001ac0 <OTM8009A_Init+0x350>)
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff fc5f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800181e:	49a9      	ldr	r1, [pc, #676]	; (8001ac4 <OTM8009A_Init+0x354>)
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fc5b 	bl	80010dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001826:	49a8      	ldr	r1, [pc, #672]	; (8001ac8 <OTM8009A_Init+0x358>)
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fc57 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800182e:	49a7      	ldr	r1, [pc, #668]	; (8001acc <OTM8009A_Init+0x35c>)
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff fc53 	bl	80010dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001836:	49a6      	ldr	r1, [pc, #664]	; (8001ad0 <OTM8009A_Init+0x360>)
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fc4f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800183e:	499a      	ldr	r1, [pc, #616]	; (8001aa8 <OTM8009A_Init+0x338>)
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fc4b 	bl	80010dc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001846:	498e      	ldr	r1, [pc, #568]	; (8001a80 <OTM8009A_Init+0x310>)
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fc47 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800184e:	49a1      	ldr	r1, [pc, #644]	; (8001ad4 <OTM8009A_Init+0x364>)
 8001850:	2002      	movs	r0, #2
 8001852:	f7ff fc43 	bl	80010dc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001856:	49a0      	ldr	r1, [pc, #640]	; (8001ad8 <OTM8009A_Init+0x368>)
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fc3f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800185e:	499f      	ldr	r1, [pc, #636]	; (8001adc <OTM8009A_Init+0x36c>)
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fc3b 	bl	80010dc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001866:	499e      	ldr	r1, [pc, #632]	; (8001ae0 <OTM8009A_Init+0x370>)
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fc37 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800186e:	499d      	ldr	r1, [pc, #628]	; (8001ae4 <OTM8009A_Init+0x374>)
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fc33 	bl	80010dc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001876:	499c      	ldr	r1, [pc, #624]	; (8001ae8 <OTM8009A_Init+0x378>)
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fc2f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800187e:	499b      	ldr	r1, [pc, #620]	; (8001aec <OTM8009A_Init+0x37c>)
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fc2b 	bl	80010dc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001886:	498c      	ldr	r1, [pc, #560]	; (8001ab8 <OTM8009A_Init+0x348>)
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fc27 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800188e:	4998      	ldr	r1, [pc, #608]	; (8001af0 <OTM8009A_Init+0x380>)
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fc23 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001896:	498a      	ldr	r1, [pc, #552]	; (8001ac0 <OTM8009A_Init+0x350>)
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fc1f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800189e:	4995      	ldr	r1, [pc, #596]	; (8001af4 <OTM8009A_Init+0x384>)
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fc1b 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80018a6:	4994      	ldr	r1, [pc, #592]	; (8001af8 <OTM8009A_Init+0x388>)
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fc17 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80018ae:	4993      	ldr	r1, [pc, #588]	; (8001afc <OTM8009A_Init+0x38c>)
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fc13 	bl	80010dc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80018b6:	4974      	ldr	r1, [pc, #464]	; (8001a88 <OTM8009A_Init+0x318>)
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fc0f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80018be:	4990      	ldr	r1, [pc, #576]	; (8001b00 <OTM8009A_Init+0x390>)
 80018c0:	2006      	movs	r0, #6
 80018c2:	f7ff fc0b 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80018c6:	498f      	ldr	r1, [pc, #572]	; (8001b04 <OTM8009A_Init+0x394>)
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fc07 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80018ce:	498e      	ldr	r1, [pc, #568]	; (8001b08 <OTM8009A_Init+0x398>)
 80018d0:	200e      	movs	r0, #14
 80018d2:	f7ff fc03 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80018d6:	498d      	ldr	r1, [pc, #564]	; (8001b0c <OTM8009A_Init+0x39c>)
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fbff 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80018de:	498c      	ldr	r1, [pc, #560]	; (8001b10 <OTM8009A_Init+0x3a0>)
 80018e0:	200e      	movs	r0, #14
 80018e2:	f7ff fbfb 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80018e6:	498b      	ldr	r1, [pc, #556]	; (8001b14 <OTM8009A_Init+0x3a4>)
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff fbf7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80018ee:	498a      	ldr	r1, [pc, #552]	; (8001b18 <OTM8009A_Init+0x3a8>)
 80018f0:	200a      	movs	r0, #10
 80018f2:	f7ff fbf3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80018f6:	4989      	ldr	r1, [pc, #548]	; (8001b1c <OTM8009A_Init+0x3ac>)
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fbef 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80018fe:	4988      	ldr	r1, [pc, #544]	; (8001b20 <OTM8009A_Init+0x3b0>)
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fbeb 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001906:	4960      	ldr	r1, [pc, #384]	; (8001a88 <OTM8009A_Init+0x318>)
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff fbe7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800190e:	4985      	ldr	r1, [pc, #532]	; (8001b24 <OTM8009A_Init+0x3b4>)
 8001910:	200a      	movs	r0, #10
 8001912:	f7ff fbe3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001916:	4984      	ldr	r1, [pc, #528]	; (8001b28 <OTM8009A_Init+0x3b8>)
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff fbdf 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800191e:	4983      	ldr	r1, [pc, #524]	; (8001b2c <OTM8009A_Init+0x3bc>)
 8001920:	200f      	movs	r0, #15
 8001922:	f7ff fbdb 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001926:	4977      	ldr	r1, [pc, #476]	; (8001b04 <OTM8009A_Init+0x394>)
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fbd7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800192e:	4980      	ldr	r1, [pc, #512]	; (8001b30 <OTM8009A_Init+0x3c0>)
 8001930:	200f      	movs	r0, #15
 8001932:	f7ff fbd3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001936:	4975      	ldr	r1, [pc, #468]	; (8001b0c <OTM8009A_Init+0x39c>)
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fbcf 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800193e:	497d      	ldr	r1, [pc, #500]	; (8001b34 <OTM8009A_Init+0x3c4>)
 8001940:	200a      	movs	r0, #10
 8001942:	f7ff fbcb 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001946:	4973      	ldr	r1, [pc, #460]	; (8001b14 <OTM8009A_Init+0x3a4>)
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fbc7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800194e:	497a      	ldr	r1, [pc, #488]	; (8001b38 <OTM8009A_Init+0x3c8>)
 8001950:	200f      	movs	r0, #15
 8001952:	f7ff fbc3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001956:	4971      	ldr	r1, [pc, #452]	; (8001b1c <OTM8009A_Init+0x3ac>)
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fbbf 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800195e:	4977      	ldr	r1, [pc, #476]	; (8001b3c <OTM8009A_Init+0x3cc>)
 8001960:	200f      	movs	r0, #15
 8001962:	f7ff fbbb 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001966:	4976      	ldr	r1, [pc, #472]	; (8001b40 <OTM8009A_Init+0x3d0>)
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fbb7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800196e:	4975      	ldr	r1, [pc, #468]	; (8001b44 <OTM8009A_Init+0x3d4>)
 8001970:	200a      	movs	r0, #10
 8001972:	f7ff fbb3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001976:	4974      	ldr	r1, [pc, #464]	; (8001b48 <OTM8009A_Init+0x3d8>)
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fbaf 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800197e:	4973      	ldr	r1, [pc, #460]	; (8001b4c <OTM8009A_Init+0x3dc>)
 8001980:	200a      	movs	r0, #10
 8001982:	f7ff fbab 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001986:	4940      	ldr	r1, [pc, #256]	; (8001a88 <OTM8009A_Init+0x318>)
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fba7 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800198e:	4970      	ldr	r1, [pc, #448]	; (8001b50 <OTM8009A_Init+0x3e0>)
 8001990:	200a      	movs	r0, #10
 8001992:	f7ff fba3 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001996:	4964      	ldr	r1, [pc, #400]	; (8001b28 <OTM8009A_Init+0x3b8>)
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fb9f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800199e:	496d      	ldr	r1, [pc, #436]	; (8001b54 <OTM8009A_Init+0x3e4>)
 80019a0:	200f      	movs	r0, #15
 80019a2:	f7ff fb9b 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80019a6:	4957      	ldr	r1, [pc, #348]	; (8001b04 <OTM8009A_Init+0x394>)
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fb97 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80019ae:	496a      	ldr	r1, [pc, #424]	; (8001b58 <OTM8009A_Init+0x3e8>)
 80019b0:	200f      	movs	r0, #15
 80019b2:	f7ff fb93 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80019b6:	4955      	ldr	r1, [pc, #340]	; (8001b0c <OTM8009A_Init+0x39c>)
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fb8f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80019be:	4967      	ldr	r1, [pc, #412]	; (8001b5c <OTM8009A_Init+0x3ec>)
 80019c0:	200a      	movs	r0, #10
 80019c2:	f7ff fb8b 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80019c6:	4953      	ldr	r1, [pc, #332]	; (8001b14 <OTM8009A_Init+0x3a4>)
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fb87 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80019ce:	4964      	ldr	r1, [pc, #400]	; (8001b60 <OTM8009A_Init+0x3f0>)
 80019d0:	200f      	movs	r0, #15
 80019d2:	f7ff fb83 	bl	80010dc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80019d6:	4951      	ldr	r1, [pc, #324]	; (8001b1c <OTM8009A_Init+0x3ac>)
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fb7f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80019de:	4961      	ldr	r1, [pc, #388]	; (8001b64 <OTM8009A_Init+0x3f4>)
 80019e0:	200f      	movs	r0, #15
 80019e2:	f7ff fb7b 	bl	80010dc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80019e6:	4934      	ldr	r1, [pc, #208]	; (8001ab8 <OTM8009A_Init+0x348>)
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fb77 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80019ee:	495e      	ldr	r1, [pc, #376]	; (8001b68 <OTM8009A_Init+0x3f8>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fb73 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80019f6:	495d      	ldr	r1, [pc, #372]	; (8001b6c <OTM8009A_Init+0x3fc>)
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fb6f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80019fe:	495c      	ldr	r1, [pc, #368]	; (8001b70 <OTM8009A_Init+0x400>)
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fb6b 	bl	80010dc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001a06:	495b      	ldr	r1, [pc, #364]	; (8001b74 <OTM8009A_Init+0x404>)
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fb67 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001a0e:	495a      	ldr	r1, [pc, #360]	; (8001b78 <OTM8009A_Init+0x408>)
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fb63 	bl	80010dc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a16:	491a      	ldr	r1, [pc, #104]	; (8001a80 <OTM8009A_Init+0x310>)
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fb5f 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001a1e:	4957      	ldr	r1, [pc, #348]	; (8001b7c <OTM8009A_Init+0x40c>)
 8001a20:	2003      	movs	r0, #3
 8001a22:	f7ff fb5b 	bl	80010dc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a26:	4916      	ldr	r1, [pc, #88]	; (8001a80 <OTM8009A_Init+0x310>)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fb57 	bl	80010dc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a2e:	4914      	ldr	r1, [pc, #80]	; (8001a80 <OTM8009A_Init+0x310>)
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fb53 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001a36:	4952      	ldr	r1, [pc, #328]	; (8001b80 <OTM8009A_Init+0x410>)
 8001a38:	2010      	movs	r0, #16
 8001a3a:	f7ff fb4f 	bl	80010dc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a3e:	4910      	ldr	r1, [pc, #64]	; (8001a80 <OTM8009A_Init+0x310>)
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fb4b 	bl	80010dc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001a46:	494f      	ldr	r1, [pc, #316]	; (8001b84 <OTM8009A_Init+0x414>)
 8001a48:	2010      	movs	r0, #16
 8001a4a:	f7ff fb47 	bl	80010dc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001a4e:	494e      	ldr	r1, [pc, #312]	; (8001b88 <OTM8009A_Init+0x418>)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fb43 	bl	80010dc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 8001a56:	2078      	movs	r0, #120	; 0x78
 8001a58:	f002 fab2 	bl	8003fc0 <HAL_Delay>

  switch(ColorCoding)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <OTM8009A_Init+0x304>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 8095 	bne.w	8001b94 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001a6a:	4948      	ldr	r1, [pc, #288]	; (8001b8c <OTM8009A_Init+0x41c>)
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fb35 	bl	80010dc <DSI_IO_WriteCmd>
    break;
 8001a72:	e090      	b.n	8001b96 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001a74:	4946      	ldr	r1, [pc, #280]	; (8001b90 <OTM8009A_Init+0x420>)
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fb30 	bl	80010dc <DSI_IO_WriteCmd>
    break;
 8001a7c:	e08b      	b.n	8001b96 <OTM8009A_Init+0x426>
 8001a7e:	bf00      	nop
 8001a80:	0800ea8c 	.word	0x0800ea8c
 8001a84:	0800e944 	.word	0x0800e944
 8001a88:	0800ea90 	.word	0x0800ea90
 8001a8c:	0800e948 	.word	0x0800e948
 8001a90:	0800ea94 	.word	0x0800ea94
 8001a94:	0800ea98 	.word	0x0800ea98
 8001a98:	0800ea9c 	.word	0x0800ea9c
 8001a9c:	0800eaa0 	.word	0x0800eaa0
 8001aa0:	0800eaa4 	.word	0x0800eaa4
 8001aa4:	0800eaa8 	.word	0x0800eaa8
 8001aa8:	0800eaac 	.word	0x0800eaac
 8001aac:	0800eab0 	.word	0x0800eab0
 8001ab0:	0800eab4 	.word	0x0800eab4
 8001ab4:	0800eab8 	.word	0x0800eab8
 8001ab8:	0800eabc 	.word	0x0800eabc
 8001abc:	0800eac0 	.word	0x0800eac0
 8001ac0:	0800eac4 	.word	0x0800eac4
 8001ac4:	0800eac8 	.word	0x0800eac8
 8001ac8:	0800eacc 	.word	0x0800eacc
 8001acc:	0800ead0 	.word	0x0800ead0
 8001ad0:	0800ead4 	.word	0x0800ead4
 8001ad4:	0800e974 	.word	0x0800e974
 8001ad8:	0800ead8 	.word	0x0800ead8
 8001adc:	0800eadc 	.word	0x0800eadc
 8001ae0:	0800eae0 	.word	0x0800eae0
 8001ae4:	0800eae4 	.word	0x0800eae4
 8001ae8:	0800eae8 	.word	0x0800eae8
 8001aec:	0800eaec 	.word	0x0800eaec
 8001af0:	0800eaf0 	.word	0x0800eaf0
 8001af4:	0800eaf4 	.word	0x0800eaf4
 8001af8:	0800eaf8 	.word	0x0800eaf8
 8001afc:	0800e978 	.word	0x0800e978
 8001b00:	0800e97c 	.word	0x0800e97c
 8001b04:	0800eafc 	.word	0x0800eafc
 8001b08:	0800e984 	.word	0x0800e984
 8001b0c:	0800eb00 	.word	0x0800eb00
 8001b10:	0800e994 	.word	0x0800e994
 8001b14:	0800eb04 	.word	0x0800eb04
 8001b18:	0800e9a4 	.word	0x0800e9a4
 8001b1c:	0800eb08 	.word	0x0800eb08
 8001b20:	0800eb40 	.word	0x0800eb40
 8001b24:	0800e9b0 	.word	0x0800e9b0
 8001b28:	0800eb0c 	.word	0x0800eb0c
 8001b2c:	0800e9bc 	.word	0x0800e9bc
 8001b30:	0800e9cc 	.word	0x0800e9cc
 8001b34:	0800e9dc 	.word	0x0800e9dc
 8001b38:	0800e9e8 	.word	0x0800e9e8
 8001b3c:	0800e9f8 	.word	0x0800e9f8
 8001b40:	0800eb10 	.word	0x0800eb10
 8001b44:	0800ea08 	.word	0x0800ea08
 8001b48:	0800eb14 	.word	0x0800eb14
 8001b4c:	0800ea14 	.word	0x0800ea14
 8001b50:	0800ea20 	.word	0x0800ea20
 8001b54:	0800ea2c 	.word	0x0800ea2c
 8001b58:	0800ea3c 	.word	0x0800ea3c
 8001b5c:	0800ea4c 	.word	0x0800ea4c
 8001b60:	0800ea58 	.word	0x0800ea58
 8001b64:	0800ea68 	.word	0x0800ea68
 8001b68:	0800eb44 	.word	0x0800eb44
 8001b6c:	0800eb48 	.word	0x0800eb48
 8001b70:	0800eb4c 	.word	0x0800eb4c
 8001b74:	0800eb50 	.word	0x0800eb50
 8001b78:	0800eb54 	.word	0x0800eb54
 8001b7c:	0800ea78 	.word	0x0800ea78
 8001b80:	0800e94c 	.word	0x0800e94c
 8001b84:	0800e960 	.word	0x0800e960
 8001b88:	0800eb18 	.word	0x0800eb18
 8001b8c:	0800eb1c 	.word	0x0800eb1c
 8001b90:	0800eb20 	.word	0x0800eb20
  default :
    break;
 8001b94:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d10b      	bne.n	8001bb4 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <OTM8009A_Init+0x488>)
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fa9c 	bl	80010dc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <OTM8009A_Init+0x48c>)
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f7ff fa98 	bl	80010dc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001bac:	4914      	ldr	r1, [pc, #80]	; (8001c00 <OTM8009A_Init+0x490>)
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f7ff fa94 	bl	80010dc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001bb4:	4913      	ldr	r1, [pc, #76]	; (8001c04 <OTM8009A_Init+0x494>)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fa90 	bl	80010dc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001bbc:	4912      	ldr	r1, [pc, #72]	; (8001c08 <OTM8009A_Init+0x498>)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fa8c 	bl	80010dc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001bc4:	4911      	ldr	r1, [pc, #68]	; (8001c0c <OTM8009A_Init+0x49c>)
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fa88 	bl	80010dc <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001bcc:	4910      	ldr	r1, [pc, #64]	; (8001c10 <OTM8009A_Init+0x4a0>)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fa84 	bl	80010dc <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001bd4:	490f      	ldr	r1, [pc, #60]	; (8001c14 <OTM8009A_Init+0x4a4>)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fa80 	bl	80010dc <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bdc:	490e      	ldr	r1, [pc, #56]	; (8001c18 <OTM8009A_Init+0x4a8>)
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff fa7c 	bl	80010dc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001be4:	490d      	ldr	r1, [pc, #52]	; (8001c1c <OTM8009A_Init+0x4ac>)
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fa78 	bl	80010dc <DSI_IO_WriteCmd>

  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800eb24 	.word	0x0800eb24
 8001bfc:	0800ea7c 	.word	0x0800ea7c
 8001c00:	0800ea84 	.word	0x0800ea84
 8001c04:	0800eb28 	.word	0x0800eb28
 8001c08:	0800eb2c 	.word	0x0800eb2c
 8001c0c:	0800eb30 	.word	0x0800eb30
 8001c10:	0800eb34 	.word	0x0800eb34
 8001c14:	0800eb38 	.word	0x0800eb38
 8001c18:	0800ea8c 	.word	0x0800ea8c
 8001c1c:	0800eb3c 	.word	0x0800eb3c

08001c20 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8001c28:	f7fe ff2e 	bl	8000a88 <BSP_LCD_GetFont>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <__io_putchar+0x190>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80b6 	bne.w	8001da4 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8001c38:	4b5e      	ldr	r3, [pc, #376]	; (8001db4 <__io_putchar+0x194>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d110      	bne.n	8001c62 <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001c40:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <__io_putchar+0x198>)
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <__io_putchar+0x19c>)
 8001c46:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001c48:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <__io_putchar+0x1a0>)
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <__io_putchar+0x1a4>)
 8001c4e:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8001c50:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <__io_putchar+0x194>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <__io_putchar+0x1a8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <__io_putchar+0x1ac>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <__io_putchar+0x1b0>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	461c      	mov	r4, r3
 8001c68:	f7fe fe3a 	bl	80008e0 <BSP_LCD_GetXSize>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	889b      	ldrh	r3, [r3, #4]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	429c      	cmp	r4, r3
 8001c78:	d218      	bcs.n	8001cac <__io_putchar+0x8c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0a      	cmp	r3, #10
 8001c7e:	d015      	beq.n	8001cac <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <__io_putchar+0x19c>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4b52      	ldr	r3, [pc, #328]	; (8001dd0 <__io_putchar+0x1b0>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	b290      	uxth	r0, r2
 8001c8e:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <__io_putchar+0x1b0>)
 8001c90:	8010      	strh	r0, [r2, #0]
 8001c92:	461c      	mov	r4, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	b2d8      	uxtb	r0, r3
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <__io_putchar+0x1b4>)
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	440b      	add	r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4423      	add	r3, r4
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e07b      	b.n	8001da4 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <__io_putchar+0x1a4>)
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <__io_putchar+0x19c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d314      	bcc.n	8001ce2 <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <__io_putchar+0x1b8>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <__io_putchar+0x1a4>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <__io_putchar+0x1a4>)
 8001cca:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <__io_putchar+0x1a4>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b7c      	cmp	r3, #124	; 0x7c
 8001cd2:	d106      	bne.n	8001ce2 <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <__io_putchar+0x1a4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	e002      	b.n	8001ce2 <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001cdc:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <__io_putchar+0x1b8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <__io_putchar+0x1b0>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e015      	b.n	8001d16 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <__io_putchar+0x19c>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <__io_putchar+0x1b0>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	b290      	uxth	r0, r2
 8001cf8:	4a35      	ldr	r2, [pc, #212]	; (8001dd0 <__io_putchar+0x1b0>)
 8001cfa:	8010      	strh	r0, [r2, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <__io_putchar+0x1b4>)
 8001d00:	460b      	mov	r3, r1
 8001d02:	015b      	lsls	r3, r3, #5
 8001d04:	440b      	add	r3, r1
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f7fe fde3 	bl	80008e0 <BSP_LCD_GetXSize>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	889b      	ldrh	r3, [r3, #4]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3df      	bcc.n	8001cea <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <__io_putchar+0x19c>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <__io_putchar+0x1bc>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4927      	ldr	r1, [pc, #156]	; (8001dd4 <__io_putchar+0x1b4>)
 8001d36:	4603      	mov	r3, r0
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	4403      	add	r3, r0
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3380      	adds	r3, #128	; 0x80
 8001d42:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <__io_putchar+0x1b0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8001d4a:	f000 f849 	bl	8001de0 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <__io_putchar+0x19c>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <__io_putchar+0x19c>)
 8001d58:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <__io_putchar+0x19c>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2b7c      	cmp	r3, #124	; 0x7c
 8001d60:	d108      	bne.n	8001d74 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <__io_putchar+0x19c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <__io_putchar+0x1a4>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <__io_putchar+0x1b8>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b0a      	cmp	r3, #10
 8001d78:	d014      	beq.n	8001da4 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <__io_putchar+0x19c>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <__io_putchar+0x1b0>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	b290      	uxth	r0, r2
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <__io_putchar+0x1b0>)
 8001d8a:	8010      	strh	r0, [r2, #0]
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <__io_putchar+0x1b4>)
 8001d94:	460b      	mov	r3, r1
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	440b      	add	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4423      	add	r3, r4
 8001da0:	4602      	mov	r2, r0
 8001da2:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20004304 	.word	0x20004304
 8001db4:	20004303 	.word	0x20004303
 8001db8:	20004300 	.word	0x20004300
 8001dbc:	200042fc 	.word	0x200042fc
 8001dc0:	200042fe 	.word	0x200042fe
 8001dc4:	200042fa 	.word	0x200042fa
 8001dc8:	20004305 	.word	0x20004305
 8001dcc:	20004306 	.word	0x20004306
 8001dd0:	200042f8 	.word	0x200042f8
 8001dd4:	20000304 	.word	0x20000304
 8001dd8:	20004302 	.word	0x20004302
 8001ddc:	200042f4 	.word	0x200042f4

08001de0 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8001de6:	2300      	movs	r3, #0
 8001de8:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8001dea:	2300      	movs	r3, #0
 8001dec:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	807b      	strh	r3, [r7, #2]
 8001df2:	2300      	movs	r3, #0
 8001df4:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	2b16      	cmp	r3, #22
 8001dfc:	d826      	bhi.n	8001e4c <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <LCD_LOG_UpdateDisplay+0x104>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d320      	bcc.n	8001e4c <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	441a      	add	r2, r3
 8001e12:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <LCD_LOG_UpdateDisplay+0x108>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	015b      	lsls	r3, r3, #5
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3380      	adds	r3, #128	; 0x80
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fde4 	bl	80009f0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e34:	8812      	ldrh	r2, [r2, #0]
 8001e36:	441a      	add	r2, r3
 8001e38:	4613      	mov	r3, r2
 8001e3a:	015b      	lsls	r3, r3, #5
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <LCD_LOG_UpdateDisplay+0x108>)
 8001e42:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe ff69 	bl	8000d1c <BSP_LCD_DisplayStringAtLine>
 8001e4a:	e045      	b.n	8001ed8 <LCD_LOG_UpdateDisplay+0xf8>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <LCD_LOG_UpdateDisplay+0x104>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d204      	bcs.n	8001e62 <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	337c      	adds	r3, #124	; 0x7c
 8001e5e:	80bb      	strh	r3, [r7, #4]
 8001e60:	e002      	b.n	8001e68 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <LCD_LOG_UpdateDisplay+0x100>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8001e68:	88bb      	ldrh	r3, [r7, #4]
 8001e6a:	3b17      	subs	r3, #23
 8001e6c:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e02d      	b.n	8001ed0 <LCD_LOG_UpdateDisplay+0xf0>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	441a      	add	r2, r3
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <LCD_LOG_UpdateDisplay+0x10c>)
 8001e7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e80:	4413      	add	r3, r2
 8001e82:	1199      	asrs	r1, r3, #6
 8001e84:	17d3      	asrs	r3, r2, #31
 8001e86:	1ac9      	subs	r1, r1, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	015b      	lsls	r3, r3, #5
 8001e8c:	1a5b      	subs	r3, r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	1ad1      	subs	r1, r2, r3
 8001e92:	460b      	mov	r3, r1
 8001e94:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001e96:	883a      	ldrh	r2, [r7, #0]
 8001e98:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <LCD_LOG_UpdateDisplay+0x108>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3380      	adds	r3, #128	; 0x80
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fda1 	bl	80009f0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8001eb6:	883a      	ldrh	r2, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <LCD_LOG_UpdateDisplay+0x108>)
 8001ec2:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe ff29 	bl	8000d1c <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	71fb      	strb	r3, [r7, #7]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b17      	cmp	r3, #23
 8001ed4:	d9ce      	bls.n	8001e74 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200042fc 	.word	0x200042fc
 8001ee4:	200042fa 	.word	0x200042fa
 8001ee8:	20000304 	.word	0x20000304
 8001eec:	84210843 	.word	0x84210843

08001ef0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_DMA2D_Init+0x34>)
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <MX_DMA2D_Init+0x38>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_DMA2D_Init+0x34>)
 8001efc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f00:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_DMA2D_Init+0x34>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_DMA2D_Init+0x34>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_DMA2D_Init+0x34>)
 8001f10:	f002 f9ee 	bl	80042f0 <HAL_DMA2D_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8001f1a:	f001 fbbb 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20004308 	.word	0x20004308
 8001f28:	4002b000 	.word	0x4002b000

08001f2c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_DMA2D_MspInit+0x38>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10b      	bne.n	8001f56 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_DMA2D_MspInit+0x3c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_DMA2D_MspInit+0x3c>)
 8001f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_DMA2D_MspInit+0x3c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	4002b000 	.word	0x4002b000
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ae      	sub	sp, #184	; 0xb8
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001f72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001f7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00b fd91 	bl	800daae <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001f8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	226c      	movs	r2, #108	; 0x6c
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00b fd82 	bl	800daae <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001fac:	4a65      	ldr	r2, [pc, #404]	; (8002144 <MX_DSIHOST_DSI_Init+0x1d8>)
 8001fae:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001fb0:	4b63      	ldr	r3, [pc, #396]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001fb6:	4b62      	ldr	r3, [pc, #392]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001fb8:	2204      	movs	r2, #4
 8001fba:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001fbc:	4b60      	ldr	r3, [pc, #384]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8001fc2:	2314      	movs	r3, #20
 8001fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001fd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4859      	ldr	r0, [pc, #356]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001fdc:	f002 fc78 	bl	80048d0 <HAL_DSI_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8001fe6:	f001 fb55 	bl	8003694 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002024:	4619      	mov	r1, r3
 8002026:	4846      	ldr	r0, [pc, #280]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002028:	f003 f958 	bl	80052dc <HAL_DSI_ConfigHostTimeouts>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8002032:	f001 fb2f 	bl	8003694 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8002036:	231c      	movs	r3, #28
 8002038:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 800203a:	2321      	movs	r3, #33	; 0x21
 800203c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 800203e:	230f      	movs	r3, #15
 8002040:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 8002042:	2319      	movs	r3, #25
 8002044:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002052:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002056:	4619      	mov	r1, r3
 8002058:	4839      	ldr	r0, [pc, #228]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 800205a:	f003 f8d5 	bl	8005208 <HAL_DSI_ConfigPhyTimer>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8002064:	f001 fb16 	bl	8003694 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8002068:	2104      	movs	r1, #4
 800206a:	4835      	ldr	r0, [pc, #212]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 800206c:	f003 f8a4 	bl	80051b8 <HAL_DSI_ConfigFlowControl>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8002076:	f001 fb0d 	bl	8003694 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800207a:	f242 7110 	movw	r1, #10000	; 0x2710
 800207e:	4830      	ldr	r0, [pc, #192]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002080:	f003 faea 	bl	8005658 <HAL_DSI_SetLowPowerRXFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800208a:	f001 fb03 	bl	8003694 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800208e:	2100      	movs	r1, #0
 8002090:	482b      	ldr	r0, [pc, #172]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002092:	f002 fdad 	bl	8004bf0 <HAL_DSI_ConfigErrorMonitor>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 800209c:	f001 fafa 	bl	8003694 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80020a4:	2305      	movs	r3, #5
 80020a6:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 80020b4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80020b8:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80020be:	2304      	movs	r3, #4
 80020c0:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80020c2:	2302      	movs	r3, #2
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 80020ca:	2312      	movs	r3, #18
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 80020ce:	2310      	movs	r3, #16
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 80020d2:	f240 53e2 	movw	r3, #1506	; 0x5e2
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 80020d8:	2304      	movs	r3, #4
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 80020e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	4619      	mov	r1, r3
 8002116:	480a      	ldr	r0, [pc, #40]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002118:	f002 fe4e 	bl	8004db8 <HAL_DSI_ConfigVideoMode>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 8002122:	f001 fab7 	bl	8003694 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_DSIHOST_DSI_Init+0x1d4>)
 800212a:	f002 fe1d 	bl	8004d68 <HAL_DSI_SetGenericVCID>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 8002134:	f001 faae 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	37b8      	adds	r7, #184	; 0xb8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20004360 	.word	0x20004360
 8002144:	40016c00 	.word	0x40016c00

08002148 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_DSI_MspInit+0x38>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10b      	bne.n	8002172 <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_DSI_MspInit+0x3c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_DSI_MspInit+0x3c>)
 8002160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_DSI_MspInit+0x3c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40016c00 	.word	0x40016c00
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_DSI_MspDeInit+0x2c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d105      	bne.n	80021a6 <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_DSI_MspDeInit+0x30>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_DSI_MspDeInit+0x30>)
 80021a0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40016c00 	.word	0x40016c00
 80021b8:	40023800 	.word	0x40023800

080021bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <MX_FMC_Init+0x98>)
 80021d6:	4a20      	ldr	r2, [pc, #128]	; (8002258 <MX_FMC_Init+0x9c>)
 80021d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_FMC_Init+0x98>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <MX_FMC_Init+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_FMC_Init+0x98>)
 80021e8:	2204      	movs	r2, #4
 80021ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_FMC_Init+0x98>)
 80021ee:	2220      	movs	r2, #32
 80021f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_FMC_Init+0x98>)
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_FMC_Init+0x98>)
 80021fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_FMC_Init+0x98>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_FMC_Init+0x98>)
 8002208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800220c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_FMC_Init+0x98>)
 8002210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_FMC_Init+0x98>)
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800221c:	2302      	movs	r3, #2
 800221e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002220:	2307      	movs	r3, #7
 8002222:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002224:	2304      	movs	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002228:	2307      	movs	r3, #7
 800222a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800222c:	2303      	movs	r3, #3
 800222e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002230:	2302      	movs	r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002234:	2302      	movs	r3, #2
 8002236:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_FMC_Init+0x98>)
 800223e:	f005 ff7f 	bl	8008140 <HAL_SDRAM_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002248:	f001 fa24 	bl	8003694 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000437c 	.word	0x2000437c
 8002258:	a0000140 	.word	0xa0000140

0800225c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_FMC_MspInit+0x104>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d16f      	bne.n	8002358 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_FMC_MspInit+0x104>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_FMC_MspInit+0x108>)
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_FMC_MspInit+0x108>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6393      	str	r3, [r2, #56]	; 0x38
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_FMC_MspInit+0x108>)
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002296:	f64f 7383 	movw	r3, #65411	; 0xff83
 800229a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022a8:	230c      	movs	r3, #12
 80022aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	482d      	ldr	r0, [pc, #180]	; (8002368 <HAL_FMC_MspInit+0x10c>)
 80022b2:	f003 f9ff 	bl	80056b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 80022b6:	f248 1337 	movw	r3, #33079	; 0x8137
 80022ba:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c8:	230c      	movs	r3, #12
 80022ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4826      	ldr	r0, [pc, #152]	; (800236c <HAL_FMC_MspInit+0x110>)
 80022d2:	f003 f9ef 	bl	80056b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80022d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80022da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022e8:	230c      	movs	r3, #12
 80022ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	481f      	ldr	r0, [pc, #124]	; (8002370 <HAL_FMC_MspInit+0x114>)
 80022f2:	f003 f9df 	bl	80056b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80022f6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80022fa:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002308:	230c      	movs	r3, #12
 800230a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <HAL_FMC_MspInit+0x118>)
 8002312:	f003 f9cf 	bl	80056b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002316:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800231a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002328:	230c      	movs	r3, #12
 800232a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <HAL_FMC_MspInit+0x11c>)
 8002332:	f003 f9bf 	bl	80056b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8002336:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800233a:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002348:	230c      	movs	r3, #12
 800234a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	480a      	ldr	r0, [pc, #40]	; (800237c <HAL_FMC_MspInit+0x120>)
 8002352:	f003 f9af 	bl	80056b4 <HAL_GPIO_Init>
 8002356:	e000      	b.n	800235a <HAL_FMC_MspInit+0xfe>
    return;
 8002358:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200043b0 	.word	0x200043b0
 8002364:	40023800 	.word	0x40023800
 8002368:	40021000 	.word	0x40021000
 800236c:	40021800 	.word	0x40021800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40022000 	.word	0x40022000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021c00 	.word	0x40021c00

08002380 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002388:	f7ff ff68 	bl	800225c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <MX_FREERTOS_Init+0x18>)
 800239a:	2100      	movs	r1, #0
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_FREERTOS_Init+0x1c>)
 800239e:	f008 f981 	bl	800a6a4 <osThreadNew>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <MX_FREERTOS_Init+0x20>)
 80023a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	08010610 	.word	0x08010610
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	200043b4 	.word	0x200043b4

080023b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f008 fa15 	bl	800a7f0 <osDelay>
 80023c6:	e7fb      	b.n	80023c0 <StartDefaultTask+0x8>

080023c8 <fruit_launch>:
struct Fruit fruit1, fruit2, fruit3, fruit4, fruit5;

/* Functions definition ------------------------------------------------------*/

//main function that launches fruits randomly
void fruit_launch() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
	//generate new random launch sequence
	int n = (rand() % 5) + 1;
 80023ce:	f00b fa2b 	bl	800d828 <rand>
 80023d2:	4601      	mov	r1, r0
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <fruit_launch+0x64>)
 80023d6:	fb83 2301 	smull	r2, r3, r3, r1
 80023da:	105a      	asrs	r2, r3, #1
 80023dc:	17cb      	asrs	r3, r1, #31
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	1aca      	subs	r2, r1, r3
 80023e8:	1c53      	adds	r3, r2, #1
 80023ea:	607b      	str	r3, [r7, #4]
	launch_fruit_random(&fruit1);
 80023ec:	4810      	ldr	r0, [pc, #64]	; (8002430 <fruit_launch+0x68>)
 80023ee:	f000 f85b 	bl	80024a8 <launch_fruit_random>
	if (n > 1) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	dd02      	ble.n	80023fe <fruit_launch+0x36>
		//vTaskDelay(pdMS_TO_TICKS(100));
		launch_fruit_random(&fruit2);
 80023f8:	480e      	ldr	r0, [pc, #56]	; (8002434 <fruit_launch+0x6c>)
 80023fa:	f000 f855 	bl	80024a8 <launch_fruit_random>
	}
	if (n > 2) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	dd02      	ble.n	800240a <fruit_launch+0x42>
		//vTaskDelay(pdMS_TO_TICKS(100));
		launch_fruit_random(&fruit3);
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <fruit_launch+0x70>)
 8002406:	f000 f84f 	bl	80024a8 <launch_fruit_random>
	}
	if (n > 3) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	dd02      	ble.n	8002416 <fruit_launch+0x4e>
		//vTaskDelay(pdMS_TO_TICKS(100));
		launch_fruit_random(&fruit4);
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <fruit_launch+0x74>)
 8002412:	f000 f849 	bl	80024a8 <launch_fruit_random>
	}
	if (n > 4) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b04      	cmp	r3, #4
 800241a:	dd02      	ble.n	8002422 <fruit_launch+0x5a>
		//vTaskDelay(pdMS_TO_TICKS(100));
		launch_fruit_random(&fruit5);
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <fruit_launch+0x78>)
 800241e:	f000 f843 	bl	80024a8 <launch_fruit_random>
	}
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	66666667 	.word	0x66666667
 8002430:	200043b8 	.word	0x200043b8
 8002434:	200043d8 	.word	0x200043d8
 8002438:	200043f8 	.word	0x200043f8
 800243c:	20004418 	.word	0x20004418
 8002440:	20004438 	.word	0x20004438

08002444 <fruit_control>:

//main function that controls all fruit flight paths
void fruit_control() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	//update position
	if (fruit1.type != off)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <fruit_control+0x50>)
 800244a:	7f1b      	ldrb	r3, [r3, #28]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <fruit_control+0x12>
		launch_fruit_physics_update(&fruit1);
 8002450:	4810      	ldr	r0, [pc, #64]	; (8002494 <fruit_control+0x50>)
 8002452:	f000 f879 	bl	8002548 <launch_fruit_physics_update>
	if (fruit2.type != off)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <fruit_control+0x54>)
 8002458:	7f1b      	ldrb	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <fruit_control+0x20>
		launch_fruit_physics_update(&fruit2);
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <fruit_control+0x54>)
 8002460:	f000 f872 	bl	8002548 <launch_fruit_physics_update>
	if (fruit3.type != off)
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <fruit_control+0x58>)
 8002466:	7f1b      	ldrb	r3, [r3, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <fruit_control+0x2e>
		launch_fruit_physics_update(&fruit3);
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <fruit_control+0x58>)
 800246e:	f000 f86b 	bl	8002548 <launch_fruit_physics_update>
	if (fruit4.type != off)
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <fruit_control+0x5c>)
 8002474:	7f1b      	ldrb	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <fruit_control+0x3c>
		launch_fruit_physics_update(&fruit4);
 800247a:	4809      	ldr	r0, [pc, #36]	; (80024a0 <fruit_control+0x5c>)
 800247c:	f000 f864 	bl	8002548 <launch_fruit_physics_update>
	if (fruit5.type != off)
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <fruit_control+0x60>)
 8002482:	7f1b      	ldrb	r3, [r3, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <fruit_control+0x4a>
		launch_fruit_physics_update(&fruit5);
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <fruit_control+0x60>)
 800248a:	f000 f85d 	bl	8002548 <launch_fruit_physics_update>
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200043b8 	.word	0x200043b8
 8002498:	200043d8 	.word	0x200043d8
 800249c:	200043f8 	.word	0x200043f8
 80024a0:	20004418 	.word	0x20004418
 80024a4:	20004438 	.word	0x20004438

080024a8 <launch_fruit_random>:

//function to launch a fruit in a random way
void launch_fruit_random(struct Fruit *fruit) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	fruit->x = ((float) rand() / RAND_MAX) * (1200 - 400) + 400;
 80024b0:	f00b f9ba 	bl	800d828 <rand>
 80024b4:	ee07 0a90 	vmov	s15, r0
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024bc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002538 <launch_fruit_random+0x90>
 80024c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800253c <launch_fruit_random+0x94>
 80024c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002540 <launch_fruit_random+0x98>
 80024d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edc3 7a00 	vstr	s15, [r3]
	fruit->y = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
	fruit->t = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
	fruit->angle = 0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
	fruit->speed_angle = 0;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
	fruit->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 80024fa:	f00b f995 	bl	800d828 <rand>
 80024fe:	ee07 0a90 	vmov	s15, r0
 8002502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002506:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002538 <launch_fruit_random+0x90>
 800250a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800253c <launch_fruit_random+0x94>
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002540 <launch_fruit_random+0x98>
 800251a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	edc3 7a02 	vstr	s15, [r3, #8]
	fruit->speed_y = 1600.0;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <launch_fruit_random+0x9c>)
 8002528:	60da      	str	r2, [r3, #12]
	fruit->type = banana;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	771a      	strb	r2, [r3, #28]
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	4f000000 	.word	0x4f000000
 800253c:	44480000 	.word	0x44480000
 8002540:	43c80000 	.word	0x43c80000
 8002544:	44c80000 	.word	0x44c80000

08002548 <launch_fruit_physics_update>:

//function to update the flight path
void launch_fruit_physics_update(struct Fruit *fruit) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	const float acc_y = -2000; //mm/s^2 lower than earths gravity
 8002550:	4b37      	ldr	r3, [pc, #220]	; (8002630 <launch_fruit_physics_update+0xe8>)
 8002552:	60fb      	str	r3, [r7, #12]
	const float t = fruit->t + 0.01; //10ms
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	edd3 7a06 	vldr	s15, [r3, #24]
 800255a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800255e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002628 <launch_fruit_physics_update+0xe0>
 8002562:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002566:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800256a:	edc7 7a02 	vstr	s15, [r7, #8]
	//calcola spostamento in x
	fruit->x = fruit->speed_x * 0.01 + fruit->x; //MRU
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	edd3 7a02 	vldr	s15, [r3, #8]
 8002574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002578:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002628 <launch_fruit_physics_update+0xe0>
 800257c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800258a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800258e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edc3 7a00 	vstr	s15, [r3]

	//calcola spostamento in y
	fruit->y = 0.5 * acc_y * t * t + fruit->speed_y * t; //MRUA
 8002598:	edd7 7a03 	vldr	s15, [r7, #12]
 800259c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80025b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80025c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	edc3 7a01 	vstr	s15, [r3, #4]

	//update t
	fruit->t = fruit->t + 0.01;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80025e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ea:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002628 <launch_fruit_physics_update+0xe0>
 80025ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	edc3 7a06 	vstr	s15, [r3, #24]

	//control if "landed"
	if((int)fruit->y < -1){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002606:	ee17 3a90 	vmov	r3, s15
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	da02      	bge.n	8002616 <launch_fruit_physics_update+0xce>
		fruit->type = off;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	771a      	strb	r2, [r3, #28]
	}

}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	47ae147b 	.word	0x47ae147b
 800262c:	3f847ae1 	.word	0x3f847ae1
 8002630:	c4fa0000 	.word	0xc4fa0000

08002634 <update_screen_game>:

/* Private function prototypes -----------------------------------------------*/
void Draw_Fruit(struct Fruit *fruit);

/* Functions definition ------------------------------------------------------*/
void update_screen_game(){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800263c:	f7fe fa3a 	bl	8000ab4 <BSP_LCD_Clear>
	if(fruit1.type!=off){
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <update_screen_game+0x58>)
 8002642:	7f1b      	ldrb	r3, [r3, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <update_screen_game+0x1a>
		Draw_Fruit(&fruit1);
 8002648:	4810      	ldr	r0, [pc, #64]	; (800268c <update_screen_game+0x58>)
 800264a:	f000 f829 	bl	80026a0 <Draw_Fruit>
	}
	if(fruit2.type!=off){
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <update_screen_game+0x5c>)
 8002650:	7f1b      	ldrb	r3, [r3, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <update_screen_game+0x28>
		Draw_Fruit(&fruit2);
 8002656:	480e      	ldr	r0, [pc, #56]	; (8002690 <update_screen_game+0x5c>)
 8002658:	f000 f822 	bl	80026a0 <Draw_Fruit>
	}
	if(fruit3.type!=off){
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <update_screen_game+0x60>)
 800265e:	7f1b      	ldrb	r3, [r3, #28]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <update_screen_game+0x36>
		Draw_Fruit(&fruit3);
 8002664:	480b      	ldr	r0, [pc, #44]	; (8002694 <update_screen_game+0x60>)
 8002666:	f000 f81b 	bl	80026a0 <Draw_Fruit>
	}
	if(fruit4.type!=off){
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <update_screen_game+0x64>)
 800266c:	7f1b      	ldrb	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <update_screen_game+0x44>
		Draw_Fruit(&fruit4);
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <update_screen_game+0x64>)
 8002674:	f000 f814 	bl	80026a0 <Draw_Fruit>
	}
	if(fruit5.type!=off){
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <update_screen_game+0x68>)
 800267a:	7f1b      	ldrb	r3, [r3, #28]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <update_screen_game+0x52>
		Draw_Fruit(&fruit5);
 8002680:	4806      	ldr	r0, [pc, #24]	; (800269c <update_screen_game+0x68>)
 8002682:	f000 f80d 	bl	80026a0 <Draw_Fruit>
	}
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200043b8 	.word	0x200043b8
 8002690:	200043d8 	.word	0x200043d8
 8002694:	200043f8 	.word	0x200043f8
 8002698:	20004418 	.word	0x20004418
 800269c:	20004438 	.word	0x20004438

080026a0 <Draw_Fruit>:

void Draw_Fruit(struct Fruit *fruit){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	//convert game coordinates to pixel
	int x = (int) fruit->x / 2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b2:	ee17 3a90 	vmov	r3, s15
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da00      	bge.n	80026bc <Draw_Fruit+0x1c>
 80026ba:	3301      	adds	r3, #1
 80026bc:	105b      	asrs	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
	int y = (int) fruit->y / 2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ca:	ee17 3a90 	vmov	r3, s15
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da00      	bge.n	80026d4 <Draw_Fruit+0x34>
 80026d2:	3301      	adds	r3, #1
 80026d4:	105b      	asrs	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]

	BSP_LCD_SetTextColor(LCD_COLOR_RED);	//Set border color
 80026d8:	4807      	ldr	r0, [pc, #28]	; (80026f8 <Draw_Fruit+0x58>)
 80026da:	f7fe f989 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(x, y, 10);	//Draw the circle border outline
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	b291      	uxth	r1, r2
 80026e6:	220a      	movs	r2, #10
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fc57 	bl	8000f9c <BSP_LCD_FillCircle>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	ffff0000 	.word	0xffff0000

080026fc <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b090      	sub	sp, #64	; 0x40
 8002700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002712:	4bac      	ldr	r3, [pc, #688]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4aab      	ldr	r2, [pc, #684]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4ba9      	ldr	r3, [pc, #676]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800272a:	4ba6      	ldr	r3, [pc, #664]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4aa5      	ldr	r2, [pc, #660]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a9f      	ldr	r2, [pc, #636]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b9d      	ldr	r3, [pc, #628]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800275a:	4b9a      	ldr	r3, [pc, #616]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a99      	ldr	r2, [pc, #612]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b97      	ldr	r3, [pc, #604]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002772:	4b94      	ldr	r3, [pc, #592]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a93      	ldr	r2, [pc, #588]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b91      	ldr	r3, [pc, #580]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a8d      	ldr	r2, [pc, #564]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027a2:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a87      	ldr	r2, [pc, #540]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ba:	4b82      	ldr	r3, [pc, #520]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a81      	ldr	r2, [pc, #516]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027d2:	4b7c      	ldr	r3, [pc, #496]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ea:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a75      	ldr	r2, [pc, #468]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002802:	4b70      	ldr	r3, [pc, #448]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a6f      	ldr	r2, [pc, #444]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b6d      	ldr	r3, [pc, #436]	; (80029c4 <MX_GPIO_Init+0x2c8>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800281a:	2378      	movs	r3, #120	; 0x78
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800282a:	2306      	movs	r3, #6
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	4864      	ldr	r0, [pc, #400]	; (80029c8 <MX_GPIO_Init+0x2cc>)
 8002836:	f002 ff3d 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800283a:	2304      	movs	r3, #4
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800284a:	2309      	movs	r3, #9
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002852:	4619      	mov	r1, r3
 8002854:	485c      	ldr	r0, [pc, #368]	; (80029c8 <MX_GPIO_Init+0x2cc>)
 8002856:	f002 ff2d 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800285a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800286c:	230b      	movs	r3, #11
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002874:	4619      	mov	r1, r3
 8002876:	4855      	ldr	r0, [pc, #340]	; (80029cc <MX_GPIO_Init+0x2d0>)
 8002878:	f002 ff1c 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800287c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	2312      	movs	r3, #18
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800288e:	2304      	movs	r3, #4
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	4619      	mov	r1, r3
 8002898:	484d      	ldr	r0, [pc, #308]	; (80029d0 <MX_GPIO_Init+0x2d4>)
 800289a:	f002 ff0b 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800289e:	f643 4323 	movw	r3, #15395	; 0x3c23
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028b0:	230a      	movs	r3, #10
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b8:	4619      	mov	r1, r3
 80028ba:	4845      	ldr	r0, [pc, #276]	; (80029d0 <MX_GPIO_Init+0x2d4>)
 80028bc:	f002 fefa 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 80028c0:	2310      	movs	r3, #16
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80028d0:	230a      	movs	r3, #10
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	483d      	ldr	r0, [pc, #244]	; (80029d0 <MX_GPIO_Init+0x2d4>)
 80028dc:	f002 feea 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80028e0:	23c0      	movs	r3, #192	; 0xc0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028f0:	230b      	movs	r3, #11
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f8:	4619      	mov	r1, r3
 80028fa:	4836      	ldr	r0, [pc, #216]	; (80029d4 <MX_GPIO_Init+0x2d8>)
 80028fc:	f002 feda 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002912:	2308      	movs	r3, #8
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	4619      	mov	r1, r3
 800291c:	482e      	ldr	r0, [pc, #184]	; (80029d8 <MX_GPIO_Init+0x2dc>)
 800291e:	f002 fec9 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002922:	2340      	movs	r3, #64	; 0x40
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002932:	230a      	movs	r3, #10
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293a:	4619      	mov	r1, r3
 800293c:	4824      	ldr	r0, [pc, #144]	; (80029d0 <MX_GPIO_Init+0x2d4>)
 800293e:	f002 feb9 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8002942:	f247 033b 	movw	r3, #28731	; 0x703b
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002954:	4619      	mov	r1, r3
 8002956:	4821      	ldr	r0, [pc, #132]	; (80029dc <MX_GPIO_Init+0x2e0>)
 8002958:	f002 feac 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 800295c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800296e:	2303      	movs	r3, #3
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002976:	4619      	mov	r1, r3
 8002978:	4817      	ldr	r0, [pc, #92]	; (80029d8 <MX_GPIO_Init+0x2dc>)
 800297a:	f002 fe9b 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800297e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002990:	2309      	movs	r3, #9
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002998:	4619      	mov	r1, r3
 800299a:	480f      	ldr	r0, [pc, #60]	; (80029d8 <MX_GPIO_Init+0x2dc>)
 800299c:	f002 fe8a 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b2:	2305      	movs	r3, #5
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ba:	4619      	mov	r1, r3
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <MX_GPIO_Init+0x2e4>)
 80029be:	f002 fe79 	bl	80056b4 <HAL_GPIO_Init>
 80029c2:	e00f      	b.n	80029e4 <MX_GPIO_Init+0x2e8>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40021800 	.word	0x40021800
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40022400 	.word	0x40022400
 80029e0:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 80029e4:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ea:	2300      	movs	r3, #0
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f6:	4619      	mov	r1, r3
 80029f8:	48ba      	ldr	r0, [pc, #744]	; (8002ce4 <MX_GPIO_Init+0x5e8>)
 80029fa:	f002 fe5b 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 80029fe:	23f8      	movs	r3, #248	; 0xf8
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	48b5      	ldr	r0, [pc, #724]	; (8002ce8 <MX_GPIO_Init+0x5ec>)
 8002a12:	f002 fe4f 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8002a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a30:	4619      	mov	r1, r3
 8002a32:	48ae      	ldr	r0, [pc, #696]	; (8002cec <MX_GPIO_Init+0x5f0>)
 8002a34:	f002 fe3e 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8002a38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a52:	4619      	mov	r1, r3
 8002a54:	48a5      	ldr	r0, [pc, #660]	; (8002cec <MX_GPIO_Init+0x5f0>)
 8002a56:	f002 fe2d 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8002a5a:	2330      	movs	r3, #48	; 0x30
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	48a0      	ldr	r0, [pc, #640]	; (8002cf0 <MX_GPIO_Init+0x5f4>)
 8002a6e:	f002 fe21 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8002a72:	2308      	movs	r3, #8
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002a82:	2303      	movs	r3, #3
 8002a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4898      	ldr	r0, [pc, #608]	; (8002cf0 <MX_GPIO_Init+0x5f4>)
 8002a8e:	f002 fe11 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	4891      	ldr	r0, [pc, #580]	; (8002cf4 <MX_GPIO_Init+0x5f8>)
 8002ab0:	f002 fe00 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	4888      	ldr	r0, [pc, #544]	; (8002cf0 <MX_GPIO_Init+0x5f4>)
 8002ad0:	f002 fdf0 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	487c      	ldr	r0, [pc, #496]	; (8002ce4 <MX_GPIO_Init+0x5e8>)
 8002af2:	f002 fddf 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002af6:	23c0      	movs	r3, #192	; 0xc0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b06:	2308      	movs	r3, #8
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4879      	ldr	r0, [pc, #484]	; (8002cf8 <MX_GPIO_Init+0x5fc>)
 8002b12:	f002 fdcf 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002b16:	2310      	movs	r3, #16
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b26:	230a      	movs	r3, #10
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4872      	ldr	r0, [pc, #456]	; (8002cfc <MX_GPIO_Init+0x600>)
 8002b32:	f002 fdbf 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002b46:	2306      	movs	r3, #6
 8002b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4866      	ldr	r0, [pc, #408]	; (8002cec <MX_GPIO_Init+0x5f0>)
 8002b52:	f002 fdaf 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8002b56:	2348      	movs	r3, #72	; 0x48
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	4860      	ldr	r0, [pc, #384]	; (8002cec <MX_GPIO_Init+0x5f0>)
 8002b6a:	f002 fda3 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b86:	4619      	mov	r1, r3
 8002b88:	485d      	ldr	r0, [pc, #372]	; (8002d00 <MX_GPIO_Init+0x604>)
 8002b8a:	f002 fd93 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8002b8e:	2340      	movs	r3, #64	; 0x40
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4855      	ldr	r0, [pc, #340]	; (8002d00 <MX_GPIO_Init+0x604>)
 8002baa:	f002 fd83 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8002bae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	484f      	ldr	r0, [pc, #316]	; (8002d00 <MX_GPIO_Init+0x604>)
 8002bc4:	f002 fd76 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bd8:	230a      	movs	r3, #10
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be0:	4619      	mov	r1, r3
 8002be2:	4845      	ldr	r0, [pc, #276]	; (8002cf8 <MX_GPIO_Init+0x5fc>)
 8002be4:	f002 fd66 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002be8:	2332      	movs	r3, #50	; 0x32
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bf8:	230b      	movs	r3, #11
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c00:	4619      	mov	r1, r3
 8002c02:	483d      	ldr	r0, [pc, #244]	; (8002cf8 <MX_GPIO_Init+0x5fc>)
 8002c04:	f002 fd56 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4837      	ldr	r0, [pc, #220]	; (8002cf8 <MX_GPIO_Init+0x5fc>)
 8002c1c:	f002 fd4a 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8002c20:	2304      	movs	r3, #4
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c30:	2309      	movs	r3, #9
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4832      	ldr	r0, [pc, #200]	; (8002d04 <MX_GPIO_Init+0x608>)
 8002c3c:	f002 fd3a 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c52:	2309      	movs	r3, #9
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4824      	ldr	r0, [pc, #144]	; (8002cf0 <MX_GPIO_Init+0x5f4>)
 8002c5e:	f002 fd29 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c62:	2386      	movs	r3, #134	; 0x86
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c72:	230b      	movs	r3, #11
 8002c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481d      	ldr	r0, [pc, #116]	; (8002cf4 <MX_GPIO_Init+0x5f8>)
 8002c7e:	f002 fd19 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8002c82:	2301      	movs	r3, #1
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8002c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c94:	4619      	mov	r1, r3
 8002c96:	4817      	ldr	r0, [pc, #92]	; (8002cf4 <MX_GPIO_Init+0x5f8>)
 8002c98:	f002 fd0c 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8002c9c:	2350      	movs	r3, #80	; 0x50
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cac:	4619      	mov	r1, r3
 8002cae:	4811      	ldr	r0, [pc, #68]	; (8002cf4 <MX_GPIO_Init+0x5f8>)
 8002cb0:	f002 fd00 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8002cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <MX_GPIO_Init+0x5f4>)
 8002cd2:	f002 fcef 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce2:	e011      	b.n	8002d08 <MX_GPIO_Init+0x60c>
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40022800 	.word	0x40022800
 8002cec:	40021800 	.word	0x40021800
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40021c00 	.word	0x40021c00
 8002d00:	40021400 	.word	0x40021400
 8002d04:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	481c      	ldr	r0, [pc, #112]	; (8002d80 <MX_GPIO_Init+0x684>)
 8002d10:	f002 fcd0 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002d14:	2328      	movs	r3, #40	; 0x28
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d24:	230a      	movs	r3, #10
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4815      	ldr	r0, [pc, #84]	; (8002d84 <MX_GPIO_Init+0x688>)
 8002d30:	f002 fcc0 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d44:	2309      	movs	r3, #9
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	480c      	ldr	r0, [pc, #48]	; (8002d80 <MX_GPIO_Init+0x684>)
 8002d50:	f002 fcb0 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002d54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d66:	2305      	movs	r3, #5
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <MX_GPIO_Init+0x68c>)
 8002d72:	f002 fc9f 	bl	80056b4 <HAL_GPIO_Init>

}
 8002d76:	bf00      	nop
 8002d78:	3740      	adds	r7, #64	; 0x40
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021c00 	.word	0x40021c00
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400

08002d8c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <MX_I2C4_Init+0x78>)
 8002d94:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <MX_I2C4_Init+0x7c>)
 8002d9a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002d9c:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002dc6:	480e      	ldr	r0, [pc, #56]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002dc8:	f002 ff46 	bl	8005c58 <HAL_I2C_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002dd2:	f000 fc5f 	bl	8003694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4809      	ldr	r0, [pc, #36]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002dda:	f003 fcd3 	bl	8006784 <HAL_I2CEx_ConfigAnalogFilter>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002de4:	f000 fc56 	bl	8003694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002de8:	2100      	movs	r1, #0
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_I2C4_Init+0x74>)
 8002dec:	f003 fd15 	bl	800681a <HAL_I2CEx_ConfigDigitalFilter>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002df6:	f000 fc4d 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20004458 	.word	0x20004458
 8002e04:	40006000 	.word	0x40006000
 8002e08:	00c0eaff 	.word	0x00c0eaff

08002e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0ae      	sub	sp, #184	; 0xb8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2290      	movs	r2, #144	; 0x90
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00a fe3e 	bl	800daae <memset>
  if(i2cHandle->Instance==I2C4)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <HAL_I2C_MspInit+0xf8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d15e      	bne.n	8002efa <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 fd4f 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002e58:	f000 fc1c 	bl	8003694 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e92:	2312      	movs	r3, #18
 8002e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8002ea4:	230b      	movs	r3, #11
 8002ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002eaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4816      	ldr	r0, [pc, #88]	; (8002f0c <HAL_I2C_MspInit+0x100>)
 8002eb2:	f002 fbff 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8002eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebe:	2312      	movs	r3, #18
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <HAL_I2C_MspInit+0x104>)
 8002ede:	f002 fbe9 	bl	80056b4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_I2C_MspInit+0xfc>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002efa:	bf00      	nop
 8002efc:	37b8      	adds	r7, #184	; 0xb8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40006000 	.word	0x40006000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40020c00 	.word	0x40020c00

08002f14 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C4)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_I2C_MspDeInit+0x38>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10e      	bne.n	8002f44 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_I2C_MspDeInit+0x3c>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_I2C_MspDeInit+0x3c>)
 8002f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	4807      	ldr	r0, [pc, #28]	; (8002f54 <HAL_I2C_MspDeInit+0x40>)
 8002f36:	f002 fd69 	bl	8005a0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 8002f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <HAL_I2C_MspDeInit+0x44>)
 8002f40:	f002 fd64 	bl	8005a0c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40006000 	.word	0x40006000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020c00 	.word	0x40020c00

08002f5c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b09a      	sub	sp, #104	; 0x68
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f66:	2234      	movs	r2, #52	; 0x34
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00a fd9f 	bl	800daae <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002f70:	463b      	mov	r3, r7
 8002f72:	2234      	movs	r2, #52	; 0x34
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00a fd99 	bl	800daae <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f7e:	4a4f      	ldr	r2, [pc, #316]	; (80030bc <MX_LTDC_Init+0x160>)
 8002f80:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f94:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002fa0:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fa8:	220e      	movs	r2, #14
 8002faa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fae:	2205      	movs	r2, #5
 8002fb0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fb4:	f240 228e 	movw	r2, #654	; 0x28e
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fbc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fc4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fcc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fea:	4833      	ldr	r0, [pc, #204]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8002fec:	f003 fc62 	bl	80068b4 <HAL_LTDC_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002ff6:	f000 fb4d 	bl	8003694 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800300a:	2300      	movs	r3, #0
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800301c:	2305      	movs	r3, #5
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800303e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003042:	2200      	movs	r2, #0
 8003044:	4619      	mov	r1, r3
 8003046:	481c      	ldr	r0, [pc, #112]	; (80030b8 <MX_LTDC_Init+0x15c>)
 8003048:	f003 fd04 	bl	8006a54 <HAL_LTDC_ConfigLayer>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003052:	f000 fb1f 	bl	8003694 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003076:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003078:	2305      	movs	r3, #5
 800307a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_LTDC_Init+0x15c>)
 80030a2:	f003 fcd7 	bl	8006a54 <HAL_LTDC_ConfigLayer>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80030ac:	f000 faf2 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	3768      	adds	r7, #104	; 0x68
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200044ac 	.word	0x200044ac
 80030bc:	40016800 	.word	0x40016800

080030c0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a8      	sub	sp, #160	; 0xa0
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	2290      	movs	r2, #144	; 0x90
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f00a fcec 	bl	800daae <memset>
  if(ltdcHandle->Instance==LTDC)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a16      	ldr	r2, [pc, #88]	; (8003134 <HAL_LTDC_MspInit+0x74>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d124      	bne.n	800312a <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030e0:	2308      	movs	r3, #8
 80030e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80030e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80030ea:	2307      	movs	r3, #7
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80030ee:	2303      	movs	r3, #3
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80030fa:	2300      	movs	r3, #0
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4618      	mov	r0, r3
 8003104:	f004 fbf4 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 800310e:	f000 fac1 	bl	8003694 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_LTDC_MspInit+0x78>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_LTDC_MspInit+0x78>)
 8003118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_LTDC_MspInit+0x78>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800312a:	bf00      	nop
 800312c:	37a0      	adds	r7, #160	; 0xa0
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40016800 	.word	0x40016800
 8003138:	40023800 	.word	0x40023800

0800313c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003140:	f3bf 8f4f 	dsb	sy
}
 8003144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003146:	f3bf 8f6f 	isb	sy
}
 800314a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <SCB_EnableICache+0x48>)
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003154:	f3bf 8f4f 	dsb	sy
}
 8003158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800315a:	f3bf 8f6f 	isb	sy
}
 800315e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <SCB_EnableICache+0x48>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	4a07      	ldr	r2, [pc, #28]	; (8003184 <SCB_EnableICache+0x48>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800316c:	f3bf 8f4f 	dsb	sy
}
 8003170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003172:	f3bf 8f6f 	isb	sy
}
 8003176:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <SCB_EnableDCache+0x84>)
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003196:	f3bf 8f4f 	dsb	sy
}
 800319a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <SCB_EnableDCache+0x84>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0b5b      	lsrs	r3, r3, #13
 80031a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80031ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80031c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80031c6:	4911      	ldr	r1, [pc, #68]	; (800320c <SCB_EnableDCache+0x84>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	60ba      	str	r2, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ef      	bne.n	80031b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	60fa      	str	r2, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80031e2:	f3bf 8f4f 	dsb	sy
}
 80031e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <SCB_EnableDCache+0x84>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <SCB_EnableDCache+0x84>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80031f4:	f3bf 8f4f 	dsb	sy
}
 80031f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031fa:	f3bf 8f6f 	isb	sy
}
 80031fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ts_status = TS_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800321a:	f7ff ff8f 	bl	800313c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800321e:	f7ff ffb3 	bl	8003188 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003222:	f000 fe97 	bl	8003f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003226:	f000 f84d 	bl	80032c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800322a:	f7ff fa67 	bl	80026fc <MX_GPIO_Init>
  MX_FMC_Init();
 800322e:	f7fe ffc5 	bl	80021bc <MX_FMC_Init>
  MX_I2C4_Init();
 8003232:	f7ff fdab 	bl	8002d8c <MX_I2C4_Init>
  MX_TIM3_Init();
 8003236:	f000 fbd5 	bl	80039e4 <MX_TIM3_Init>
  MX_DMA2D_Init();
 800323a:	f7fe fe59 	bl	8001ef0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800323e:	f7fe fe95 	bl	8001f6c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8003242:	f7ff fe8b 	bl	8002f5c <MX_LTDC_Init>
  MX_TIM4_Init();
 8003246:	f000 fc27 	bl	8003a98 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800324a:	f000 fcf1 	bl	8003c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 800324e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003252:	f000 f8ad 	bl	80033b0 <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 8003256:	f7fd f9c1 	bl	80005dc <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800325a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800325e:	2001      	movs	r0, #1
 8003260:	f7fd fb56 	bl	8000910 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8003264:	2001      	movs	r0, #1
 8003266:	f7fd fbb3 	bl	80009d0 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800326a:	4814      	ldr	r0, [pc, #80]	; (80032bc <main+0xac>)
 800326c:	f7fd fbf2 	bl	8000a54 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_WHITE);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7fd fc1e 	bl	8000ab4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7fd fbd0 	bl	8000a20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003280:	480f      	ldr	r0, [pc, #60]	; (80032c0 <main+0xb0>)
 8003282:	f7fd fbb5 	bl	80009f0 <BSP_LCD_SetTextColor>

  // Init Touch screen
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003286:	f7fd fb2b 	bl	80008e0 <BSP_LCD_GetXSize>
 800328a:	4603      	mov	r3, r0
 800328c:	b29c      	uxth	r4, r3
 800328e:	f7fd fb33 	bl	80008f8 <BSP_LCD_GetYSize>
 8003292:	4603      	mov	r3, r0
 8003294:	b29b      	uxth	r3, r3
 8003296:	4619      	mov	r1, r3
 8003298:	4620      	mov	r0, r4
 800329a:	f7fe f8d1 	bl	8001440 <BSP_TS_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  if(ts_status != TS_OK){
	  //Error
  }

  freeRTOS_user_init();	//should by placed after kernel initialization!
 80032a2:	f000 fd71 	bl	8003d88 <freeRTOS_user_init>
  srand(1);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f00a fa90 	bl	800d7cc <srand>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032ac:	f007 f990 	bl	800a5d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80032b0:	f7ff f870 	bl	8002394 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032b4:	f007 f9c0 	bl	800a638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80032b8:	e7fe      	b.n	80032b8 <main+0xa8>
 80032ba:	bf00      	nop
 80032bc:	20000030 	.word	0x20000030
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b094      	sub	sp, #80	; 0x50
 80032c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	2234      	movs	r2, #52	; 0x34
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00a fbeb 	bl	800daae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032e8:	f003 fddc 	bl	8006ea4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <SystemClock_Config+0xe4>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <SystemClock_Config+0xe4>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6413      	str	r3, [r2, #64]	; 0x40
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <SystemClock_Config+0xe4>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <SystemClock_Config+0xe8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a28      	ldr	r2, [pc, #160]	; (80033ac <SystemClock_Config+0xe8>)
 800330a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b26      	ldr	r3, [pc, #152]	; (80033ac <SystemClock_Config+0xe8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800331c:	2303      	movs	r3, #3
 800331e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003326:	2301      	movs	r3, #1
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800332a:	2310      	movs	r3, #16
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800332e:	2302      	movs	r3, #2
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003338:	2319      	movs	r3, #25
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 800333c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003342:	2302      	movs	r3, #2
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003346:	2304      	movs	r3, #4
 8003348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 800334a:	2307      	movs	r3, #7
 800334c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fe06 	bl	8006f64 <HAL_RCC_OscConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800335e:	f000 f999 	bl	8003694 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003362:	f003 fdaf 	bl	8006ec4 <HAL_PWREx_EnableOverDrive>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800336c:	f000 f992 	bl	8003694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003370:	230f      	movs	r3, #15
 8003372:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003374:	2302      	movs	r3, #2
 8003376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800337c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003386:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	2106      	movs	r1, #6
 800338e:	4618      	mov	r0, r3
 8003390:	f004 f896 	bl	80074c0 <HAL_RCC_ClockConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800339a:	f000 f97b 	bl	8003694 <Error_Handler>
  }
}
 800339e:	bf00      	nop
 80033a0:	3750      	adds	r7, #80	; 0x50
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000

080033b0 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c4:	2210      	movs	r2, #16
 80033c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80033d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d8:	4923      	ldr	r1, [pc, #140]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033da:	4824      	ldr	r0, [pc, #144]	; (800346c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033dc:	f004 fee4 	bl	80081a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f000 fded 	bl	8003fc0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ee:	2210      	movs	r2, #16
 80033f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80033fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003402:	4919      	ldr	r1, [pc, #100]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003404:	4819      	ldr	r0, [pc, #100]	; (800346c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003406:	f004 fecf 	bl	80081a8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800340c:	2203      	movs	r2, #3
 800340e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003412:	2210      	movs	r2, #16
 8003414:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003418:	2208      	movs	r2, #8
 800341a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003426:	4910      	ldr	r1, [pc, #64]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003428:	4810      	ldr	r0, [pc, #64]	; (800346c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800342a:	f004 febd 	bl	80081a8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800342e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003432:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003436:	2204      	movs	r2, #4
 8003438:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343c:	2210      	movs	r2, #16
 800343e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003442:	2201      	movs	r2, #1
 8003444:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800344a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800344c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003450:	4905      	ldr	r1, [pc, #20]	; (8003468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003452:	4806      	ldr	r0, [pc, #24]	; (800346c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003454:	f004 fea8 	bl	80081a8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4804      	ldr	r0, [pc, #16]	; (800346c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800345c:	f004 fed9 	bl	8008212 <HAL_SDRAM_ProgramRefreshRate>
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20004554 	.word	0x20004554
 800346c:	2000437c 	.word	0x2000437c

08003470 <I2Cx_Init>:
#endif /* DISCOVERY_I2Cx_TIMING */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr);


static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f002 fedb 	bl	8006234 <HAL_I2C_GetState>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11a      	bne.n	80034ba <I2Cx_Init+0x4a>
  {

    i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <I2Cx_Init+0x54>)
 8003488:	601a      	str	r2, [r3, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <I2Cx_Init+0x58>)
 800348e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    //I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f002 fbcf 	bl	8005c58 <HAL_I2C_Init>
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40006000 	.word	0x40006000
 80034c8:	40912732 	.word	0x40912732

080034cc <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af04      	add	r7, sp, #16
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	72fb      	strb	r3, [r7, #11]
 80034de:	460b      	mov	r3, r1
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	b299      	uxth	r1, r3
 80034ee:	88f8      	ldrh	r0, [r7, #6]
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	4603      	mov	r3, r0
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f002 fd7c 	bl	8006000 <HAL_I2C_Mem_Read>
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003512:	7afb      	ldrb	r3, [r7, #11]
 8003514:	4619      	mov	r1, r3
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f832 	bl	8003580 <I2Cx_Error>
  }
  return status;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	; 0x28
 800352a:	af04      	add	r7, sp, #16
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	461a      	mov	r2, r3
 8003534:	4603      	mov	r3, r0
 8003536:	72fb      	strb	r3, [r7, #11]
 8003538:	460b      	mov	r3, r1
 800353a:	813b      	strh	r3, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	b299      	uxth	r1, r3
 8003548:	88f8      	ldrh	r0, [r7, #6]
 800354a:	893a      	ldrh	r2, [r7, #8]
 800354c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003550:	9302      	str	r3, [sp, #8]
 8003552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4603      	mov	r3, r0
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f002 fc3b 	bl	8005dd8 <HAL_I2C_Mem_Write>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	4619      	mov	r1, r3
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f805 	bl	8003580 <I2Cx_Error>
  }
  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2Cx_Error>:
  * @param  Addr: I2C Address
  * @retval None
  */

static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f002 fbf3 	bl	8005d78 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff6c 	bl	8003470 <I2Cx_Init>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hi2c4);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <TS_IO_Init+0x10>)
 80035a6:	f7ff ff63 	bl	8003470 <I2Cx_Init>
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20004458 	.word	0x20004458

080035b4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
 80035be:	460b      	mov	r3, r1
 80035c0:	71bb      	strb	r3, [r7, #6]
 80035c2:	4613      	mov	r3, r2
 80035c4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80035c6:	79bb      	ldrb	r3, [r7, #6]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	79f9      	ldrb	r1, [r7, #7]
 80035cc:	2301      	movs	r3, #1
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	1d7b      	adds	r3, r7, #5
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	4803      	ldr	r0, [pc, #12]	; (80035e4 <TS_IO_Write+0x30>)
 80035d8:	f7ff ffa5 	bl	8003526 <I2Cx_WriteMultiple>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20004458 	.word	0x20004458

080035e8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	4603      	mov	r3, r0
 80035f0:	460a      	mov	r2, r1
 80035f2:	71fb      	strb	r3, [r7, #7]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80035fc:	79bb      	ldrb	r3, [r7, #6]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	79f9      	ldrb	r1, [r7, #7]
 8003602:	2301      	movs	r3, #1
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	f107 030f 	add.w	r3, r7, #15
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	4804      	ldr	r0, [pc, #16]	; (8003620 <TS_IO_Read+0x38>)
 8003610:	f7ff ff5c 	bl	80034cc <I2Cx_ReadMultiple>

  return read_value;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20004458 	.word	0x20004458

08003624 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af02      	add	r7, sp, #8
 800362a:	603a      	str	r2, [r7, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
 8003632:	460b      	mov	r3, r1
 8003634:	71bb      	strb	r3, [r7, #6]
 8003636:	4613      	mov	r3, r2
 8003638:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800363a:	79bb      	ldrb	r3, [r7, #6]
 800363c:	b29a      	uxth	r2, r3
 800363e:	79f9      	ldrb	r1, [r7, #7]
 8003640:	88bb      	ldrh	r3, [r7, #4]
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2301      	movs	r3, #1
 800364a:	4804      	ldr	r0, [pc, #16]	; (800365c <TS_IO_ReadMultiple+0x38>)
 800364c:	f7ff ff3e 	bl	80034cc <I2Cx_ReadMultiple>
 8003650:	4603      	mov	r3, r0
 8003652:	b29b      	uxth	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20004458 	.word	0x20004458

08003660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a07      	ldr	r2, [pc, #28]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003672:	f000 fc85 	bl	8003f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PeriodElapsedCallback+0x24>
	 tim4_cb();
 8003680:	f000 fc32 	bl	8003ee8 <tim4_cb>
  }

  /* USER CODE END Callback 1 */
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40001000 	.word	0x40001000
 8003690:	40000800 	.word	0x40000800

08003694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_MspInit+0x4c>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_MspInit+0x4c>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_MspInit+0x4c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_MspInit+0x4c>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	210f      	movs	r1, #15
 80036de:	f06f 0001 	mvn.w	r0, #1
 80036e2:	f000 fd49 	bl	8004178 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08e      	sub	sp, #56	; 0x38
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003704:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <HAL_InitTick+0xe0>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4a32      	ldr	r2, [pc, #200]	; (80037d4 <HAL_InitTick+0xe0>)
 800370a:	f043 0310 	orr.w	r3, r3, #16
 800370e:	6413      	str	r3, [r2, #64]	; 0x40
 8003710:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <HAL_InitTick+0xe0>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800371c:	f107 0210 	add.w	r2, r7, #16
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f8b0 	bl	800788c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003736:	f004 f881 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 800373a:	6378      	str	r0, [r7, #52]	; 0x34
 800373c:	e004      	b.n	8003748 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800373e:	f004 f87d 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 8003742:	4603      	mov	r3, r0
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <HAL_InitTick+0xe4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	3b01      	subs	r3, #1
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_InitTick+0xe8>)
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_InitTick+0xec>)
 800375a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_InitTick+0xe8>)
 800375e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003762:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_InitTick+0xe8>)
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_InitTick+0xe8>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_InitTick+0xe8>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_InitTick+0xe8>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800377c:	4817      	ldr	r0, [pc, #92]	; (80037dc <HAL_InitTick+0xe8>)
 800377e:	f004 fd70 	bl	8008262 <HAL_TIM_Base_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11b      	bne.n	80037c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003790:	4812      	ldr	r0, [pc, #72]	; (80037dc <HAL_InitTick+0xe8>)
 8003792:	f004 fdbd 	bl	8008310 <HAL_TIM_Base_Start_IT>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800379c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d111      	bne.n	80037c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037a4:	2036      	movs	r0, #54	; 0x36
 80037a6:	f000 fd03 	bl	80041b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d808      	bhi.n	80037c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80037b0:	2200      	movs	r2, #0
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	2036      	movs	r0, #54	; 0x36
 80037b6:	f000 fcdf 	bl	8004178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_InitTick+0xf0>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e002      	b.n	80037c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3738      	adds	r7, #56	; 0x38
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	431bde83 	.word	0x431bde83
 80037dc:	20004564 	.word	0x20004564
 80037e0:	40001000 	.word	0x40001000
 80037e4:	2000003c 	.word	0x2000003c

080037e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <TIM4_IRQHandler+0x10>)
 8003822:	f004 fe44 	bl	80084ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200045fc 	.word	0x200045fc

08003830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <USART1_IRQHandler+0x10>)
 8003836:	f005 fdf1 	bl	800941c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20004648 	.word	0x20004648

08003844 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <TIM6_DAC_IRQHandler+0x10>)
 800384a:	f004 fe30 	bl	80084ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20004564 	.word	0x20004564

08003858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_kill>:

int _kill(int pid, int sig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003872:	f00a f9c1 	bl	800dbf8 <__errno>
 8003876:	4603      	mov	r3, r0
 8003878:	2216      	movs	r2, #22
 800387a:	601a      	str	r2, [r3, #0]
	return -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_exit>:

void _exit (int status)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffe7 	bl	8003868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800389a:	e7fe      	b.n	800389a <_exit+0x12>

0800389c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00a      	b.n	80038c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038ae:	f3af 8000 	nop.w
 80038b2:	4601      	mov	r1, r0
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	60ba      	str	r2, [r7, #8]
 80038ba:	b2ca      	uxtb	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	dbf0      	blt.n	80038ae <_read+0x12>
	}

return len;
 80038cc:	687b      	ldr	r3, [r7, #4]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e009      	b.n	80038fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	60ba      	str	r2, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe f995 	bl	8001c20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3301      	adds	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	dbf1      	blt.n	80038e8 <_write+0x12>
	}
	return len;
 8003904:	687b      	ldr	r3, [r7, #4]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_close>:

int _close(int file)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	return -1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003936:	605a      	str	r2, [r3, #4]
	return 0;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_isatty>:

int _isatty(int file)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <SystemInit+0x5c>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <SystemInit+0x5c>)
 8003984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <SystemInit+0x60>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <SystemInit+0x60>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <SystemInit+0x60>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <SystemInit+0x60>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	490d      	ldr	r1, [pc, #52]	; (80039d8 <SystemInit+0x60>)
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <SystemInit+0x64>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <SystemInit+0x60>)
 80039ac:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <SystemInit+0x68>)
 80039ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <SystemInit+0x60>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <SystemInit+0x60>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <SystemInit+0x60>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <SystemInit+0x5c>)
 80039c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039c8:	609a      	str	r2, [r3, #8]
#endif
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	fef6ffff 	.word	0xfef6ffff
 80039e0:	24003010 	.word	0x24003010

080039e4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039f6:	463b      	mov	r3, r7
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
 8003a04:	615a      	str	r2, [r3, #20]
 8003a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <MX_TIM3_Init+0xb0>)
 8003a0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a14:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a2e:	4818      	ldr	r0, [pc, #96]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a30:	f004 fce6 	bl	8008400 <HAL_TIM_PWM_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003a3a:	f7ff fe2b 	bl	8003694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4810      	ldr	r0, [pc, #64]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a4e:	f005 fbeb 	bl	8009228 <HAL_TIMEx_MasterConfigSynchronization>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003a58:	f7ff fe1c 	bl	8003694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a5c:	2360      	movs	r3, #96	; 0x60
 8003a5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	2208      	movs	r2, #8
 8003a70:	4619      	mov	r1, r3
 8003a72:	4807      	ldr	r0, [pc, #28]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a74:	f004 fe3a 	bl	80086ec <HAL_TIM_PWM_ConfigChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003a7e:	f7ff fe09 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a82:	4803      	ldr	r0, [pc, #12]	; (8003a90 <MX_TIM3_Init+0xac>)
 8003a84:	f000 f89c 	bl	8003bc0 <HAL_TIM_MspPostInit>

}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200045b0 	.word	0x200045b0
 8003a94:	40000400 	.word	0x40000400

08003a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <MX_TIM4_Init+0x98>)
 8003aba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003abe:	2263      	movs	r2, #99	; 0x63
 8003ac0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ace:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003adc:	4813      	ldr	r0, [pc, #76]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003ade:	f004 fbc0 	bl	8008262 <HAL_TIM_Base_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003ae8:	f7ff fdd4 	bl	8003694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	4619      	mov	r1, r3
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003afa:	f004 ff0b 	bl	8008914 <HAL_TIM_ConfigClockSource>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003b04:	f7ff fdc6 	bl	8003694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <MX_TIM4_Init+0x94>)
 8003b16:	f005 fb87 	bl	8009228 <HAL_TIMEx_MasterConfigSynchronization>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003b20:	f7ff fdb8 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b24:	bf00      	nop
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200045fc 	.word	0x200045fc
 8003b30:	40000800 	.word	0x40000800

08003b34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_TIM_PWM_MspInit+0x38>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10b      	bne.n	8003b5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <HAL_TIM_Base_MspInit+0x44>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d113      	bne.n	8003bae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_TIM_Base_MspInit+0x48>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <HAL_TIM_Base_MspInit+0x48>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_TIM_Base_MspInit+0x48>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2105      	movs	r1, #5
 8003ba2:	201e      	movs	r0, #30
 8003ba4:	f000 fae8 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ba8:	201e      	movs	r0, #30
 8003baa:	f000 fb01 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_TIM_MspPostInit+0x64>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d11c      	bne.n	8003c1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <HAL_TIM_MspPostInit+0x68>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <HAL_TIM_MspPostInit+0x68>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_TIM_MspPostInit+0x68>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8003bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c00:	2302      	movs	r3, #2
 8003c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	4619      	mov	r1, r3
 8003c16:	4805      	ldr	r0, [pc, #20]	; (8003c2c <HAL_TIM_MspPostInit+0x6c>)
 8003c18:	f001 fd4c 	bl	80056b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c1c:	bf00      	nop
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40020800 	.word	0x40020800

08003c30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <MX_USART1_UART_Init+0x5c>)
 8003c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c56:	220c      	movs	r2, #12
 8003c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c72:	4805      	ldr	r0, [pc, #20]	; (8003c88 <MX_USART1_UART_Init+0x58>)
 8003c74:	f005 fb84 	bl	8009380 <HAL_UART_Init>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c7e:	f7ff fd09 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20004648 	.word	0x20004648
 8003c8c:	40011000 	.word	0x40011000

08003c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b0ae      	sub	sp, #184	; 0xb8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	2290      	movs	r2, #144	; 0x90
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f009 fefc 	bl	800daae <memset>
  if(uartHandle->Instance==USART1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_UART_MspInit+0xec>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d159      	bne.n	8003d74 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 fe0f 	bl	80078f0 <HAL_RCCEx_PeriphCLKConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003cd8:	f7ff fcdc 	bl	8003694 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003ce2:	f043 0310 	orr.w	r3, r3, #16
 8003ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_UART_MspInit+0xf0>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d26:	2307      	movs	r3, #7
 8003d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4814      	ldr	r0, [pc, #80]	; (8003d84 <HAL_UART_MspInit+0xf4>)
 8003d34:	f001 fcbe 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d52:	2307      	movs	r3, #7
 8003d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003d58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4809      	ldr	r0, [pc, #36]	; (8003d84 <HAL_UART_MspInit+0xf4>)
 8003d60:	f001 fca8 	bl	80056b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003d64:	2200      	movs	r2, #0
 8003d66:	2105      	movs	r1, #5
 8003d68:	2025      	movs	r0, #37	; 0x25
 8003d6a:	f000 fa05 	bl	8004178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d6e:	2025      	movs	r0, #37	; 0x25
 8003d70:	f000 fa1e 	bl	80041b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d74:	bf00      	nop
 8003d76:	37b8      	adds	r7, #184	; 0xb8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40011000 	.word	0x40011000
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020000 	.word	0x40020000

08003d88 <freeRTOS_user_init>:
/**
  * @brief Create the FreeRTOS objects and tasks.
  * @return true if the tasks are created, false otherwise.
  */
void freeRTOS_user_init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af02      	add	r7, sp, #8
	bool retval = true;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	71fb      	strb	r3, [r7, #7]

	sem_fruit_control = xSemaphoreCreateBinary();
 8003d92:	2203      	movs	r2, #3
 8003d94:	2100      	movs	r1, #0
 8003d96:	2001      	movs	r0, #1
 8003d98:	f006 ff2c 	bl	800abf4 <xQueueGenericCreate>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <freeRTOS_user_init+0xa0>)
 8003da0:	6013      	str	r3, [r2, #0]
		if (sem_fruit_control == NULL)
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <freeRTOS_user_init+0xa0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <freeRTOS_user_init+0x26>
			retval = false;
 8003daa:	2300      	movs	r3, #0
 8003dac:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate( task_fruit_launch,		//Task function
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <freeRTOS_user_init+0xa4>)
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	2301      	movs	r3, #1
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dbc:	491c      	ldr	r1, [pc, #112]	; (8003e30 <freeRTOS_user_init+0xa8>)
 8003dbe:	481d      	ldr	r0, [pc, #116]	; (8003e34 <freeRTOS_user_init+0xac>)
 8003dc0:	f007 fd9d 	bl	800b8fe <xTaskCreate>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	71fb      	strb	r3, [r7, #7]
				256,							//Task stack dimension (1kB)
				NULL,							//Task parameter
				1,								//Task priority
				&task_fruit_launch_handle);			//Task handle

	retval &= xTaskCreate( task_fruit_control,		//Task function
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <freeRTOS_user_init+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	2302      	movs	r3, #2
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de2:	4916      	ldr	r1, [pc, #88]	; (8003e3c <freeRTOS_user_init+0xb4>)
 8003de4:	4816      	ldr	r0, [pc, #88]	; (8003e40 <freeRTOS_user_init+0xb8>)
 8003de6:	f007 fd8a 	bl	800b8fe <xTaskCreate>
 8003dea:	4602      	mov	r2, r0
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	71fb      	strb	r3, [r7, #7]
					256,							//Task stack dimension (1kB)
					NULL,							//Task parameter
					2,								//Task priority
					&task_fruit_control_handle);			//Task handle

	retval &= xTaskCreate( task_display_game,		//Task function
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <freeRTOS_user_init+0xbc>)
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2303      	movs	r3, #3
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e08:	490f      	ldr	r1, [pc, #60]	; (8003e48 <freeRTOS_user_init+0xc0>)
 8003e0a:	4810      	ldr	r0, [pc, #64]	; (8003e4c <freeRTOS_user_init+0xc4>)
 8003e0c:	f007 fd77 	bl	800b8fe <xTaskCreate>
 8003e10:	4602      	mov	r2, r0
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	71fb      	strb	r3, [r7, #7]
				"Display game",					//Task function comment
				256,							//Task stack dimension (1kB)
				NULL,							//Task parameter
				3,								//Task priority
				&task_display_game_handle);			//Task handle
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200046d0 	.word	0x200046d0
 8003e2c:	200046d4 	.word	0x200046d4
 8003e30:	0800e8fc 	.word	0x0800e8fc
 8003e34:	08003e51 	.word	0x08003e51
 8003e38:	200046d8 	.word	0x200046d8
 8003e3c:	0800e90c 	.word	0x0800e90c
 8003e40:	08003ea1 	.word	0x08003ea1
 8003e44:	200046dc 	.word	0x200046dc
 8003e48:	0800e91c 	.word	0x0800e91c
 8003e4c:	08003ed5 	.word	0x08003ed5

08003e50 <task_fruit_launch>:

static void task_fruit_launch( void *pvParameters ){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	while(1){
		if(fruit1.type == off && fruit2.type == off && fruit3.type == off && fruit4.type == off && fruit5.type == off)
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <task_fruit_launch+0x3c>)
 8003e5a:	7f1b      	ldrb	r3, [r3, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <task_fruit_launch+0x34>
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <task_fruit_launch+0x40>)
 8003e62:	7f1b      	ldrb	r3, [r3, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <task_fruit_launch+0x34>
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <task_fruit_launch+0x44>)
 8003e6a:	7f1b      	ldrb	r3, [r3, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <task_fruit_launch+0x34>
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <task_fruit_launch+0x48>)
 8003e72:	7f1b      	ldrb	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <task_fruit_launch+0x34>
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <task_fruit_launch+0x4c>)
 8003e7a:	7f1b      	ldrb	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <task_fruit_launch+0x34>
			fruit_launch();
 8003e80:	f7fe faa2 	bl	80023c8 <fruit_launch>
		vTaskDelay(pdMS_TO_TICKS(10));
 8003e84:	200a      	movs	r0, #10
 8003e86:	f007 fe97 	bl	800bbb8 <vTaskDelay>
		if(fruit1.type == off && fruit2.type == off && fruit3.type == off && fruit4.type == off && fruit5.type == off)
 8003e8a:	e7e5      	b.n	8003e58 <task_fruit_launch+0x8>
 8003e8c:	200043b8 	.word	0x200043b8
 8003e90:	200043d8 	.word	0x200043d8
 8003e94:	200043f8 	.word	0x200043f8
 8003e98:	20004418 	.word	0x20004418
 8003e9c:	20004438 	.word	0x20004438

08003ea0 <task_fruit_control>:
	}
}
static void task_fruit_control( void *pvParameters ){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8003ea8:	4808      	ldr	r0, [pc, #32]	; (8003ecc <task_fruit_control+0x2c>)
 8003eaa:	f004 fa31 	bl	8008310 <HAL_TIM_Base_Start_IT>
	BaseType_t retval;
	while (1) {
		//Wait for the semaphore indefinitely
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <task_fruit_control+0x30>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f007 fa24 	bl	800b304 <xQueueSemaphoreTake>
 8003ebc:	60f8      	str	r0, [r7, #12]
		if (retval == pdTRUE) {
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d1f4      	bne.n	8003eae <task_fruit_control+0xe>
			fruit_control();
 8003ec4:	f7fe fabe 	bl	8002444 <fruit_control>
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 8003ec8:	e7f1      	b.n	8003eae <task_fruit_control+0xe>
 8003eca:	bf00      	nop
 8003ecc:	200045fc 	.word	0x200045fc
 8003ed0:	200046d0 	.word	0x200046d0

08003ed4 <task_display_game>:
		}

	}
}
static void task_display_game( void *pvParameters ){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	while(1){
		update_screen_game();
 8003edc:	f7fe fbaa 	bl	8002634 <update_screen_game>
		vTaskDelay(pdMS_TO_TICKS(33));
 8003ee0:	2021      	movs	r0, #33	; 0x21
 8003ee2:	f007 fe69 	bl	800bbb8 <vTaskDelay>
		update_screen_game();
 8003ee6:	e7f9      	b.n	8003edc <task_display_game+0x8>

08003ee8 <tim4_cb>:
	}
}


//Interrupt callbacks
void tim4_cb(){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	//10ms
	xSemaphoreGiveFromISR(sem_fruit_control, NULL);
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <tim4_cb+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f007 f88a 	bl	800b00c <xQueueGiveFromISR>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200046d0 	.word	0x200046d0

08003f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f06:	e003      	b.n	8003f10 <LoopCopyDataInit>

08003f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f0e:	3104      	adds	r1, #4

08003f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f10:	480b      	ldr	r0, [pc, #44]	; (8003f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f18:	d3f6      	bcc.n	8003f08 <CopyDataInit>
  ldr  r2, =_sbss
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f1c:	e002      	b.n	8003f24 <LoopFillZerobss>

08003f1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f20:	f842 3b04 	str.w	r3, [r2], #4

08003f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f28:	d3f9      	bcc.n	8003f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f2a:	f7ff fd25 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f009 fe69 	bl	800dc04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f32:	f7ff f96d 	bl	8003210 <main>
  bx  lr    
 8003f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f38:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003f3c:	0801073c 	.word	0x0801073c
  ldr  r0, =_sdata
 8003f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f44:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003f48:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8003f4c:	20009214 	.word	0x20009214

08003f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f50:	e7fe      	b.n	8003f50 <ADC_IRQHandler>
	...

08003f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_Init+0x28>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <HAL_Init+0x28>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f64:	2003      	movs	r0, #3
 8003f66:	f000 f8fc 	bl	8004162 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f6a:	200f      	movs	r0, #15
 8003f6c:	f7ff fbc2 	bl	80036f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f70:	f7ff fb98 	bl	80036a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023c00 	.word	0x40023c00

08003f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_IncTick+0x20>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_IncTick+0x24>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_IncTick+0x24>)
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000040 	.word	0x20000040
 8003fa4:	200046e0 	.word	0x200046e0

08003fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return uwTick;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_GetTick+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200046e0 	.word	0x200046e0

08003fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fc8:	f7ff ffee 	bl	8003fa8 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d005      	beq.n	8003fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_Delay+0x44>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fe6:	bf00      	nop
 8003fe8:	f7ff ffde 	bl	8003fa8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d8f7      	bhi.n	8003fe8 <HAL_Delay+0x28>
  {
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000040 	.word	0x20000040

08004008 <__NVIC_SetPriorityGrouping>:
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60d3      	str	r3, [r2, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	05fa0000 	.word	0x05fa0000

08004050 <__NVIC_GetPriorityGrouping>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <__NVIC_EnableIRQ+0x38>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_SetPriority>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db0a      	blt.n	80040d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	490c      	ldr	r1, [pc, #48]	; (80040f4 <__NVIC_SetPriority+0x4c>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	440b      	add	r3, r1
 80040cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040d0:	e00a      	b.n	80040e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4908      	ldr	r1, [pc, #32]	; (80040f8 <__NVIC_SetPriority+0x50>)
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3b04      	subs	r3, #4
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	761a      	strb	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000e100 	.word	0xe000e100
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EncodePriority>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	bf28      	it	cs
 800411a:	2304      	movcs	r3, #4
 800411c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3304      	adds	r3, #4
 8004122:	2b06      	cmp	r3, #6
 8004124:	d902      	bls.n	800412c <NVIC_EncodePriority+0x30>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3b03      	subs	r3, #3
 800412a:	e000      	b.n	800412e <NVIC_EncodePriority+0x32>
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004144:	f04f 31ff 	mov.w	r1, #4294967295
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43d9      	mvns	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	4313      	orrs	r3, r2
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff4c 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800418a:	f7ff ff61 	bl	8004050 <__NVIC_GetPriorityGrouping>
 800418e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f7ff ffb1 	bl	80040fc <NVIC_EncodePriority>
 800419a:	4602      	mov	r2, r0
 800419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff80 	bl	80040a8 <__NVIC_SetPriority>
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff54 	bl	800406c <__NVIC_EnableIRQ>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041da:	f7ff fee5 	bl	8003fa8 <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d008      	beq.n	80041fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e052      	b.n	80042a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0216 	bic.w	r2, r2, #22
 800420c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_DMA_Abort+0x62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800424e:	e013      	b.n	8004278 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004250:	f7ff feaa 	bl	8003fa8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b05      	cmp	r3, #5
 800425c:	d90c      	bls.n	8004278 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e015      	b.n	80042a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e4      	bne.n	8004250 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	223f      	movs	r2, #63	; 0x3f
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d004      	beq.n	80042ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e00c      	b.n	80042e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2205      	movs	r2, #5
 80042ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e049      	b.n	8004396 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd fe08 	bl	8001f2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	f023 0107 	bic.w	r1, r3, #7
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_DMA2D_Init+0xb0>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68d1      	ldr	r1, [r2, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	430b      	orrs	r3, r1
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	051a      	lsls	r2, r3, #20
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	055b      	lsls	r3, r3, #21
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	ffffc000 	.word	0xffffc000

080043a4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA2D_Start+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e018      	b.n	80043f2 <HAL_DMA2D_Start+0x4e>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f994 	bl	8004708 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d056      	beq.n	80044c4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004416:	f7ff fdc7 	bl	8003fa8 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800441c:	e04b      	b.n	80044b6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0a5      	b.n	80045c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d01a      	beq.n	80044b6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7ff fd92 	bl	8003fa8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <HAL_DMA2D_PollForTransfer+0x9c>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e086      	b.n	80045c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ac      	beq.n	800441e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d061      	beq.n	80045aa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044e6:	f7ff fd5f 	bl	8003fa8 <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044ec:	e056      	b.n	800459c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02e      	beq.n	800455e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0204 	orr.w	r2, r3, #4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f043 0202 	orr.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2229      	movs	r2, #41	; 0x29
 8004548:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e032      	b.n	80045c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d01a      	beq.n	800459c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7ff fd1f 	bl	8003fa8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <HAL_DMA2D_PollForTransfer+0x182>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2203      	movs	r2, #3
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e013      	b.n	80045c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0a1      	beq.n	80044ee <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2212      	movs	r2, #18
 80045b0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_DMA2D_ConfigLayer+0x20>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e084      	b.n	80046f6 <HAL_DMA2D_ConfigLayer+0x12a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	3320      	adds	r3, #32
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004620:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800462c:	4b35      	ldr	r3, [pc, #212]	; (8004704 <HAL_DMA2D_ConfigLayer+0x138>)
 800462e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b0a      	cmp	r3, #10
 8004636:	d003      	beq.n	8004640 <HAL_DMA2D_ConfigLayer+0x74>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b09      	cmp	r3, #9
 800463e:	d107      	bne.n	8004650 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e005      	b.n	800465c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d120      	bne.n	80046a4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	43db      	mvns	r3, r3
 800466c:	ea02 0103 	and.w	r1, r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	430a      	orrs	r2, r1
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b0a      	cmp	r3, #10
 800468a:	d003      	beq.n	8004694 <HAL_DMA2D_ConfigLayer+0xc8>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b09      	cmp	r3, #9
 8004692:	d127      	bne.n	80046e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
 80046a2:	e01f      	b.n	80046e4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	ea02 0103 	and.w	r1, r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b0a      	cmp	r3, #10
 80046cc:	d003      	beq.n	80046d6 <HAL_DMA2D_ConfigLayer+0x10a>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b09      	cmp	r3, #9
 80046d4:	d106      	bne.n	80046e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	ff33000f 	.word	0xff33000f

08004708 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004708:	b480      	push	{r7}
 800470a:	b08b      	sub	sp, #44	; 0x2c
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	041a      	lsls	r2, r3, #16
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004740:	d174      	bne.n	800482c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004748:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004750:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004758:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d108      	bne.n	800477a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	431a      	orrs	r2, r3
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	e053      	b.n	8004822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d106      	bne.n	8004790 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4313      	orrs	r3, r2
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	e048      	b.n	8004822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d111      	bne.n	80047bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	0cdb      	lsrs	r3, r3, #19
 800479c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	0a9b      	lsrs	r3, r3, #10
 80047a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	02db      	lsls	r3, r3, #11
 80047b2:	4313      	orrs	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e032      	b.n	8004822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d117      	bne.n	80047f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	0fdb      	lsrs	r3, r3, #31
 80047c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	0cdb      	lsrs	r3, r3, #19
 80047ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	0adb      	lsrs	r3, r3, #11
 80047d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	431a      	orrs	r2, r3
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	03db      	lsls	r3, r3, #15
 80047ea:	4313      	orrs	r3, r2
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	e016      	b.n	8004822 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	0f1b      	lsrs	r3, r3, #28
 80047f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	0d1b      	lsrs	r3, r3, #20
 80047fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	0b1b      	lsrs	r3, r3, #12
 8004804:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	011a      	lsls	r2, r3, #4
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	431a      	orrs	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800482a:	e003      	b.n	8004834 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	60da      	str	r2, [r3, #12]
}
 8004834:	bf00      	nop
 8004836:	372c      	adds	r7, #44	; 0x2c
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	019a      	lsls	r2, r3, #6
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	431a      	orrs	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	431a      	orrs	r2, r3
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004880:	f7ff fb92 	bl	8003fa8 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004886:	e009      	b.n	800489c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004888:	f7ff fb8e 	bl	8003fa8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004896:	d901      	bls.n	800489c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e015      	b.n	80048c8 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	019a      	lsls	r2, r3, #6
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	ea42 0103 	orr.w	r1, r2, r3
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	041a      	lsls	r2, r3, #16
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e109      	b.n	8004af8 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7c5b      	ldrb	r3, [r3, #17]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd fc2a 	bl	8002148 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2203      	movs	r2, #3
 80048f8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800490e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004922:	f7ff fb41 	bl	8003fa8 <HAL_GetTick>
 8004926:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004928:	e009      	b.n	800493e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800492a:	f7ff fb3d 	bl	8003fa8 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004938:	d901      	bls.n	800493e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0dc      	b.n	8004af8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ed      	beq.n	800492a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <HAL_DSI_Init+0x230>)
 800495c:	400b      	ands	r3, r1
 800495e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004976:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800497e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80049b2:	2001      	movs	r0, #1
 80049b4:	f7ff fb04 	bl	8003fc0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b8:	f7ff faf6 	bl	8003fa8 <HAL_GetTick>
 80049bc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80049be:	e009      	b.n	80049d4 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80049c0:	f7ff faf2 	bl	8003fa8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	d901      	bls.n	80049d4 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e091      	b.n	8004af8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ed      	beq.n	80049c0 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0206 	orr.w	r2, r2, #6
 80049f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0203 	bic.w	r2, r2, #3
 8004a08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0203 	bic.w	r2, r2, #3
 8004a36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a5e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6899      	ldr	r1, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_DSI_Init+0x1b0>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	e000      	b.n	8004a82 <HAL_DSI_Init+0x1b2>
 8004a80:	2301      	movs	r3, #1
 8004a82:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <HAL_DSI_Init+0x234>)
 8004a88:	fb03 f202 	mul.w	r2, r3, r2
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	409a      	lsls	r2, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004ab8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	fffc8603 	.word	0xfffc8603
 8004b04:	003d0900 	.word	0x003d0900

08004b08 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e066      	b.n	8004be8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0206 	bic.w	r2, r2, #6
 8004b7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004bba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bca:	60bb      	str	r3, [r7, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd fada 	bl	8002188 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7c1b      	ldrb	r3, [r3, #16]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_DSI_ConfigErrorMonitor+0x16>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0aa      	b.n	8004d5c <HAL_DSI_ConfigErrorMonitor+0x16c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c40:	430b      	orrs	r3, r1
 8004c42:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004c60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0202 	orr.w	r2, r2, #2
 8004c9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 020c 	orr.w	r2, r2, #12
 8004cba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0210 	orr.w	r2, r2, #16
 8004cd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0220 	orr.w	r2, r2, #32
 8004cf6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004d50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7c1b      	ldrb	r3, [r3, #16]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_DSI_SetGenericVCID+0x16>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e016      	b.n	8004dac <HAL_DSI_SetGenericVCID+0x44>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0203 	bic.w	r2, r2, #3
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7c1b      	ldrb	r3, [r3, #16]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_DSI_ConfigVideoMode+0x16>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e1ee      	b.n	80051ac <HAL_DSI_ConfigVideoMode+0x3f4>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0203 	bic.w	r2, r2, #3
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b8b      	ldr	r3, [pc, #556]	; (8005054 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b84      	ldr	r3, [pc, #528]	; (8005058 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004e48:	400b      	ands	r3, r1
 8004e4a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b7b      	ldr	r3, [pc, #492]	; (8005058 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0203 	bic.w	r2, r2, #3
 8004e8e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0207 	bic.w	r2, r2, #7
 8004eb0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6959      	ldr	r1, [r3, #20]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 020f 	bic.w	r2, r2, #15
 8004ede:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6919      	ldr	r1, [r3, #16]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 020e 	bic.w	r2, r2, #14
 8004f02:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	005a      	lsls	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d110      	bne.n	8004f48 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f34:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6919      	ldr	r1, [r3, #16]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b42      	ldr	r3, [pc, #264]	; (800505c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004f54:	400b      	ands	r3, r1
 8004f56:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b32      	ldr	r3, [pc, #200]	; (8005060 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004f98:	400b      	ands	r3, r1
 8004f9a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004fdc:	400b      	ands	r3, r1
 8004fde:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_DSI_ConfigVideoMode+0x29c>)
 8005020:	400b      	ands	r3, r1
 8005022:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005050:	e00a      	b.n	8005068 <HAL_DSI_ConfigVideoMode+0x2b0>
 8005052:	bf00      	nop
 8005054:	ffffc000 	.word	0xffffc000
 8005058:	ffffe000 	.word	0xffffe000
 800505c:	fffff000 	.word	0xfffff000
 8005060:	ffff8000 	.word	0xffff8000
 8005064:	fffffc00 	.word	0xfffffc00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800507e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6999      	ldr	r1, [r3, #24]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	041a      	lsls	r2, r3, #16
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050a2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7c1b      	ldrb	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_DSI_ConfigFlowControl+0x16>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e016      	b.n	80051fc <HAL_DSI_ConfigFlowControl+0x44>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 021f 	bic.w	r2, r2, #31
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7c1b      	ldrb	r3, [r3, #16]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_DSI_ConfigPhyTimer+0x16>
 800521a:	2302      	movs	r3, #2
 800521c:	e058      	b.n	80052d0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4293      	cmp	r3, r2
 800522e:	bf38      	it	cc
 8005230:	4613      	movcc	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005244:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	041a      	lsls	r2, r3, #16
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005272:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80052ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	021a      	lsls	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7c1b      	ldrb	r3, [r3, #16]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_DSI_ConfigHostTimeouts+0x16>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e0b4      	b.n	800545c <HAL_DSI_ConfigHostTimeouts+0x180>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005306:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6899      	ldr	r1, [r3, #8]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b292      	uxth	r2, r2
 8005328:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	041a      	lsls	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b47      	ldr	r3, [pc, #284]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800534a:	400b      	ands	r3, r1
 800534c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800536c:	400b      	ands	r3, r1
 800536e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005390:	400b      	ands	r3, r1
 8005392:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80053ba:	400b      	ands	r3, r1
 80053bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80053e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800540e:	400b      	ands	r3, r1
 8005410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005438:	400b      	ands	r3, r1
 800543a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	ffff0000 	.word	0xffff0000

0800546c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7c1b      	ldrb	r3, [r3, #16]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_DSI_Start+0x14>
 800547c:	2302      	movs	r3, #2
 800547e:	e02b      	b.n	80054d8 <HAL_DSI_Start+0x6c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	7c1b      	ldrb	r3, [r3, #16]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_DSI_ShortWrite+0x1a>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e010      	b.n	8005520 <HAL_DSI_ShortWrite+0x3c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff f9af 	bl	8004872 <DSI_ShortWrite>
 8005514:	4603      	mov	r3, r0
 8005516:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	741a      	strb	r2, [r3, #16]

  return status;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	; 0x30
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	7c1b      	ldrb	r3, [r3, #16]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_DSI_LongWrite+0x1e>
 8005542:	2302      	movs	r3, #2
 8005544:	e084      	b.n	8005650 <HAL_DSI_LongWrite+0x128>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800554c:	f7fe fd2c 	bl	8003fa8 <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005552:	e00c      	b.n	800556e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005554:	f7fe fd28 	bl	8003fa8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005562:	d904      	bls.n	800556e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e070      	b.n	8005650 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0eb      	beq.n	8005554 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b03      	cmp	r3, #3
 8005584:	bf28      	it	cs
 8005586:	2303      	movcs	r3, #3
 8005588:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800558a:	2300      	movs	r3, #0
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	e00f      	b.n	80055b0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	4413      	add	r3, r2
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	3301      	adds	r3, #1
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	3301      	adds	r3, #1
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3eb      	bcc.n	8005590 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80055d0:	e028      	b.n	8005624 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	bf28      	it	cs
 80055d8:	2304      	movcs	r3, #4
 80055da:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	e00e      	b.n	8005604 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	3301      	adds	r3, #1
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	429a      	cmp	r2, r3
 800560a:	d3ec      	bcc.n	80055e6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1d3      	bne.n	80055d2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005632:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800563a:	b2db      	uxtb	r3, r3
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	f7ff f8fc 	bl	8004840 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3728      	adds	r7, #40	; 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	7c1b      	ldrb	r3, [r3, #16]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800566a:	2302      	movs	r3, #2
 800566c:	e01b      	b.n	80056a6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005684:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	065a      	lsls	r2, r3, #25
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	e175      	b.n	80059c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056d4:	2201      	movs	r2, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4013      	ands	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	f040 8164 	bne.w	80059ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d005      	beq.n	800570a <HAL_GPIO_Init+0x56>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d130      	bne.n	800576c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2203      	movs	r2, #3
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005740:	2201      	movs	r2, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 0201 	and.w	r2, r3, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b03      	cmp	r3, #3
 8005776:	d017      	beq.n	80057a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d123      	bne.n	80057fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	08da      	lsrs	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3208      	adds	r2, #8
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	220f      	movs	r2, #15
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	08da      	lsrs	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3208      	adds	r2, #8
 80057f6:	69b9      	ldr	r1, [r7, #24]
 80057f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0203 	and.w	r2, r3, #3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80be 	beq.w	80059ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583e:	4b66      	ldr	r3, [pc, #408]	; (80059d8 <HAL_GPIO_Init+0x324>)
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	4a65      	ldr	r2, [pc, #404]	; (80059d8 <HAL_GPIO_Init+0x324>)
 8005844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005848:	6453      	str	r3, [r2, #68]	; 0x44
 800584a:	4b63      	ldr	r3, [pc, #396]	; (80059d8 <HAL_GPIO_Init+0x324>)
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005856:	4a61      	ldr	r2, [pc, #388]	; (80059dc <HAL_GPIO_Init+0x328>)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	3302      	adds	r3, #2
 800585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005862:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	220f      	movs	r2, #15
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a58      	ldr	r2, [pc, #352]	; (80059e0 <HAL_GPIO_Init+0x32c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d037      	beq.n	80058f2 <HAL_GPIO_Init+0x23e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a57      	ldr	r2, [pc, #348]	; (80059e4 <HAL_GPIO_Init+0x330>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_GPIO_Init+0x23a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a56      	ldr	r2, [pc, #344]	; (80059e8 <HAL_GPIO_Init+0x334>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02b      	beq.n	80058ea <HAL_GPIO_Init+0x236>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a55      	ldr	r2, [pc, #340]	; (80059ec <HAL_GPIO_Init+0x338>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d025      	beq.n	80058e6 <HAL_GPIO_Init+0x232>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a54      	ldr	r2, [pc, #336]	; (80059f0 <HAL_GPIO_Init+0x33c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <HAL_GPIO_Init+0x22e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a53      	ldr	r2, [pc, #332]	; (80059f4 <HAL_GPIO_Init+0x340>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d019      	beq.n	80058de <HAL_GPIO_Init+0x22a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a52      	ldr	r2, [pc, #328]	; (80059f8 <HAL_GPIO_Init+0x344>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_GPIO_Init+0x226>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a51      	ldr	r2, [pc, #324]	; (80059fc <HAL_GPIO_Init+0x348>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00d      	beq.n	80058d6 <HAL_GPIO_Init+0x222>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a50      	ldr	r2, [pc, #320]	; (8005a00 <HAL_GPIO_Init+0x34c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <HAL_GPIO_Init+0x21e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4f      	ldr	r2, [pc, #316]	; (8005a04 <HAL_GPIO_Init+0x350>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <HAL_GPIO_Init+0x21a>
 80058ca:	2309      	movs	r3, #9
 80058cc:	e012      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058ce:	230a      	movs	r3, #10
 80058d0:	e010      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058d2:	2308      	movs	r3, #8
 80058d4:	e00e      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058d6:	2307      	movs	r3, #7
 80058d8:	e00c      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058da:	2306      	movs	r3, #6
 80058dc:	e00a      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058de:	2305      	movs	r3, #5
 80058e0:	e008      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058e2:	2304      	movs	r3, #4
 80058e4:	e006      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058e6:	2303      	movs	r3, #3
 80058e8:	e004      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e002      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <HAL_GPIO_Init+0x240>
 80058f2:	2300      	movs	r3, #0
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	f002 0203 	and.w	r2, r2, #3
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	4093      	lsls	r3, r2
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005904:	4935      	ldr	r1, [pc, #212]	; (80059dc <HAL_GPIO_Init+0x328>)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	3302      	adds	r3, #2
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005912:	4b3d      	ldr	r3, [pc, #244]	; (8005a08 <HAL_GPIO_Init+0x354>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005936:	4a34      	ldr	r2, [pc, #208]	; (8005a08 <HAL_GPIO_Init+0x354>)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <HAL_GPIO_Init+0x354>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005960:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <HAL_GPIO_Init+0x354>)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005966:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <HAL_GPIO_Init+0x354>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800598a:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_GPIO_Init+0x354>)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_GPIO_Init+0x354>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <HAL_GPIO_Init+0x354>)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	f67f ae86 	bls.w	80056d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40020000 	.word	0x40020000
 80059e4:	40020400 	.word	0x40020400
 80059e8:	40020800 	.word	0x40020800
 80059ec:	40020c00 	.word	0x40020c00
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40021400 	.word	0x40021400
 80059f8:	40021800 	.word	0x40021800
 80059fc:	40021c00 	.word	0x40021c00
 8005a00:	40022000 	.word	0x40022000
 8005a04:	40022400 	.word	0x40022400
 8005a08:	40013c00 	.word	0x40013c00

08005a0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e0d9      	b.n	8005bdc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a28:	2201      	movs	r2, #1
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f040 80c9 	bne.w	8005bd6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005a44:	4a6b      	ldr	r2, [pc, #428]	; (8005bf4 <HAL_GPIO_DeInit+0x1e8>)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	089b      	lsrs	r3, r3, #2
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a50:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	4013      	ands	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a63      	ldr	r2, [pc, #396]	; (8005bf8 <HAL_GPIO_DeInit+0x1ec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d037      	beq.n	8005ade <HAL_GPIO_DeInit+0xd2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a62      	ldr	r2, [pc, #392]	; (8005bfc <HAL_GPIO_DeInit+0x1f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d031      	beq.n	8005ada <HAL_GPIO_DeInit+0xce>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a61      	ldr	r2, [pc, #388]	; (8005c00 <HAL_GPIO_DeInit+0x1f4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02b      	beq.n	8005ad6 <HAL_GPIO_DeInit+0xca>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a60      	ldr	r2, [pc, #384]	; (8005c04 <HAL_GPIO_DeInit+0x1f8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d025      	beq.n	8005ad2 <HAL_GPIO_DeInit+0xc6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a5f      	ldr	r2, [pc, #380]	; (8005c08 <HAL_GPIO_DeInit+0x1fc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01f      	beq.n	8005ace <HAL_GPIO_DeInit+0xc2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a5e      	ldr	r2, [pc, #376]	; (8005c0c <HAL_GPIO_DeInit+0x200>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d019      	beq.n	8005aca <HAL_GPIO_DeInit+0xbe>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a5d      	ldr	r2, [pc, #372]	; (8005c10 <HAL_GPIO_DeInit+0x204>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_GPIO_DeInit+0xba>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a5c      	ldr	r2, [pc, #368]	; (8005c14 <HAL_GPIO_DeInit+0x208>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00d      	beq.n	8005ac2 <HAL_GPIO_DeInit+0xb6>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a5b      	ldr	r2, [pc, #364]	; (8005c18 <HAL_GPIO_DeInit+0x20c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <HAL_GPIO_DeInit+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a5a      	ldr	r2, [pc, #360]	; (8005c1c <HAL_GPIO_DeInit+0x210>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <HAL_GPIO_DeInit+0xae>
 8005ab6:	2309      	movs	r3, #9
 8005ab8:	e012      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005aba:	230a      	movs	r3, #10
 8005abc:	e010      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	e00e      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	e00c      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ac6:	2306      	movs	r3, #6
 8005ac8:	e00a      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005aca:	2305      	movs	r3, #5
 8005acc:	e008      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ace:	2304      	movs	r3, #4
 8005ad0:	e006      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e004      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e002      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_GPIO_DeInit+0xd4>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	f002 0203 	and.w	r2, r2, #3
 8005ae6:	0092      	lsls	r2, r2, #2
 8005ae8:	4093      	lsls	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d132      	bne.n	8005b56 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005af0:	4b4b      	ldr	r3, [pc, #300]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	4949      	ldr	r1, [pc, #292]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	4946      	ldr	r1, [pc, #280]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b0c:	4b44      	ldr	r3, [pc, #272]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	43db      	mvns	r3, r3
 8005b14:	4942      	ldr	r1, [pc, #264]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b1a:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	493f      	ldr	r1, [pc, #252]	; (8005c20 <HAL_GPIO_DeInit+0x214>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	220f      	movs	r2, #15
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005b38:	4a2e      	ldr	r2, [pc, #184]	; (8005bf4 <HAL_GPIO_DeInit+0x1e8>)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	3302      	adds	r3, #2
 8005b40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	43da      	mvns	r2, r3
 8005b48:	482a      	ldr	r0, [pc, #168]	; (8005bf4 <HAL_GPIO_DeInit+0x1e8>)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	089b      	lsrs	r3, r3, #2
 8005b4e:	400a      	ands	r2, r1
 8005b50:	3302      	adds	r3, #2
 8005b52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	2103      	movs	r1, #3
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	401a      	ands	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	08da      	lsrs	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3208      	adds	r2, #8
 8005b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	220f      	movs	r2, #15
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	08d2      	lsrs	r2, r2, #3
 8005b8c:	4019      	ands	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3208      	adds	r2, #8
 8005b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2103      	movs	r1, #3
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	2103      	movs	r1, #3
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	401a      	ands	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	f67f af22 	bls.w	8005a28 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40013800 	.word	0x40013800
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40020400 	.word	0x40020400
 8005c00:	40020800 	.word	0x40020800
 8005c04:	40020c00 	.word	0x40020c00
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40021400 	.word	0x40021400
 8005c10:	40021800 	.word	0x40021800
 8005c14:	40021c00 	.word	0x40021c00
 8005c18:	40022000 	.word	0x40022000
 8005c1c:	40022400 	.word	0x40022400
 8005c20:	40013c00 	.word	0x40013c00

08005c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
 8005c30:	4613      	mov	r3, r2
 8005c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c34:	787b      	ldrb	r3, [r7, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c40:	e003      	b.n	8005c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c42:	887b      	ldrh	r3, [r7, #2]
 8005c44:	041a      	lsls	r2, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	619a      	str	r2, [r3, #24]
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e07f      	b.n	8005d6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fd f8c4 	bl	8002e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ca8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	e006      	b.n	8005ce0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d104      	bne.n	8005cf2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <HAL_I2C_Init+0x11c>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	02008000 	.word	0x02008000

08005d78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e021      	b.n	8005dce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	; 0x24
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fd f8b6 	bl	8002f14 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	817b      	strh	r3, [r7, #10]
 8005dea:	460b      	mov	r3, r1
 8005dec:	813b      	strh	r3, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	f040 80f9 	bne.w	8005ff2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_I2C_Mem_Write+0x34>
 8005e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0ed      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_I2C_Mem_Write+0x4e>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e0e6      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e2e:	f7fe f8bb 	bl	8003fa8 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2319      	movs	r3, #25
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fad1 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0d1      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2221      	movs	r2, #33	; 0x21
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e78:	88f8      	ldrh	r0, [r7, #6]
 8005e7a:	893a      	ldrh	r2, [r7, #8]
 8005e7c:	8979      	ldrh	r1, [r7, #10]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4603      	mov	r3, r0
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f9e1 	bl	8006250 <I2C_RequestMemoryWrite>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0a9      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	d90e      	bls.n	8005ec8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	8979      	ldrh	r1, [r7, #10]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fc2d 	bl	8006720 <I2C_TransferConfig>
 8005ec6:	e00f      	b.n	8005ee8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	8979      	ldrh	r1, [r7, #10]
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fc1c 	bl	8006720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fabb 	bl	8006468 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e07b      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d034      	beq.n	8005fa0 <HAL_I2C_Mem_Write+0x1c8>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d130      	bne.n	8005fa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	2200      	movs	r2, #0
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fa4d 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e04d      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2bff      	cmp	r3, #255	; 0xff
 8005f60:	d90e      	bls.n	8005f80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	22ff      	movs	r2, #255	; 0xff
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	8979      	ldrh	r1, [r7, #10]
 8005f70:	2300      	movs	r3, #0
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fbd1 	bl	8006720 <I2C_TransferConfig>
 8005f7e:	e00f      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	8979      	ldrh	r1, [r7, #10]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fbc0 	bl	8006720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d19e      	bne.n	8005ee8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fa9a 	bl	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e01a      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_I2C_Mem_Write+0x224>)
 8005fd2:	400b      	ands	r3, r1
 8005fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	fe00e800 	.word	0xfe00e800

08006000 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4603      	mov	r3, r0
 8006010:	817b      	strh	r3, [r7, #10]
 8006012:	460b      	mov	r3, r1
 8006014:	813b      	strh	r3, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b20      	cmp	r3, #32
 8006024:	f040 80fd 	bne.w	8006222 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_I2C_Mem_Read+0x34>
 800602e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0f1      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_I2C_Mem_Read+0x4e>
 800604a:	2302      	movs	r3, #2
 800604c:	e0ea      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006056:	f7fd ffa7 	bl	8003fa8 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2319      	movs	r3, #25
 8006062:	2201      	movs	r2, #1
 8006064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f9bd 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0d5      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2222      	movs	r2, #34	; 0x22
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060a0:	88f8      	ldrh	r0, [r7, #6]
 80060a2:	893a      	ldrh	r2, [r7, #8]
 80060a4:	8979      	ldrh	r1, [r7, #10]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4603      	mov	r3, r0
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f921 	bl	80062f8 <I2C_RequestMemoryRead>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0ad      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d90e      	bls.n	80060f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	8979      	ldrh	r1, [r7, #10]
 80060e0:	4b52      	ldr	r3, [pc, #328]	; (800622c <HAL_I2C_Mem_Read+0x22c>)
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fb19 	bl	8006720 <I2C_TransferConfig>
 80060ee:	e00f      	b.n	8006110 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	8979      	ldrh	r1, [r7, #10]
 8006102:	4b4a      	ldr	r3, [pc, #296]	; (800622c <HAL_I2C_Mem_Read+0x22c>)
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fb08 	bl	8006720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2200      	movs	r2, #0
 8006118:	2104      	movs	r1, #4
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f964 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e07c      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d034      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x1d0>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d130      	bne.n	80061d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2200      	movs	r2, #0
 8006176:	2180      	movs	r1, #128	; 0x80
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f935 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e04d      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d90e      	bls.n	80061b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	22ff      	movs	r2, #255	; 0xff
 8006196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	b2da      	uxtb	r2, r3
 800619e:	8979      	ldrh	r1, [r7, #10]
 80061a0:	2300      	movs	r3, #0
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fab9 	bl	8006720 <I2C_TransferConfig>
 80061ae:	e00f      	b.n	80061d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	8979      	ldrh	r1, [r7, #10]
 80061c2:	2300      	movs	r3, #0
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 faa8 	bl	8006720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d19a      	bne.n	8006110 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f982 	bl	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e01a      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2220      	movs	r2, #32
 80061f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <HAL_I2C_Mem_Read+0x230>)
 8006202:	400b      	ands	r3, r1
 8006204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	80002400 	.word	0x80002400
 8006230:	fe00e800 	.word	0xfe00e800

08006234 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006242:	b2db      	uxtb	r3, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	4608      	mov	r0, r1
 800625a:	4611      	mov	r1, r2
 800625c:	461a      	mov	r2, r3
 800625e:	4603      	mov	r3, r0
 8006260:	817b      	strh	r3, [r7, #10]
 8006262:	460b      	mov	r3, r1
 8006264:	813b      	strh	r3, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <I2C_RequestMemoryWrite+0xa4>)
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fa51 	bl	8006720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	69b9      	ldr	r1, [r7, #24]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f8f0 	bl	8006468 <I2C_WaitOnTXISFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e02c      	b.n	80062ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d105      	bne.n	80062a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006298:	893b      	ldrh	r3, [r7, #8]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
 80062a2:	e015      	b.n	80062d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062a4:	893b      	ldrh	r3, [r7, #8]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8d6 	bl	8006468 <I2C_WaitOnTXISFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e012      	b.n	80062ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c6:	893b      	ldrh	r3, [r7, #8]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2200      	movs	r2, #0
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f884 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	80002000 	.word	0x80002000

080062f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	461a      	mov	r2, r3
 8006306:	4603      	mov	r3, r0
 8006308:	817b      	strh	r3, [r7, #10]
 800630a:	460b      	mov	r3, r1
 800630c:	813b      	strh	r3, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	8979      	ldrh	r1, [r7, #10]
 8006318:	4b20      	ldr	r3, [pc, #128]	; (800639c <I2C_RequestMemoryRead+0xa4>)
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2300      	movs	r3, #0
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f9fe 	bl	8006720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f89d 	bl	8006468 <I2C_WaitOnTXISFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e02c      	b.n	8006392 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d105      	bne.n	800634a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800633e:	893b      	ldrh	r3, [r7, #8]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
 8006348:	e015      	b.n	8006376 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800634a:	893b      	ldrh	r3, [r7, #8]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	b29b      	uxth	r3, r3
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f883 	bl	8006468 <I2C_WaitOnTXISFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e012      	b.n	8006392 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800636c:	893b      	ldrh	r3, [r7, #8]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2200      	movs	r2, #0
 800637e:	2140      	movs	r1, #64	; 0x40
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f831 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	80002000 	.word	0x80002000

080063a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d103      	bne.n	80063be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d007      	beq.n	80063dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	619a      	str	r2, [r3, #24]
  }
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f8:	e022      	b.n	8006440 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d01e      	beq.n	8006440 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006402:	f7fd fdd1 	bl	8003fa8 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d113      	bne.n	8006440 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e00f      	b.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4013      	ands	r3, r2
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	429a      	cmp	r2, r3
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	429a      	cmp	r2, r3
 800645c:	d0cd      	beq.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006474:	e02c      	b.n	80064d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f870 	bl	8006560 <I2C_IsErrorOccurred>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e02a      	b.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d01e      	beq.n	80064d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006492:	f7fd fd89 	bl	8003fa8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d113      	bne.n	80064d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e007      	b.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d1cb      	bne.n	8006476 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064f4:	e028      	b.n	8006548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f830 	bl	8006560 <I2C_IsErrorOccurred>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e026      	b.n	8006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650a:	f7fd fd4d 	bl	8003fa8 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d113      	bne.n	8006548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e007      	b.n	8006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d1cf      	bne.n	80064f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d068      	beq.n	800665e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2210      	movs	r2, #16
 8006592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006594:	e049      	b.n	800662a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d045      	beq.n	800662a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fd fd03 	bl	8003fa8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <I2C_IsErrorOccurred+0x54>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d13a      	bne.n	800662a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d6:	d121      	bne.n	800661c <I2C_IsErrorOccurred+0xbc>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065de:	d01d      	beq.n	800661c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d01a      	beq.n	800661c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065f6:	f7fd fcd7 	bl	8003fa8 <HAL_GetTick>
 80065fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fc:	e00e      	b.n	800661c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065fe:	f7fd fcd3 	bl	8003fa8 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b19      	cmp	r3, #25
 800660a:	d907      	bls.n	800661c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800661a:	e006      	b.n	800662a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b20      	cmp	r3, #32
 8006628:	d1e9      	bne.n	80065fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b20      	cmp	r3, #32
 8006636:	d003      	beq.n	8006640 <I2C_IsErrorOccurred+0xe0>
 8006638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0aa      	beq.n	8006596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2220      	movs	r2, #32
 800664e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f043 0308 	orr.w	r3, r3, #8
 8006698:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	f043 0302 	orr.w	r3, r3, #2
 80066ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01c      	beq.n	800670e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fe63 	bl	80063a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b0d      	ldr	r3, [pc, #52]	; (800671c <I2C_IsErrorOccurred+0x1bc>)
 80066e6:	400b      	ands	r3, r1
 80066e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800670e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006712:	4618      	mov	r0, r3
 8006714:	3728      	adds	r7, #40	; 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	fe00e800 	.word	0xfe00e800

08006720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	817b      	strh	r3, [r7, #10]
 800672e:	4613      	mov	r3, r2
 8006730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006732:	897b      	ldrh	r3, [r7, #10]
 8006734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006738:	7a7b      	ldrb	r3, [r7, #9]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	4313      	orrs	r3, r2
 800674a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	0d5b      	lsrs	r3, r3, #21
 800675a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <I2C_TransferConfig+0x60>)
 8006760:	430b      	orrs	r3, r1
 8006762:	43db      	mvns	r3, r3
 8006764:	ea02 0103 	and.w	r1, r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	03ff63ff 	.word	0x03ff63ff

08006784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	d138      	bne.n	800680c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e032      	b.n	800680e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	; 0x24
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6819      	ldr	r1, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	e000      	b.n	800680e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800680c:	2302      	movs	r3, #2
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b20      	cmp	r3, #32
 800682e:	d139      	bne.n	80068a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800683a:	2302      	movs	r3, #2
 800683c:	e033      	b.n	80068a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2224      	movs	r2, #36	; 0x24
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0201 	bic.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800686c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e000      	b.n	80068a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068a4:	2302      	movs	r3, #2
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0bf      	b.n	8006a46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc fbf0 	bl	80030c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80068f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800690c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006928:	400b      	ands	r3, r1
 800692a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68d9      	ldr	r1, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006956:	400b      	ands	r3, r1
 8006958:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68d9      	ldr	r1, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6919      	ldr	r1, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006984:	400b      	ands	r3, r1
 8006986:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6919      	ldr	r1, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6959      	ldr	r1, [r3, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b27      	ldr	r3, [pc, #156]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 80069b2:	400b      	ands	r3, r1
 80069b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0206 	orr.w	r2, r2, #6
 8006a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	f000f800 	.word	0xf000f800

08006a54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a54:	b5b0      	push	{r4, r5, r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_LTDC_ConfigLayer+0x1a>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e02c      	b.n	8006ac8 <HAL_LTDC_ConfigLayer+0x74>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2134      	movs	r1, #52	; 0x34
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f811 	bl	8006ad0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bdb0      	pop	{r4, r5, r7, pc}

08006ad0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aec:	4413      	add	r3, r2
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	4413      	add	r3, r2
 8006afe:	3384      	adds	r3, #132	; 0x84
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	4611      	mov	r1, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	01d2      	lsls	r2, r2, #7
 8006b0c:	440a      	add	r2, r1
 8006b0e:	3284      	adds	r2, #132	; 0x84
 8006b10:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b14:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b26:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b28:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	440b      	add	r3, r1
 8006b36:	3384      	adds	r3, #132	; 0x84
 8006b38:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b3e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b4e:	4413      	add	r3, r2
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	01db      	lsls	r3, r3, #7
 8006b5e:	4413      	add	r3, r2
 8006b60:	3384      	adds	r3, #132	; 0x84
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	4611      	mov	r1, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	01d2      	lsls	r2, r2, #7
 8006b6e:	440a      	add	r2, r1
 8006b70:	3284      	adds	r2, #132	; 0x84
 8006b72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b76:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b86:	4413      	add	r3, r2
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	440b      	add	r3, r1
 8006b96:	3384      	adds	r3, #132	; 0x84
 8006b98:	4619      	mov	r1, r3
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	01db      	lsls	r3, r3, #7
 8006baa:	4413      	add	r3, r2
 8006bac:	3384      	adds	r3, #132	; 0x84
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	01d2      	lsls	r2, r2, #7
 8006bba:	440a      	add	r2, r1
 8006bbc:	3284      	adds	r2, #132	; 0x84
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	01db      	lsls	r3, r3, #7
 8006bce:	4413      	add	r3, r2
 8006bd0:	3384      	adds	r3, #132	; 0x84
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	01db      	lsls	r3, r3, #7
 8006c00:	4413      	add	r3, r2
 8006c02:	3384      	adds	r3, #132	; 0x84
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	01db      	lsls	r3, r3, #7
 8006c10:	4413      	add	r3, r2
 8006c12:	3384      	adds	r3, #132	; 0x84
 8006c14:	461a      	mov	r2, r3
 8006c16:	2300      	movs	r3, #0
 8006c18:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c20:	461a      	mov	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	01db      	lsls	r3, r3, #7
 8006c34:	440b      	add	r3, r1
 8006c36:	3384      	adds	r3, #132	; 0x84
 8006c38:	4619      	mov	r1, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	01db      	lsls	r3, r3, #7
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3384      	adds	r3, #132	; 0x84
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	4611      	mov	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	01d2      	lsls	r2, r2, #7
 8006c5a:	440a      	add	r2, r1
 8006c5c:	3284      	adds	r2, #132	; 0x84
 8006c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c62:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	01db      	lsls	r3, r3, #7
 8006c6e:	4413      	add	r3, r2
 8006c70:	3384      	adds	r3, #132	; 0x84
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	01db      	lsls	r3, r3, #7
 8006c84:	4413      	add	r3, r2
 8006c86:	3384      	adds	r3, #132	; 0x84
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	440b      	add	r3, r1
 8006c96:	3384      	adds	r3, #132	; 0x84
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <LTDC_SetConfig+0x32c>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6809      	ldr	r1, [r1, #0]
 8006cac:	4608      	mov	r0, r1
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	01c9      	lsls	r1, r1, #7
 8006cb2:	4401      	add	r1, r0
 8006cb4:	3184      	adds	r1, #132	; 0x84
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	01db      	lsls	r3, r3, #7
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3384      	adds	r3, #132	; 0x84
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	01db      	lsls	r3, r3, #7
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3384      	adds	r3, #132	; 0x84
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	01db      	lsls	r3, r3, #7
 8006ce8:	4413      	add	r3, r2
 8006cea:	3384      	adds	r3, #132	; 0x84
 8006cec:	461a      	mov	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	e01b      	b.n	8006d3a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d102      	bne.n	8006d10 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e014      	b.n	8006d3a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d00b      	beq.n	8006d30 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d007      	beq.n	8006d30 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d003      	beq.n	8006d30 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d2c:	2b07      	cmp	r3, #7
 8006d2e:	d102      	bne.n	8006d36 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006d30:	2302      	movs	r3, #2
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e001      	b.n	8006d3a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006d36:	2301      	movs	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	01db      	lsls	r3, r3, #7
 8006d44:	4413      	add	r3, r2
 8006d46:	3384      	adds	r3, #132	; 0x84
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	4611      	mov	r1, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	01d2      	lsls	r2, r2, #7
 8006d54:	440a      	add	r2, r1
 8006d56:	3284      	adds	r2, #132	; 0x84
 8006d58:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6859      	ldr	r1, [r3, #4]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	1acb      	subs	r3, r1, r3
 8006d74:	69f9      	ldr	r1, [r7, #28]
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	6809      	ldr	r1, [r1, #0]
 8006d80:	4608      	mov	r0, r1
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	01c9      	lsls	r1, r1, #7
 8006d86:	4401      	add	r1, r0
 8006d88:	3184      	adds	r1, #132	; 0x84
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	01db      	lsls	r3, r3, #7
 8006d98:	4413      	add	r3, r2
 8006d9a:	3384      	adds	r3, #132	; 0x84
 8006d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	440b      	add	r3, r1
 8006daa:	3384      	adds	r3, #132	; 0x84
 8006dac:	4619      	mov	r1, r3
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <LTDC_SetConfig+0x330>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	01db      	lsls	r3, r3, #7
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3384      	adds	r3, #132	; 0x84
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	01db      	lsls	r3, r3, #7
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3384      	adds	r3, #132	; 0x84
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	4611      	mov	r1, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	01d2      	lsls	r2, r2, #7
 8006de4:	440a      	add	r2, r1
 8006de6:	3284      	adds	r2, #132	; 0x84
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3724      	adds	r7, #36	; 0x24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	fffff8f8 	.word	0xfffff8f8
 8006e00:	fffff800 	.word	0xfffff800

08006e04 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006e16:	2200      	movs	r2, #0
 8006e18:	e001      	b.n	8006e1e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006e1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e2e:	e000      	b.n	8006e32 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006e30:	2200      	movs	r2, #0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e42:	e000      	b.n	8006e46 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006e44:	2200      	movs	r2, #0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	1e5a      	subs	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e72:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8006e74:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e88:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	4413      	add	r3, r2
 8006e90:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40007000 	.word	0x40007000

08006ec4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ef2:	f7fd f859 	bl	8003fa8 <HAL_GetTick>
 8006ef6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ef8:	e009      	b.n	8006f0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006efa:	f7fd f855 	bl	8003fa8 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f08:	d901      	bls.n	8006f0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e022      	b.n	8006f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1a:	d1ee      	bne.n	8006efa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f28:	f7fd f83e 	bl	8003fa8 <HAL_GetTick>
 8006f2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f2e:	e009      	b.n	8006f44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f30:	f7fd f83a 	bl	8003fa8 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3e:	d901      	bls.n	8006f44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e007      	b.n	8006f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f50:	d1ee      	bne.n	8006f30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40007000 	.word	0x40007000

08006f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e29b      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8087 	beq.w	8007096 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f88:	4b96      	ldr	r3, [pc, #600]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 030c 	and.w	r3, r3, #12
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d00c      	beq.n	8006fae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f94:	4b93      	ldr	r3, [pc, #588]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 030c 	and.w	r3, r3, #12
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d112      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x62>
 8006fa0:	4b90      	ldr	r3, [pc, #576]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fac:	d10b      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fae:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d06c      	beq.n	8007094 <HAL_RCC_OscConfig+0x130>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d168      	bne.n	8007094 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e275      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fce:	d106      	bne.n	8006fde <HAL_RCC_OscConfig+0x7a>
 8006fd0:	4b84      	ldr	r3, [pc, #528]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a83      	ldr	r2, [pc, #524]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e02e      	b.n	800703c <HAL_RCC_OscConfig+0xd8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0x9c>
 8006fe6:	4b7f      	ldr	r3, [pc, #508]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a7e      	ldr	r2, [pc, #504]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b7c      	ldr	r3, [pc, #496]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a7b      	ldr	r2, [pc, #492]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8006ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e01d      	b.n	800703c <HAL_RCC_OscConfig+0xd8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007008:	d10c      	bne.n	8007024 <HAL_RCC_OscConfig+0xc0>
 800700a:	4b76      	ldr	r3, [pc, #472]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a75      	ldr	r2, [pc, #468]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b73      	ldr	r3, [pc, #460]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a72      	ldr	r2, [pc, #456]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e00b      	b.n	800703c <HAL_RCC_OscConfig+0xd8>
 8007024:	4b6f      	ldr	r3, [pc, #444]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a6e      	ldr	r2, [pc, #440]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800702a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4b6c      	ldr	r3, [pc, #432]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a6b      	ldr	r2, [pc, #428]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800703a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d013      	beq.n	800706c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fc ffb0 	bl	8003fa8 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800704c:	f7fc ffac 	bl	8003fa8 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b64      	cmp	r3, #100	; 0x64
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e229      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705e:	4b61      	ldr	r3, [pc, #388]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0xe8>
 800706a:	e014      	b.n	8007096 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fc ff9c 	bl	8003fa8 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007074:	f7fc ff98 	bl	8003fa8 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b64      	cmp	r3, #100	; 0x64
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e215      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007086:	4b57      	ldr	r3, [pc, #348]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x110>
 8007092:	e000      	b.n	8007096 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d069      	beq.n	8007176 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070a2:	4b50      	ldr	r3, [pc, #320]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 030c 	and.w	r3, r3, #12
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ae:	4b4d      	ldr	r3, [pc, #308]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 030c 	and.w	r3, r3, #12
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d11c      	bne.n	80070f4 <HAL_RCC_OscConfig+0x190>
 80070ba:	4b4a      	ldr	r3, [pc, #296]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d116      	bne.n	80070f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c6:	4b47      	ldr	r3, [pc, #284]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_RCC_OscConfig+0x17a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d001      	beq.n	80070de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e1e9      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070de:	4b41      	ldr	r3, [pc, #260]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	493d      	ldr	r1, [pc, #244]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070f2:	e040      	b.n	8007176 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d023      	beq.n	8007144 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070fc:	4b39      	ldr	r3, [pc, #228]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007102:	f043 0301 	orr.w	r3, r3, #1
 8007106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fc ff4e 	bl	8003fa8 <HAL_GetTick>
 800710c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007110:	f7fc ff4a 	bl	8003fa8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e1c7      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007122:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712e:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4929      	ldr	r1, [pc, #164]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800713e:	4313      	orrs	r3, r2
 8007140:	600b      	str	r3, [r1, #0]
 8007142:	e018      	b.n	8007176 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007150:	f7fc ff2a 	bl	8003fa8 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007158:	f7fc ff26 	bl	8003fa8 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1a3      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800716a:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f0      	bne.n	8007158 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d038      	beq.n	80071f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d019      	beq.n	80071be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fc ff07 	bl	8003fa8 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719e:	f7fc ff03 	bl	8003fa8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e180      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80071b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCC_OscConfig+0x23a>
 80071bc:	e01a      	b.n	80071f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80071c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c2:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <HAL_RCC_OscConfig+0x280>)
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7fc feed 	bl	8003fa8 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d0:	e00a      	b.n	80071e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d2:	f7fc fee9 	bl	8003fa8 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d903      	bls.n	80071e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e166      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
 80071e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e8:	4b92      	ldr	r3, [pc, #584]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80071ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1ee      	bne.n	80071d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a4 	beq.w	800734a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007202:	4b8c      	ldr	r3, [pc, #560]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10d      	bne.n	800722a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800720e:	4b89      	ldr	r3, [pc, #548]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	4a88      	ldr	r2, [pc, #544]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6413      	str	r3, [r2, #64]	; 0x40
 800721a:	4b86      	ldr	r3, [pc, #536]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800722a:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_RCC_OscConfig+0x4d4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007232:	2b00      	cmp	r3, #0
 8007234:	d118      	bne.n	8007268 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007236:	4b80      	ldr	r3, [pc, #512]	; (8007438 <HAL_RCC_OscConfig+0x4d4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7f      	ldr	r2, [pc, #508]	; (8007438 <HAL_RCC_OscConfig+0x4d4>)
 800723c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007242:	f7fc feb1 	bl	8003fa8 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724a:	f7fc fead 	bl	8003fa8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b64      	cmp	r3, #100	; 0x64
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e12a      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800725c:	4b76      	ldr	r3, [pc, #472]	; (8007438 <HAL_RCC_OscConfig+0x4d4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d106      	bne.n	800727e <HAL_RCC_OscConfig+0x31a>
 8007270:	4b70      	ldr	r3, [pc, #448]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007274:	4a6f      	ldr	r2, [pc, #444]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	6713      	str	r3, [r2, #112]	; 0x70
 800727c:	e02d      	b.n	80072da <HAL_RCC_OscConfig+0x376>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10c      	bne.n	80072a0 <HAL_RCC_OscConfig+0x33c>
 8007286:	4b6b      	ldr	r3, [pc, #428]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	4a6a      	ldr	r2, [pc, #424]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	6713      	str	r3, [r2, #112]	; 0x70
 8007292:	4b68      	ldr	r3, [pc, #416]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	4a67      	ldr	r2, [pc, #412]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007298:	f023 0304 	bic.w	r3, r3, #4
 800729c:	6713      	str	r3, [r2, #112]	; 0x70
 800729e:	e01c      	b.n	80072da <HAL_RCC_OscConfig+0x376>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d10c      	bne.n	80072c2 <HAL_RCC_OscConfig+0x35e>
 80072a8:	4b62      	ldr	r3, [pc, #392]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	4a61      	ldr	r2, [pc, #388]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072ae:	f043 0304 	orr.w	r3, r3, #4
 80072b2:	6713      	str	r3, [r2, #112]	; 0x70
 80072b4:	4b5f      	ldr	r3, [pc, #380]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	4a5e      	ldr	r2, [pc, #376]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	6713      	str	r3, [r2, #112]	; 0x70
 80072c0:	e00b      	b.n	80072da <HAL_RCC_OscConfig+0x376>
 80072c2:	4b5c      	ldr	r3, [pc, #368]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	4a5b      	ldr	r2, [pc, #364]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	6713      	str	r3, [r2, #112]	; 0x70
 80072ce:	4b59      	ldr	r3, [pc, #356]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	4a58      	ldr	r2, [pc, #352]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80072d4:	f023 0304 	bic.w	r3, r3, #4
 80072d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d015      	beq.n	800730e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e2:	f7fc fe61 	bl	8003fa8 <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	e00a      	b.n	8007300 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ea:	f7fc fe5d 	bl	8003fa8 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e0d8      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007300:	4b4c      	ldr	r3, [pc, #304]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ee      	beq.n	80072ea <HAL_RCC_OscConfig+0x386>
 800730c:	e014      	b.n	8007338 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730e:	f7fc fe4b 	bl	8003fa8 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007314:	e00a      	b.n	800732c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007316:	f7fc fe47 	bl	8003fa8 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f241 3288 	movw	r2, #5000	; 0x1388
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0c2      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800732c:	4b41      	ldr	r3, [pc, #260]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1ee      	bne.n	8007316 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d105      	bne.n	800734a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800733e:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	4a3c      	ldr	r2, [pc, #240]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80ae 	beq.w	80074b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007354:	4b37      	ldr	r3, [pc, #220]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 030c 	and.w	r3, r3, #12
 800735c:	2b08      	cmp	r3, #8
 800735e:	d06d      	beq.n	800743c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d14b      	bne.n	8007400 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007368:	4b32      	ldr	r3, [pc, #200]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a31      	ldr	r2, [pc, #196]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 800736e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fc fe18 	bl	8003fa8 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737c:	f7fc fe14 	bl	8003fa8 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e091      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738e:	4b29      	ldr	r3, [pc, #164]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f0      	bne.n	800737c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	019b      	lsls	r3, r3, #6
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	061b      	lsls	r3, r3, #24
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	071b      	lsls	r3, r3, #28
 80073c6:	491b      	ldr	r1, [pc, #108]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073cc:	4b19      	ldr	r3, [pc, #100]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a18      	ldr	r2, [pc, #96]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80073d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fc fde6 	bl	8003fa8 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e0:	f7fc fde2 	bl	8003fa8 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e05f      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x47c>
 80073fe:	e057      	b.n	80074b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a0b      	ldr	r2, [pc, #44]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fc fdcc 	bl	8003fa8 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007414:	f7fc fdc8 	bl	8003fa8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e045      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007426:	4b03      	ldr	r3, [pc, #12]	; (8007434 <HAL_RCC_OscConfig+0x4d0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x4b0>
 8007432:	e03d      	b.n	80074b0 <HAL_RCC_OscConfig+0x54c>
 8007434:	40023800 	.word	0x40023800
 8007438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800743c:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <HAL_RCC_OscConfig+0x558>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d030      	beq.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007454:	429a      	cmp	r2, r3
 8007456:	d129      	bne.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	429a      	cmp	r2, r3
 8007464:	d122      	bne.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800746c:	4013      	ands	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007472:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007474:	4293      	cmp	r3, r2
 8007476:	d119      	bne.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	3b01      	subs	r3, #1
 8007486:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007488:	429a      	cmp	r2, r3
 800748a:	d10f      	bne.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d107      	bne.n	80074ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40023800 	.word	0x40023800

080074c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0d0      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074d8:	4b6a      	ldr	r3, [pc, #424]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d910      	bls.n	8007508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e6:	4b67      	ldr	r3, [pc, #412]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f023 020f 	bic.w	r2, r3, #15
 80074ee:	4965      	ldr	r1, [pc, #404]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f6:	4b63      	ldr	r3, [pc, #396]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0b8      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d020      	beq.n	8007556 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007520:	4b59      	ldr	r3, [pc, #356]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	4a58      	ldr	r2, [pc, #352]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800752a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007538:	4b53      	ldr	r3, [pc, #332]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	4a52      	ldr	r2, [pc, #328]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800753e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007544:	4b50      	ldr	r3, [pc, #320]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	494d      	ldr	r1, [pc, #308]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007552:	4313      	orrs	r3, r2
 8007554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d040      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756a:	4b47      	ldr	r3, [pc, #284]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d115      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e07f      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d107      	bne.n	8007592 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007582:	4b41      	ldr	r3, [pc, #260]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e073      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007592:	4b3d      	ldr	r3, [pc, #244]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e06b      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075a2:	4b39      	ldr	r3, [pc, #228]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f023 0203 	bic.w	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4936      	ldr	r1, [pc, #216]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b4:	f7fc fcf8 	bl	8003fa8 <HAL_GetTick>
 80075b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ba:	e00a      	b.n	80075d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075bc:	f7fc fcf4 	bl	8003fa8 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e053      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d2:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 020c 	and.w	r2, r3, #12
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d1eb      	bne.n	80075bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075e4:	4b27      	ldr	r3, [pc, #156]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d210      	bcs.n	8007614 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 020f 	bic.w	r2, r3, #15
 80075fa:	4922      	ldr	r1, [pc, #136]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007602:	4b20      	ldr	r3, [pc, #128]	; (8007684 <HAL_RCC_ClockConfig+0x1c4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d001      	beq.n	8007614 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e032      	b.n	800767a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007620:	4b19      	ldr	r3, [pc, #100]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	4916      	ldr	r1, [pc, #88]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	490e      	ldr	r1, [pc, #56]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800764e:	4313      	orrs	r3, r2
 8007650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007652:	f000 f821 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 8007656:	4602      	mov	r2, r0
 8007658:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <HAL_RCC_ClockConfig+0x1c8>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	490a      	ldr	r1, [pc, #40]	; (800768c <HAL_RCC_ClockConfig+0x1cc>)
 8007664:	5ccb      	ldrb	r3, [r1, r3]
 8007666:	fa22 f303 	lsr.w	r3, r2, r3
 800766a:	4a09      	ldr	r2, [pc, #36]	; (8007690 <HAL_RCC_ClockConfig+0x1d0>)
 800766c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_RCC_ClockConfig+0x1d4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f7fc f83e 	bl	80036f4 <HAL_InitTick>

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40023c00 	.word	0x40023c00
 8007688:	40023800 	.word	0x40023800
 800768c:	08010634 	.word	0x08010634
 8007690:	20000038 	.word	0x20000038
 8007694:	2000003c 	.word	0x2000003c

08007698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800769c:	b090      	sub	sp, #64	; 0x40
 800769e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
 80076a4:	2300      	movs	r3, #0
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a8:	2300      	movs	r3, #0
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076b0:	4b59      	ldr	r3, [pc, #356]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 030c 	and.w	r3, r3, #12
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d00d      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x40>
 80076bc:	2b08      	cmp	r3, #8
 80076be:	f200 80a1 	bhi.w	8007804 <HAL_RCC_GetSysClockFreq+0x16c>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0x34>
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d003      	beq.n	80076d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ca:	e09b      	b.n	8007804 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076cc:	4b53      	ldr	r3, [pc, #332]	; (800781c <HAL_RCC_GetSysClockFreq+0x184>)
 80076ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076d0:	e09b      	b.n	800780a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076d2:	4b53      	ldr	r3, [pc, #332]	; (8007820 <HAL_RCC_GetSysClockFreq+0x188>)
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076d6:	e098      	b.n	800780a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076d8:	4b4f      	ldr	r3, [pc, #316]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076e2:	4b4d      	ldr	r3, [pc, #308]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d028      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ee:	4b4a      	ldr	r3, [pc, #296]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	2200      	movs	r2, #0
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	627a      	str	r2, [r7, #36]	; 0x24
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007700:	2100      	movs	r1, #0
 8007702:	4b47      	ldr	r3, [pc, #284]	; (8007820 <HAL_RCC_GetSysClockFreq+0x188>)
 8007704:	fb03 f201 	mul.w	r2, r3, r1
 8007708:	2300      	movs	r3, #0
 800770a:	fb00 f303 	mul.w	r3, r0, r3
 800770e:	4413      	add	r3, r2
 8007710:	4a43      	ldr	r2, [pc, #268]	; (8007820 <HAL_RCC_GetSysClockFreq+0x188>)
 8007712:	fba0 1202 	umull	r1, r2, r0, r2
 8007716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007718:	460a      	mov	r2, r1
 800771a:	62ba      	str	r2, [r7, #40]	; 0x28
 800771c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800771e:	4413      	add	r3, r2
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	2200      	movs	r2, #0
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	61fa      	str	r2, [r7, #28]
 800772a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800772e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007732:	f7f8 fdd5 	bl	80002e0 <__aeabi_uldivmod>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4613      	mov	r3, r2
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773e:	e053      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	099b      	lsrs	r3, r3, #6
 8007746:	2200      	movs	r2, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	617a      	str	r2, [r7, #20]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007752:	f04f 0b00 	mov.w	fp, #0
 8007756:	4652      	mov	r2, sl
 8007758:	465b      	mov	r3, fp
 800775a:	f04f 0000 	mov.w	r0, #0
 800775e:	f04f 0100 	mov.w	r1, #0
 8007762:	0159      	lsls	r1, r3, #5
 8007764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007768:	0150      	lsls	r0, r2, #5
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	ebb2 080a 	subs.w	r8, r2, sl
 8007772:	eb63 090b 	sbc.w	r9, r3, fp
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007782:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007786:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800778a:	ebb2 0408 	subs.w	r4, r2, r8
 800778e:	eb63 0509 	sbc.w	r5, r3, r9
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	00eb      	lsls	r3, r5, #3
 800779c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a0:	00e2      	lsls	r2, r4, #3
 80077a2:	4614      	mov	r4, r2
 80077a4:	461d      	mov	r5, r3
 80077a6:	eb14 030a 	adds.w	r3, r4, sl
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	eb45 030b 	adc.w	r3, r5, fp
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077be:	4629      	mov	r1, r5
 80077c0:	028b      	lsls	r3, r1, #10
 80077c2:	4621      	mov	r1, r4
 80077c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077c8:	4621      	mov	r1, r4
 80077ca:	028a      	lsls	r2, r1, #10
 80077cc:	4610      	mov	r0, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	2200      	movs	r2, #0
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	60fa      	str	r2, [r7, #12]
 80077d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077dc:	f7f8 fd80 	bl	80002e0 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4613      	mov	r3, r2
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077e8:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	3301      	adds	r3, #1
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80077f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007802:	e002      	b.n	800780a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <HAL_RCC_GetSysClockFreq+0x184>)
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800780c:	4618      	mov	r0, r3
 800780e:	3740      	adds	r7, #64	; 0x40
 8007810:	46bd      	mov	sp, r7
 8007812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007816:	bf00      	nop
 8007818:	40023800 	.word	0x40023800
 800781c:	00f42400 	.word	0x00f42400
 8007820:	017d7840 	.word	0x017d7840

08007824 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007828:	4b03      	ldr	r3, [pc, #12]	; (8007838 <HAL_RCC_GetHCLKFreq+0x14>)
 800782a:	681b      	ldr	r3, [r3, #0]
}
 800782c:	4618      	mov	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000038 	.word	0x20000038

0800783c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007840:	f7ff fff0 	bl	8007824 <HAL_RCC_GetHCLKFreq>
 8007844:	4602      	mov	r2, r0
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	0a9b      	lsrs	r3, r3, #10
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	4903      	ldr	r1, [pc, #12]	; (8007860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007852:	5ccb      	ldrb	r3, [r1, r3]
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007858:	4618      	mov	r0, r3
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40023800 	.word	0x40023800
 8007860:	08010644 	.word	0x08010644

08007864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007868:	f7ff ffdc 	bl	8007824 <HAL_RCC_GetHCLKFreq>
 800786c:	4602      	mov	r2, r0
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	0b5b      	lsrs	r3, r3, #13
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	4903      	ldr	r1, [pc, #12]	; (8007888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800787a:	5ccb      	ldrb	r3, [r1, r3]
 800787c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007880:	4618      	mov	r0, r3
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40023800 	.word	0x40023800
 8007888:	08010644 	.word	0x08010644

0800788c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220f      	movs	r2, #15
 800789a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <HAL_RCC_GetClockConfig+0x5c>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0203 	and.w	r2, r3, #3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <HAL_RCC_GetClockConfig+0x5c>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <HAL_RCC_GetClockConfig+0x5c>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80078c0:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <HAL_RCC_GetClockConfig+0x5c>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	08db      	lsrs	r3, r3, #3
 80078c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <HAL_RCC_GetClockConfig+0x60>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 020f 	and.w	r2, r3, #15
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40023c00 	.word	0x40023c00

080078f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007918:	4b69      	ldr	r3, [pc, #420]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4a68      	ldr	r2, [pc, #416]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007922:	6093      	str	r3, [r2, #8]
 8007924:	4b66      	ldr	r3, [pc, #408]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	4964      	ldr	r1, [pc, #400]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800793a:	2301      	movs	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d017      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800794a:	4b5d      	ldr	r3, [pc, #372]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007958:	4959      	ldr	r1, [pc, #356]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007968:	d101      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d017      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007986:	4b4e      	ldr	r3, [pc, #312]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800798c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	494a      	ldr	r1, [pc, #296]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079a4:	d101      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 808b 	beq.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079d4:	4b3a      	ldr	r3, [pc, #232]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079de:	6413      	str	r3, [r2, #64]	; 0x40
 80079e0:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079ec:	4b35      	ldr	r3, [pc, #212]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a34      	ldr	r2, [pc, #208]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f8:	f7fc fad6 	bl	8003fa8 <HAL_GetTick>
 80079fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a00:	f7fc fad2 	bl	8003fa8 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e38f      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a1e:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d035      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d02e      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a3c:	4b20      	ldr	r3, [pc, #128]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a46:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	4a1d      	ldr	r2, [pc, #116]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a52:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a56:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a5e:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d114      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fc fa9a 	bl	8003fa8 <HAL_GetTick>
 8007a74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a76:	e00a      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a78:	f7fc fa96 	bl	8003fa8 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e351      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ee      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aa6:	d111      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ab6:	400b      	ands	r3, r1
 8007ab8:	4901      	ldr	r1, [pc, #4]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40007000 	.word	0x40007000
 8007ac8:	0ffffcff 	.word	0x0ffffcff
 8007acc:	4bac      	ldr	r3, [pc, #688]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4aab      	ldr	r2, [pc, #684]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ad6:	6093      	str	r3, [r2, #8]
 8007ad8:	4ba9      	ldr	r3, [pc, #676]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae4:	49a6      	ldr	r1, [pc, #664]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007af6:	4ba2      	ldr	r3, [pc, #648]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afc:	4aa0      	ldr	r2, [pc, #640]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b06:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b10:	499b      	ldr	r1, [pc, #620]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b24:	4b96      	ldr	r3, [pc, #600]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b32:	4993      	ldr	r1, [pc, #588]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b46:	4b8e      	ldr	r3, [pc, #568]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b54:	498a      	ldr	r1, [pc, #552]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b68:	4b85      	ldr	r3, [pc, #532]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b76:	4982      	ldr	r1, [pc, #520]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b8a:	4b7d      	ldr	r3, [pc, #500]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b98:	4979      	ldr	r1, [pc, #484]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bac:	4b74      	ldr	r3, [pc, #464]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f023 0203 	bic.w	r2, r3, #3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	4971      	ldr	r1, [pc, #452]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bce:	4b6c      	ldr	r3, [pc, #432]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f023 020c 	bic.w	r2, r3, #12
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bdc:	4968      	ldr	r1, [pc, #416]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bf0:	4b63      	ldr	r3, [pc, #396]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	4960      	ldr	r1, [pc, #384]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c12:	4b5b      	ldr	r3, [pc, #364]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c20:	4957      	ldr	r1, [pc, #348]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c34:	4b52      	ldr	r3, [pc, #328]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	494f      	ldr	r1, [pc, #316]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c56:	4b4a      	ldr	r3, [pc, #296]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c64:	4946      	ldr	r1, [pc, #280]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c78:	4b41      	ldr	r3, [pc, #260]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c86:	493e      	ldr	r1, [pc, #248]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c9a:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca8:	4935      	ldr	r1, [pc, #212]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cbc:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cca:	492d      	ldr	r1, [pc, #180]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cde:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cec:	4924      	ldr	r1, [pc, #144]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d1e:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2c:	4914      	ldr	r1, [pc, #80]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d50:	490b      	ldr	r1, [pc, #44]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00f      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	4902      	ldr	r1, [pc, #8]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d7c:	e002      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007d7e:	bf00      	nop
 8007d80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d90:	4b8a      	ldr	r3, [pc, #552]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	4986      	ldr	r1, [pc, #536]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007db4:	4b81      	ldr	r3, [pc, #516]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc4:	497d      	ldr	r1, [pc, #500]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d006      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80d6 	beq.w	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007de0:	4b76      	ldr	r3, [pc, #472]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a75      	ldr	r2, [pc, #468]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dec:	f7fc f8dc 	bl	8003fa8 <HAL_GetTick>
 8007df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007df4:	f7fc f8d8 	bl	8003fa8 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b64      	cmp	r3, #100	; 0x64
 8007e00:	d901      	bls.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e195      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e06:	4b6d      	ldr	r3, [pc, #436]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d021      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d11d      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e26:	4b65      	ldr	r3, [pc, #404]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2c:	0c1b      	lsrs	r3, r3, #16
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e34:	4b61      	ldr	r3, [pc, #388]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e3a:	0e1b      	lsrs	r3, r3, #24
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	019a      	lsls	r2, r3, #6
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	061b      	lsls	r3, r3, #24
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	071b      	lsls	r3, r3, #28
 8007e5a:	4958      	ldr	r1, [pc, #352]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e76:	d00a      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02e      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8c:	d129      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e8e:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e9c:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea2:	0f1b      	lsrs	r3, r3, #28
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	019a      	lsls	r2, r3, #6
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	071b      	lsls	r3, r3, #28
 8007ec2:	493e      	ldr	r1, [pc, #248]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007eca:	4b3c      	ldr	r3, [pc, #240]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed0:	f023 021f 	bic.w	r2, r3, #31
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	4938      	ldr	r1, [pc, #224]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d01d      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007eee:	4b33      	ldr	r3, [pc, #204]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef4:	0e1b      	lsrs	r3, r3, #24
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007efc:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f02:	0f1b      	lsrs	r3, r3, #28
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	019a      	lsls	r2, r3, #6
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	041b      	lsls	r3, r3, #16
 8007f16:	431a      	orrs	r2, r3
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	061b      	lsls	r3, r3, #24
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	4926      	ldr	r1, [pc, #152]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	019a      	lsls	r2, r3, #6
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	061b      	lsls	r3, r3, #24
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	071b      	lsls	r3, r3, #28
 8007f52:	491a      	ldr	r1, [pc, #104]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f5a:	4b18      	ldr	r3, [pc, #96]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f66:	f7fc f81f 	bl	8003fa8 <HAL_GetTick>
 8007f6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f6e:	f7fc f81b 	bl	8003fa8 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b64      	cmp	r3, #100	; 0x64
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e0d8      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	f040 80ce 	bne.w	8008130 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa0:	f7fc f802 	bl	8003fa8 <HAL_GetTick>
 8007fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fa6:	e00b      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fa8:	f7fb fffe 	bl	8003fa8 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b64      	cmp	r3, #100	; 0x64
 8007fb4:	d904      	bls.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e0bb      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007fba:	bf00      	nop
 8007fbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fc0:	4b5e      	ldr	r3, [pc, #376]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fcc:	d0ec      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d009      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d02e      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d12a      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ff6:	4b51      	ldr	r3, [pc, #324]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	0c1b      	lsrs	r3, r3, #16
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008004:	4b4d      	ldr	r3, [pc, #308]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	019a      	lsls	r2, r3, #6
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	061b      	lsls	r3, r3, #24
 8008024:	431a      	orrs	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	071b      	lsls	r3, r3, #28
 800802a:	4944      	ldr	r1, [pc, #272]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008032:	4b42      	ldr	r3, [pc, #264]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	3b01      	subs	r3, #1
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	493d      	ldr	r1, [pc, #244]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008046:	4313      	orrs	r3, r2
 8008048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d022      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800805c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008060:	d11d      	bne.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008062:	4b36      	ldr	r3, [pc, #216]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008068:	0e1b      	lsrs	r3, r3, #24
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008070:	4b32      	ldr	r3, [pc, #200]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	019a      	lsls	r2, r3, #6
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	041b      	lsls	r3, r3, #16
 800808a:	431a      	orrs	r2, r3
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	431a      	orrs	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	071b      	lsls	r3, r3, #28
 8008096:	4929      	ldr	r1, [pc, #164]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d028      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b0:	0e1b      	lsrs	r3, r3, #24
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080b8:	4b20      	ldr	r3, [pc, #128]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	f003 0303 	and.w	r3, r3, #3
 80080c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	019a      	lsls	r2, r3, #6
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	431a      	orrs	r2, r3
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	4917      	ldr	r1, [pc, #92]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080e6:	4b15      	ldr	r3, [pc, #84]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4911      	ldr	r1, [pc, #68]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a0e      	ldr	r2, [pc, #56]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008108:	f7fb ff4e 	bl	8003fa8 <HAL_GetTick>
 800810c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800810e:	e008      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008110:	f7fb ff4a 	bl	8003fa8 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b64      	cmp	r3, #100	; 0x64
 800811c:	d901      	bls.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e007      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812e:	d1ef      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	40023800 	.word	0x40023800

08008140 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e025      	b.n	80081a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fa f909 	bl	8002380 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3304      	adds	r3, #4
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f002 f91b 	bl	800a3bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	461a      	mov	r2, r3
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	f002 f96f 	bl	800a474 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d101      	bne.n	80081c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
 80081c4:	e021      	b.n	800820a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d002      	beq.n	80081d2 <HAL_SDRAM_SendCommand+0x2a>
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d118      	bne.n	8008204 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f002 f9b0 	bl	800a548 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d104      	bne.n	80081fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2205      	movs	r2, #5
 80081f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081f8:	e006      	b.n	8008208 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008202:	e001      	b.n	8008208 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d101      	bne.n	800822c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008228:	2302      	movs	r3, #2
 800822a:	e016      	b.n	800825a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d10f      	bne.n	8008258 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f002 f9a2 	bl	800a590 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e049      	b.n	8008308 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fb fc73 	bl	8003b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f000 fc29 	bl	8008af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	d001      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e054      	b.n	80083d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d022      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008352:	d01d      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a22      	ldr	r2, [pc, #136]	; (80083e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d018      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d013      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1f      	ldr	r2, [pc, #124]	; (80083ec <HAL_TIM_Base_Start_IT+0xdc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00e      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d009      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x80>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d115      	bne.n	80083bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	4b19      	ldr	r3, [pc, #100]	; (80083fc <HAL_TIM_Base_Start_IT+0xec>)
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b06      	cmp	r3, #6
 80083a0:	d015      	beq.n	80083ce <HAL_TIM_Base_Start_IT+0xbe>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a8:	d011      	beq.n	80083ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0201 	orr.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ba:	e008      	b.n	80083ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e000      	b.n	80083d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40000400 	.word	0x40000400
 80083e8:	40000800 	.word	0x40000800
 80083ec:	40000c00 	.word	0x40000c00
 80083f0:	40010400 	.word	0x40010400
 80083f4:	40014000 	.word	0x40014000
 80083f8:	40001800 	.word	0x40001800
 80083fc:	00010007 	.word	0x00010007

08008400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e049      	b.n	80084a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fb fb84 	bl	8003b34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f000 fb5a 	bl	8008af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d122      	bne.n	800850a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d11b      	bne.n	800850a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f06f 0202 	mvn.w	r2, #2
 80084da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f003 0303 	and.w	r3, r3, #3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fae3 	bl	8008abc <HAL_TIM_IC_CaptureCallback>
 80084f6:	e005      	b.n	8008504 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fad5 	bl	8008aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fae6 	bl	8008ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b04      	cmp	r3, #4
 8008516:	d122      	bne.n	800855e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b04      	cmp	r3, #4
 8008524:	d11b      	bne.n	800855e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f06f 0204 	mvn.w	r2, #4
 800852e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fab9 	bl	8008abc <HAL_TIM_IC_CaptureCallback>
 800854a:	e005      	b.n	8008558 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 faab 	bl	8008aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fabc 	bl	8008ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b08      	cmp	r3, #8
 800856a:	d122      	bne.n	80085b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b08      	cmp	r3, #8
 8008578:	d11b      	bne.n	80085b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f06f 0208 	mvn.w	r2, #8
 8008582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2204      	movs	r2, #4
 8008588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa8f 	bl	8008abc <HAL_TIM_IC_CaptureCallback>
 800859e:	e005      	b.n	80085ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa81 	bl	8008aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa92 	bl	8008ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d122      	bne.n	8008606 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b10      	cmp	r3, #16
 80085cc:	d11b      	bne.n	8008606 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f06f 0210 	mvn.w	r2, #16
 80085d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2208      	movs	r2, #8
 80085dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa65 	bl	8008abc <HAL_TIM_IC_CaptureCallback>
 80085f2:	e005      	b.n	8008600 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa57 	bl	8008aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa68 	bl	8008ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b01      	cmp	r3, #1
 8008612:	d10e      	bne.n	8008632 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b01      	cmp	r3, #1
 8008620:	d107      	bne.n	8008632 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f06f 0201 	mvn.w	r2, #1
 800862a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fb f817 	bl	8003660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d10e      	bne.n	800865e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d107      	bne.n	800865e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fe7d 	bl	8009358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866c:	d10e      	bne.n	800868c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008678:	2b80      	cmp	r3, #128	; 0x80
 800867a:	d107      	bne.n	800868c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fe70 	bl	800936c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	d10e      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a4:	2b40      	cmp	r3, #64	; 0x40
 80086a6:	d107      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa16 	bl	8008ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d10e      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d107      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0220 	mvn.w	r2, #32
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fe30 	bl	8009344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008706:	2302      	movs	r3, #2
 8008708:	e0ff      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b14      	cmp	r3, #20
 8008716:	f200 80f0 	bhi.w	80088fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008775 	.word	0x08008775
 8008724:	080088fb 	.word	0x080088fb
 8008728:	080088fb 	.word	0x080088fb
 800872c:	080088fb 	.word	0x080088fb
 8008730:	080087b5 	.word	0x080087b5
 8008734:	080088fb 	.word	0x080088fb
 8008738:	080088fb 	.word	0x080088fb
 800873c:	080088fb 	.word	0x080088fb
 8008740:	080087f7 	.word	0x080087f7
 8008744:	080088fb 	.word	0x080088fb
 8008748:	080088fb 	.word	0x080088fb
 800874c:	080088fb 	.word	0x080088fb
 8008750:	08008837 	.word	0x08008837
 8008754:	080088fb 	.word	0x080088fb
 8008758:	080088fb 	.word	0x080088fb
 800875c:	080088fb 	.word	0x080088fb
 8008760:	08008879 	.word	0x08008879
 8008764:	080088fb 	.word	0x080088fb
 8008768:	080088fb 	.word	0x080088fb
 800876c:	080088fb 	.word	0x080088fb
 8008770:	080088b9 	.word	0x080088b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fa5c 	bl	8008c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0208 	orr.w	r2, r2, #8
 800878e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0204 	bic.w	r2, r2, #4
 800879e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	619a      	str	r2, [r3, #24]
      break;
 80087b2:	e0a5      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 faae 	bl	8008d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	021a      	lsls	r2, r3, #8
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	619a      	str	r2, [r3, #24]
      break;
 80087f4:	e084      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fb05 	bl	8008e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69da      	ldr	r2, [r3, #28]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0208 	orr.w	r2, r2, #8
 8008810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0204 	bic.w	r2, r2, #4
 8008820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69d9      	ldr	r1, [r3, #28]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	61da      	str	r2, [r3, #28]
      break;
 8008834:	e064      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fb5b 	bl	8008ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69d9      	ldr	r1, [r3, #28]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	021a      	lsls	r2, r3, #8
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	61da      	str	r2, [r3, #28]
      break;
 8008876:	e043      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fb92 	bl	8008fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0208 	orr.w	r2, r2, #8
 8008892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0204 	bic.w	r2, r2, #4
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088b6:	e023      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fbc4 	bl	800904c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	021a      	lsls	r2, r3, #8
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088f8:	e002      	b.n	8008900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]
      break;
 80088fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop

08008914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIM_ConfigClockSource+0x1c>
 800892c:	2302      	movs	r3, #2
 800892e:	e0b4      	b.n	8008a9a <HAL_TIM_ConfigClockSource+0x186>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4b56      	ldr	r3, [pc, #344]	; (8008aa4 <HAL_TIM_ConfigClockSource+0x190>)
 800894c:	4013      	ands	r3, r2
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008968:	d03e      	beq.n	80089e8 <HAL_TIM_ConfigClockSource+0xd4>
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896e:	f200 8087 	bhi.w	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	f000 8086 	beq.w	8008a86 <HAL_TIM_ConfigClockSource+0x172>
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897e:	d87f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008980:	2b70      	cmp	r3, #112	; 0x70
 8008982:	d01a      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0xa6>
 8008984:	2b70      	cmp	r3, #112	; 0x70
 8008986:	d87b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b60      	cmp	r3, #96	; 0x60
 800898a:	d050      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x11a>
 800898c:	2b60      	cmp	r3, #96	; 0x60
 800898e:	d877      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b50      	cmp	r3, #80	; 0x50
 8008992:	d03c      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xfa>
 8008994:	2b50      	cmp	r3, #80	; 0x50
 8008996:	d873      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d058      	beq.n	8008a4e <HAL_TIM_ConfigClockSource+0x13a>
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d86f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b30      	cmp	r3, #48	; 0x30
 80089a2:	d064      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089a4:	2b30      	cmp	r3, #48	; 0x30
 80089a6:	d86b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d060      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d867      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05c      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d05a      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	e062      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089ca:	f000 fc0d 	bl	80091e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	609a      	str	r2, [r3, #8]
      break;
 80089e6:	e04f      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089f8:	f000 fbf6 	bl	80091e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a0a:	609a      	str	r2, [r3, #8]
      break;
 8008a0c:	e03c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f000 fb6a 	bl	80090f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2150      	movs	r1, #80	; 0x50
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fbc3 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008a2c:	e02c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f000 fb89 	bl	8009152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2160      	movs	r1, #96	; 0x60
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fbb3 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008a4c:	e01c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f000 fb4a 	bl	80090f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2140      	movs	r1, #64	; 0x40
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fba3 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008a6c:	e00c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f000 fb9a 	bl	80091b2 <TIM_ITRx_SetConfig>
      break;
 8008a7e:	e003      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
      break;
 8008a84:	e000      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	fffeff88 	.word	0xfffeff88

08008aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a40      	ldr	r2, [pc, #256]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b16:	d00f      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a3d      	ldr	r2, [pc, #244]	; (8008c10 <TIM_Base_SetConfig+0x118>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00b      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a3c      	ldr	r2, [pc, #240]	; (8008c14 <TIM_Base_SetConfig+0x11c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d007      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a3b      	ldr	r2, [pc, #236]	; (8008c18 <TIM_Base_SetConfig+0x120>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3a      	ldr	r2, [pc, #232]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d108      	bne.n	8008b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d02b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b58:	d027      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a2c      	ldr	r2, [pc, #176]	; (8008c10 <TIM_Base_SetConfig+0x118>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d023      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2b      	ldr	r2, [pc, #172]	; (8008c14 <TIM_Base_SetConfig+0x11c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01f      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <TIM_Base_SetConfig+0x120>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d017      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a28      	ldr	r2, [pc, #160]	; (8008c20 <TIM_Base_SetConfig+0x128>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <TIM_Base_SetConfig+0x12c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <TIM_Base_SetConfig+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a25      	ldr	r2, [pc, #148]	; (8008c2c <TIM_Base_SetConfig+0x134>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <TIM_Base_SetConfig+0x138>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a23      	ldr	r2, [pc, #140]	; (8008c34 <TIM_Base_SetConfig+0x13c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d108      	bne.n	8008bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d003      	beq.n	8008bf0 <TIM_Base_SetConfig+0xf8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d103      	bne.n	8008bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	615a      	str	r2, [r3, #20]
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	40000400 	.word	0x40000400
 8008c14:	40000800 	.word	0x40000800
 8008c18:	40000c00 	.word	0x40000c00
 8008c1c:	40010400 	.word	0x40010400
 8008c20:	40014000 	.word	0x40014000
 8008c24:	40014400 	.word	0x40014400
 8008c28:	40014800 	.word	0x40014800
 8008c2c:	40001800 	.word	0x40001800
 8008c30:	40001c00 	.word	0x40001c00
 8008c34:	40002000 	.word	0x40002000

08008c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f023 0201 	bic.w	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4b2b      	ldr	r3, [pc, #172]	; (8008d10 <TIM_OC1_SetConfig+0xd8>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f023 0302 	bic.w	r3, r3, #2
 8008c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a21      	ldr	r2, [pc, #132]	; (8008d14 <TIM_OC1_SetConfig+0xdc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_OC1_SetConfig+0x64>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a20      	ldr	r2, [pc, #128]	; (8008d18 <TIM_OC1_SetConfig+0xe0>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d10c      	bne.n	8008cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0308 	bic.w	r3, r3, #8
 8008ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f023 0304 	bic.w	r3, r3, #4
 8008cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <TIM_OC1_SetConfig+0xdc>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d003      	beq.n	8008cc6 <TIM_OC1_SetConfig+0x8e>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <TIM_OC1_SetConfig+0xe0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d111      	bne.n	8008cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	621a      	str	r2, [r3, #32]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	fffeff8f 	.word	0xfffeff8f
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40010400 	.word	0x40010400

08008d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	f023 0210 	bic.w	r2, r3, #16
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <TIM_OC2_SetConfig+0xe4>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0320 	bic.w	r3, r3, #32
 8008d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	011b      	lsls	r3, r3, #4
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a23      	ldr	r2, [pc, #140]	; (8008e04 <TIM_OC2_SetConfig+0xe8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_OC2_SetConfig+0x68>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a22      	ldr	r2, [pc, #136]	; (8008e08 <TIM_OC2_SetConfig+0xec>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10d      	bne.n	8008da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a18      	ldr	r2, [pc, #96]	; (8008e04 <TIM_OC2_SetConfig+0xe8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_OC2_SetConfig+0x94>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a17      	ldr	r2, [pc, #92]	; (8008e08 <TIM_OC2_SetConfig+0xec>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d113      	bne.n	8008dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	feff8fff 	.word	0xfeff8fff
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010400 	.word	0x40010400

08008e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <TIM_OC3_SetConfig+0xe0>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a22      	ldr	r2, [pc, #136]	; (8008ef0 <TIM_OC3_SetConfig+0xe4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d003      	beq.n	8008e72 <TIM_OC3_SetConfig+0x66>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <TIM_OC3_SetConfig+0xe8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10d      	bne.n	8008e8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a17      	ldr	r2, [pc, #92]	; (8008ef0 <TIM_OC3_SetConfig+0xe4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_OC3_SetConfig+0x92>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a16      	ldr	r2, [pc, #88]	; (8008ef4 <TIM_OC3_SetConfig+0xe8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d113      	bne.n	8008ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	fffeff8f 	.word	0xfffeff8f
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400

08008ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4b1e      	ldr	r3, [pc, #120]	; (8008f9c <TIM_OC4_SetConfig+0xa4>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	031b      	lsls	r3, r3, #12
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a13      	ldr	r2, [pc, #76]	; (8008fa0 <TIM_OC4_SetConfig+0xa8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_OC4_SetConfig+0x68>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a12      	ldr	r2, [pc, #72]	; (8008fa4 <TIM_OC4_SetConfig+0xac>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d109      	bne.n	8008f74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	019b      	lsls	r3, r3, #6
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	621a      	str	r2, [r3, #32]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	feff8fff 	.word	0xfeff8fff
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40010400 	.word	0x40010400

08008fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <TIM_OC5_SetConfig+0x98>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a12      	ldr	r2, [pc, #72]	; (8009044 <TIM_OC5_SetConfig+0x9c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d003      	beq.n	8009006 <TIM_OC5_SetConfig+0x5e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a11      	ldr	r2, [pc, #68]	; (8009048 <TIM_OC5_SetConfig+0xa0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d109      	bne.n	800901a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800900c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	621a      	str	r2, [r3, #32]
}
 8009034:	bf00      	nop
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	fffeff8f 	.word	0xfffeff8f
 8009044:	40010000 	.word	0x40010000
 8009048:	40010400 	.word	0x40010400

0800904c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4b1c      	ldr	r3, [pc, #112]	; (80090e8 <TIM_OC6_SetConfig+0x9c>)
 8009078:	4013      	ands	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800908e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	051b      	lsls	r3, r3, #20
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a13      	ldr	r2, [pc, #76]	; (80090ec <TIM_OC6_SetConfig+0xa0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <TIM_OC6_SetConfig+0x60>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a12      	ldr	r2, [pc, #72]	; (80090f0 <TIM_OC6_SetConfig+0xa4>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d109      	bne.n	80090c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	029b      	lsls	r3, r3, #10
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	4313      	orrs	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	feff8fff 	.word	0xfeff8fff
 80090ec:	40010000 	.word	0x40010000
 80090f0:	40010400 	.word	0x40010400

080090f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0201 	bic.w	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800911e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f023 030a 	bic.w	r3, r3, #10
 8009130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	621a      	str	r2, [r3, #32]
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009152:	b480      	push	{r7}
 8009154:	b087      	sub	sp, #28
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	f023 0210 	bic.w	r2, r3, #16
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800917c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	031b      	lsls	r3, r3, #12
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800918e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	4313      	orrs	r3, r2
 8009198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f043 0307 	orr.w	r3, r3, #7
 80091d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	431a      	orrs	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4313      	orrs	r3, r2
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800923c:	2302      	movs	r3, #2
 800923e:	e06d      	b.n	800931c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a30      	ldr	r2, [pc, #192]	; (8009328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d004      	beq.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a2f      	ldr	r2, [pc, #188]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d108      	bne.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800927a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a20      	ldr	r2, [pc, #128]	; (8009328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d022      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b2:	d01d      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	; (8009330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d018      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a1c      	ldr	r2, [pc, #112]	; (8009334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d013      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1a      	ldr	r2, [pc, #104]	; (8009338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00e      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a15      	ldr	r2, [pc, #84]	; (800932c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d009      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a16      	ldr	r2, [pc, #88]	; (800933c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d004      	beq.n	80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a15      	ldr	r2, [pc, #84]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10c      	bne.n	800930a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	40010000 	.word	0x40010000
 800932c:	40010400 	.word	0x40010400
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800
 8009338:	40000c00 	.word	0x40000c00
 800933c:	40014000 	.word	0x40014000
 8009340:	40001800 	.word	0x40001800

08009344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e040      	b.n	8009414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7fa fc74 	bl	8003c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2224      	movs	r2, #36	; 0x24
 80093ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fb3e 	bl	8009a40 <UART_SetConfig>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e022      	b.n	8009414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fd96 	bl	8009f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fe1d 	bl	800a04c <UART_CheckIdleState>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b0ba      	sub	sp, #232	; 0xe8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009446:	f640 030f 	movw	r3, #2063	; 0x80f
 800944a:	4013      	ands	r3, r2
 800944c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009454:	2b00      	cmp	r3, #0
 8009456:	d115      	bne.n	8009484 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00f      	beq.n	8009484 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 82ac 	beq.w	80099d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
      }
      return;
 8009482:	e2a6      	b.n	80099d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 8117 	beq.w	80096bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800948e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800949a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800949e:	4b85      	ldr	r3, [pc, #532]	; (80096b4 <HAL_UART_IRQHandler+0x298>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 810a 	beq.w	80096bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d011      	beq.n	80094d8 <HAL_UART_IRQHandler+0xbc>
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2201      	movs	r2, #1
 80094c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ce:	f043 0201 	orr.w	r2, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d011      	beq.n	8009508 <HAL_UART_IRQHandler+0xec>
 80094e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2202      	movs	r2, #2
 80094f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fe:	f043 0204 	orr.w	r2, r3, #4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d011      	beq.n	8009538 <HAL_UART_IRQHandler+0x11c>
 8009514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2204      	movs	r2, #4
 8009526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952e:	f043 0202 	orr.w	r2, r3, #2
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d017      	beq.n	8009574 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2208      	movs	r2, #8
 8009562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956a:	f043 0208 	orr.w	r2, r3, #8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800957c:	2b00      	cmp	r3, #0
 800957e:	d012      	beq.n	80095a6 <HAL_UART_IRQHandler+0x18a>
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800959c:	f043 0220 	orr.w	r2, r3, #32
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 8212 	beq.w	80099d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00d      	beq.n	80095da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d005      	beq.n	80095fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d04f      	beq.n	800969e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fe37 	bl	800a272 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d141      	bne.n	8009696 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3308      	adds	r3, #8
 8009618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800962c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3308      	adds	r3, #8
 800963a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800963e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800964a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1d9      	bne.n	8009612 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009662:	2b00      	cmp	r3, #0
 8009664:	d013      	beq.n	800968e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966a:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <HAL_UART_IRQHandler+0x29c>)
 800966c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009672:	4618      	mov	r0, r3
 8009674:	f7fa fe1a 	bl	80042ac <HAL_DMA_Abort_IT>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d017      	beq.n	80096ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968c:	e00f      	b.n	80096ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f9b6 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009694:	e00b      	b.n	80096ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9b2 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	e007      	b.n	80096ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f9ae 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80096ac:	e193      	b.n	80099d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ae:	bf00      	nop
    return;
 80096b0:	e191      	b.n	80099d6 <HAL_UART_IRQHandler+0x5ba>
 80096b2:	bf00      	nop
 80096b4:	04000120 	.word	0x04000120
 80096b8:	0800a33b 	.word	0x0800a33b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	f040 814c 	bne.w	800995e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ca:	f003 0310 	and.w	r3, r3, #16
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 8145 	beq.w	800995e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 813e 	beq.w	800995e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2210      	movs	r2, #16
 80096e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b40      	cmp	r3, #64	; 0x40
 80096f6:	f040 80b6 	bne.w	8009866 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009706:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 8165 	beq.w	80099da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800971a:	429a      	cmp	r2, r3
 800971c:	f080 815d 	bcs.w	80099da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009734:	f000 8086 	beq.w	8009844 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800974c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800976e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800977a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1da      	bne.n	8009738 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009794:	f023 0301 	bic.w	r3, r3, #1
 8009798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e1      	bne.n	8009782 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3308      	adds	r3, #8
 80097c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3308      	adds	r3, #8
 80097de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e3      	bne.n	80097be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009814:	f023 0310 	bic.w	r3, r3, #16
 8009818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009826:	65bb      	str	r3, [r7, #88]	; 0x58
 8009828:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800982c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e4      	bne.n	8009804 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800983e:	4618      	mov	r0, r3
 8009840:	f7fa fcc4 	bl	80041cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009856:	b29b      	uxth	r3, r3
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	b29b      	uxth	r3, r3
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8d8 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009864:	e0b9      	b.n	80099da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009872:	b29b      	uxth	r3, r3
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 80ab 	beq.w	80099de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 80a6 	beq.w	80099de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098b4:	647b      	str	r3, [r7, #68]	; 0x44
 80098b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e4      	bne.n	8009892 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	623b      	str	r3, [r7, #32]
   return(result);
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	f023 0301 	bic.w	r3, r3, #1
 80098de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098ec:	633a      	str	r2, [r7, #48]	; 0x30
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e3      	bne.n	80098c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	60fb      	str	r3, [r7, #12]
   return(result);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f023 0310 	bic.w	r3, r3, #16
 8009928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	69b9      	ldr	r1, [r7, #24]
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	617b      	str	r3, [r7, #20]
   return(result);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e4      	bne.n	8009914 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f85c 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800995c:	e03f      	b.n	80099de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800995e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <HAL_UART_IRQHandler+0x56c>
 800996a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800997e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f853 	bl	8009a2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009986:	e02d      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800998c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00e      	beq.n	80099b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999c:	2b00      	cmp	r3, #0
 800999e:	d008      	beq.n	80099b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01c      	beq.n	80099e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
    }
    return;
 80099b0:	e017      	b.n	80099e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d012      	beq.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
 80099be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fccb 	bl	800a366 <UART_EndTransmit_IT>
    return;
 80099d0:	e008      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80099d2:	bf00      	nop
 80099d4:	e006      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80099d6:	bf00      	nop
 80099d8:	e004      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80099da:	bf00      	nop
 80099dc:	e002      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80099e2:	bf00      	nop
  }

}
 80099e4:	37e8      	adds	r7, #232	; 0xe8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop

080099ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	431a      	orrs	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4ba6      	ldr	r3, [pc, #664]	; (8009d04 <UART_SetConfig+0x2c4>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6979      	ldr	r1, [r7, #20]
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a94      	ldr	r2, [pc, #592]	; (8009d08 <UART_SetConfig+0x2c8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d120      	bne.n	8009afe <UART_SetConfig+0xbe>
 8009abc:	4b93      	ldr	r3, [pc, #588]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d816      	bhi.n	8009af8 <UART_SetConfig+0xb8>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <UART_SetConfig+0x90>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009ae7 	.word	0x08009ae7
 8009adc:	08009af3 	.word	0x08009af3
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e150      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e14d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009aec:	2304      	movs	r3, #4
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e14a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009af2:	2308      	movs	r3, #8
 8009af4:	77fb      	strb	r3, [r7, #31]
 8009af6:	e147      	b.n	8009d88 <UART_SetConfig+0x348>
 8009af8:	2310      	movs	r3, #16
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e144      	b.n	8009d88 <UART_SetConfig+0x348>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a83      	ldr	r2, [pc, #524]	; (8009d10 <UART_SetConfig+0x2d0>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d132      	bne.n	8009b6e <UART_SetConfig+0x12e>
 8009b08:	4b80      	ldr	r3, [pc, #512]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b0e:	f003 030c 	and.w	r3, r3, #12
 8009b12:	2b0c      	cmp	r3, #12
 8009b14:	d828      	bhi.n	8009b68 <UART_SetConfig+0x128>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0xdc>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b69 	.word	0x08009b69
 8009b2c:	08009b5d 	.word	0x08009b5d
 8009b30:	08009b69 	.word	0x08009b69
 8009b34:	08009b69 	.word	0x08009b69
 8009b38:	08009b69 	.word	0x08009b69
 8009b3c:	08009b57 	.word	0x08009b57
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b63 	.word	0x08009b63
 8009b50:	2300      	movs	r3, #0
 8009b52:	77fb      	strb	r3, [r7, #31]
 8009b54:	e118      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b56:	2302      	movs	r3, #2
 8009b58:	77fb      	strb	r3, [r7, #31]
 8009b5a:	e115      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e112      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b62:	2308      	movs	r3, #8
 8009b64:	77fb      	strb	r3, [r7, #31]
 8009b66:	e10f      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	77fb      	strb	r3, [r7, #31]
 8009b6c:	e10c      	b.n	8009d88 <UART_SetConfig+0x348>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a68      	ldr	r2, [pc, #416]	; (8009d14 <UART_SetConfig+0x2d4>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d120      	bne.n	8009bba <UART_SetConfig+0x17a>
 8009b78:	4b64      	ldr	r3, [pc, #400]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b82:	2b30      	cmp	r3, #48	; 0x30
 8009b84:	d013      	beq.n	8009bae <UART_SetConfig+0x16e>
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	d814      	bhi.n	8009bb4 <UART_SetConfig+0x174>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d009      	beq.n	8009ba2 <UART_SetConfig+0x162>
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d810      	bhi.n	8009bb4 <UART_SetConfig+0x174>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <UART_SetConfig+0x15c>
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d006      	beq.n	8009ba8 <UART_SetConfig+0x168>
 8009b9a:	e00b      	b.n	8009bb4 <UART_SetConfig+0x174>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e0f2      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e0ef      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ba8:	2304      	movs	r3, #4
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e0ec      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bae:	2308      	movs	r3, #8
 8009bb0:	77fb      	strb	r3, [r7, #31]
 8009bb2:	e0e9      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bb4:	2310      	movs	r3, #16
 8009bb6:	77fb      	strb	r3, [r7, #31]
 8009bb8:	e0e6      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a56      	ldr	r2, [pc, #344]	; (8009d18 <UART_SetConfig+0x2d8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d120      	bne.n	8009c06 <UART_SetConfig+0x1c6>
 8009bc4:	4b51      	ldr	r3, [pc, #324]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bce:	2bc0      	cmp	r3, #192	; 0xc0
 8009bd0:	d013      	beq.n	8009bfa <UART_SetConfig+0x1ba>
 8009bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8009bd4:	d814      	bhi.n	8009c00 <UART_SetConfig+0x1c0>
 8009bd6:	2b80      	cmp	r3, #128	; 0x80
 8009bd8:	d009      	beq.n	8009bee <UART_SetConfig+0x1ae>
 8009bda:	2b80      	cmp	r3, #128	; 0x80
 8009bdc:	d810      	bhi.n	8009c00 <UART_SetConfig+0x1c0>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <UART_SetConfig+0x1a8>
 8009be2:	2b40      	cmp	r3, #64	; 0x40
 8009be4:	d006      	beq.n	8009bf4 <UART_SetConfig+0x1b4>
 8009be6:	e00b      	b.n	8009c00 <UART_SetConfig+0x1c0>
 8009be8:	2300      	movs	r3, #0
 8009bea:	77fb      	strb	r3, [r7, #31]
 8009bec:	e0cc      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	77fb      	strb	r3, [r7, #31]
 8009bf2:	e0c9      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	77fb      	strb	r3, [r7, #31]
 8009bf8:	e0c6      	b.n	8009d88 <UART_SetConfig+0x348>
 8009bfa:	2308      	movs	r3, #8
 8009bfc:	77fb      	strb	r3, [r7, #31]
 8009bfe:	e0c3      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c00:	2310      	movs	r3, #16
 8009c02:	77fb      	strb	r3, [r7, #31]
 8009c04:	e0c0      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a44      	ldr	r2, [pc, #272]	; (8009d1c <UART_SetConfig+0x2dc>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d125      	bne.n	8009c5c <UART_SetConfig+0x21c>
 8009c10:	4b3e      	ldr	r3, [pc, #248]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c1e:	d017      	beq.n	8009c50 <UART_SetConfig+0x210>
 8009c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c24:	d817      	bhi.n	8009c56 <UART_SetConfig+0x216>
 8009c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2a:	d00b      	beq.n	8009c44 <UART_SetConfig+0x204>
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c30:	d811      	bhi.n	8009c56 <UART_SetConfig+0x216>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <UART_SetConfig+0x1fe>
 8009c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3a:	d006      	beq.n	8009c4a <UART_SetConfig+0x20a>
 8009c3c:	e00b      	b.n	8009c56 <UART_SetConfig+0x216>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	77fb      	strb	r3, [r7, #31]
 8009c42:	e0a1      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c44:	2302      	movs	r3, #2
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e09e      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e09b      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c50:	2308      	movs	r3, #8
 8009c52:	77fb      	strb	r3, [r7, #31]
 8009c54:	e098      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c56:	2310      	movs	r3, #16
 8009c58:	77fb      	strb	r3, [r7, #31]
 8009c5a:	e095      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a2f      	ldr	r2, [pc, #188]	; (8009d20 <UART_SetConfig+0x2e0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d125      	bne.n	8009cb2 <UART_SetConfig+0x272>
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c74:	d017      	beq.n	8009ca6 <UART_SetConfig+0x266>
 8009c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c7a:	d817      	bhi.n	8009cac <UART_SetConfig+0x26c>
 8009c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c80:	d00b      	beq.n	8009c9a <UART_SetConfig+0x25a>
 8009c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c86:	d811      	bhi.n	8009cac <UART_SetConfig+0x26c>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <UART_SetConfig+0x254>
 8009c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c90:	d006      	beq.n	8009ca0 <UART_SetConfig+0x260>
 8009c92:	e00b      	b.n	8009cac <UART_SetConfig+0x26c>
 8009c94:	2301      	movs	r3, #1
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e076      	b.n	8009d88 <UART_SetConfig+0x348>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	77fb      	strb	r3, [r7, #31]
 8009c9e:	e073      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e070      	b.n	8009d88 <UART_SetConfig+0x348>
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	77fb      	strb	r3, [r7, #31]
 8009caa:	e06d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cac:	2310      	movs	r3, #16
 8009cae:	77fb      	strb	r3, [r7, #31]
 8009cb0:	e06a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1b      	ldr	r2, [pc, #108]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d138      	bne.n	8009d2e <UART_SetConfig+0x2ee>
 8009cbc:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <UART_SetConfig+0x2cc>)
 8009cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cca:	d017      	beq.n	8009cfc <UART_SetConfig+0x2bc>
 8009ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cd0:	d82a      	bhi.n	8009d28 <UART_SetConfig+0x2e8>
 8009cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cd6:	d00b      	beq.n	8009cf0 <UART_SetConfig+0x2b0>
 8009cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cdc:	d824      	bhi.n	8009d28 <UART_SetConfig+0x2e8>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <UART_SetConfig+0x2aa>
 8009ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce6:	d006      	beq.n	8009cf6 <UART_SetConfig+0x2b6>
 8009ce8:	e01e      	b.n	8009d28 <UART_SetConfig+0x2e8>
 8009cea:	2300      	movs	r3, #0
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e04b      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	77fb      	strb	r3, [r7, #31]
 8009cf4:	e048      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cf6:	2304      	movs	r3, #4
 8009cf8:	77fb      	strb	r3, [r7, #31]
 8009cfa:	e045      	b.n	8009d88 <UART_SetConfig+0x348>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	e042      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d02:	bf00      	nop
 8009d04:	efff69f3 	.word	0xefff69f3
 8009d08:	40011000 	.word	0x40011000
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	40004400 	.word	0x40004400
 8009d14:	40004800 	.word	0x40004800
 8009d18:	40004c00 	.word	0x40004c00
 8009d1c:	40005000 	.word	0x40005000
 8009d20:	40011400 	.word	0x40011400
 8009d24:	40007800 	.word	0x40007800
 8009d28:	2310      	movs	r3, #16
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e02c      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a72      	ldr	r2, [pc, #456]	; (8009efc <UART_SetConfig+0x4bc>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d125      	bne.n	8009d84 <UART_SetConfig+0x344>
 8009d38:	4b71      	ldr	r3, [pc, #452]	; (8009f00 <UART_SetConfig+0x4c0>)
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d46:	d017      	beq.n	8009d78 <UART_SetConfig+0x338>
 8009d48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d4c:	d817      	bhi.n	8009d7e <UART_SetConfig+0x33e>
 8009d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d52:	d00b      	beq.n	8009d6c <UART_SetConfig+0x32c>
 8009d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d58:	d811      	bhi.n	8009d7e <UART_SetConfig+0x33e>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <UART_SetConfig+0x326>
 8009d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d62:	d006      	beq.n	8009d72 <UART_SetConfig+0x332>
 8009d64:	e00b      	b.n	8009d7e <UART_SetConfig+0x33e>
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e00d      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e00a      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d72:	2304      	movs	r3, #4
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e007      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	77fb      	strb	r3, [r7, #31]
 8009d7c:	e004      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d7e:	2310      	movs	r3, #16
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e001      	b.n	8009d88 <UART_SetConfig+0x348>
 8009d84:	2310      	movs	r3, #16
 8009d86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d90:	d15b      	bne.n	8009e4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d92:	7ffb      	ldrb	r3, [r7, #31]
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d828      	bhi.n	8009dea <UART_SetConfig+0x3aa>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <UART_SetConfig+0x360>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009dc5 	.word	0x08009dc5
 8009da4:	08009dcd 	.word	0x08009dcd
 8009da8:	08009dd5 	.word	0x08009dd5
 8009dac:	08009deb 	.word	0x08009deb
 8009db0:	08009ddb 	.word	0x08009ddb
 8009db4:	08009deb 	.word	0x08009deb
 8009db8:	08009deb 	.word	0x08009deb
 8009dbc:	08009deb 	.word	0x08009deb
 8009dc0:	08009de3 	.word	0x08009de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc4:	f7fd fd3a 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 8009dc8:	61b8      	str	r0, [r7, #24]
        break;
 8009dca:	e013      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dcc:	f7fd fd4a 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 8009dd0:	61b8      	str	r0, [r7, #24]
        break;
 8009dd2:	e00f      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd4:	4b4b      	ldr	r3, [pc, #300]	; (8009f04 <UART_SetConfig+0x4c4>)
 8009dd6:	61bb      	str	r3, [r7, #24]
        break;
 8009dd8:	e00c      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dda:	f7fd fc5d 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 8009dde:	61b8      	str	r0, [r7, #24]
        break;
 8009de0:	e008      	b.n	8009df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de6:	61bb      	str	r3, [r7, #24]
        break;
 8009de8:	e004      	b.n	8009df4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	77bb      	strb	r3, [r7, #30]
        break;
 8009df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d074      	beq.n	8009ee4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	005a      	lsls	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	085b      	lsrs	r3, r3, #1
 8009e04:	441a      	add	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	2b0f      	cmp	r3, #15
 8009e14:	d916      	bls.n	8009e44 <UART_SetConfig+0x404>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1c:	d212      	bcs.n	8009e44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f023 030f 	bic.w	r3, r3, #15
 8009e26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	89fb      	ldrh	r3, [r7, #14]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	89fa      	ldrh	r2, [r7, #14]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	e04f      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	77bb      	strb	r3, [r7, #30]
 8009e48:	e04c      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e4a:	7ffb      	ldrb	r3, [r7, #31]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d828      	bhi.n	8009ea2 <UART_SetConfig+0x462>
 8009e50:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <UART_SetConfig+0x418>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009e7d 	.word	0x08009e7d
 8009e5c:	08009e85 	.word	0x08009e85
 8009e60:	08009e8d 	.word	0x08009e8d
 8009e64:	08009ea3 	.word	0x08009ea3
 8009e68:	08009e93 	.word	0x08009e93
 8009e6c:	08009ea3 	.word	0x08009ea3
 8009e70:	08009ea3 	.word	0x08009ea3
 8009e74:	08009ea3 	.word	0x08009ea3
 8009e78:	08009e9b 	.word	0x08009e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e7c:	f7fd fcde 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 8009e80:	61b8      	str	r0, [r7, #24]
        break;
 8009e82:	e013      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e84:	f7fd fcee 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 8009e88:	61b8      	str	r0, [r7, #24]
        break;
 8009e8a:	e00f      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e8c:	4b1d      	ldr	r3, [pc, #116]	; (8009f04 <UART_SetConfig+0x4c4>)
 8009e8e:	61bb      	str	r3, [r7, #24]
        break;
 8009e90:	e00c      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e92:	f7fd fc01 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 8009e96:	61b8      	str	r0, [r7, #24]
        break;
 8009e98:	e008      	b.n	8009eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e9e:	61bb      	str	r3, [r7, #24]
        break;
 8009ea0:	e004      	b.n	8009eac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8009eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d018      	beq.n	8009ee4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	085a      	lsrs	r2, r3, #1
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	441a      	add	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b0f      	cmp	r3, #15
 8009eca:	d909      	bls.n	8009ee0 <UART_SetConfig+0x4a0>
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed2:	d205      	bcs.n	8009ee0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e001      	b.n	8009ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40007c00 	.word	0x40007c00
 8009f00:	40023800 	.word	0x40023800
 8009f04:	00f42400 	.word	0x00f42400

08009f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	f003 0308 	and.w	r3, r3, #8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01a      	beq.n	800a01e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d10a      	bne.n	800a01e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	605a      	str	r2, [r3, #4]
  }
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af02      	add	r7, sp, #8
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a05c:	f7f9 ffa4 	bl	8003fa8 <HAL_GetTick>
 800a060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d10e      	bne.n	800a08e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f831 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e027      	b.n	800a0de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d10e      	bne.n	800a0ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f81b 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e011      	b.n	800a0de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b09c      	sub	sp, #112	; 0x70
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f6:	e0a7      	b.n	800a248 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	f000 80a3 	beq.w	800a248 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a102:	f7f9 ff51 	bl	8003fa8 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a10e:	429a      	cmp	r2, r3
 800a110:	d302      	bcc.n	800a118 <UART_WaitOnFlagUntilTimeout+0x32>
 800a112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a114:	2b00      	cmp	r3, #0
 800a116:	d13f      	bne.n	800a198 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a128:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a12c:	667b      	str	r3, [r7, #100]	; 0x64
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a136:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a138:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a13c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e6      	bne.n	800a118 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3308      	adds	r3, #8
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f023 0301 	bic.w	r3, r3, #1
 800a160:	663b      	str	r3, [r7, #96]	; 0x60
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a16a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a16c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e5      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2220      	movs	r2, #32
 800a182:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e068      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d050      	beq.n	800a248 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b4:	d148      	bne.n	800a248 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1de:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	613b      	str	r3, [r7, #16]
   return(result);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	66bb      	str	r3, [r7, #104]	; 0x68
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a212:	623a      	str	r2, [r7, #32]
 800a214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	69f9      	ldr	r1, [r7, #28]
 800a218:	6a3a      	ldr	r2, [r7, #32]
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2220      	movs	r2, #32
 800a238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e010      	b.n	800a26a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	69da      	ldr	r2, [r3, #28]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	429a      	cmp	r2, r3
 800a256:	bf0c      	ite	eq
 800a258:	2301      	moveq	r3, #1
 800a25a:	2300      	movne	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	429a      	cmp	r2, r3
 800a264:	f43f af48 	beq.w	800a0f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3770      	adds	r7, #112	; 0x70
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a272:	b480      	push	{r7}
 800a274:	b095      	sub	sp, #84	; 0x54
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	643b      	str	r3, [r7, #64]	; 0x40
 800a29a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a29e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e6      	bne.n	800a27a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e5      	bne.n	800a2ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d118      	bne.n	800a31a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a32e:	bf00      	nop
 800a330:	3754      	adds	r7, #84	; 0x54
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff fb51 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b088      	sub	sp, #32
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	61bb      	str	r3, [r7, #24]
 800a38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	e841 2300 	strex	r3, r2, [r1]
 800a398:	613b      	str	r3, [r7, #16]
   return(result);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e6      	bne.n	800a36e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fb1d 	bl	80099ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b2:	bf00      	nop
 800a3b4:	3720      	adds	r7, #32
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d121      	bne.n	800a412 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b27      	ldr	r3, [pc, #156]	; (800a470 <FMC_SDRAM_Init+0xb4>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	6851      	ldr	r1, [r2, #4]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	6892      	ldr	r2, [r2, #8]
 800a3de:	4311      	orrs	r1, r2
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	68d2      	ldr	r2, [r2, #12]
 800a3e4:	4311      	orrs	r1, r2
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	6912      	ldr	r2, [r2, #16]
 800a3ea:	4311      	orrs	r1, r2
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	6952      	ldr	r2, [r2, #20]
 800a3f0:	4311      	orrs	r1, r2
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	6992      	ldr	r2, [r2, #24]
 800a3f6:	4311      	orrs	r1, r2
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	69d2      	ldr	r2, [r2, #28]
 800a3fc:	4311      	orrs	r1, r2
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	6a12      	ldr	r2, [r2, #32]
 800a402:	4311      	orrs	r1, r2
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a408:	430a      	orrs	r2, r1
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e026      	b.n	800a460 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	69d9      	ldr	r1, [r3, #28]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	4319      	orrs	r1, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	430b      	orrs	r3, r1
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <FMC_SDRAM_Init+0xb4>)
 800a436:	4013      	ands	r3, r2
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	6851      	ldr	r1, [r2, #4]
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	6892      	ldr	r2, [r2, #8]
 800a440:	4311      	orrs	r1, r2
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	68d2      	ldr	r2, [r2, #12]
 800a446:	4311      	orrs	r1, r2
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	6912      	ldr	r2, [r2, #16]
 800a44c:	4311      	orrs	r1, r2
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	6952      	ldr	r2, [r2, #20]
 800a452:	4311      	orrs	r1, r2
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	6992      	ldr	r2, [r2, #24]
 800a458:	430a      	orrs	r2, r1
 800a45a:	431a      	orrs	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	ffff8000 	.word	0xffff8000

0800a474 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d128      	bne.n	800a4d8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1e59      	subs	r1, r3, #1
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	3b01      	subs	r3, #1
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	4319      	orrs	r1, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	021b      	lsls	r3, r3, #8
 800a4a6:	4319      	orrs	r1, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	031b      	lsls	r3, r3, #12
 800a4b0:	4319      	orrs	r1, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	041b      	lsls	r3, r3, #16
 800a4ba:	4319      	orrs	r1, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	051b      	lsls	r3, r3, #20
 800a4c4:	4319      	orrs	r1, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	061b      	lsls	r3, r3, #24
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	609a      	str	r2, [r3, #8]
 800a4d6:	e02d      	b.n	800a534 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	4b19      	ldr	r3, [pc, #100]	; (800a544 <FMC_SDRAM_Timing_Init+0xd0>)
 800a4de:	4013      	ands	r3, r2
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	68d2      	ldr	r2, [r2, #12]
 800a4e4:	3a01      	subs	r2, #1
 800a4e6:	0311      	lsls	r1, r2, #12
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	6952      	ldr	r2, [r2, #20]
 800a4ec:	3a01      	subs	r2, #1
 800a4ee:	0512      	lsls	r2, r2, #20
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	1e59      	subs	r1, r3, #1
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	4319      	orrs	r1, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	3b01      	subs	r3, #1
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	4319      	orrs	r1, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	3b01      	subs	r3, #1
 800a520:	041b      	lsls	r3, r3, #16
 800a522:	4319      	orrs	r1, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	3b01      	subs	r3, #1
 800a52a:	061b      	lsls	r3, r3, #24
 800a52c:	430b      	orrs	r3, r1
 800a52e:	431a      	orrs	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	ff0f0fff 	.word	0xff0f0fff

0800a548 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <FMC_SDRAM_SendCommand+0x44>)
 800a55a:	4013      	ands	r3, r2
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	6811      	ldr	r1, [r2, #0]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	6852      	ldr	r2, [r2, #4]
 800a564:	4311      	orrs	r1, r2
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	6892      	ldr	r2, [r2, #8]
 800a56a:	3a01      	subs	r2, #1
 800a56c:	0152      	lsls	r2, r2, #5
 800a56e:	4311      	orrs	r1, r2
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	68d2      	ldr	r2, [r2, #12]
 800a574:	0252      	lsls	r2, r2, #9
 800a576:	430a      	orrs	r2, r1
 800a578:	431a      	orrs	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	ffc00000 	.word	0xffc00000

0800a590 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695a      	ldr	r2, [r3, #20]
 800a59e:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	0052      	lsls	r2, r2, #1
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	ffffc001 	.word	0xffffc001

0800a5c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d6:	f3ef 8305 	mrs	r3, IPSR
 800a5da:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10f      	bne.n	800a602 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e6:	607b      	str	r3, [r7, #4]
  return(result);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a5f2:	603b      	str	r3, [r7, #0]
  return(result);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <osKernelInitialize+0x3a>
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <osKernelInitialize+0x64>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d103      	bne.n	800a60a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a602:	f06f 0305 	mvn.w	r3, #5
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	e00c      	b.n	800a624 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a60a:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <osKernelInitialize+0x64>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d105      	bne.n	800a61e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <osKernelInitialize+0x64>)
 800a614:	2201      	movs	r2, #1
 800a616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e002      	b.n	800a624 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a61e:	f04f 33ff 	mov.w	r3, #4294967295
 800a622:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a624:	68fb      	ldr	r3, [r7, #12]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	200046e4 	.word	0x200046e4

0800a638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63e:	f3ef 8305 	mrs	r3, IPSR
 800a642:	60bb      	str	r3, [r7, #8]
  return(result);
 800a644:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10f      	bne.n	800a66a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64a:	f3ef 8310 	mrs	r3, PRIMASK
 800a64e:	607b      	str	r3, [r7, #4]
  return(result);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a656:	f3ef 8311 	mrs	r3, BASEPRI
 800a65a:	603b      	str	r3, [r7, #0]
  return(result);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <osKernelStart+0x3a>
 800a662:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <osKernelStart+0x68>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d103      	bne.n	800a672 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a66a:	f06f 0305 	mvn.w	r3, #5
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e010      	b.n	800a694 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a672:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <osKernelStart+0x68>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d109      	bne.n	800a68e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a67a:	f7ff ffa1 	bl	800a5c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a67e:	4b08      	ldr	r3, [pc, #32]	; (800a6a0 <osKernelStart+0x68>)
 800a680:	2202      	movs	r2, #2
 800a682:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a684:	f001 face 	bl	800bc24 <vTaskStartScheduler>
      stat = osOK;
 800a688:	2300      	movs	r3, #0
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	e002      	b.n	800a694 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a694:	68fb      	ldr	r3, [r7, #12]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200046e4 	.word	0x200046e4

0800a6a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b090      	sub	sp, #64	; 0x40
 800a6a8:	af04      	add	r7, sp, #16
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6b4:	f3ef 8305 	mrs	r3, IPSR
 800a6b8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f040 808f 	bne.w	800a7e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d105      	bne.n	800a6da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6ce:	f3ef 8311 	mrs	r3, BASEPRI
 800a6d2:	617b      	str	r3, [r7, #20]
  return(result);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <osThreadNew+0x3e>
 800a6da:	4b44      	ldr	r3, [pc, #272]	; (800a7ec <osThreadNew+0x148>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d07e      	beq.n	800a7e0 <osThreadNew+0x13c>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d07b      	beq.n	800a7e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a6ec:	2318      	movs	r3, #24
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d045      	beq.n	800a78c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <osThreadNew+0x6a>
        name = attr->name;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d008      	beq.n	800a734 <osThreadNew+0x90>
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	2b38      	cmp	r3, #56	; 0x38
 800a726:	d805      	bhi.n	800a734 <osThreadNew+0x90>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f003 0301 	and.w	r3, r3, #1
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <osThreadNew+0x94>
        return (NULL);
 800a734:	2300      	movs	r3, #0
 800a736:	e054      	b.n	800a7e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00e      	beq.n	800a76e <osThreadNew+0xca>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	2ba7      	cmp	r3, #167	; 0xa7
 800a756:	d90a      	bls.n	800a76e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d006      	beq.n	800a76e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <osThreadNew+0xca>
        mem = 1;
 800a768:	2301      	movs	r3, #1
 800a76a:	623b      	str	r3, [r7, #32]
 800a76c:	e010      	b.n	800a790 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10c      	bne.n	800a790 <osThreadNew+0xec>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d108      	bne.n	800a790 <osThreadNew+0xec>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <osThreadNew+0xec>
          mem = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	623b      	str	r3, [r7, #32]
 800a78a:	e001      	b.n	800a790 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d110      	bne.n	800a7b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a79e:	9202      	str	r2, [sp, #8]
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f001 f843 	bl	800b838 <xTaskCreateStatic>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	613b      	str	r3, [r7, #16]
 800a7b6:	e013      	b.n	800a7e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d110      	bne.n	800a7e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	f107 0310 	add.w	r3, r7, #16
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f001 f894 	bl	800b8fe <xTaskCreate>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d001      	beq.n	800a7e0 <osThreadNew+0x13c>
          hTask = NULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7e0:	693b      	ldr	r3, [r7, #16]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3730      	adds	r7, #48	; 0x30
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	200046e4 	.word	0x200046e4

0800a7f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f8:	f3ef 8305 	mrs	r3, IPSR
 800a7fc:	613b      	str	r3, [r7, #16]
  return(result);
 800a7fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10f      	bne.n	800a824 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a804:	f3ef 8310 	mrs	r3, PRIMASK
 800a808:	60fb      	str	r3, [r7, #12]
  return(result);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d105      	bne.n	800a81c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a810:	f3ef 8311 	mrs	r3, BASEPRI
 800a814:	60bb      	str	r3, [r7, #8]
  return(result);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d007      	beq.n	800a82c <osDelay+0x3c>
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <osDelay+0x58>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d103      	bne.n	800a82c <osDelay+0x3c>
    stat = osErrorISR;
 800a824:	f06f 0305 	mvn.w	r3, #5
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	e007      	b.n	800a83c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 f9be 	bl	800bbb8 <vTaskDelay>
    }
  }

  return (stat);
 800a83c:	697b      	ldr	r3, [r7, #20]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200046e4 	.word	0x200046e4

0800a84c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4a07      	ldr	r2, [pc, #28]	; (800a878 <vApplicationGetIdleTaskMemory+0x2c>)
 800a85c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	4a06      	ldr	r2, [pc, #24]	; (800a87c <vApplicationGetIdleTaskMemory+0x30>)
 800a862:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2280      	movs	r2, #128	; 0x80
 800a868:	601a      	str	r2, [r3, #0]
}
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	200046e8 	.word	0x200046e8
 800a87c:	20004790 	.word	0x20004790

0800a880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4a07      	ldr	r2, [pc, #28]	; (800a8ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	4a06      	ldr	r2, [pc, #24]	; (800a8b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a89e:	601a      	str	r2, [r3, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	20004990 	.word	0x20004990
 800a8b0:	20004a38 	.word	0x20004a38

0800a8b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f103 0208 	add.w	r2, r3, #8
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f103 0208 	add.w	r2, r3, #8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f103 0208 	add.w	r2, r3, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	601a      	str	r2, [r3, #0]
}
 800a94a:	bf00      	nop
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96c:	d103      	bne.n	800a976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	e00c      	b.n	800a990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3308      	adds	r3, #8
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e002      	b.n	800a984 <vListInsert+0x2e>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d2f6      	bcs.n	800a97e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6892      	ldr	r2, [r2, #8]
 800a9de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6852      	ldr	r2, [r2, #4]
 800a9e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d103      	bne.n	800a9fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	1e5a      	subs	r2, r3, #1
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10c      	bne.n	800aa4a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	b672      	cpsid	i
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	b662      	cpsie	i
 800aa44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800aa4a:	f002 fbaf 	bl	800d1ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa56:	68f9      	ldr	r1, [r7, #12]
 800aa58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	441a      	add	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa80:	fb01 f303 	mul.w	r3, r1, r3
 800aa84:	441a      	add	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	22ff      	movs	r2, #255	; 0xff
 800aa8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d114      	bne.n	800aaca <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01a      	beq.n	800aade <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3310      	adds	r3, #16
 800aaac:	4618      	mov	r0, r3
 800aaae:	f001 fb61 	bl	800c174 <xTaskRemoveFromEventList>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d012      	beq.n	800aade <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aab8:	4b0c      	ldr	r3, [pc, #48]	; (800aaec <xQueueGenericReset+0xd0>)
 800aaba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	e009      	b.n	800aade <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3310      	adds	r3, #16
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff fef0 	bl	800a8b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3324      	adds	r3, #36	; 0x24
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff feeb 	bl	800a8b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aade:	f002 fb99 	bl	800d214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aae2:	2301      	movs	r3, #1
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08e      	sub	sp, #56	; 0x38
 800aaf4:	af02      	add	r7, sp, #8
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10c      	bne.n	800ab1e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	b672      	cpsid	i
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	b662      	cpsie	i
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10c      	bne.n	800ab3e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	b672      	cpsid	i
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	b662      	cpsie	i
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <xQueueGenericCreateStatic+0x5a>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <xQueueGenericCreateStatic+0x5e>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <xQueueGenericCreateStatic+0x60>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	b672      	cpsid	i
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	b662      	cpsie	i
 800ab68:	623b      	str	r3, [r7, #32]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <xQueueGenericCreateStatic+0x8a>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <xQueueGenericCreateStatic+0x8e>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <xQueueGenericCreateStatic+0x90>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10c      	bne.n	800ab9e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	b672      	cpsid	i
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	b662      	cpsie	i
 800ab98:	61fb      	str	r3, [r7, #28]
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab9e:	2350      	movs	r3, #80	; 0x50
 800aba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b50      	cmp	r3, #80	; 0x50
 800aba6:	d00c      	beq.n	800abc2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	b672      	cpsid	i
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	b662      	cpsie	i
 800abbc:	61bb      	str	r3, [r7, #24]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00d      	beq.n	800abea <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	4613      	mov	r3, r2
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 f847 	bl	800ac78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abec:	4618      	mov	r0, r3
 800abee:	3730      	adds	r7, #48	; 0x30
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af02      	add	r7, sp, #8
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	4613      	mov	r3, r2
 800ac00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10c      	bne.n	800ac22 <xQueueGenericCreate+0x2e>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	b672      	cpsid	i
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	b662      	cpsie	i
 800ac1c:	613b      	str	r3, [r7, #16]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	e004      	b.n	800ac38 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3350      	adds	r3, #80	; 0x50
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fbe1 	bl	800d404 <pvPortMalloc>
 800ac42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	3350      	adds	r3, #80	; 0x50
 800ac52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac5c:	79fa      	ldrb	r2, [r7, #7]
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4613      	mov	r3, r2
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f805 	bl	800ac78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aca6:	2101      	movs	r1, #1
 800aca8:	69b8      	ldr	r0, [r7, #24]
 800acaa:	f7ff feb7 	bl	800aa1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	78fa      	ldrb	r2, [r7, #3]
 800acb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08e      	sub	sp, #56	; 0x38
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acce:	2300      	movs	r3, #0
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <xQueueGenericSend+0x36>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace0:	b672      	cpsid	i
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	b662      	cpsie	i
 800acf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <xQueueGenericSend+0x44>
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <xQueueGenericSend+0x48>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <xQueueGenericSend+0x4a>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10c      	bne.n	800ad28 <xQueueGenericSend+0x68>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	b672      	cpsid	i
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	b662      	cpsie	i
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d103      	bne.n	800ad36 <xQueueGenericSend+0x76>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d101      	bne.n	800ad3a <xQueueGenericSend+0x7a>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e000      	b.n	800ad3c <xQueueGenericSend+0x7c>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10c      	bne.n	800ad5a <xQueueGenericSend+0x9a>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	b672      	cpsid	i
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	b662      	cpsie	i
 800ad54:	623b      	str	r3, [r7, #32]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad5a:	f001 fbd5 	bl	800c508 <xTaskGetSchedulerState>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <xQueueGenericSend+0xaa>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <xQueueGenericSend+0xae>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <xQueueGenericSend+0xb0>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10c      	bne.n	800ad8e <xQueueGenericSend+0xce>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	b672      	cpsid	i
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	b662      	cpsie	i
 800ad88:	61fb      	str	r3, [r7, #28]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad8e:	f002 fa0d 	bl	800d1ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d302      	bcc.n	800ada4 <xQueueGenericSend+0xe4>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d129      	bne.n	800adf8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	68b9      	ldr	r1, [r7, #8]
 800ada8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adaa:	f000 fbd7 	bl	800b55c <prvCopyDataToQueue>
 800adae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d010      	beq.n	800adda <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	3324      	adds	r3, #36	; 0x24
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 f9d9 	bl	800c174 <xTaskRemoveFromEventList>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d013      	beq.n	800adf0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adc8:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <xQueueGenericSend+0x208>)
 800adca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	e00a      	b.n	800adf0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d007      	beq.n	800adf0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ade0:	4b39      	ldr	r3, [pc, #228]	; (800aec8 <xQueueGenericSend+0x208>)
 800ade2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800adf0:	f002 fa10 	bl	800d214 <vPortExitCritical>
				return pdPASS;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e063      	b.n	800aec0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d103      	bne.n	800ae06 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adfe:	f002 fa09 	bl	800d214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e05c      	b.n	800aec0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d106      	bne.n	800ae1a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae0c:	f107 0314 	add.w	r3, r7, #20
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 fa15 	bl	800c240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae16:	2301      	movs	r3, #1
 800ae18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae1a:	f002 f9fb 	bl	800d214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae1e:	f000 ff75 	bl	800bd0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae22:	f002 f9c3 	bl	800d1ac <vPortEnterCritical>
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae2c:	b25b      	sxtb	r3, r3
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d103      	bne.n	800ae3c <xQueueGenericSend+0x17c>
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae42:	b25b      	sxtb	r3, r3
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d103      	bne.n	800ae52 <xQueueGenericSend+0x192>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae52:	f002 f9df 	bl	800d214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae56:	1d3a      	adds	r2, r7, #4
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 fa04 	bl	800c26c <xTaskCheckForTimeOut>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d124      	bne.n	800aeb4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae6c:	f000 fc6e 	bl	800b74c <prvIsQueueFull>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d018      	beq.n	800aea8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	3310      	adds	r3, #16
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 f924 	bl	800c0cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae86:	f000 fbf9 	bl	800b67c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae8a:	f000 ff4d 	bl	800bd28 <xTaskResumeAll>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f47f af7c 	bne.w	800ad8e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ae96:	4b0c      	ldr	r3, [pc, #48]	; (800aec8 <xQueueGenericSend+0x208>)
 800ae98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	e772      	b.n	800ad8e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeaa:	f000 fbe7 	bl	800b67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeae:	f000 ff3b 	bl	800bd28 <xTaskResumeAll>
 800aeb2:	e76c      	b.n	800ad8e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aeb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb6:	f000 fbe1 	bl	800b67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeba:	f000 ff35 	bl	800bd28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3738      	adds	r7, #56	; 0x38
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08e      	sub	sp, #56	; 0x38
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10c      	bne.n	800aefe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	b672      	cpsid	i
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	b662      	cpsie	i
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <xQueueGenericSendFromISR+0x40>
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <xQueueGenericSendFromISR+0x44>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <xQueueGenericSendFromISR+0x46>
 800af10:	2300      	movs	r3, #0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10c      	bne.n	800af30 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	b672      	cpsid	i
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	b662      	cpsie	i
 800af2a:	623b      	str	r3, [r7, #32]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d103      	bne.n	800af3e <xQueueGenericSendFromISR+0x72>
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d101      	bne.n	800af42 <xQueueGenericSendFromISR+0x76>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <xQueueGenericSendFromISR+0x78>
 800af42:	2300      	movs	r3, #0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10c      	bne.n	800af62 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	b672      	cpsid	i
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	b662      	cpsie	i
 800af5c:	61fb      	str	r3, [r7, #28]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af62:	f002 fa0b 	bl	800d37c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af66:	f3ef 8211 	mrs	r2, BASEPRI
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	b672      	cpsid	i
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	b662      	cpsie	i
 800af7e:	61ba      	str	r2, [r7, #24]
 800af80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	429a      	cmp	r2, r3
 800af90:	d302      	bcc.n	800af98 <xQueueGenericSendFromISR+0xcc>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d12c      	bne.n	800aff2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa8:	f000 fad8 	bl	800b55c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d112      	bne.n	800afdc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d016      	beq.n	800afec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	3324      	adds	r3, #36	; 0x24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 f8d6 	bl	800c174 <xTaskRemoveFromEventList>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00e      	beq.n	800afec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e007      	b.n	800afec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800afdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afe0:	3301      	adds	r3, #1
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	b25a      	sxtb	r2, r3
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800afec:	2301      	movs	r3, #1
 800afee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aff0:	e001      	b.n	800aff6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b004:	4618      	mov	r0, r3
 800b006:	3738      	adds	r7, #56	; 0x38
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08e      	sub	sp, #56	; 0x38
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10c      	bne.n	800b03a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	b672      	cpsid	i
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	b662      	cpsie	i
 800b034:	623b      	str	r3, [r7, #32]
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00c      	beq.n	800b05c <xQueueGiveFromISR+0x50>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	b672      	cpsid	i
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	b662      	cpsie	i
 800b056:	61fb      	str	r3, [r7, #28]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <xQueueGiveFromISR+0x60>
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <xQueueGiveFromISR+0x64>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e000      	b.n	800b072 <xQueueGiveFromISR+0x66>
 800b070:	2300      	movs	r3, #0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10c      	bne.n	800b090 <xQueueGiveFromISR+0x84>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	b672      	cpsid	i
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	b662      	cpsie	i
 800b08a:	61bb      	str	r3, [r7, #24]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b090:	f002 f974 	bl	800d37c <vPortValidateInterruptPriority>
	__asm volatile
 800b094:	f3ef 8211 	mrs	r2, BASEPRI
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	b672      	cpsid	i
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	b662      	cpsie	i
 800b0ac:	617a      	str	r2, [r7, #20]
 800b0ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d22b      	bcs.n	800b11c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	1c5a      	adds	r2, r3, #1
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0de:	d112      	bne.n	800b106 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d016      	beq.n	800b116 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	3324      	adds	r3, #36	; 0x24
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f841 	bl	800c174 <xTaskRemoveFromEventList>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00e      	beq.n	800b116 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00b      	beq.n	800b116 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2201      	movs	r2, #1
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	e007      	b.n	800b116 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10a:	3301      	adds	r3, #1
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	b25a      	sxtb	r2, r3
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b116:	2301      	movs	r3, #1
 800b118:	637b      	str	r3, [r7, #52]	; 0x34
 800b11a:	e001      	b.n	800b120 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f383 8811 	msr	BASEPRI, r3
}
 800b12a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3738      	adds	r7, #56	; 0x38
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08c      	sub	sp, #48	; 0x30
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10c      	bne.n	800b16c <xQueueReceive+0x34>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	b672      	cpsid	i
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	b662      	cpsie	i
 800b166:	623b      	str	r3, [r7, #32]
}
 800b168:	bf00      	nop
 800b16a:	e7fe      	b.n	800b16a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d103      	bne.n	800b17a <xQueueReceive+0x42>
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <xQueueReceive+0x46>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <xQueueReceive+0x48>
 800b17e:	2300      	movs	r3, #0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10c      	bne.n	800b19e <xQueueReceive+0x66>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	b672      	cpsid	i
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	b662      	cpsie	i
 800b198:	61fb      	str	r3, [r7, #28]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b19e:	f001 f9b3 	bl	800c508 <xTaskGetSchedulerState>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <xQueueReceive+0x76>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <xQueueReceive+0x7a>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e000      	b.n	800b1b4 <xQueueReceive+0x7c>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10c      	bne.n	800b1d2 <xQueueReceive+0x9a>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	b672      	cpsid	i
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	b662      	cpsie	i
 800b1cc:	61bb      	str	r3, [r7, #24]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1d2:	f001 ffeb 	bl	800d1ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01f      	beq.n	800b222 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e6:	f000 fa23 	bl	800b630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	1e5a      	subs	r2, r3, #1
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00f      	beq.n	800b21a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	3310      	adds	r3, #16
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 ffb8 	bl	800c174 <xTaskRemoveFromEventList>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b20a:	4b3d      	ldr	r3, [pc, #244]	; (800b300 <xQueueReceive+0x1c8>)
 800b20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b21a:	f001 fffb 	bl	800d214 <vPortExitCritical>
				return pdPASS;
 800b21e:	2301      	movs	r3, #1
 800b220:	e069      	b.n	800b2f6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d103      	bne.n	800b230 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b228:	f001 fff4 	bl	800d214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b22c:	2300      	movs	r3, #0
 800b22e:	e062      	b.n	800b2f6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b236:	f107 0310 	add.w	r3, r7, #16
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 f800 	bl	800c240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b244:	f001 ffe6 	bl	800d214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b248:	f000 fd60 	bl	800bd0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b24c:	f001 ffae 	bl	800d1ac <vPortEnterCritical>
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b256:	b25b      	sxtb	r3, r3
 800b258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25c:	d103      	bne.n	800b266 <xQueueReceive+0x12e>
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b26c:	b25b      	sxtb	r3, r3
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b272:	d103      	bne.n	800b27c <xQueueReceive+0x144>
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b27c:	f001 ffca 	bl	800d214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b280:	1d3a      	adds	r2, r7, #4
 800b282:	f107 0310 	add.w	r3, r7, #16
 800b286:	4611      	mov	r1, r2
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 ffef 	bl	800c26c <xTaskCheckForTimeOut>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d123      	bne.n	800b2dc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b296:	f000 fa43 	bl	800b720 <prvIsQueueEmpty>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d017      	beq.n	800b2d0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	3324      	adds	r3, #36	; 0x24
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 ff0f 	bl	800c0cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b0:	f000 f9e4 	bl	800b67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2b4:	f000 fd38 	bl	800bd28 <xTaskResumeAll>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d189      	bne.n	800b1d2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b2be:	4b10      	ldr	r3, [pc, #64]	; (800b300 <xQueueReceive+0x1c8>)
 800b2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	e780      	b.n	800b1d2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f000 f9d3 	bl	800b67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2d6:	f000 fd27 	bl	800bd28 <xTaskResumeAll>
 800b2da:	e77a      	b.n	800b1d2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2de:	f000 f9cd 	bl	800b67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2e2:	f000 fd21 	bl	800bd28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e8:	f000 fa1a 	bl	800b720 <prvIsQueueEmpty>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f43f af6f 	beq.w	800b1d2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3730      	adds	r7, #48	; 0x30
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	e000ed04 	.word	0xe000ed04

0800b304 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08e      	sub	sp, #56	; 0x38
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b30e:	2300      	movs	r3, #0
 800b310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b316:	2300      	movs	r3, #0
 800b318:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10c      	bne.n	800b33a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	b672      	cpsid	i
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	b662      	cpsie	i
 800b334:	623b      	str	r3, [r7, #32]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00c      	beq.n	800b35c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	b672      	cpsid	i
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	b662      	cpsie	i
 800b356:	61fb      	str	r3, [r7, #28]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b35c:	f001 f8d4 	bl	800c508 <xTaskGetSchedulerState>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <xQueueSemaphoreTake+0x68>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <xQueueSemaphoreTake+0x6c>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <xQueueSemaphoreTake+0x6e>
 800b370:	2300      	movs	r3, #0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10c      	bne.n	800b390 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	b672      	cpsid	i
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	b662      	cpsie	i
 800b38a:	61bb      	str	r3, [r7, #24]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b390:	f001 ff0c 	bl	800d1ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d024      	beq.n	800b3ea <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	1e5a      	subs	r2, r3, #1
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b3b0:	f001 fa28 	bl	800c804 <pvTaskIncrementMutexHeldCount>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00f      	beq.n	800b3e2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	3310      	adds	r3, #16
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fed4 	bl	800c174 <xTaskRemoveFromEventList>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3d2:	4b55      	ldr	r3, [pc, #340]	; (800b528 <xQueueSemaphoreTake+0x224>)
 800b3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3e2:	f001 ff17 	bl	800d214 <vPortExitCritical>
				return pdPASS;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e099      	b.n	800b51e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d113      	bne.n	800b418 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00c      	beq.n	800b410 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	b672      	cpsid	i
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	b662      	cpsie	i
 800b40a:	617b      	str	r3, [r7, #20]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b410:	f001 ff00 	bl	800d214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b414:	2300      	movs	r3, #0
 800b416:	e082      	b.n	800b51e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b41e:	f107 030c 	add.w	r3, r7, #12
 800b422:	4618      	mov	r0, r3
 800b424:	f000 ff0c 	bl	800c240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b428:	2301      	movs	r3, #1
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b42c:	f001 fef2 	bl	800d214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b430:	f000 fc6c 	bl	800bd0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b434:	f001 feba 	bl	800d1ac <vPortEnterCritical>
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b444:	d103      	bne.n	800b44e <xQueueSemaphoreTake+0x14a>
 800b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b454:	b25b      	sxtb	r3, r3
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d103      	bne.n	800b464 <xQueueSemaphoreTake+0x160>
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b464:	f001 fed6 	bl	800d214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b468:	463a      	mov	r2, r7
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f000 fefb 	bl	800c26c <xTaskCheckForTimeOut>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d132      	bne.n	800b4e2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b47c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b47e:	f000 f94f 	bl	800b720 <prvIsQueueEmpty>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d026      	beq.n	800b4d6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d109      	bne.n	800b4a4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b490:	f001 fe8c 	bl	800d1ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 f853 	bl	800c544 <xTaskPriorityInherit>
 800b49e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b4a0:	f001 feb8 	bl	800d214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	3324      	adds	r3, #36	; 0x24
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fe0d 	bl	800c0cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4b4:	f000 f8e2 	bl	800b67c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4b8:	f000 fc36 	bl	800bd28 <xTaskResumeAll>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f47f af66 	bne.w	800b390 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b4c4:	4b18      	ldr	r3, [pc, #96]	; (800b528 <xQueueSemaphoreTake+0x224>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	e75c      	b.n	800b390 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d8:	f000 f8d0 	bl	800b67c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4dc:	f000 fc24 	bl	800bd28 <xTaskResumeAll>
 800b4e0:	e756      	b.n	800b390 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4e4:	f000 f8ca 	bl	800b67c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4e8:	f000 fc1e 	bl	800bd28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ee:	f000 f917 	bl	800b720 <prvIsQueueEmpty>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f43f af4b 	beq.w	800b390 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00d      	beq.n	800b51c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b500:	f001 fe54 	bl	800d1ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b506:	f000 f811 	bl	800b52c <prvGetDisinheritPriorityAfterTimeout>
 800b50a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b512:	4618      	mov	r0, r3
 800b514:	f001 f8f0 	bl	800c6f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b518:	f001 fe7c 	bl	800d214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b51c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3738      	adds	r7, #56	; 0x38
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	e000ed04 	.word	0xe000ed04

0800b52c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d006      	beq.n	800b54a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e001      	b.n	800b54e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b54e:	68fb      	ldr	r3, [r7, #12]
	}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10d      	bne.n	800b596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d14d      	bne.n	800b61e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	4618      	mov	r0, r3
 800b588:	f001 f844 	bl	800c614 <xTaskPriorityDisinherit>
 800b58c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	609a      	str	r2, [r3, #8]
 800b594:	e043      	b.n	800b61e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d119      	bne.n	800b5d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6858      	ldr	r0, [r3, #4]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	f002 fb53 	bl	800dc52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d32b      	bcc.n	800b61e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	605a      	str	r2, [r3, #4]
 800b5ce:	e026      	b.n	800b61e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	68d8      	ldr	r0, [r3, #12]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	461a      	mov	r2, r3
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	f002 fb39 	bl	800dc52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68da      	ldr	r2, [r3, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	441a      	add	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d207      	bcs.n	800b60c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b604:	425b      	negs	r3, r3
 800b606:	441a      	add	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d105      	bne.n	800b61e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b626:	697b      	ldr	r3, [r7, #20]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d018      	beq.n	800b674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68da      	ldr	r2, [r3, #12]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	441a      	add	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d303      	bcc.n	800b664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68d9      	ldr	r1, [r3, #12]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66c:	461a      	mov	r2, r3
 800b66e:	6838      	ldr	r0, [r7, #0]
 800b670:	f002 faef 	bl	800dc52 <memcpy>
	}
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b684:	f001 fd92 	bl	800d1ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b68e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b690:	e011      	b.n	800b6b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	2b00      	cmp	r3, #0
 800b698:	d012      	beq.n	800b6c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3324      	adds	r3, #36	; 0x24
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f000 fd68 	bl	800c174 <xTaskRemoveFromEventList>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6aa:	f000 fe45 	bl	800c338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dce9      	bgt.n	800b692 <prvUnlockQueue+0x16>
 800b6be:	e000      	b.n	800b6c2 <prvUnlockQueue+0x46>
					break;
 800b6c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6ca:	f001 fda3 	bl	800d214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6ce:	f001 fd6d 	bl	800d1ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6da:	e011      	b.n	800b700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d012      	beq.n	800b70a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3310      	adds	r3, #16
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fd43 	bl	800c174 <xTaskRemoveFromEventList>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6f4:	f000 fe20 	bl	800c338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b704:	2b00      	cmp	r3, #0
 800b706:	dce9      	bgt.n	800b6dc <prvUnlockQueue+0x60>
 800b708:	e000      	b.n	800b70c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b70a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	22ff      	movs	r2, #255	; 0xff
 800b710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b714:	f001 fd7e 	bl	800d214 <vPortExitCritical>
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b728:	f001 fd40 	bl	800d1ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b734:	2301      	movs	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e001      	b.n	800b73e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b73e:	f001 fd69 	bl	800d214 <vPortExitCritical>

	return xReturn;
 800b742:	68fb      	ldr	r3, [r7, #12]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b754:	f001 fd2a 	bl	800d1ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b760:	429a      	cmp	r2, r3
 800b762:	d102      	bne.n	800b76a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b764:	2301      	movs	r3, #1
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	e001      	b.n	800b76e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b76e:	f001 fd51 	bl	800d214 <vPortExitCritical>

	return xReturn;
 800b772:	68fb      	ldr	r3, [r7, #12]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e014      	b.n	800b7b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b78c:	4a0f      	ldr	r2, [pc, #60]	; (800b7cc <vQueueAddToRegistry+0x50>)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10b      	bne.n	800b7b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b798:	490c      	ldr	r1, [pc, #48]	; (800b7cc <vQueueAddToRegistry+0x50>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7a2:	4a0a      	ldr	r2, [pc, #40]	; (800b7cc <vQueueAddToRegistry+0x50>)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	4413      	add	r3, r2
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b7ae:	e006      	b.n	800b7be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b07      	cmp	r3, #7
 800b7ba:	d9e7      	bls.n	800b78c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b7bc:	bf00      	nop
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	20004e38 	.word	0x20004e38

0800b7d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7e0:	f001 fce4 	bl	800d1ac <vPortEnterCritical>
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7ea:	b25b      	sxtb	r3, r3
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d103      	bne.n	800b7fa <vQueueWaitForMessageRestricted+0x2a>
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b800:	b25b      	sxtb	r3, r3
 800b802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b806:	d103      	bne.n	800b810 <vQueueWaitForMessageRestricted+0x40>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b810:	f001 fd00 	bl	800d214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	3324      	adds	r3, #36	; 0x24
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fc77 	bl	800c118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b82a:	6978      	ldr	r0, [r7, #20]
 800b82c:	f7ff ff26 	bl	800b67c <prvUnlockQueue>
	}
 800b830:	bf00      	nop
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08e      	sub	sp, #56	; 0x38
 800b83c:	af04      	add	r7, sp, #16
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10c      	bne.n	800b866 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	b672      	cpsid	i
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	b662      	cpsie	i
 800b860:	623b      	str	r3, [r7, #32]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10c      	bne.n	800b886 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	b672      	cpsid	i
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	b662      	cpsie	i
 800b880:	61fb      	str	r3, [r7, #28]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b886:	23a8      	movs	r3, #168	; 0xa8
 800b888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2ba8      	cmp	r3, #168	; 0xa8
 800b88e:	d00c      	beq.n	800b8aa <xTaskCreateStatic+0x72>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	b672      	cpsid	i
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	b662      	cpsie	i
 800b8a4:	61bb      	str	r3, [r7, #24]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01e      	beq.n	800b8f0 <xTaskCreateStatic+0xb8>
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01b      	beq.n	800b8f0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9303      	str	r3, [sp, #12]
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	9302      	str	r3, [sp, #8]
 800b8d2:	f107 0314 	add.w	r3, r7, #20
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 f850 	bl	800b988 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8ea:	f000 f8f5 	bl	800bad8 <prvAddNewTaskToReadyList>
 800b8ee:	e001      	b.n	800b8f4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8f4:	697b      	ldr	r3, [r7, #20]
	}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3728      	adds	r7, #40	; 0x28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b08c      	sub	sp, #48	; 0x30
 800b902:	af04      	add	r7, sp, #16
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	603b      	str	r3, [r7, #0]
 800b90a:	4613      	mov	r3, r2
 800b90c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4618      	mov	r0, r3
 800b914:	f001 fd76 	bl	800d404 <pvPortMalloc>
 800b918:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00e      	beq.n	800b93e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b920:	20a8      	movs	r0, #168	; 0xa8
 800b922:	f001 fd6f 	bl	800d404 <pvPortMalloc>
 800b926:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
 800b934:	e005      	b.n	800b942 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f001 fe2e 	bl	800d598 <vPortFree>
 800b93c:	e001      	b.n	800b942 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d017      	beq.n	800b978 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b950:	88fa      	ldrh	r2, [r7, #6]
 800b952:	2300      	movs	r3, #0
 800b954:	9303      	str	r3, [sp, #12]
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68b9      	ldr	r1, [r7, #8]
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 f80e 	bl	800b988 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b96c:	69f8      	ldr	r0, [r7, #28]
 800b96e:	f000 f8b3 	bl	800bad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b972:	2301      	movs	r3, #1
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	e002      	b.n	800b97e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b978:	f04f 33ff 	mov.w	r3, #4294967295
 800b97c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b97e:	69bb      	ldr	r3, [r7, #24]
	}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	461a      	mov	r2, r3
 800b9a0:	21a5      	movs	r1, #165	; 0xa5
 800b9a2:	f002 f884 	bl	800daae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9b0:	440b      	add	r3, r1
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	f023 0307 	bic.w	r3, r3, #7
 800b9be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00c      	beq.n	800b9e4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	b672      	cpsid	i
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	b662      	cpsie	i
 800b9de:	617b      	str	r3, [r7, #20]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d01f      	beq.n	800ba2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	e012      	b.n	800ba16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	7819      	ldrb	r1, [r3, #0]
 800b9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	3334      	adds	r3, #52	; 0x34
 800ba00:	460a      	mov	r2, r1
 800ba02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	4413      	add	r3, r2
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d006      	beq.n	800ba1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	3301      	adds	r3, #1
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	2b0f      	cmp	r3, #15
 800ba1a:	d9e9      	bls.n	800b9f0 <prvInitialiseNewTask+0x68>
 800ba1c:	e000      	b.n	800ba20 <prvInitialiseNewTask+0x98>
			{
				break;
 800ba1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba28:	e003      	b.n	800ba32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	2b37      	cmp	r3, #55	; 0x37
 800ba36:	d901      	bls.n	800ba3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba38:	2337      	movs	r3, #55	; 0x37
 800ba3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe ff4e 	bl	800a8f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	3318      	adds	r3, #24
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe ff49 	bl	800a8f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	3354      	adds	r3, #84	; 0x54
 800ba8c:	224c      	movs	r2, #76	; 0x4c
 800ba8e:	2100      	movs	r1, #0
 800ba90:	4618      	mov	r0, r3
 800ba92:	f002 f80c 	bl	800daae <memset>
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	4a0c      	ldr	r2, [pc, #48]	; (800bacc <prvInitialiseNewTask+0x144>)
 800ba9a:	659a      	str	r2, [r3, #88]	; 0x58
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	4a0c      	ldr	r2, [pc, #48]	; (800bad0 <prvInitialiseNewTask+0x148>)
 800baa0:	65da      	str	r2, [r3, #92]	; 0x5c
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	4a0b      	ldr	r2, [pc, #44]	; (800bad4 <prvInitialiseNewTask+0x14c>)
 800baa6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	69b8      	ldr	r0, [r7, #24]
 800baae:	f001 fa6d 	bl	800cf8c <pxPortInitialiseStack>
 800bab2:	4602      	mov	r2, r0
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bac4:	bf00      	nop
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	200090c4 	.word	0x200090c4
 800bad0:	2000912c 	.word	0x2000912c
 800bad4:	20009194 	.word	0x20009194

0800bad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bae0:	f001 fb64 	bl	800d1ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bae4:	4b2d      	ldr	r3, [pc, #180]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a2c      	ldr	r2, [pc, #176]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800baec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baee:	4b2c      	ldr	r3, [pc, #176]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baf6:	4a2a      	ldr	r2, [pc, #168]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bafc:	4b27      	ldr	r3, [pc, #156]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb04:	f000 fc3c 	bl	800c380 <prvInitialiseTaskLists>
 800bb08:	e00d      	b.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb0a:	4b26      	ldr	r3, [pc, #152]	; (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d109      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb12:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d802      	bhi.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb20:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb26:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb30:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	; (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d903      	bls.n	800bb4c <prvAddNewTaskToReadyList+0x74>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4a18      	ldr	r2, [pc, #96]	; (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4a15      	ldr	r2, [pc, #84]	; (800bbb0 <prvAddNewTaskToReadyList+0xd8>)
 800bb5a:	441a      	add	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7fe fed3 	bl	800a90e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb68:	f001 fb54 	bl	800d214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d207      	bcs.n	800bb92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <prvAddNewTaskToReadyList+0xdc>)
 800bb84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	2000534c 	.word	0x2000534c
 800bba0:	20004e78 	.word	0x20004e78
 800bba4:	20005358 	.word	0x20005358
 800bba8:	20005368 	.word	0x20005368
 800bbac:	20005354 	.word	0x20005354
 800bbb0:	20004e7c 	.word	0x20004e7c
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d019      	beq.n	800bbfe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbca:	4b14      	ldr	r3, [pc, #80]	; (800bc1c <vTaskDelay+0x64>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00c      	beq.n	800bbec <vTaskDelay+0x34>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	b672      	cpsid	i
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	b662      	cpsie	i
 800bbe6:	60bb      	str	r3, [r7, #8]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bbec:	f000 f88e 	bl	800bd0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fe1a 	bl	800c82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbf8:	f000 f896 	bl	800bd28 <xTaskResumeAll>
 800bbfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d107      	bne.n	800bc14 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bc04:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <vTaskDelay+0x68>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20005374 	.word	0x20005374
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc32:	463a      	mov	r2, r7
 800bc34:	1d39      	adds	r1, r7, #4
 800bc36:	f107 0308 	add.w	r3, r7, #8
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fe06 	bl	800a84c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	9202      	str	r2, [sp, #8]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	460a      	mov	r2, r1
 800bc52:	4926      	ldr	r1, [pc, #152]	; (800bcec <vTaskStartScheduler+0xc8>)
 800bc54:	4826      	ldr	r0, [pc, #152]	; (800bcf0 <vTaskStartScheduler+0xcc>)
 800bc56:	f7ff fdef 	bl	800b838 <xTaskCreateStatic>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4a25      	ldr	r2, [pc, #148]	; (800bcf4 <vTaskStartScheduler+0xd0>)
 800bc5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc60:	4b24      	ldr	r3, [pc, #144]	; (800bcf4 <vTaskStartScheduler+0xd0>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e001      	b.n	800bc72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d102      	bne.n	800bc7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc78:	f000 fe2c 	bl	800c8d4 <xTimerCreateTimerTask>
 800bc7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d11d      	bne.n	800bcc0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	b672      	cpsid	i
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	b662      	cpsie	i
 800bc98:	613b      	str	r3, [r7, #16]
}
 800bc9a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc9c:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <vTaskStartScheduler+0xd4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3354      	adds	r3, #84	; 0x54
 800bca2:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <vTaskStartScheduler+0xd8>)
 800bca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bca6:	4b16      	ldr	r3, [pc, #88]	; (800bd00 <vTaskStartScheduler+0xdc>)
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <vTaskStartScheduler+0xe0>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcb4:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <vTaskStartScheduler+0xe4>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bcba:	f001 f9f9 	bl	800d0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcbe:	e010      	b.n	800bce2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc6:	d10c      	bne.n	800bce2 <vTaskStartScheduler+0xbe>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	b672      	cpsid	i
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	b662      	cpsie	i
 800bcdc:	60fb      	str	r3, [r7, #12]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <vTaskStartScheduler+0xbc>
}
 800bce2:	bf00      	nop
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	0800e92c 	.word	0x0800e92c
 800bcf0:	0800c351 	.word	0x0800c351
 800bcf4:	20005370 	.word	0x20005370
 800bcf8:	20004e78 	.word	0x20004e78
 800bcfc:	200000a0 	.word	0x200000a0
 800bd00:	2000536c 	.word	0x2000536c
 800bd04:	20005358 	.word	0x20005358
 800bd08:	20005350 	.word	0x20005350

0800bd0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <vTaskSuspendAll+0x18>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3301      	adds	r3, #1
 800bd16:	4a03      	ldr	r2, [pc, #12]	; (800bd24 <vTaskSuspendAll+0x18>)
 800bd18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bd1a:	bf00      	nop
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	20005374 	.word	0x20005374

0800bd28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd36:	4b43      	ldr	r3, [pc, #268]	; (800be44 <xTaskResumeAll+0x11c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10c      	bne.n	800bd58 <xTaskResumeAll+0x30>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	b672      	cpsid	i
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	b662      	cpsie	i
 800bd52:	603b      	str	r3, [r7, #0]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd58:	f001 fa28 	bl	800d1ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd5c:	4b39      	ldr	r3, [pc, #228]	; (800be44 <xTaskResumeAll+0x11c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	4a38      	ldr	r2, [pc, #224]	; (800be44 <xTaskResumeAll+0x11c>)
 800bd64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd66:	4b37      	ldr	r3, [pc, #220]	; (800be44 <xTaskResumeAll+0x11c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d162      	bne.n	800be34 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd6e:	4b36      	ldr	r3, [pc, #216]	; (800be48 <xTaskResumeAll+0x120>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d05e      	beq.n	800be34 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd76:	e02f      	b.n	800bdd8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	4b34      	ldr	r3, [pc, #208]	; (800be4c <xTaskResumeAll+0x124>)
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3318      	adds	r3, #24
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fe1f 	bl	800a9c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe fe1a 	bl	800a9c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd98:	4b2d      	ldr	r3, [pc, #180]	; (800be50 <xTaskResumeAll+0x128>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d903      	bls.n	800bda8 <xTaskResumeAll+0x80>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <xTaskResumeAll+0x128>)
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	4613      	mov	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4a27      	ldr	r2, [pc, #156]	; (800be54 <xTaskResumeAll+0x12c>)
 800bdb6:	441a      	add	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3304      	adds	r3, #4
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	f7fe fda5 	bl	800a90e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc8:	4b23      	ldr	r3, [pc, #140]	; (800be58 <xTaskResumeAll+0x130>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d302      	bcc.n	800bdd8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bdd2:	4b22      	ldr	r3, [pc, #136]	; (800be5c <xTaskResumeAll+0x134>)
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <xTaskResumeAll+0x124>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1cb      	bne.n	800bd78 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bde6:	f000 fb6f 	bl	800c4c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bdea:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <xTaskResumeAll+0x138>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d010      	beq.n	800be18 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdf6:	f000 f847 	bl	800be88 <xTaskIncrementTick>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800be00:	4b16      	ldr	r3, [pc, #88]	; (800be5c <xTaskResumeAll+0x134>)
 800be02:	2201      	movs	r2, #1
 800be04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3b01      	subs	r3, #1
 800be0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f1      	bne.n	800bdf6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800be12:	4b13      	ldr	r3, [pc, #76]	; (800be60 <xTaskResumeAll+0x138>)
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be18:	4b10      	ldr	r3, [pc, #64]	; (800be5c <xTaskResumeAll+0x134>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d009      	beq.n	800be34 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be20:	2301      	movs	r3, #1
 800be22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be24:	4b0f      	ldr	r3, [pc, #60]	; (800be64 <xTaskResumeAll+0x13c>)
 800be26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be34:	f001 f9ee 	bl	800d214 <vPortExitCritical>

	return xAlreadyYielded;
 800be38:	68bb      	ldr	r3, [r7, #8]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20005374 	.word	0x20005374
 800be48:	2000534c 	.word	0x2000534c
 800be4c:	2000530c 	.word	0x2000530c
 800be50:	20005354 	.word	0x20005354
 800be54:	20004e7c 	.word	0x20004e7c
 800be58:	20004e78 	.word	0x20004e78
 800be5c:	20005360 	.word	0x20005360
 800be60:	2000535c 	.word	0x2000535c
 800be64:	e000ed04 	.word	0xe000ed04

0800be68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <xTaskGetTickCount+0x1c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be74:	687b      	ldr	r3, [r7, #4]
}
 800be76:	4618      	mov	r0, r3
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	20005350 	.word	0x20005350

0800be88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be92:	4b50      	ldr	r3, [pc, #320]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 808b 	bne.w	800bfb2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be9c:	4b4e      	ldr	r3, [pc, #312]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bea4:	4a4c      	ldr	r2, [pc, #304]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d122      	bne.n	800bef6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800beb0:	4b4a      	ldr	r3, [pc, #296]	; (800bfdc <xTaskIncrementTick+0x154>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00c      	beq.n	800bed4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	b672      	cpsid	i
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	b662      	cpsie	i
 800bece:	603b      	str	r3, [r7, #0]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <xTaskIncrementTick+0x4a>
 800bed4:	4b41      	ldr	r3, [pc, #260]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	4b41      	ldr	r3, [pc, #260]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a3f      	ldr	r2, [pc, #252]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	4a3f      	ldr	r2, [pc, #252]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	4a3d      	ldr	r2, [pc, #244]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	f000 fae9 	bl	800c4c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bef6:	4b3c      	ldr	r3, [pc, #240]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	429a      	cmp	r2, r3
 800befe:	d349      	bcc.n	800bf94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf00:	4b36      	ldr	r3, [pc, #216]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d104      	bne.n	800bf14 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf0a:	4b37      	ldr	r3, [pc, #220]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf10:	601a      	str	r2, [r3, #0]
					break;
 800bf12:	e03f      	b.n	800bf94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf14:	4b31      	ldr	r3, [pc, #196]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d203      	bcs.n	800bf34 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf2c:	4a2e      	ldr	r2, [pc, #184]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf32:	e02f      	b.n	800bf94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe fd45 	bl	800a9c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	3318      	adds	r3, #24
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fd3c 	bl	800a9c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf54:	4b25      	ldr	r3, [pc, #148]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d903      	bls.n	800bf64 <xTaskIncrementTick+0xdc>
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	4a22      	ldr	r2, [pc, #136]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4a1f      	ldr	r2, [pc, #124]	; (800bff0 <xTaskIncrementTick+0x168>)
 800bf72:	441a      	add	r2, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	f7fe fcc7 	bl	800a90e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf84:	4b1b      	ldr	r3, [pc, #108]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d3b8      	bcc.n	800bf00 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf92:	e7b5      	b.n	800bf00 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf94:	4b17      	ldr	r3, [pc, #92]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9a:	4915      	ldr	r1, [pc, #84]	; (800bff0 <xTaskIncrementTick+0x168>)
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	440b      	add	r3, r1
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d907      	bls.n	800bfbc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bfac:	2301      	movs	r3, #1
 800bfae:	617b      	str	r3, [r7, #20]
 800bfb0:	e004      	b.n	800bfbc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bfb2:	4b11      	ldr	r3, [pc, #68]	; (800bff8 <xTaskIncrementTick+0x170>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	4a0f      	ldr	r2, [pc, #60]	; (800bff8 <xTaskIncrementTick+0x170>)
 800bfba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bfbc:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <xTaskIncrementTick+0x174>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bfc8:	697b      	ldr	r3, [r7, #20]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20005374 	.word	0x20005374
 800bfd8:	20005350 	.word	0x20005350
 800bfdc:	20005304 	.word	0x20005304
 800bfe0:	20005308 	.word	0x20005308
 800bfe4:	20005364 	.word	0x20005364
 800bfe8:	2000536c 	.word	0x2000536c
 800bfec:	20005354 	.word	0x20005354
 800bff0:	20004e7c 	.word	0x20004e7c
 800bff4:	20004e78 	.word	0x20004e78
 800bff8:	2000535c 	.word	0x2000535c
 800bffc:	20005360 	.word	0x20005360

0800c000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c006:	4b2b      	ldr	r3, [pc, #172]	; (800c0b4 <vTaskSwitchContext+0xb4>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c00e:	4b2a      	ldr	r3, [pc, #168]	; (800c0b8 <vTaskSwitchContext+0xb8>)
 800c010:	2201      	movs	r2, #1
 800c012:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c014:	e048      	b.n	800c0a8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800c016:	4b28      	ldr	r3, [pc, #160]	; (800c0b8 <vTaskSwitchContext+0xb8>)
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	4b27      	ldr	r3, [pc, #156]	; (800c0bc <vTaskSwitchContext+0xbc>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	e012      	b.n	800c04a <vTaskSwitchContext+0x4a>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10c      	bne.n	800c044 <vTaskSwitchContext+0x44>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	b672      	cpsid	i
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	b662      	cpsie	i
 800c03e:	607b      	str	r3, [r7, #4]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <vTaskSwitchContext+0x42>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3b01      	subs	r3, #1
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	491d      	ldr	r1, [pc, #116]	; (800c0c0 <vTaskSwitchContext+0xc0>)
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0e2      	beq.n	800c024 <vTaskSwitchContext+0x24>
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4a15      	ldr	r2, [pc, #84]	; (800c0c0 <vTaskSwitchContext+0xc0>)
 800c06a:	4413      	add	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	605a      	str	r2, [r3, #4]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3308      	adds	r3, #8
 800c080:	429a      	cmp	r2, r3
 800c082:	d104      	bne.n	800c08e <vTaskSwitchContext+0x8e>
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	685a      	ldr	r2, [r3, #4]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	605a      	str	r2, [r3, #4]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	4a0b      	ldr	r2, [pc, #44]	; (800c0c4 <vTaskSwitchContext+0xc4>)
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	4a08      	ldr	r2, [pc, #32]	; (800c0bc <vTaskSwitchContext+0xbc>)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c09e:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <vTaskSwitchContext+0xc4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3354      	adds	r3, #84	; 0x54
 800c0a4:	4a08      	ldr	r2, [pc, #32]	; (800c0c8 <vTaskSwitchContext+0xc8>)
 800c0a6:	6013      	str	r3, [r2, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	20005374 	.word	0x20005374
 800c0b8:	20005360 	.word	0x20005360
 800c0bc:	20005354 	.word	0x20005354
 800c0c0:	20004e7c 	.word	0x20004e7c
 800c0c4:	20004e78 	.word	0x20004e78
 800c0c8:	200000a0 	.word	0x200000a0

0800c0cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10c      	bne.n	800c0f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	b672      	cpsid	i
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	b662      	cpsie	i
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0f6:	4b07      	ldr	r3, [pc, #28]	; (800c114 <vTaskPlaceOnEventList+0x48>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3318      	adds	r3, #24
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7fe fc29 	bl	800a956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c104:	2101      	movs	r1, #1
 800c106:	6838      	ldr	r0, [r7, #0]
 800c108:	f000 fb90 	bl	800c82c <prvAddCurrentTaskToDelayedList>
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	20004e78 	.word	0x20004e78

0800c118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10c      	bne.n	800c144 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	b672      	cpsid	i
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	b662      	cpsie	i
 800c13e:	617b      	str	r3, [r7, #20]
}
 800c140:	bf00      	nop
 800c142:	e7fe      	b.n	800c142 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <vTaskPlaceOnEventListRestricted+0x58>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3318      	adds	r3, #24
 800c14a:	4619      	mov	r1, r3
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7fe fbde 	bl	800a90e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c158:	f04f 33ff 	mov.w	r3, #4294967295
 800c15c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	68b8      	ldr	r0, [r7, #8]
 800c162:	f000 fb63 	bl	800c82c <prvAddCurrentTaskToDelayedList>
	}
 800c166:	bf00      	nop
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20004e78 	.word	0x20004e78

0800c174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10c      	bne.n	800c1a4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	b672      	cpsid	i
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	b662      	cpsie	i
 800c19e:	60fb      	str	r3, [r7, #12]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	3318      	adds	r3, #24
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fc0d 	bl	800a9c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1ae:	4b1e      	ldr	r3, [pc, #120]	; (800c228 <xTaskRemoveFromEventList+0xb4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d11d      	bne.n	800c1f2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fc04 	bl	800a9c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c4:	4b19      	ldr	r3, [pc, #100]	; (800c22c <xTaskRemoveFromEventList+0xb8>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d903      	bls.n	800c1d4 <xTaskRemoveFromEventList+0x60>
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	4a16      	ldr	r2, [pc, #88]	; (800c22c <xTaskRemoveFromEventList+0xb8>)
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4a13      	ldr	r2, [pc, #76]	; (800c230 <xTaskRemoveFromEventList+0xbc>)
 800c1e2:	441a      	add	r2, r3
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7fe fb8f 	bl	800a90e <vListInsertEnd>
 800c1f0:	e005      	b.n	800c1fe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	3318      	adds	r3, #24
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	480e      	ldr	r0, [pc, #56]	; (800c234 <xTaskRemoveFromEventList+0xc0>)
 800c1fa:	f7fe fb88 	bl	800a90e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <xTaskRemoveFromEventList+0xc4>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c208:	429a      	cmp	r2, r3
 800c20a:	d905      	bls.n	800c218 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c20c:	2301      	movs	r3, #1
 800c20e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c210:	4b0a      	ldr	r3, [pc, #40]	; (800c23c <xTaskRemoveFromEventList+0xc8>)
 800c212:	2201      	movs	r2, #1
 800c214:	601a      	str	r2, [r3, #0]
 800c216:	e001      	b.n	800c21c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c21c:	697b      	ldr	r3, [r7, #20]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20005374 	.word	0x20005374
 800c22c:	20005354 	.word	0x20005354
 800c230:	20004e7c 	.word	0x20004e7c
 800c234:	2000530c 	.word	0x2000530c
 800c238:	20004e78 	.word	0x20004e78
 800c23c:	20005360 	.word	0x20005360

0800c240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c248:	4b06      	ldr	r3, [pc, #24]	; (800c264 <vTaskInternalSetTimeOutState+0x24>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <vTaskInternalSetTimeOutState+0x28>)
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	605a      	str	r2, [r3, #4]
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	20005364 	.word	0x20005364
 800c268:	20005350 	.word	0x20005350

0800c26c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10c      	bne.n	800c296 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	b672      	cpsid	i
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	b662      	cpsie	i
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10c      	bne.n	800c2b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	b672      	cpsid	i
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	b662      	cpsie	i
 800c2b0:	60fb      	str	r3, [r7, #12]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c2b6:	f000 ff79 	bl	800d1ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2ba:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <xTaskCheckForTimeOut+0xc4>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d102      	bne.n	800c2da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61fb      	str	r3, [r7, #28]
 800c2d8:	e023      	b.n	800c322 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4b15      	ldr	r3, [pc, #84]	; (800c334 <xTaskCheckForTimeOut+0xc8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d007      	beq.n	800c2f6 <xTaskCheckForTimeOut+0x8a>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	69ba      	ldr	r2, [r7, #24]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d302      	bcc.n	800c2f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e015      	b.n	800c322 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d20b      	bcs.n	800c318 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	1ad2      	subs	r2, r2, r3
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7ff ff97 	bl	800c240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c312:	2300      	movs	r3, #0
 800c314:	61fb      	str	r3, [r7, #28]
 800c316:	e004      	b.n	800c322 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c31e:	2301      	movs	r3, #1
 800c320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c322:	f000 ff77 	bl	800d214 <vPortExitCritical>

	return xReturn;
 800c326:	69fb      	ldr	r3, [r7, #28]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3720      	adds	r7, #32
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20005350 	.word	0x20005350
 800c334:	20005364 	.word	0x20005364

0800c338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c33c:	4b03      	ldr	r3, [pc, #12]	; (800c34c <vTaskMissedYield+0x14>)
 800c33e:	2201      	movs	r2, #1
 800c340:	601a      	str	r2, [r3, #0]
}
 800c342:	bf00      	nop
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	20005360 	.word	0x20005360

0800c350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c358:	f000 f852 	bl	800c400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c35c:	4b06      	ldr	r3, [pc, #24]	; (800c378 <prvIdleTask+0x28>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d9f9      	bls.n	800c358 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <prvIdleTask+0x2c>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c374:	e7f0      	b.n	800c358 <prvIdleTask+0x8>
 800c376:	bf00      	nop
 800c378:	20004e7c 	.word	0x20004e7c
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c386:	2300      	movs	r3, #0
 800c388:	607b      	str	r3, [r7, #4]
 800c38a:	e00c      	b.n	800c3a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	4613      	mov	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4a12      	ldr	r2, [pc, #72]	; (800c3e0 <prvInitialiseTaskLists+0x60>)
 800c398:	4413      	add	r3, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fa8a 	bl	800a8b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	607b      	str	r3, [r7, #4]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b37      	cmp	r3, #55	; 0x37
 800c3aa:	d9ef      	bls.n	800c38c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3ac:	480d      	ldr	r0, [pc, #52]	; (800c3e4 <prvInitialiseTaskLists+0x64>)
 800c3ae:	f7fe fa81 	bl	800a8b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3b2:	480d      	ldr	r0, [pc, #52]	; (800c3e8 <prvInitialiseTaskLists+0x68>)
 800c3b4:	f7fe fa7e 	bl	800a8b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3b8:	480c      	ldr	r0, [pc, #48]	; (800c3ec <prvInitialiseTaskLists+0x6c>)
 800c3ba:	f7fe fa7b 	bl	800a8b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3be:	480c      	ldr	r0, [pc, #48]	; (800c3f0 <prvInitialiseTaskLists+0x70>)
 800c3c0:	f7fe fa78 	bl	800a8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3c4:	480b      	ldr	r0, [pc, #44]	; (800c3f4 <prvInitialiseTaskLists+0x74>)
 800c3c6:	f7fe fa75 	bl	800a8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3ca:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <prvInitialiseTaskLists+0x78>)
 800c3cc:	4a05      	ldr	r2, [pc, #20]	; (800c3e4 <prvInitialiseTaskLists+0x64>)
 800c3ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3d0:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <prvInitialiseTaskLists+0x7c>)
 800c3d2:	4a05      	ldr	r2, [pc, #20]	; (800c3e8 <prvInitialiseTaskLists+0x68>)
 800c3d4:	601a      	str	r2, [r3, #0]
}
 800c3d6:	bf00      	nop
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20004e7c 	.word	0x20004e7c
 800c3e4:	200052dc 	.word	0x200052dc
 800c3e8:	200052f0 	.word	0x200052f0
 800c3ec:	2000530c 	.word	0x2000530c
 800c3f0:	20005320 	.word	0x20005320
 800c3f4:	20005338 	.word	0x20005338
 800c3f8:	20005304 	.word	0x20005304
 800c3fc:	20005308 	.word	0x20005308

0800c400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c406:	e019      	b.n	800c43c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c408:	f000 fed0 	bl	800d1ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c40c:	4b10      	ldr	r3, [pc, #64]	; (800c450 <prvCheckTasksWaitingTermination+0x50>)
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3304      	adds	r3, #4
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe fad5 	bl	800a9c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c41e:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <prvCheckTasksWaitingTermination+0x54>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3b01      	subs	r3, #1
 800c424:	4a0b      	ldr	r2, [pc, #44]	; (800c454 <prvCheckTasksWaitingTermination+0x54>)
 800c426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c428:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <prvCheckTasksWaitingTermination+0x58>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	4a0a      	ldr	r2, [pc, #40]	; (800c458 <prvCheckTasksWaitingTermination+0x58>)
 800c430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c432:	f000 feef 	bl	800d214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f810 	bl	800c45c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c43c:	4b06      	ldr	r3, [pc, #24]	; (800c458 <prvCheckTasksWaitingTermination+0x58>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e1      	bne.n	800c408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20005320 	.word	0x20005320
 800c454:	2000534c 	.word	0x2000534c
 800c458:	20005334 	.word	0x20005334

0800c45c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3354      	adds	r3, #84	; 0x54
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 fb39 	bl	800dae0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c474:	2b00      	cmp	r3, #0
 800c476:	d108      	bne.n	800c48a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f88b 	bl	800d598 <vPortFree>
				vPortFree( pxTCB );
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 f888 	bl	800d598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c488:	e01a      	b.n	800c4c0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c490:	2b01      	cmp	r3, #1
 800c492:	d103      	bne.n	800c49c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f001 f87f 	bl	800d598 <vPortFree>
	}
 800c49a:	e011      	b.n	800c4c0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d00c      	beq.n	800c4c0 <prvDeleteTCB+0x64>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	b672      	cpsid	i
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	b662      	cpsie	i
 800c4ba:	60fb      	str	r3, [r7, #12]
}
 800c4bc:	bf00      	nop
 800c4be:	e7fe      	b.n	800c4be <prvDeleteTCB+0x62>
	}
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	; (800c500 <prvResetNextTaskUnblockTime+0x38>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d104      	bne.n	800c4e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <prvResetNextTaskUnblockTime+0x3c>)
 800c4da:	f04f 32ff 	mov.w	r2, #4294967295
 800c4de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4e0:	e008      	b.n	800c4f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <prvResetNextTaskUnblockTime+0x38>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	4a04      	ldr	r2, [pc, #16]	; (800c504 <prvResetNextTaskUnblockTime+0x3c>)
 800c4f2:	6013      	str	r3, [r2, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	20005304 	.word	0x20005304
 800c504:	2000536c 	.word	0x2000536c

0800c508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c50e:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <xTaskGetSchedulerState+0x34>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c516:	2301      	movs	r3, #1
 800c518:	607b      	str	r3, [r7, #4]
 800c51a:	e008      	b.n	800c52e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c51c:	4b08      	ldr	r3, [pc, #32]	; (800c540 <xTaskGetSchedulerState+0x38>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c524:	2302      	movs	r3, #2
 800c526:	607b      	str	r3, [r7, #4]
 800c528:	e001      	b.n	800c52e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c52a:	2300      	movs	r3, #0
 800c52c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c52e:	687b      	ldr	r3, [r7, #4]
	}
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	20005358 	.word	0x20005358
 800c540:	20005374 	.word	0x20005374

0800c544 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d051      	beq.n	800c5fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55e:	4b2a      	ldr	r3, [pc, #168]	; (800c608 <xTaskPriorityInherit+0xc4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	429a      	cmp	r2, r3
 800c566:	d241      	bcs.n	800c5ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	db06      	blt.n	800c57e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c570:	4b25      	ldr	r3, [pc, #148]	; (800c608 <xTaskPriorityInherit+0xc4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6959      	ldr	r1, [r3, #20]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4a1f      	ldr	r2, [pc, #124]	; (800c60c <xTaskPriorityInherit+0xc8>)
 800c590:	4413      	add	r3, r2
 800c592:	4299      	cmp	r1, r3
 800c594:	d122      	bne.n	800c5dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	3304      	adds	r3, #4
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fa14 	bl	800a9c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5a0:	4b19      	ldr	r3, [pc, #100]	; (800c608 <xTaskPriorityInherit+0xc4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ae:	4b18      	ldr	r3, [pc, #96]	; (800c610 <xTaskPriorityInherit+0xcc>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d903      	bls.n	800c5be <xTaskPriorityInherit+0x7a>
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	4a15      	ldr	r2, [pc, #84]	; (800c610 <xTaskPriorityInherit+0xcc>)
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4a10      	ldr	r2, [pc, #64]	; (800c60c <xTaskPriorityInherit+0xc8>)
 800c5cc:	441a      	add	r2, r3
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	f7fe f99a 	bl	800a90e <vListInsertEnd>
 800c5da:	e004      	b.n	800c5e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <xTaskPriorityInherit+0xc4>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	e008      	b.n	800c5fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <xTaskPriorityInherit+0xc4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d201      	bcs.n	800c5fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
	}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20004e78 	.word	0x20004e78
 800c60c:	20004e7c 	.word	0x20004e7c
 800c610:	20005354 	.word	0x20005354

0800c614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c620:	2300      	movs	r3, #0
 800c622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d05a      	beq.n	800c6e0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c62a:	4b30      	ldr	r3, [pc, #192]	; (800c6ec <xTaskPriorityDisinherit+0xd8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	429a      	cmp	r2, r3
 800c632:	d00c      	beq.n	800c64e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	b672      	cpsid	i
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	b662      	cpsie	i
 800c648:	60fb      	str	r3, [r7, #12]
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10c      	bne.n	800c670 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	b672      	cpsid	i
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	b662      	cpsie	i
 800c66a:	60bb      	str	r3, [r7, #8]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c674:	1e5a      	subs	r2, r3, #1
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c682:	429a      	cmp	r2, r3
 800c684:	d02c      	beq.n	800c6e0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d128      	bne.n	800c6e0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3304      	adds	r3, #4
 800c692:	4618      	mov	r0, r3
 800c694:	f7fe f998 	bl	800a9c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b0:	4b0f      	ldr	r3, [pc, #60]	; (800c6f0 <xTaskPriorityDisinherit+0xdc>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d903      	bls.n	800c6c0 <xTaskPriorityDisinherit+0xac>
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	4a0c      	ldr	r2, [pc, #48]	; (800c6f0 <xTaskPriorityDisinherit+0xdc>)
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4a09      	ldr	r2, [pc, #36]	; (800c6f4 <xTaskPriorityDisinherit+0xe0>)
 800c6ce:	441a      	add	r2, r3
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	f7fe f919 	bl	800a90e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6e0:	697b      	ldr	r3, [r7, #20]
	}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3718      	adds	r7, #24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20004e78 	.word	0x20004e78
 800c6f0:	20005354 	.word	0x20005354
 800c6f4:	20004e7c 	.word	0x20004e7c

0800c6f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c706:	2301      	movs	r3, #1
 800c708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d06e      	beq.n	800c7ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10c      	bne.n	800c732 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800c718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71c:	b672      	cpsid	i
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	b662      	cpsie	i
 800c72c:	60fb      	str	r3, [r7, #12]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d902      	bls.n	800c742 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	61fb      	str	r3, [r7, #28]
 800c740:	e002      	b.n	800c748 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c746:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	69fa      	ldr	r2, [r7, #28]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d04d      	beq.n	800c7ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d148      	bne.n	800c7ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c75c:	4b26      	ldr	r3, [pc, #152]	; (800c7f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	69ba      	ldr	r2, [r7, #24]
 800c762:	429a      	cmp	r2, r3
 800c764:	d10c      	bne.n	800c780 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	b672      	cpsid	i
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	b662      	cpsie	i
 800c77a:	60bb      	str	r3, [r7, #8]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	69fa      	ldr	r2, [r7, #28]
 800c78a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	db04      	blt.n	800c79e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	6959      	ldr	r1, [r3, #20]
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4a13      	ldr	r2, [pc, #76]	; (800c7fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c7ae:	4413      	add	r3, r2
 800c7b0:	4299      	cmp	r1, r3
 800c7b2:	d11c      	bne.n	800c7ee <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe f905 	bl	800a9c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c2:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d903      	bls.n	800c7d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ce:	4a0c      	ldr	r2, [pc, #48]	; (800c800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4a07      	ldr	r2, [pc, #28]	; (800c7fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c7e0:	441a      	add	r2, r3
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7fe f890 	bl	800a90e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7ee:	bf00      	nop
 800c7f0:	3720      	adds	r7, #32
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20004e78 	.word	0x20004e78
 800c7fc:	20004e7c 	.word	0x20004e7c
 800c800:	20005354 	.word	0x20005354

0800c804 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c808:	4b07      	ldr	r3, [pc, #28]	; (800c828 <pvTaskIncrementMutexHeldCount+0x24>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <pvTaskIncrementMutexHeldCount+0x24>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c816:	3201      	adds	r2, #1
 800c818:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c81a:	4b03      	ldr	r3, [pc, #12]	; (800c828 <pvTaskIncrementMutexHeldCount+0x24>)
 800c81c:	681b      	ldr	r3, [r3, #0]
	}
 800c81e:	4618      	mov	r0, r3
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	20004e78 	.word	0x20004e78

0800c82c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c836:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c83c:	4b20      	ldr	r3, [pc, #128]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3304      	adds	r3, #4
 800c842:	4618      	mov	r0, r3
 800c844:	f7fe f8c0 	bl	800a9c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d10a      	bne.n	800c866 <prvAddCurrentTaskToDelayedList+0x3a>
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d007      	beq.n	800c866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c856:	4b1a      	ldr	r3, [pc, #104]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	3304      	adds	r3, #4
 800c85c:	4619      	mov	r1, r3
 800c85e:	4819      	ldr	r0, [pc, #100]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c860:	f7fe f855 	bl	800a90e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c864:	e026      	b.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c86e:	4b14      	ldr	r3, [pc, #80]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d209      	bcs.n	800c892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c87e:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3304      	adds	r3, #4
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fe f863 	bl	800a956 <vListInsert>
}
 800c890:	e010      	b.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c892:	4b0e      	ldr	r3, [pc, #56]	; (800c8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3304      	adds	r3, #4
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fe f859 	bl	800a956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d202      	bcs.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c8ae:	4a08      	ldr	r2, [pc, #32]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	6013      	str	r3, [r2, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20005350 	.word	0x20005350
 800c8c0:	20004e78 	.word	0x20004e78
 800c8c4:	20005338 	.word	0x20005338
 800c8c8:	20005308 	.word	0x20005308
 800c8cc:	20005304 	.word	0x20005304
 800c8d0:	2000536c 	.word	0x2000536c

0800c8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c8de:	f000 fb15 	bl	800cf0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <xTimerCreateTimerTask+0x84>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d021      	beq.n	800c92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c8f2:	1d3a      	adds	r2, r7, #4
 800c8f4:	f107 0108 	add.w	r1, r7, #8
 800c8f8:	f107 030c 	add.w	r3, r7, #12
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd ffbf 	bl	800a880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	9202      	str	r2, [sp, #8]
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	2302      	movs	r3, #2
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	460a      	mov	r2, r1
 800c914:	4911      	ldr	r1, [pc, #68]	; (800c95c <xTimerCreateTimerTask+0x88>)
 800c916:	4812      	ldr	r0, [pc, #72]	; (800c960 <xTimerCreateTimerTask+0x8c>)
 800c918:	f7fe ff8e 	bl	800b838 <xTaskCreateStatic>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4a11      	ldr	r2, [pc, #68]	; (800c964 <xTimerCreateTimerTask+0x90>)
 800c920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c922:	4b10      	ldr	r3, [pc, #64]	; (800c964 <xTimerCreateTimerTask+0x90>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c92a:	2301      	movs	r3, #1
 800c92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10c      	bne.n	800c94e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	b672      	cpsid	i
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	b662      	cpsie	i
 800c948:	613b      	str	r3, [r7, #16]
}
 800c94a:	bf00      	nop
 800c94c:	e7fe      	b.n	800c94c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c94e:	697b      	ldr	r3, [r7, #20]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	200053a8 	.word	0x200053a8
 800c95c:	0800e934 	.word	0x0800e934
 800c960:	0800caa5 	.word	0x0800caa5
 800c964:	200053ac 	.word	0x200053ac

0800c968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08a      	sub	sp, #40	; 0x28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c976:	2300      	movs	r3, #0
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10c      	bne.n	800c99a <xTimerGenericCommand+0x32>
	__asm volatile
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	b672      	cpsid	i
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	b662      	cpsie	i
 800c994:	623b      	str	r3, [r7, #32]
}
 800c996:	bf00      	nop
 800c998:	e7fe      	b.n	800c998 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c99a:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <xTimerGenericCommand+0x9c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d02a      	beq.n	800c9f8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2b05      	cmp	r3, #5
 800c9b2:	dc18      	bgt.n	800c9e6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c9b4:	f7ff fda8 	bl	800c508 <xTaskGetSchedulerState>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d109      	bne.n	800c9d2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9be:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <xTimerGenericCommand+0x9c>)
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f107 0110 	add.w	r1, r7, #16
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ca:	f7fe f979 	bl	800acc0 <xQueueGenericSend>
 800c9ce:	6278      	str	r0, [r7, #36]	; 0x24
 800c9d0:	e012      	b.n	800c9f8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <xTimerGenericCommand+0x9c>)
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	f107 0110 	add.w	r1, r7, #16
 800c9da:	2300      	movs	r3, #0
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f7fe f96f 	bl	800acc0 <xQueueGenericSend>
 800c9e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c9e4:	e008      	b.n	800c9f8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9e6:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <xTimerGenericCommand+0x9c>)
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	f107 0110 	add.w	r1, r7, #16
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	f7fe fa6b 	bl	800aecc <xQueueGenericSendFromISR>
 800c9f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3728      	adds	r7, #40	; 0x28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	200053a8 	.word	0x200053a8

0800ca08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca12:	4b23      	ldr	r3, [pc, #140]	; (800caa0 <prvProcessExpiredTimer+0x98>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fd ffd1 	bl	800a9c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d024      	beq.n	800ca7e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	699a      	ldr	r2, [r3, #24]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	18d1      	adds	r1, r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	6978      	ldr	r0, [r7, #20]
 800ca42:	f000 f8d3 	bl	800cbec <prvInsertTimerInActiveList>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d021      	beq.n	800ca90 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2300      	movs	r3, #0
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	2100      	movs	r1, #0
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f7ff ff86 	bl	800c968 <xTimerGenericCommand>
 800ca5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d115      	bne.n	800ca90 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	b672      	cpsid	i
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	b662      	cpsie	i
 800ca78:	60fb      	str	r3, [r7, #12]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	6978      	ldr	r0, [r7, #20]
 800ca96:	4798      	blx	r3
}
 800ca98:	bf00      	nop
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	200053a0 	.word	0x200053a0

0800caa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f857 	bl	800cb64 <prvGetNextExpireTime>
 800cab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4619      	mov	r1, r3
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f803 	bl	800cac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cac2:	f000 f8d5 	bl	800cc70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cac6:	e7f1      	b.n	800caac <prvTimerTask+0x8>

0800cac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cad2:	f7ff f91b 	bl	800bd0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cad6:	f107 0308 	add.w	r3, r7, #8
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 f866 	bl	800cbac <prvSampleTimeNow>
 800cae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d130      	bne.n	800cb4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10a      	bne.n	800cb04 <prvProcessTimerOrBlockTask+0x3c>
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d806      	bhi.n	800cb04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800caf6:	f7ff f917 	bl	800bd28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ff83 	bl	800ca08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb02:	e024      	b.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d008      	beq.n	800cb1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb0a:	4b13      	ldr	r3, [pc, #76]	; (800cb58 <prvProcessTimerOrBlockTask+0x90>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <prvProcessTimerOrBlockTask+0x50>
 800cb14:	2301      	movs	r3, #1
 800cb16:	e000      	b.n	800cb1a <prvProcessTimerOrBlockTask+0x52>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb1c:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <prvProcessTimerOrBlockTask+0x94>)
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7fe fe51 	bl	800b7d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb2e:	f7ff f8fb 	bl	800bd28 <xTaskResumeAll>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <prvProcessTimerOrBlockTask+0x98>)
 800cb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy
}
 800cb48:	e001      	b.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb4a:	f7ff f8ed 	bl	800bd28 <xTaskResumeAll>
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	200053a4 	.word	0x200053a4
 800cb5c:	200053a8 	.word	0x200053a8
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <prvGetNextExpireTime+0x44>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <prvGetNextExpireTime+0x16>
 800cb76:	2201      	movs	r2, #1
 800cb78:	e000      	b.n	800cb7c <prvGetNextExpireTime+0x18>
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d105      	bne.n	800cb94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <prvGetNextExpireTime+0x44>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	e001      	b.n	800cb98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb98:	68fb      	ldr	r3, [r7, #12]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	200053a0 	.word	0x200053a0

0800cbac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cbb4:	f7ff f958 	bl	800be68 <xTaskGetTickCount>
 800cbb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <prvSampleTimeNow+0x3c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d205      	bcs.n	800cbd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cbc4:	f000 f93c 	bl	800ce40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	e002      	b.n	800cbd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cbd6:	4a04      	ldr	r2, [pc, #16]	; (800cbe8 <prvSampleTimeNow+0x3c>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200053b0 	.word	0x200053b0

0800cbec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d812      	bhi.n	800cc38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	1ad2      	subs	r2, r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d302      	bcc.n	800cc26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	617b      	str	r3, [r7, #20]
 800cc24:	e01b      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc26:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <prvInsertTimerInActiveList+0x7c>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4610      	mov	r0, r2
 800cc32:	f7fd fe90 	bl	800a956 <vListInsert>
 800cc36:	e012      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d206      	bcs.n	800cc4e <prvInsertTimerInActiveList+0x62>
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d302      	bcc.n	800cc4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	e007      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <prvInsertTimerInActiveList+0x80>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3304      	adds	r3, #4
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7fd fe7c 	bl	800a956 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc5e:	697b      	ldr	r3, [r7, #20]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	200053a4 	.word	0x200053a4
 800cc6c:	200053a0 	.word	0x200053a0

0800cc70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	; 0x38
 800cc74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc76:	e0d0      	b.n	800ce1a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da1a      	bge.n	800ccb4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cc7e:	1d3b      	adds	r3, r7, #4
 800cc80:	3304      	adds	r3, #4
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10c      	bne.n	800cca4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	b672      	cpsid	i
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	b662      	cpsie	i
 800cc9e:	61fb      	str	r3, [r7, #28]
}
 800cca0:	bf00      	nop
 800cca2:	e7fe      	b.n	800cca2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccaa:	6850      	ldr	r0, [r2, #4]
 800ccac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccae:	6892      	ldr	r2, [r2, #8]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f2c0 80af 	blt.w	800ce1a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d004      	beq.n	800ccd2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	3304      	adds	r3, #4
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fd fe7b 	bl	800a9c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccd2:	463b      	mov	r3, r7
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff ff69 	bl	800cbac <prvSampleTimeNow>
 800ccda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b09      	cmp	r3, #9
 800cce0:	f200 809a 	bhi.w	800ce18 <prvProcessReceivedCommands+0x1a8>
 800cce4:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <prvProcessReceivedCommands+0x7c>)
 800cce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccea:	bf00      	nop
 800ccec:	0800cd15 	.word	0x0800cd15
 800ccf0:	0800cd15 	.word	0x0800cd15
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cd8d 	.word	0x0800cd8d
 800ccfc:	0800cda1 	.word	0x0800cda1
 800cd00:	0800cdef 	.word	0x0800cdef
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd15 	.word	0x0800cd15
 800cd0c:	0800cd8d 	.word	0x0800cd8d
 800cd10:	0800cda1 	.word	0x0800cda1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd1a:	f043 0301 	orr.w	r3, r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	18d1      	adds	r1, r2, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd34:	f7ff ff5a 	bl	800cbec <prvInsertTimerInActiveList>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d06d      	beq.n	800ce1a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd4c:	f003 0304 	and.w	r3, r3, #4
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d062      	beq.n	800ce1a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	441a      	add	r2, r3
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	2100      	movs	r1, #0
 800cd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd66:	f7ff fdff 	bl	800c968 <xTimerGenericCommand>
 800cd6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d153      	bne.n	800ce1a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	b672      	cpsid	i
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	b662      	cpsie	i
 800cd86:	61bb      	str	r3, [r7, #24]
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd92:	f023 0301 	bic.w	r3, r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd9e:	e03c      	b.n	800ce1a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda6:	f043 0301 	orr.w	r3, r3, #1
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10c      	bne.n	800cdda <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	b672      	cpsid	i
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	b662      	cpsie	i
 800cdd4:	617b      	str	r3, [r7, #20]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	699a      	ldr	r2, [r3, #24]
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	18d1      	adds	r1, r2, r3
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde8:	f7ff ff00 	bl	800cbec <prvInsertTimerInActiveList>
					break;
 800cdec:	e015      	b.n	800ce1a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdf4:	f003 0302 	and.w	r3, r3, #2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d103      	bne.n	800ce04 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800cdfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdfe:	f000 fbcb 	bl	800d598 <vPortFree>
 800ce02:	e00a      	b.n	800ce1a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce0a:	f023 0301 	bic.w	r3, r3, #1
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce16:	e000      	b.n	800ce1a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ce18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce1a:	4b08      	ldr	r3, [pc, #32]	; (800ce3c <prvProcessReceivedCommands+0x1cc>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	1d39      	adds	r1, r7, #4
 800ce20:	2200      	movs	r2, #0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe f988 	bl	800b138 <xQueueReceive>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f47f af24 	bne.w	800cc78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	3730      	adds	r7, #48	; 0x30
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200053a8 	.word	0x200053a8

0800ce40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce46:	e04a      	b.n	800cede <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce48:	4b2e      	ldr	r3, [pc, #184]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce52:	4b2c      	ldr	r3, [pc, #176]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fd fdb1 	bl	800a9c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d030      	beq.n	800cede <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4413      	add	r3, r2
 800ce84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d90e      	bls.n	800ceac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3304      	adds	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f7fd fd56 	bl	800a956 <vListInsert>
 800ceaa:	e018      	b.n	800cede <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ceac:	2300      	movs	r3, #0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff fd56 	bl	800c968 <xTimerGenericCommand>
 800cebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10c      	bne.n	800cede <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	b672      	cpsid	i
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	b662      	cpsie	i
 800ced8:	603b      	str	r3, [r7, #0]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cede:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1af      	bne.n	800ce48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cee8:	4b06      	ldr	r3, [pc, #24]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ceee:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <prvSwitchTimerLists+0xc8>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a04      	ldr	r2, [pc, #16]	; (800cf04 <prvSwitchTimerLists+0xc4>)
 800cef4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cef6:	4a04      	ldr	r2, [pc, #16]	; (800cf08 <prvSwitchTimerLists+0xc8>)
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	6013      	str	r3, [r2, #0]
}
 800cefc:	bf00      	nop
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	200053a0 	.word	0x200053a0
 800cf08:	200053a4 	.word	0x200053a4

0800cf0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf12:	f000 f94b 	bl	800d1ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d120      	bne.n	800cf60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf1e:	4814      	ldr	r0, [pc, #80]	; (800cf70 <prvCheckForValidListAndQueue+0x64>)
 800cf20:	f7fd fcc8 	bl	800a8b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf24:	4813      	ldr	r0, [pc, #76]	; (800cf74 <prvCheckForValidListAndQueue+0x68>)
 800cf26:	f7fd fcc5 	bl	800a8b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf2a:	4b13      	ldr	r3, [pc, #76]	; (800cf78 <prvCheckForValidListAndQueue+0x6c>)
 800cf2c:	4a10      	ldr	r2, [pc, #64]	; (800cf70 <prvCheckForValidListAndQueue+0x64>)
 800cf2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf30:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <prvCheckForValidListAndQueue+0x70>)
 800cf32:	4a10      	ldr	r2, [pc, #64]	; (800cf74 <prvCheckForValidListAndQueue+0x68>)
 800cf34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf36:	2300      	movs	r3, #0
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	4b11      	ldr	r3, [pc, #68]	; (800cf80 <prvCheckForValidListAndQueue+0x74>)
 800cf3c:	4a11      	ldr	r2, [pc, #68]	; (800cf84 <prvCheckForValidListAndQueue+0x78>)
 800cf3e:	2110      	movs	r1, #16
 800cf40:	200a      	movs	r0, #10
 800cf42:	f7fd fdd5 	bl	800aaf0 <xQueueGenericCreateStatic>
 800cf46:	4603      	mov	r3, r0
 800cf48:	4a08      	ldr	r2, [pc, #32]	; (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf54:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <prvCheckForValidListAndQueue+0x60>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	490b      	ldr	r1, [pc, #44]	; (800cf88 <prvCheckForValidListAndQueue+0x7c>)
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fc0e 	bl	800b77c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf60:	f000 f958 	bl	800d214 <vPortExitCritical>
}
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200053a8 	.word	0x200053a8
 800cf70:	20005378 	.word	0x20005378
 800cf74:	2000538c 	.word	0x2000538c
 800cf78:	200053a0 	.word	0x200053a0
 800cf7c:	200053a4 	.word	0x200053a4
 800cf80:	20005454 	.word	0x20005454
 800cf84:	200053b4 	.word	0x200053b4
 800cf88:	0800e93c 	.word	0x0800e93c

0800cf8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3b04      	subs	r3, #4
 800cf9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3b04      	subs	r3, #4
 800cfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f023 0201 	bic.w	r2, r3, #1
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3b04      	subs	r3, #4
 800cfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cfbc:	4a0c      	ldr	r2, [pc, #48]	; (800cff0 <pxPortInitialiseStack+0x64>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3b14      	subs	r3, #20
 800cfc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3b04      	subs	r3, #4
 800cfd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f06f 0202 	mvn.w	r2, #2
 800cfda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3b20      	subs	r3, #32
 800cfe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	0800cff5 	.word	0x0800cff5

0800cff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cffe:	4b14      	ldr	r3, [pc, #80]	; (800d050 <prvTaskExitError+0x5c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d006:	d00c      	beq.n	800d022 <prvTaskExitError+0x2e>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	b672      	cpsid	i
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	b662      	cpsie	i
 800d01c:	60fb      	str	r3, [r7, #12]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <prvTaskExitError+0x2c>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d026:	b672      	cpsid	i
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	b662      	cpsie	i
 800d036:	60bb      	str	r3, [r7, #8]
}
 800d038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d03a:	bf00      	nop
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0fc      	beq.n	800d03c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20000044 	.word	0x20000044
	...

0800d060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <pxCurrentTCBConst2>)
 800d062:	6819      	ldr	r1, [r3, #0]
 800d064:	6808      	ldr	r0, [r1, #0]
 800d066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06a:	f380 8809 	msr	PSP, r0
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f04f 0000 	mov.w	r0, #0
 800d076:	f380 8811 	msr	BASEPRI, r0
 800d07a:	4770      	bx	lr
 800d07c:	f3af 8000 	nop.w

0800d080 <pxCurrentTCBConst2>:
 800d080:	20004e78 	.word	0x20004e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop

0800d088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d088:	4808      	ldr	r0, [pc, #32]	; (800d0ac <prvPortStartFirstTask+0x24>)
 800d08a:	6800      	ldr	r0, [r0, #0]
 800d08c:	6800      	ldr	r0, [r0, #0]
 800d08e:	f380 8808 	msr	MSP, r0
 800d092:	f04f 0000 	mov.w	r0, #0
 800d096:	f380 8814 	msr	CONTROL, r0
 800d09a:	b662      	cpsie	i
 800d09c:	b661      	cpsie	f
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	df00      	svc	0
 800d0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0aa:	bf00      	nop
 800d0ac:	e000ed08 	.word	0xe000ed08

0800d0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d0b6:	4b37      	ldr	r3, [pc, #220]	; (800d194 <xPortStartScheduler+0xe4>)
 800d0b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	22ff      	movs	r2, #255	; 0xff
 800d0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	4b2f      	ldr	r3, [pc, #188]	; (800d198 <xPortStartScheduler+0xe8>)
 800d0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0de:	4b2f      	ldr	r3, [pc, #188]	; (800d19c <xPortStartScheduler+0xec>)
 800d0e0:	2207      	movs	r2, #7
 800d0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0e4:	e009      	b.n	800d0fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d0e6:	4b2d      	ldr	r3, [pc, #180]	; (800d19c <xPortStartScheduler+0xec>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	4a2b      	ldr	r2, [pc, #172]	; (800d19c <xPortStartScheduler+0xec>)
 800d0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0fa:	78fb      	ldrb	r3, [r7, #3]
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d102:	2b80      	cmp	r3, #128	; 0x80
 800d104:	d0ef      	beq.n	800d0e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d106:	4b25      	ldr	r3, [pc, #148]	; (800d19c <xPortStartScheduler+0xec>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f1c3 0307 	rsb	r3, r3, #7
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d00c      	beq.n	800d12c <xPortStartScheduler+0x7c>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	b672      	cpsid	i
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	b662      	cpsie	i
 800d126:	60bb      	str	r3, [r7, #8]
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d12c:	4b1b      	ldr	r3, [pc, #108]	; (800d19c <xPortStartScheduler+0xec>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	4a1a      	ldr	r2, [pc, #104]	; (800d19c <xPortStartScheduler+0xec>)
 800d134:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d136:	4b19      	ldr	r3, [pc, #100]	; (800d19c <xPortStartScheduler+0xec>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d13e:	4a17      	ldr	r2, [pc, #92]	; (800d19c <xPortStartScheduler+0xec>)
 800d140:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	b2da      	uxtb	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d14a:	4b15      	ldr	r3, [pc, #84]	; (800d1a0 <xPortStartScheduler+0xf0>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a14      	ldr	r2, [pc, #80]	; (800d1a0 <xPortStartScheduler+0xf0>)
 800d150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d156:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <xPortStartScheduler+0xf0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a11      	ldr	r2, [pc, #68]	; (800d1a0 <xPortStartScheduler+0xf0>)
 800d15c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d160:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d162:	f000 f8dd 	bl	800d320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d166:	4b0f      	ldr	r3, [pc, #60]	; (800d1a4 <xPortStartScheduler+0xf4>)
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d16c:	f000 f8fc 	bl	800d368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d170:	4b0d      	ldr	r3, [pc, #52]	; (800d1a8 <xPortStartScheduler+0xf8>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a0c      	ldr	r2, [pc, #48]	; (800d1a8 <xPortStartScheduler+0xf8>)
 800d176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d17a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d17c:	f7ff ff84 	bl	800d088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d180:	f7fe ff3e 	bl	800c000 <vTaskSwitchContext>
	prvTaskExitError();
 800d184:	f7ff ff36 	bl	800cff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	e000e400 	.word	0xe000e400
 800d198:	200054a4 	.word	0x200054a4
 800d19c:	200054a8 	.word	0x200054a8
 800d1a0:	e000ed20 	.word	0xe000ed20
 800d1a4:	20000044 	.word	0x20000044
 800d1a8:	e000ef34 	.word	0xe000ef34

0800d1ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	b672      	cpsid	i
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	b662      	cpsie	i
 800d1c6:	607b      	str	r3, [r7, #4]
}
 800d1c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ca:	4b10      	ldr	r3, [pc, #64]	; (800d20c <vPortEnterCritical+0x60>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	4a0e      	ldr	r2, [pc, #56]	; (800d20c <vPortEnterCritical+0x60>)
 800d1d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1d4:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <vPortEnterCritical+0x60>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d111      	bne.n	800d200 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1dc:	4b0c      	ldr	r3, [pc, #48]	; (800d210 <vPortEnterCritical+0x64>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00c      	beq.n	800d200 <vPortEnterCritical+0x54>
	__asm volatile
 800d1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ea:	b672      	cpsid	i
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	b662      	cpsie	i
 800d1fa:	603b      	str	r3, [r7, #0]
}
 800d1fc:	bf00      	nop
 800d1fe:	e7fe      	b.n	800d1fe <vPortEnterCritical+0x52>
	}
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	20000044 	.word	0x20000044
 800d210:	e000ed04 	.word	0xe000ed04

0800d214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d21a:	4b13      	ldr	r3, [pc, #76]	; (800d268 <vPortExitCritical+0x54>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10c      	bne.n	800d23c <vPortExitCritical+0x28>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	b672      	cpsid	i
 800d228:	f383 8811 	msr	BASEPRI, r3
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	b662      	cpsie	i
 800d236:	607b      	str	r3, [r7, #4]
}
 800d238:	bf00      	nop
 800d23a:	e7fe      	b.n	800d23a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <vPortExitCritical+0x54>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3b01      	subs	r3, #1
 800d242:	4a09      	ldr	r2, [pc, #36]	; (800d268 <vPortExitCritical+0x54>)
 800d244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d246:	4b08      	ldr	r3, [pc, #32]	; (800d268 <vPortExitCritical+0x54>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d105      	bne.n	800d25a <vPortExitCritical+0x46>
 800d24e:	2300      	movs	r3, #0
 800d250:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	f383 8811 	msr	BASEPRI, r3
}
 800d258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d25a:	bf00      	nop
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20000044 	.word	0x20000044
 800d26c:	00000000 	.word	0x00000000

0800d270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d270:	f3ef 8009 	mrs	r0, PSP
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	4b15      	ldr	r3, [pc, #84]	; (800d2d0 <pxCurrentTCBConst>)
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	f01e 0f10 	tst.w	lr, #16
 800d280:	bf08      	it	eq
 800d282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28a:	6010      	str	r0, [r2, #0]
 800d28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d294:	b672      	cpsid	i
 800d296:	f380 8811 	msr	BASEPRI, r0
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	b662      	cpsie	i
 800d2a4:	f7fe feac 	bl	800c000 <vTaskSwitchContext>
 800d2a8:	f04f 0000 	mov.w	r0, #0
 800d2ac:	f380 8811 	msr	BASEPRI, r0
 800d2b0:	bc09      	pop	{r0, r3}
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	6808      	ldr	r0, [r1, #0]
 800d2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f01e 0f10 	tst.w	lr, #16
 800d2be:	bf08      	it	eq
 800d2c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2c4:	f380 8809 	msr	PSP, r0
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop

0800d2d0 <pxCurrentTCBConst>:
 800d2d0:	20004e78 	.word	0x20004e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop

0800d2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	b672      	cpsid	i
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	b662      	cpsie	i
 800d2f2:	607b      	str	r3, [r7, #4]
}
 800d2f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2f6:	f7fe fdc7 	bl	800be88 <xTaskIncrementTick>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d300:	4b06      	ldr	r3, [pc, #24]	; (800d31c <SysTick_Handler+0x44>)
 800d302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	f383 8811 	msr	BASEPRI, r3
}
 800d312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	e000ed04 	.word	0xe000ed04

0800d320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d320:	b480      	push	{r7}
 800d322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d324:	4b0b      	ldr	r3, [pc, #44]	; (800d354 <vPortSetupTimerInterrupt+0x34>)
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d32a:	4b0b      	ldr	r3, [pc, #44]	; (800d358 <vPortSetupTimerInterrupt+0x38>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d330:	4b0a      	ldr	r3, [pc, #40]	; (800d35c <vPortSetupTimerInterrupt+0x3c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a0a      	ldr	r2, [pc, #40]	; (800d360 <vPortSetupTimerInterrupt+0x40>)
 800d336:	fba2 2303 	umull	r2, r3, r2, r3
 800d33a:	099b      	lsrs	r3, r3, #6
 800d33c:	4a09      	ldr	r2, [pc, #36]	; (800d364 <vPortSetupTimerInterrupt+0x44>)
 800d33e:	3b01      	subs	r3, #1
 800d340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d342:	4b04      	ldr	r3, [pc, #16]	; (800d354 <vPortSetupTimerInterrupt+0x34>)
 800d344:	2207      	movs	r2, #7
 800d346:	601a      	str	r2, [r3, #0]
}
 800d348:	bf00      	nop
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	e000e010 	.word	0xe000e010
 800d358:	e000e018 	.word	0xe000e018
 800d35c:	20000038 	.word	0x20000038
 800d360:	10624dd3 	.word	0x10624dd3
 800d364:	e000e014 	.word	0xe000e014

0800d368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d378 <vPortEnableVFP+0x10>
 800d36c:	6801      	ldr	r1, [r0, #0]
 800d36e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d372:	6001      	str	r1, [r0, #0]
 800d374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d376:	bf00      	nop
 800d378:	e000ed88 	.word	0xe000ed88

0800d37c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d382:	f3ef 8305 	mrs	r3, IPSR
 800d386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b0f      	cmp	r3, #15
 800d38c:	d916      	bls.n	800d3bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d38e:	4a19      	ldr	r2, [pc, #100]	; (800d3f4 <vPortValidateInterruptPriority+0x78>)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4413      	add	r3, r2
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d398:	4b17      	ldr	r3, [pc, #92]	; (800d3f8 <vPortValidateInterruptPriority+0x7c>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	7afa      	ldrb	r2, [r7, #11]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d20c      	bcs.n	800d3bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	b672      	cpsid	i
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	b662      	cpsie	i
 800d3b6:	607b      	str	r3, [r7, #4]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d3bc:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <vPortValidateInterruptPriority+0x80>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3c4:	4b0e      	ldr	r3, [pc, #56]	; (800d400 <vPortValidateInterruptPriority+0x84>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d90c      	bls.n	800d3e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d0:	b672      	cpsid	i
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	b662      	cpsie	i
 800d3e0:	603b      	str	r3, [r7, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <vPortValidateInterruptPriority+0x68>
	}
 800d3e6:	bf00      	nop
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	e000e3f0 	.word	0xe000e3f0
 800d3f8:	200054a4 	.word	0x200054a4
 800d3fc:	e000ed0c 	.word	0xe000ed0c
 800d400:	200054a8 	.word	0x200054a8

0800d404 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08a      	sub	sp, #40	; 0x28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d40c:	2300      	movs	r3, #0
 800d40e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d410:	f7fe fc7c 	bl	800bd0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d414:	4b5b      	ldr	r3, [pc, #364]	; (800d584 <pvPortMalloc+0x180>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d41c:	f000 f91a 	bl	800d654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d420:	4b59      	ldr	r3, [pc, #356]	; (800d588 <pvPortMalloc+0x184>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4013      	ands	r3, r2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f040 8092 	bne.w	800d552 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d01f      	beq.n	800d474 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d434:	2208      	movs	r2, #8
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4413      	add	r3, r2
 800d43a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	2b00      	cmp	r3, #0
 800d444:	d016      	beq.n	800d474 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f023 0307 	bic.w	r3, r3, #7
 800d44c:	3308      	adds	r3, #8
 800d44e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00c      	beq.n	800d474 <pvPortMalloc+0x70>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	b672      	cpsid	i
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	b662      	cpsie	i
 800d46e:	617b      	str	r3, [r7, #20]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d06b      	beq.n	800d552 <pvPortMalloc+0x14e>
 800d47a:	4b44      	ldr	r3, [pc, #272]	; (800d58c <pvPortMalloc+0x188>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d866      	bhi.n	800d552 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d484:	4b42      	ldr	r3, [pc, #264]	; (800d590 <pvPortMalloc+0x18c>)
 800d486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d488:	4b41      	ldr	r3, [pc, #260]	; (800d590 <pvPortMalloc+0x18c>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d48e:	e004      	b.n	800d49a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d903      	bls.n	800d4ac <pvPortMalloc+0xa8>
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1f1      	bne.n	800d490 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4ac:	4b35      	ldr	r3, [pc, #212]	; (800d584 <pvPortMalloc+0x180>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d04d      	beq.n	800d552 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2208      	movs	r2, #8
 800d4bc:	4413      	add	r3, r2
 800d4be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d921      	bls.n	800d51c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4413      	add	r3, r2
 800d4de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	f003 0307 	and.w	r3, r3, #7
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00c      	beq.n	800d504 <pvPortMalloc+0x100>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	b672      	cpsid	i
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	b662      	cpsie	i
 800d4fe:	613b      	str	r3, [r7, #16]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	1ad2      	subs	r2, r2, r3
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d516:	69b8      	ldr	r0, [r7, #24]
 800d518:	f000 f8fe 	bl	800d718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d51c:	4b1b      	ldr	r3, [pc, #108]	; (800d58c <pvPortMalloc+0x188>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	4a19      	ldr	r2, [pc, #100]	; (800d58c <pvPortMalloc+0x188>)
 800d528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d52a:	4b18      	ldr	r3, [pc, #96]	; (800d58c <pvPortMalloc+0x188>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	4b19      	ldr	r3, [pc, #100]	; (800d594 <pvPortMalloc+0x190>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	429a      	cmp	r2, r3
 800d534:	d203      	bcs.n	800d53e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d536:	4b15      	ldr	r3, [pc, #84]	; (800d58c <pvPortMalloc+0x188>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a16      	ldr	r2, [pc, #88]	; (800d594 <pvPortMalloc+0x190>)
 800d53c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	4b11      	ldr	r3, [pc, #68]	; (800d588 <pvPortMalloc+0x184>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	431a      	orrs	r2, r3
 800d548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54e:	2200      	movs	r2, #0
 800d550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d552:	f7fe fbe9 	bl	800bd28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	f003 0307 	and.w	r3, r3, #7
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00c      	beq.n	800d57a <pvPortMalloc+0x176>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d564:	b672      	cpsid	i
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	b662      	cpsie	i
 800d574:	60fb      	str	r3, [r7, #12]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <pvPortMalloc+0x174>
	return pvReturn;
 800d57a:	69fb      	ldr	r3, [r7, #28]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3728      	adds	r7, #40	; 0x28
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	200090b4 	.word	0x200090b4
 800d588:	200090c0 	.word	0x200090c0
 800d58c:	200090b8 	.word	0x200090b8
 800d590:	200090ac 	.word	0x200090ac
 800d594:	200090bc 	.word	0x200090bc

0800d598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d04c      	beq.n	800d644 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5aa:	2308      	movs	r3, #8
 800d5ac:	425b      	negs	r3, r3
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	4b23      	ldr	r3, [pc, #140]	; (800d64c <vPortFree+0xb4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10c      	bne.n	800d5e0 <vPortFree+0x48>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	b672      	cpsid	i
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	b662      	cpsie	i
 800d5da:	60fb      	str	r3, [r7, #12]
}
 800d5dc:	bf00      	nop
 800d5de:	e7fe      	b.n	800d5de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00c      	beq.n	800d602 <vPortFree+0x6a>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	b672      	cpsid	i
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	b662      	cpsie	i
 800d5fc:	60bb      	str	r3, [r7, #8]
}
 800d5fe:	bf00      	nop
 800d600:	e7fe      	b.n	800d600 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <vPortFree+0xb4>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4013      	ands	r3, r2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d019      	beq.n	800d644 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d115      	bne.n	800d644 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <vPortFree+0xb4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	43db      	mvns	r3, r3
 800d622:	401a      	ands	r2, r3
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d628:	f7fe fb70 	bl	800bd0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	4b07      	ldr	r3, [pc, #28]	; (800d650 <vPortFree+0xb8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4413      	add	r3, r2
 800d636:	4a06      	ldr	r2, [pc, #24]	; (800d650 <vPortFree+0xb8>)
 800d638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d63a:	6938      	ldr	r0, [r7, #16]
 800d63c:	f000 f86c 	bl	800d718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d640:	f7fe fb72 	bl	800bd28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d644:	bf00      	nop
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	200090c0 	.word	0x200090c0
 800d650:	200090b8 	.word	0x200090b8

0800d654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d660:	4b27      	ldr	r3, [pc, #156]	; (800d700 <prvHeapInit+0xac>)
 800d662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0307 	and.w	r3, r3, #7
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00c      	beq.n	800d688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3307      	adds	r3, #7
 800d672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f023 0307 	bic.w	r3, r3, #7
 800d67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	4a1f      	ldr	r2, [pc, #124]	; (800d700 <prvHeapInit+0xac>)
 800d684:	4413      	add	r3, r2
 800d686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d68c:	4a1d      	ldr	r2, [pc, #116]	; (800d704 <prvHeapInit+0xb0>)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d692:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <prvHeapInit+0xb0>)
 800d694:	2200      	movs	r2, #0
 800d696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	4413      	add	r3, r2
 800d69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6a0:	2208      	movs	r2, #8
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	1a9b      	subs	r3, r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f023 0307 	bic.w	r3, r3, #7
 800d6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	4a15      	ldr	r2, [pc, #84]	; (800d708 <prvHeapInit+0xb4>)
 800d6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6b6:	4b14      	ldr	r3, [pc, #80]	; (800d708 <prvHeapInit+0xb4>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6be:	4b12      	ldr	r3, [pc, #72]	; (800d708 <prvHeapInit+0xb4>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	1ad2      	subs	r2, r2, r3
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6d4:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <prvHeapInit+0xb4>)
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	4a0a      	ldr	r2, [pc, #40]	; (800d70c <prvHeapInit+0xb8>)
 800d6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	4a09      	ldr	r2, [pc, #36]	; (800d710 <prvHeapInit+0xbc>)
 800d6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6ec:	4b09      	ldr	r3, [pc, #36]	; (800d714 <prvHeapInit+0xc0>)
 800d6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6f2:	601a      	str	r2, [r3, #0]
}
 800d6f4:	bf00      	nop
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	200054ac 	.word	0x200054ac
 800d704:	200090ac 	.word	0x200090ac
 800d708:	200090b4 	.word	0x200090b4
 800d70c:	200090bc 	.word	0x200090bc
 800d710:	200090b8 	.word	0x200090b8
 800d714:	200090c0 	.word	0x200090c0

0800d718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d720:	4b28      	ldr	r3, [pc, #160]	; (800d7c4 <prvInsertBlockIntoFreeList+0xac>)
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	e002      	b.n	800d72c <prvInsertBlockIntoFreeList+0x14>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	429a      	cmp	r2, r3
 800d734:	d8f7      	bhi.n	800d726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	4413      	add	r3, r2
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d108      	bne.n	800d75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	441a      	add	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	441a      	add	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d118      	bne.n	800d7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	d00d      	beq.n	800d796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	441a      	add	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	e008      	b.n	800d7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d796:	4b0c      	ldr	r3, [pc, #48]	; (800d7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	e003      	b.n	800d7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d002      	beq.n	800d7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7b6:	bf00      	nop
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	200090ac 	.word	0x200090ac
 800d7c8:	200090b4 	.word	0x200090b4

0800d7cc <srand>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4b10      	ldr	r3, [pc, #64]	; (800d810 <srand+0x44>)
 800d7d0:	681d      	ldr	r5, [r3, #0]
 800d7d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	b9b3      	cbnz	r3, 800d806 <srand+0x3a>
 800d7d8:	2018      	movs	r0, #24
 800d7da:	f000 fab3 	bl	800dd44 <malloc>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	6328      	str	r0, [r5, #48]	; 0x30
 800d7e2:	b920      	cbnz	r0, 800d7ee <srand+0x22>
 800d7e4:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <srand+0x48>)
 800d7e6:	480c      	ldr	r0, [pc, #48]	; (800d818 <srand+0x4c>)
 800d7e8:	2146      	movs	r1, #70	; 0x46
 800d7ea:	f000 fa41 	bl	800dc70 <__assert_func>
 800d7ee:	490b      	ldr	r1, [pc, #44]	; (800d81c <srand+0x50>)
 800d7f0:	4b0b      	ldr	r3, [pc, #44]	; (800d820 <srand+0x54>)
 800d7f2:	e9c0 1300 	strd	r1, r3, [r0]
 800d7f6:	4b0b      	ldr	r3, [pc, #44]	; (800d824 <srand+0x58>)
 800d7f8:	6083      	str	r3, [r0, #8]
 800d7fa:	230b      	movs	r3, #11
 800d7fc:	8183      	strh	r3, [r0, #12]
 800d7fe:	2100      	movs	r1, #0
 800d800:	2001      	movs	r0, #1
 800d802:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d806:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800d808:	2200      	movs	r2, #0
 800d80a:	611c      	str	r4, [r3, #16]
 800d80c:	615a      	str	r2, [r3, #20]
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	200000a0 	.word	0x200000a0
 800d814:	0801064c 	.word	0x0801064c
 800d818:	08010663 	.word	0x08010663
 800d81c:	abcd330e 	.word	0xabcd330e
 800d820:	e66d1234 	.word	0xe66d1234
 800d824:	0005deec 	.word	0x0005deec

0800d828 <rand>:
 800d828:	4b16      	ldr	r3, [pc, #88]	; (800d884 <rand+0x5c>)
 800d82a:	b510      	push	{r4, lr}
 800d82c:	681c      	ldr	r4, [r3, #0]
 800d82e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d830:	b9b3      	cbnz	r3, 800d860 <rand+0x38>
 800d832:	2018      	movs	r0, #24
 800d834:	f000 fa86 	bl	800dd44 <malloc>
 800d838:	4602      	mov	r2, r0
 800d83a:	6320      	str	r0, [r4, #48]	; 0x30
 800d83c:	b920      	cbnz	r0, 800d848 <rand+0x20>
 800d83e:	4b12      	ldr	r3, [pc, #72]	; (800d888 <rand+0x60>)
 800d840:	4812      	ldr	r0, [pc, #72]	; (800d88c <rand+0x64>)
 800d842:	2152      	movs	r1, #82	; 0x52
 800d844:	f000 fa14 	bl	800dc70 <__assert_func>
 800d848:	4911      	ldr	r1, [pc, #68]	; (800d890 <rand+0x68>)
 800d84a:	4b12      	ldr	r3, [pc, #72]	; (800d894 <rand+0x6c>)
 800d84c:	e9c0 1300 	strd	r1, r3, [r0]
 800d850:	4b11      	ldr	r3, [pc, #68]	; (800d898 <rand+0x70>)
 800d852:	6083      	str	r3, [r0, #8]
 800d854:	230b      	movs	r3, #11
 800d856:	8183      	strh	r3, [r0, #12]
 800d858:	2100      	movs	r1, #0
 800d85a:	2001      	movs	r0, #1
 800d85c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d860:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d862:	480e      	ldr	r0, [pc, #56]	; (800d89c <rand+0x74>)
 800d864:	690b      	ldr	r3, [r1, #16]
 800d866:	694c      	ldr	r4, [r1, #20]
 800d868:	4a0d      	ldr	r2, [pc, #52]	; (800d8a0 <rand+0x78>)
 800d86a:	4358      	muls	r0, r3
 800d86c:	fb02 0004 	mla	r0, r2, r4, r0
 800d870:	fba3 3202 	umull	r3, r2, r3, r2
 800d874:	3301      	adds	r3, #1
 800d876:	eb40 0002 	adc.w	r0, r0, r2
 800d87a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d87e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d882:	bd10      	pop	{r4, pc}
 800d884:	200000a0 	.word	0x200000a0
 800d888:	0801064c 	.word	0x0801064c
 800d88c:	08010663 	.word	0x08010663
 800d890:	abcd330e 	.word	0xabcd330e
 800d894:	e66d1234 	.word	0xe66d1234
 800d898:	0005deec 	.word	0x0005deec
 800d89c:	5851f42d 	.word	0x5851f42d
 800d8a0:	4c957f2d 	.word	0x4c957f2d

0800d8a4 <std>:
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	b510      	push	{r4, lr}
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d8ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8b2:	6083      	str	r3, [r0, #8]
 800d8b4:	8181      	strh	r1, [r0, #12]
 800d8b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d8b8:	81c2      	strh	r2, [r0, #14]
 800d8ba:	6183      	str	r3, [r0, #24]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	2208      	movs	r2, #8
 800d8c0:	305c      	adds	r0, #92	; 0x5c
 800d8c2:	f000 f8f4 	bl	800daae <memset>
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <std+0x58>)
 800d8c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	; (800d900 <std+0x5c>)
 800d8cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <std+0x60>)
 800d8d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8d2:	4b0d      	ldr	r3, [pc, #52]	; (800d908 <std+0x64>)
 800d8d4:	6323      	str	r3, [r4, #48]	; 0x30
 800d8d6:	4b0d      	ldr	r3, [pc, #52]	; (800d90c <std+0x68>)
 800d8d8:	6224      	str	r4, [r4, #32]
 800d8da:	429c      	cmp	r4, r3
 800d8dc:	d006      	beq.n	800d8ec <std+0x48>
 800d8de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d8e2:	4294      	cmp	r4, r2
 800d8e4:	d002      	beq.n	800d8ec <std+0x48>
 800d8e6:	33d0      	adds	r3, #208	; 0xd0
 800d8e8:	429c      	cmp	r4, r3
 800d8ea:	d105      	bne.n	800d8f8 <std+0x54>
 800d8ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f4:	f000 b9aa 	b.w	800dc4c <__retarget_lock_init_recursive>
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	bf00      	nop
 800d8fc:	0800da29 	.word	0x0800da29
 800d900:	0800da4b 	.word	0x0800da4b
 800d904:	0800da83 	.word	0x0800da83
 800d908:	0800daa7 	.word	0x0800daa7
 800d90c:	200090c4 	.word	0x200090c4

0800d910 <stdio_exit_handler>:
 800d910:	4a02      	ldr	r2, [pc, #8]	; (800d91c <stdio_exit_handler+0xc>)
 800d912:	4903      	ldr	r1, [pc, #12]	; (800d920 <stdio_exit_handler+0x10>)
 800d914:	4803      	ldr	r0, [pc, #12]	; (800d924 <stdio_exit_handler+0x14>)
 800d916:	f000 b869 	b.w	800d9ec <_fwalk_sglue>
 800d91a:	bf00      	nop
 800d91c:	20000048 	.word	0x20000048
 800d920:	0800dfb9 	.word	0x0800dfb9
 800d924:	20000054 	.word	0x20000054

0800d928 <cleanup_stdio>:
 800d928:	6841      	ldr	r1, [r0, #4]
 800d92a:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <cleanup_stdio+0x34>)
 800d92c:	4299      	cmp	r1, r3
 800d92e:	b510      	push	{r4, lr}
 800d930:	4604      	mov	r4, r0
 800d932:	d001      	beq.n	800d938 <cleanup_stdio+0x10>
 800d934:	f000 fb40 	bl	800dfb8 <_fflush_r>
 800d938:	68a1      	ldr	r1, [r4, #8]
 800d93a:	4b09      	ldr	r3, [pc, #36]	; (800d960 <cleanup_stdio+0x38>)
 800d93c:	4299      	cmp	r1, r3
 800d93e:	d002      	beq.n	800d946 <cleanup_stdio+0x1e>
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fb39 	bl	800dfb8 <_fflush_r>
 800d946:	68e1      	ldr	r1, [r4, #12]
 800d948:	4b06      	ldr	r3, [pc, #24]	; (800d964 <cleanup_stdio+0x3c>)
 800d94a:	4299      	cmp	r1, r3
 800d94c:	d004      	beq.n	800d958 <cleanup_stdio+0x30>
 800d94e:	4620      	mov	r0, r4
 800d950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d954:	f000 bb30 	b.w	800dfb8 <_fflush_r>
 800d958:	bd10      	pop	{r4, pc}
 800d95a:	bf00      	nop
 800d95c:	200090c4 	.word	0x200090c4
 800d960:	2000912c 	.word	0x2000912c
 800d964:	20009194 	.word	0x20009194

0800d968 <global_stdio_init.part.0>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	4b0b      	ldr	r3, [pc, #44]	; (800d998 <global_stdio_init.part.0+0x30>)
 800d96c:	4c0b      	ldr	r4, [pc, #44]	; (800d99c <global_stdio_init.part.0+0x34>)
 800d96e:	4a0c      	ldr	r2, [pc, #48]	; (800d9a0 <global_stdio_init.part.0+0x38>)
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	4620      	mov	r0, r4
 800d974:	2200      	movs	r2, #0
 800d976:	2104      	movs	r1, #4
 800d978:	f7ff ff94 	bl	800d8a4 <std>
 800d97c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d980:	2201      	movs	r2, #1
 800d982:	2109      	movs	r1, #9
 800d984:	f7ff ff8e 	bl	800d8a4 <std>
 800d988:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d98c:	2202      	movs	r2, #2
 800d98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d992:	2112      	movs	r1, #18
 800d994:	f7ff bf86 	b.w	800d8a4 <std>
 800d998:	200091fc 	.word	0x200091fc
 800d99c:	200090c4 	.word	0x200090c4
 800d9a0:	0800d911 	.word	0x0800d911

0800d9a4 <__sfp_lock_acquire>:
 800d9a4:	4801      	ldr	r0, [pc, #4]	; (800d9ac <__sfp_lock_acquire+0x8>)
 800d9a6:	f000 b952 	b.w	800dc4e <__retarget_lock_acquire_recursive>
 800d9aa:	bf00      	nop
 800d9ac:	20009205 	.word	0x20009205

0800d9b0 <__sfp_lock_release>:
 800d9b0:	4801      	ldr	r0, [pc, #4]	; (800d9b8 <__sfp_lock_release+0x8>)
 800d9b2:	f000 b94d 	b.w	800dc50 <__retarget_lock_release_recursive>
 800d9b6:	bf00      	nop
 800d9b8:	20009205 	.word	0x20009205

0800d9bc <__sinit>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	4604      	mov	r4, r0
 800d9c0:	f7ff fff0 	bl	800d9a4 <__sfp_lock_acquire>
 800d9c4:	6a23      	ldr	r3, [r4, #32]
 800d9c6:	b11b      	cbz	r3, 800d9d0 <__sinit+0x14>
 800d9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9cc:	f7ff bff0 	b.w	800d9b0 <__sfp_lock_release>
 800d9d0:	4b04      	ldr	r3, [pc, #16]	; (800d9e4 <__sinit+0x28>)
 800d9d2:	6223      	str	r3, [r4, #32]
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <__sinit+0x2c>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1f5      	bne.n	800d9c8 <__sinit+0xc>
 800d9dc:	f7ff ffc4 	bl	800d968 <global_stdio_init.part.0>
 800d9e0:	e7f2      	b.n	800d9c8 <__sinit+0xc>
 800d9e2:	bf00      	nop
 800d9e4:	0800d929 	.word	0x0800d929
 800d9e8:	200091fc 	.word	0x200091fc

0800d9ec <_fwalk_sglue>:
 800d9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	4688      	mov	r8, r1
 800d9f4:	4614      	mov	r4, r2
 800d9f6:	2600      	movs	r6, #0
 800d9f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9fc:	f1b9 0901 	subs.w	r9, r9, #1
 800da00:	d505      	bpl.n	800da0e <_fwalk_sglue+0x22>
 800da02:	6824      	ldr	r4, [r4, #0]
 800da04:	2c00      	cmp	r4, #0
 800da06:	d1f7      	bne.n	800d9f8 <_fwalk_sglue+0xc>
 800da08:	4630      	mov	r0, r6
 800da0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0e:	89ab      	ldrh	r3, [r5, #12]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d907      	bls.n	800da24 <_fwalk_sglue+0x38>
 800da14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da18:	3301      	adds	r3, #1
 800da1a:	d003      	beq.n	800da24 <_fwalk_sglue+0x38>
 800da1c:	4629      	mov	r1, r5
 800da1e:	4638      	mov	r0, r7
 800da20:	47c0      	blx	r8
 800da22:	4306      	orrs	r6, r0
 800da24:	3568      	adds	r5, #104	; 0x68
 800da26:	e7e9      	b.n	800d9fc <_fwalk_sglue+0x10>

0800da28 <__sread>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	460c      	mov	r4, r1
 800da2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da30:	f000 f8be 	bl	800dbb0 <_read_r>
 800da34:	2800      	cmp	r0, #0
 800da36:	bfab      	itete	ge
 800da38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da3a:	89a3      	ldrhlt	r3, [r4, #12]
 800da3c:	181b      	addge	r3, r3, r0
 800da3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da42:	bfac      	ite	ge
 800da44:	6563      	strge	r3, [r4, #84]	; 0x54
 800da46:	81a3      	strhlt	r3, [r4, #12]
 800da48:	bd10      	pop	{r4, pc}

0800da4a <__swrite>:
 800da4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4e:	461f      	mov	r7, r3
 800da50:	898b      	ldrh	r3, [r1, #12]
 800da52:	05db      	lsls	r3, r3, #23
 800da54:	4605      	mov	r5, r0
 800da56:	460c      	mov	r4, r1
 800da58:	4616      	mov	r6, r2
 800da5a:	d505      	bpl.n	800da68 <__swrite+0x1e>
 800da5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da60:	2302      	movs	r3, #2
 800da62:	2200      	movs	r2, #0
 800da64:	f000 f892 	bl	800db8c <_lseek_r>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	4632      	mov	r2, r6
 800da76:	463b      	mov	r3, r7
 800da78:	4628      	mov	r0, r5
 800da7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	f000 b8a9 	b.w	800dbd4 <_write_r>

0800da82 <__sseek>:
 800da82:	b510      	push	{r4, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8a:	f000 f87f 	bl	800db8c <_lseek_r>
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	bf15      	itete	ne
 800da94:	6560      	strne	r0, [r4, #84]	; 0x54
 800da96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da9e:	81a3      	strheq	r3, [r4, #12]
 800daa0:	bf18      	it	ne
 800daa2:	81a3      	strhne	r3, [r4, #12]
 800daa4:	bd10      	pop	{r4, pc}

0800daa6 <__sclose>:
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 b809 	b.w	800dac0 <_close_r>

0800daae <memset>:
 800daae:	4402      	add	r2, r0
 800dab0:	4603      	mov	r3, r0
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d100      	bne.n	800dab8 <memset+0xa>
 800dab6:	4770      	bx	lr
 800dab8:	f803 1b01 	strb.w	r1, [r3], #1
 800dabc:	e7f9      	b.n	800dab2 <memset+0x4>
	...

0800dac0 <_close_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d06      	ldr	r5, [pc, #24]	; (800dadc <_close_r+0x1c>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f5 ff1f 	bl	800390e <_close>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_close_r+0x1a>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_close_r+0x1a>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	20009200 	.word	0x20009200

0800dae0 <_reclaim_reent>:
 800dae0:	4b29      	ldr	r3, [pc, #164]	; (800db88 <_reclaim_reent+0xa8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4283      	cmp	r3, r0
 800dae6:	b570      	push	{r4, r5, r6, lr}
 800dae8:	4604      	mov	r4, r0
 800daea:	d04b      	beq.n	800db84 <_reclaim_reent+0xa4>
 800daec:	69c3      	ldr	r3, [r0, #28]
 800daee:	b143      	cbz	r3, 800db02 <_reclaim_reent+0x22>
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d144      	bne.n	800db80 <_reclaim_reent+0xa0>
 800daf6:	69e3      	ldr	r3, [r4, #28]
 800daf8:	6819      	ldr	r1, [r3, #0]
 800dafa:	b111      	cbz	r1, 800db02 <_reclaim_reent+0x22>
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 f8d5 	bl	800dcac <_free_r>
 800db02:	6961      	ldr	r1, [r4, #20]
 800db04:	b111      	cbz	r1, 800db0c <_reclaim_reent+0x2c>
 800db06:	4620      	mov	r0, r4
 800db08:	f000 f8d0 	bl	800dcac <_free_r>
 800db0c:	69e1      	ldr	r1, [r4, #28]
 800db0e:	b111      	cbz	r1, 800db16 <_reclaim_reent+0x36>
 800db10:	4620      	mov	r0, r4
 800db12:	f000 f8cb 	bl	800dcac <_free_r>
 800db16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800db18:	b111      	cbz	r1, 800db20 <_reclaim_reent+0x40>
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 f8c6 	bl	800dcac <_free_r>
 800db20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db22:	b111      	cbz	r1, 800db2a <_reclaim_reent+0x4a>
 800db24:	4620      	mov	r0, r4
 800db26:	f000 f8c1 	bl	800dcac <_free_r>
 800db2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db2c:	b111      	cbz	r1, 800db34 <_reclaim_reent+0x54>
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 f8bc 	bl	800dcac <_free_r>
 800db34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800db36:	b111      	cbz	r1, 800db3e <_reclaim_reent+0x5e>
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 f8b7 	bl	800dcac <_free_r>
 800db3e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800db40:	b111      	cbz	r1, 800db48 <_reclaim_reent+0x68>
 800db42:	4620      	mov	r0, r4
 800db44:	f000 f8b2 	bl	800dcac <_free_r>
 800db48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db4a:	b111      	cbz	r1, 800db52 <_reclaim_reent+0x72>
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 f8ad 	bl	800dcac <_free_r>
 800db52:	6a23      	ldr	r3, [r4, #32]
 800db54:	b1b3      	cbz	r3, 800db84 <_reclaim_reent+0xa4>
 800db56:	4620      	mov	r0, r4
 800db58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db5c:	4718      	bx	r3
 800db5e:	5949      	ldr	r1, [r1, r5]
 800db60:	b941      	cbnz	r1, 800db74 <_reclaim_reent+0x94>
 800db62:	3504      	adds	r5, #4
 800db64:	69e3      	ldr	r3, [r4, #28]
 800db66:	2d80      	cmp	r5, #128	; 0x80
 800db68:	68d9      	ldr	r1, [r3, #12]
 800db6a:	d1f8      	bne.n	800db5e <_reclaim_reent+0x7e>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 f89d 	bl	800dcac <_free_r>
 800db72:	e7c0      	b.n	800daf6 <_reclaim_reent+0x16>
 800db74:	680e      	ldr	r6, [r1, #0]
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f898 	bl	800dcac <_free_r>
 800db7c:	4631      	mov	r1, r6
 800db7e:	e7ef      	b.n	800db60 <_reclaim_reent+0x80>
 800db80:	2500      	movs	r5, #0
 800db82:	e7ef      	b.n	800db64 <_reclaim_reent+0x84>
 800db84:	bd70      	pop	{r4, r5, r6, pc}
 800db86:	bf00      	nop
 800db88:	200000a0 	.word	0x200000a0

0800db8c <_lseek_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	; (800dbac <_lseek_r+0x20>)
 800db90:	4604      	mov	r4, r0
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	2200      	movs	r2, #0
 800db98:	602a      	str	r2, [r5, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f7f5 fede 	bl	800395c <_lseek>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_lseek_r+0x1e>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_lseek_r+0x1e>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	20009200 	.word	0x20009200

0800dbb0 <_read_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	; (800dbd0 <_read_r+0x20>)
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f5 fe6c 	bl	800389c <_read>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_read_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_read_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	20009200 	.word	0x20009200

0800dbd4 <_write_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d07      	ldr	r5, [pc, #28]	; (800dbf4 <_write_r+0x20>)
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4608      	mov	r0, r1
 800dbdc:	4611      	mov	r1, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	602a      	str	r2, [r5, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	f7f5 fe77 	bl	80038d6 <_write>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_write_r+0x1e>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_write_r+0x1e>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20009200 	.word	0x20009200

0800dbf8 <__errno>:
 800dbf8:	4b01      	ldr	r3, [pc, #4]	; (800dc00 <__errno+0x8>)
 800dbfa:	6818      	ldr	r0, [r3, #0]
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	200000a0 	.word	0x200000a0

0800dc04 <__libc_init_array>:
 800dc04:	b570      	push	{r4, r5, r6, lr}
 800dc06:	4d0d      	ldr	r5, [pc, #52]	; (800dc3c <__libc_init_array+0x38>)
 800dc08:	4c0d      	ldr	r4, [pc, #52]	; (800dc40 <__libc_init_array+0x3c>)
 800dc0a:	1b64      	subs	r4, r4, r5
 800dc0c:	10a4      	asrs	r4, r4, #2
 800dc0e:	2600      	movs	r6, #0
 800dc10:	42a6      	cmp	r6, r4
 800dc12:	d109      	bne.n	800dc28 <__libc_init_array+0x24>
 800dc14:	4d0b      	ldr	r5, [pc, #44]	; (800dc44 <__libc_init_array+0x40>)
 800dc16:	4c0c      	ldr	r4, [pc, #48]	; (800dc48 <__libc_init_array+0x44>)
 800dc18:	f000 fe5e 	bl	800e8d8 <_init>
 800dc1c:	1b64      	subs	r4, r4, r5
 800dc1e:	10a4      	asrs	r4, r4, #2
 800dc20:	2600      	movs	r6, #0
 800dc22:	42a6      	cmp	r6, r4
 800dc24:	d105      	bne.n	800dc32 <__libc_init_array+0x2e>
 800dc26:	bd70      	pop	{r4, r5, r6, pc}
 800dc28:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc2c:	4798      	blx	r3
 800dc2e:	3601      	adds	r6, #1
 800dc30:	e7ee      	b.n	800dc10 <__libc_init_array+0xc>
 800dc32:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc36:	4798      	blx	r3
 800dc38:	3601      	adds	r6, #1
 800dc3a:	e7f2      	b.n	800dc22 <__libc_init_array+0x1e>
 800dc3c:	08010734 	.word	0x08010734
 800dc40:	08010734 	.word	0x08010734
 800dc44:	08010734 	.word	0x08010734
 800dc48:	08010738 	.word	0x08010738

0800dc4c <__retarget_lock_init_recursive>:
 800dc4c:	4770      	bx	lr

0800dc4e <__retarget_lock_acquire_recursive>:
 800dc4e:	4770      	bx	lr

0800dc50 <__retarget_lock_release_recursive>:
 800dc50:	4770      	bx	lr

0800dc52 <memcpy>:
 800dc52:	440a      	add	r2, r1
 800dc54:	4291      	cmp	r1, r2
 800dc56:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc5a:	d100      	bne.n	800dc5e <memcpy+0xc>
 800dc5c:	4770      	bx	lr
 800dc5e:	b510      	push	{r4, lr}
 800dc60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc68:	4291      	cmp	r1, r2
 800dc6a:	d1f9      	bne.n	800dc60 <memcpy+0xe>
 800dc6c:	bd10      	pop	{r4, pc}
	...

0800dc70 <__assert_func>:
 800dc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc72:	4614      	mov	r4, r2
 800dc74:	461a      	mov	r2, r3
 800dc76:	4b09      	ldr	r3, [pc, #36]	; (800dc9c <__assert_func+0x2c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	68d8      	ldr	r0, [r3, #12]
 800dc7e:	b14c      	cbz	r4, 800dc94 <__assert_func+0x24>
 800dc80:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <__assert_func+0x30>)
 800dc82:	9100      	str	r1, [sp, #0]
 800dc84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc88:	4906      	ldr	r1, [pc, #24]	; (800dca4 <__assert_func+0x34>)
 800dc8a:	462b      	mov	r3, r5
 800dc8c:	f000 f9bc 	bl	800e008 <fiprintf>
 800dc90:	f000 f9dc 	bl	800e04c <abort>
 800dc94:	4b04      	ldr	r3, [pc, #16]	; (800dca8 <__assert_func+0x38>)
 800dc96:	461c      	mov	r4, r3
 800dc98:	e7f3      	b.n	800dc82 <__assert_func+0x12>
 800dc9a:	bf00      	nop
 800dc9c:	200000a0 	.word	0x200000a0
 800dca0:	080106bb 	.word	0x080106bb
 800dca4:	080106c8 	.word	0x080106c8
 800dca8:	080106f6 	.word	0x080106f6

0800dcac <_free_r>:
 800dcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcae:	2900      	cmp	r1, #0
 800dcb0:	d044      	beq.n	800dd3c <_free_r+0x90>
 800dcb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb6:	9001      	str	r0, [sp, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f1a1 0404 	sub.w	r4, r1, #4
 800dcbe:	bfb8      	it	lt
 800dcc0:	18e4      	addlt	r4, r4, r3
 800dcc2:	f000 f8e7 	bl	800de94 <__malloc_lock>
 800dcc6:	4a1e      	ldr	r2, [pc, #120]	; (800dd40 <_free_r+0x94>)
 800dcc8:	9801      	ldr	r0, [sp, #4]
 800dcca:	6813      	ldr	r3, [r2, #0]
 800dccc:	b933      	cbnz	r3, 800dcdc <_free_r+0x30>
 800dcce:	6063      	str	r3, [r4, #4]
 800dcd0:	6014      	str	r4, [r2, #0]
 800dcd2:	b003      	add	sp, #12
 800dcd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcd8:	f000 b8e2 	b.w	800dea0 <__malloc_unlock>
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	d908      	bls.n	800dcf2 <_free_r+0x46>
 800dce0:	6825      	ldr	r5, [r4, #0]
 800dce2:	1961      	adds	r1, r4, r5
 800dce4:	428b      	cmp	r3, r1
 800dce6:	bf01      	itttt	eq
 800dce8:	6819      	ldreq	r1, [r3, #0]
 800dcea:	685b      	ldreq	r3, [r3, #4]
 800dcec:	1949      	addeq	r1, r1, r5
 800dcee:	6021      	streq	r1, [r4, #0]
 800dcf0:	e7ed      	b.n	800dcce <_free_r+0x22>
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	b10b      	cbz	r3, 800dcfc <_free_r+0x50>
 800dcf8:	42a3      	cmp	r3, r4
 800dcfa:	d9fa      	bls.n	800dcf2 <_free_r+0x46>
 800dcfc:	6811      	ldr	r1, [r2, #0]
 800dcfe:	1855      	adds	r5, r2, r1
 800dd00:	42a5      	cmp	r5, r4
 800dd02:	d10b      	bne.n	800dd1c <_free_r+0x70>
 800dd04:	6824      	ldr	r4, [r4, #0]
 800dd06:	4421      	add	r1, r4
 800dd08:	1854      	adds	r4, r2, r1
 800dd0a:	42a3      	cmp	r3, r4
 800dd0c:	6011      	str	r1, [r2, #0]
 800dd0e:	d1e0      	bne.n	800dcd2 <_free_r+0x26>
 800dd10:	681c      	ldr	r4, [r3, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	6053      	str	r3, [r2, #4]
 800dd16:	440c      	add	r4, r1
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	e7da      	b.n	800dcd2 <_free_r+0x26>
 800dd1c:	d902      	bls.n	800dd24 <_free_r+0x78>
 800dd1e:	230c      	movs	r3, #12
 800dd20:	6003      	str	r3, [r0, #0]
 800dd22:	e7d6      	b.n	800dcd2 <_free_r+0x26>
 800dd24:	6825      	ldr	r5, [r4, #0]
 800dd26:	1961      	adds	r1, r4, r5
 800dd28:	428b      	cmp	r3, r1
 800dd2a:	bf04      	itt	eq
 800dd2c:	6819      	ldreq	r1, [r3, #0]
 800dd2e:	685b      	ldreq	r3, [r3, #4]
 800dd30:	6063      	str	r3, [r4, #4]
 800dd32:	bf04      	itt	eq
 800dd34:	1949      	addeq	r1, r1, r5
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	6054      	str	r4, [r2, #4]
 800dd3a:	e7ca      	b.n	800dcd2 <_free_r+0x26>
 800dd3c:	b003      	add	sp, #12
 800dd3e:	bd30      	pop	{r4, r5, pc}
 800dd40:	20009208 	.word	0x20009208

0800dd44 <malloc>:
 800dd44:	4b02      	ldr	r3, [pc, #8]	; (800dd50 <malloc+0xc>)
 800dd46:	4601      	mov	r1, r0
 800dd48:	6818      	ldr	r0, [r3, #0]
 800dd4a:	f000 b823 	b.w	800dd94 <_malloc_r>
 800dd4e:	bf00      	nop
 800dd50:	200000a0 	.word	0x200000a0

0800dd54 <sbrk_aligned>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	4e0e      	ldr	r6, [pc, #56]	; (800dd90 <sbrk_aligned+0x3c>)
 800dd58:	460c      	mov	r4, r1
 800dd5a:	6831      	ldr	r1, [r6, #0]
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	b911      	cbnz	r1, 800dd66 <sbrk_aligned+0x12>
 800dd60:	f000 f964 	bl	800e02c <_sbrk_r>
 800dd64:	6030      	str	r0, [r6, #0]
 800dd66:	4621      	mov	r1, r4
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f000 f95f 	bl	800e02c <_sbrk_r>
 800dd6e:	1c43      	adds	r3, r0, #1
 800dd70:	d00a      	beq.n	800dd88 <sbrk_aligned+0x34>
 800dd72:	1cc4      	adds	r4, r0, #3
 800dd74:	f024 0403 	bic.w	r4, r4, #3
 800dd78:	42a0      	cmp	r0, r4
 800dd7a:	d007      	beq.n	800dd8c <sbrk_aligned+0x38>
 800dd7c:	1a21      	subs	r1, r4, r0
 800dd7e:	4628      	mov	r0, r5
 800dd80:	f000 f954 	bl	800e02c <_sbrk_r>
 800dd84:	3001      	adds	r0, #1
 800dd86:	d101      	bne.n	800dd8c <sbrk_aligned+0x38>
 800dd88:	f04f 34ff 	mov.w	r4, #4294967295
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	2000920c 	.word	0x2000920c

0800dd94 <_malloc_r>:
 800dd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd98:	1ccd      	adds	r5, r1, #3
 800dd9a:	f025 0503 	bic.w	r5, r5, #3
 800dd9e:	3508      	adds	r5, #8
 800dda0:	2d0c      	cmp	r5, #12
 800dda2:	bf38      	it	cc
 800dda4:	250c      	movcc	r5, #12
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	4607      	mov	r7, r0
 800ddaa:	db01      	blt.n	800ddb0 <_malloc_r+0x1c>
 800ddac:	42a9      	cmp	r1, r5
 800ddae:	d905      	bls.n	800ddbc <_malloc_r+0x28>
 800ddb0:	230c      	movs	r3, #12
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	2600      	movs	r6, #0
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800de90 <_malloc_r+0xfc>
 800ddc0:	f000 f868 	bl	800de94 <__malloc_lock>
 800ddc4:	f8d8 3000 	ldr.w	r3, [r8]
 800ddc8:	461c      	mov	r4, r3
 800ddca:	bb5c      	cbnz	r4, 800de24 <_malloc_r+0x90>
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4638      	mov	r0, r7
 800ddd0:	f7ff ffc0 	bl	800dd54 <sbrk_aligned>
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	d155      	bne.n	800de86 <_malloc_r+0xf2>
 800ddda:	f8d8 4000 	ldr.w	r4, [r8]
 800ddde:	4626      	mov	r6, r4
 800dde0:	2e00      	cmp	r6, #0
 800dde2:	d145      	bne.n	800de70 <_malloc_r+0xdc>
 800dde4:	2c00      	cmp	r4, #0
 800dde6:	d048      	beq.n	800de7a <_malloc_r+0xe6>
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	4631      	mov	r1, r6
 800ddec:	4638      	mov	r0, r7
 800ddee:	eb04 0903 	add.w	r9, r4, r3
 800ddf2:	f000 f91b 	bl	800e02c <_sbrk_r>
 800ddf6:	4581      	cmp	r9, r0
 800ddf8:	d13f      	bne.n	800de7a <_malloc_r+0xe6>
 800ddfa:	6821      	ldr	r1, [r4, #0]
 800ddfc:	1a6d      	subs	r5, r5, r1
 800ddfe:	4629      	mov	r1, r5
 800de00:	4638      	mov	r0, r7
 800de02:	f7ff ffa7 	bl	800dd54 <sbrk_aligned>
 800de06:	3001      	adds	r0, #1
 800de08:	d037      	beq.n	800de7a <_malloc_r+0xe6>
 800de0a:	6823      	ldr	r3, [r4, #0]
 800de0c:	442b      	add	r3, r5
 800de0e:	6023      	str	r3, [r4, #0]
 800de10:	f8d8 3000 	ldr.w	r3, [r8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d038      	beq.n	800de8a <_malloc_r+0xf6>
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	42a2      	cmp	r2, r4
 800de1c:	d12b      	bne.n	800de76 <_malloc_r+0xe2>
 800de1e:	2200      	movs	r2, #0
 800de20:	605a      	str	r2, [r3, #4]
 800de22:	e00f      	b.n	800de44 <_malloc_r+0xb0>
 800de24:	6822      	ldr	r2, [r4, #0]
 800de26:	1b52      	subs	r2, r2, r5
 800de28:	d41f      	bmi.n	800de6a <_malloc_r+0xd6>
 800de2a:	2a0b      	cmp	r2, #11
 800de2c:	d917      	bls.n	800de5e <_malloc_r+0xca>
 800de2e:	1961      	adds	r1, r4, r5
 800de30:	42a3      	cmp	r3, r4
 800de32:	6025      	str	r5, [r4, #0]
 800de34:	bf18      	it	ne
 800de36:	6059      	strne	r1, [r3, #4]
 800de38:	6863      	ldr	r3, [r4, #4]
 800de3a:	bf08      	it	eq
 800de3c:	f8c8 1000 	streq.w	r1, [r8]
 800de40:	5162      	str	r2, [r4, r5]
 800de42:	604b      	str	r3, [r1, #4]
 800de44:	4638      	mov	r0, r7
 800de46:	f104 060b 	add.w	r6, r4, #11
 800de4a:	f000 f829 	bl	800dea0 <__malloc_unlock>
 800de4e:	f026 0607 	bic.w	r6, r6, #7
 800de52:	1d23      	adds	r3, r4, #4
 800de54:	1af2      	subs	r2, r6, r3
 800de56:	d0ae      	beq.n	800ddb6 <_malloc_r+0x22>
 800de58:	1b9b      	subs	r3, r3, r6
 800de5a:	50a3      	str	r3, [r4, r2]
 800de5c:	e7ab      	b.n	800ddb6 <_malloc_r+0x22>
 800de5e:	42a3      	cmp	r3, r4
 800de60:	6862      	ldr	r2, [r4, #4]
 800de62:	d1dd      	bne.n	800de20 <_malloc_r+0x8c>
 800de64:	f8c8 2000 	str.w	r2, [r8]
 800de68:	e7ec      	b.n	800de44 <_malloc_r+0xb0>
 800de6a:	4623      	mov	r3, r4
 800de6c:	6864      	ldr	r4, [r4, #4]
 800de6e:	e7ac      	b.n	800ddca <_malloc_r+0x36>
 800de70:	4634      	mov	r4, r6
 800de72:	6876      	ldr	r6, [r6, #4]
 800de74:	e7b4      	b.n	800dde0 <_malloc_r+0x4c>
 800de76:	4613      	mov	r3, r2
 800de78:	e7cc      	b.n	800de14 <_malloc_r+0x80>
 800de7a:	230c      	movs	r3, #12
 800de7c:	603b      	str	r3, [r7, #0]
 800de7e:	4638      	mov	r0, r7
 800de80:	f000 f80e 	bl	800dea0 <__malloc_unlock>
 800de84:	e797      	b.n	800ddb6 <_malloc_r+0x22>
 800de86:	6025      	str	r5, [r4, #0]
 800de88:	e7dc      	b.n	800de44 <_malloc_r+0xb0>
 800de8a:	605b      	str	r3, [r3, #4]
 800de8c:	deff      	udf	#255	; 0xff
 800de8e:	bf00      	nop
 800de90:	20009208 	.word	0x20009208

0800de94 <__malloc_lock>:
 800de94:	4801      	ldr	r0, [pc, #4]	; (800de9c <__malloc_lock+0x8>)
 800de96:	f7ff beda 	b.w	800dc4e <__retarget_lock_acquire_recursive>
 800de9a:	bf00      	nop
 800de9c:	20009204 	.word	0x20009204

0800dea0 <__malloc_unlock>:
 800dea0:	4801      	ldr	r0, [pc, #4]	; (800dea8 <__malloc_unlock+0x8>)
 800dea2:	f7ff bed5 	b.w	800dc50 <__retarget_lock_release_recursive>
 800dea6:	bf00      	nop
 800dea8:	20009204 	.word	0x20009204

0800deac <__sflush_r>:
 800deac:	898a      	ldrh	r2, [r1, #12]
 800deae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	4605      	mov	r5, r0
 800deb4:	0710      	lsls	r0, r2, #28
 800deb6:	460c      	mov	r4, r1
 800deb8:	d458      	bmi.n	800df6c <__sflush_r+0xc0>
 800deba:	684b      	ldr	r3, [r1, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	dc05      	bgt.n	800decc <__sflush_r+0x20>
 800dec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dc02      	bgt.n	800decc <__sflush_r+0x20>
 800dec6:	2000      	movs	r0, #0
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dece:	2e00      	cmp	r6, #0
 800ded0:	d0f9      	beq.n	800dec6 <__sflush_r+0x1a>
 800ded2:	2300      	movs	r3, #0
 800ded4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ded8:	682f      	ldr	r7, [r5, #0]
 800deda:	6a21      	ldr	r1, [r4, #32]
 800dedc:	602b      	str	r3, [r5, #0]
 800dede:	d032      	beq.n	800df46 <__sflush_r+0x9a>
 800dee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	075a      	lsls	r2, r3, #29
 800dee6:	d505      	bpl.n	800def4 <__sflush_r+0x48>
 800dee8:	6863      	ldr	r3, [r4, #4]
 800deea:	1ac0      	subs	r0, r0, r3
 800deec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deee:	b10b      	cbz	r3, 800def4 <__sflush_r+0x48>
 800def0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800def2:	1ac0      	subs	r0, r0, r3
 800def4:	2300      	movs	r3, #0
 800def6:	4602      	mov	r2, r0
 800def8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800defa:	6a21      	ldr	r1, [r4, #32]
 800defc:	4628      	mov	r0, r5
 800defe:	47b0      	blx	r6
 800df00:	1c43      	adds	r3, r0, #1
 800df02:	89a3      	ldrh	r3, [r4, #12]
 800df04:	d106      	bne.n	800df14 <__sflush_r+0x68>
 800df06:	6829      	ldr	r1, [r5, #0]
 800df08:	291d      	cmp	r1, #29
 800df0a:	d82b      	bhi.n	800df64 <__sflush_r+0xb8>
 800df0c:	4a29      	ldr	r2, [pc, #164]	; (800dfb4 <__sflush_r+0x108>)
 800df0e:	410a      	asrs	r2, r1
 800df10:	07d6      	lsls	r6, r2, #31
 800df12:	d427      	bmi.n	800df64 <__sflush_r+0xb8>
 800df14:	2200      	movs	r2, #0
 800df16:	6062      	str	r2, [r4, #4]
 800df18:	04d9      	lsls	r1, r3, #19
 800df1a:	6922      	ldr	r2, [r4, #16]
 800df1c:	6022      	str	r2, [r4, #0]
 800df1e:	d504      	bpl.n	800df2a <__sflush_r+0x7e>
 800df20:	1c42      	adds	r2, r0, #1
 800df22:	d101      	bne.n	800df28 <__sflush_r+0x7c>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	b903      	cbnz	r3, 800df2a <__sflush_r+0x7e>
 800df28:	6560      	str	r0, [r4, #84]	; 0x54
 800df2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df2c:	602f      	str	r7, [r5, #0]
 800df2e:	2900      	cmp	r1, #0
 800df30:	d0c9      	beq.n	800dec6 <__sflush_r+0x1a>
 800df32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df36:	4299      	cmp	r1, r3
 800df38:	d002      	beq.n	800df40 <__sflush_r+0x94>
 800df3a:	4628      	mov	r0, r5
 800df3c:	f7ff feb6 	bl	800dcac <_free_r>
 800df40:	2000      	movs	r0, #0
 800df42:	6360      	str	r0, [r4, #52]	; 0x34
 800df44:	e7c0      	b.n	800dec8 <__sflush_r+0x1c>
 800df46:	2301      	movs	r3, #1
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	1c41      	adds	r1, r0, #1
 800df4e:	d1c8      	bne.n	800dee2 <__sflush_r+0x36>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0c5      	beq.n	800dee2 <__sflush_r+0x36>
 800df56:	2b1d      	cmp	r3, #29
 800df58:	d001      	beq.n	800df5e <__sflush_r+0xb2>
 800df5a:	2b16      	cmp	r3, #22
 800df5c:	d101      	bne.n	800df62 <__sflush_r+0xb6>
 800df5e:	602f      	str	r7, [r5, #0]
 800df60:	e7b1      	b.n	800dec6 <__sflush_r+0x1a>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	e7ad      	b.n	800dec8 <__sflush_r+0x1c>
 800df6c:	690f      	ldr	r7, [r1, #16]
 800df6e:	2f00      	cmp	r7, #0
 800df70:	d0a9      	beq.n	800dec6 <__sflush_r+0x1a>
 800df72:	0793      	lsls	r3, r2, #30
 800df74:	680e      	ldr	r6, [r1, #0]
 800df76:	bf08      	it	eq
 800df78:	694b      	ldreq	r3, [r1, #20]
 800df7a:	600f      	str	r7, [r1, #0]
 800df7c:	bf18      	it	ne
 800df7e:	2300      	movne	r3, #0
 800df80:	eba6 0807 	sub.w	r8, r6, r7
 800df84:	608b      	str	r3, [r1, #8]
 800df86:	f1b8 0f00 	cmp.w	r8, #0
 800df8a:	dd9c      	ble.n	800dec6 <__sflush_r+0x1a>
 800df8c:	6a21      	ldr	r1, [r4, #32]
 800df8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df90:	4643      	mov	r3, r8
 800df92:	463a      	mov	r2, r7
 800df94:	4628      	mov	r0, r5
 800df96:	47b0      	blx	r6
 800df98:	2800      	cmp	r0, #0
 800df9a:	dc06      	bgt.n	800dfaa <__sflush_r+0xfe>
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa8:	e78e      	b.n	800dec8 <__sflush_r+0x1c>
 800dfaa:	4407      	add	r7, r0
 800dfac:	eba8 0800 	sub.w	r8, r8, r0
 800dfb0:	e7e9      	b.n	800df86 <__sflush_r+0xda>
 800dfb2:	bf00      	nop
 800dfb4:	dfbffffe 	.word	0xdfbffffe

0800dfb8 <_fflush_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	690b      	ldr	r3, [r1, #16]
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	b913      	cbnz	r3, 800dfc8 <_fflush_r+0x10>
 800dfc2:	2500      	movs	r5, #0
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	b118      	cbz	r0, 800dfd2 <_fflush_r+0x1a>
 800dfca:	6a03      	ldr	r3, [r0, #32]
 800dfcc:	b90b      	cbnz	r3, 800dfd2 <_fflush_r+0x1a>
 800dfce:	f7ff fcf5 	bl	800d9bc <__sinit>
 800dfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f3      	beq.n	800dfc2 <_fflush_r+0xa>
 800dfda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d404      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe0:	0599      	lsls	r1, r3, #22
 800dfe2:	d402      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfe6:	f7ff fe32 	bl	800dc4e <__retarget_lock_acquire_recursive>
 800dfea:	4628      	mov	r0, r5
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7ff ff5d 	bl	800deac <__sflush_r>
 800dff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dff4:	07da      	lsls	r2, r3, #31
 800dff6:	4605      	mov	r5, r0
 800dff8:	d4e4      	bmi.n	800dfc4 <_fflush_r+0xc>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	059b      	lsls	r3, r3, #22
 800dffe:	d4e1      	bmi.n	800dfc4 <_fflush_r+0xc>
 800e000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e002:	f7ff fe25 	bl	800dc50 <__retarget_lock_release_recursive>
 800e006:	e7dd      	b.n	800dfc4 <_fflush_r+0xc>

0800e008 <fiprintf>:
 800e008:	b40e      	push	{r1, r2, r3}
 800e00a:	b503      	push	{r0, r1, lr}
 800e00c:	4601      	mov	r1, r0
 800e00e:	ab03      	add	r3, sp, #12
 800e010:	4805      	ldr	r0, [pc, #20]	; (800e028 <fiprintf+0x20>)
 800e012:	f853 2b04 	ldr.w	r2, [r3], #4
 800e016:	6800      	ldr	r0, [r0, #0]
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	f000 f847 	bl	800e0ac <_vfiprintf_r>
 800e01e:	b002      	add	sp, #8
 800e020:	f85d eb04 	ldr.w	lr, [sp], #4
 800e024:	b003      	add	sp, #12
 800e026:	4770      	bx	lr
 800e028:	200000a0 	.word	0x200000a0

0800e02c <_sbrk_r>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4d06      	ldr	r5, [pc, #24]	; (800e048 <_sbrk_r+0x1c>)
 800e030:	2300      	movs	r3, #0
 800e032:	4604      	mov	r4, r0
 800e034:	4608      	mov	r0, r1
 800e036:	602b      	str	r3, [r5, #0]
 800e038:	f000 fc40 	bl	800e8bc <_sbrk>
 800e03c:	1c43      	adds	r3, r0, #1
 800e03e:	d102      	bne.n	800e046 <_sbrk_r+0x1a>
 800e040:	682b      	ldr	r3, [r5, #0]
 800e042:	b103      	cbz	r3, 800e046 <_sbrk_r+0x1a>
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	bd38      	pop	{r3, r4, r5, pc}
 800e048:	20009200 	.word	0x20009200

0800e04c <abort>:
 800e04c:	b508      	push	{r3, lr}
 800e04e:	2006      	movs	r0, #6
 800e050:	f000 fb94 	bl	800e77c <raise>
 800e054:	2001      	movs	r0, #1
 800e056:	f7f5 fc17 	bl	8003888 <_exit>

0800e05a <__sfputc_r>:
 800e05a:	6893      	ldr	r3, [r2, #8]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	b410      	push	{r4}
 800e062:	6093      	str	r3, [r2, #8]
 800e064:	da08      	bge.n	800e078 <__sfputc_r+0x1e>
 800e066:	6994      	ldr	r4, [r2, #24]
 800e068:	42a3      	cmp	r3, r4
 800e06a:	db01      	blt.n	800e070 <__sfputc_r+0x16>
 800e06c:	290a      	cmp	r1, #10
 800e06e:	d103      	bne.n	800e078 <__sfputc_r+0x1e>
 800e070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e074:	f000 bac4 	b.w	800e600 <__swbuf_r>
 800e078:	6813      	ldr	r3, [r2, #0]
 800e07a:	1c58      	adds	r0, r3, #1
 800e07c:	6010      	str	r0, [r2, #0]
 800e07e:	7019      	strb	r1, [r3, #0]
 800e080:	4608      	mov	r0, r1
 800e082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <__sfputs_r>:
 800e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	4614      	mov	r4, r2
 800e090:	18d5      	adds	r5, r2, r3
 800e092:	42ac      	cmp	r4, r5
 800e094:	d101      	bne.n	800e09a <__sfputs_r+0x12>
 800e096:	2000      	movs	r0, #0
 800e098:	e007      	b.n	800e0aa <__sfputs_r+0x22>
 800e09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09e:	463a      	mov	r2, r7
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	f7ff ffda 	bl	800e05a <__sfputc_r>
 800e0a6:	1c43      	adds	r3, r0, #1
 800e0a8:	d1f3      	bne.n	800e092 <__sfputs_r+0xa>
 800e0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0ac <_vfiprintf_r>:
 800e0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	b09d      	sub	sp, #116	; 0x74
 800e0b4:	4614      	mov	r4, r2
 800e0b6:	4698      	mov	r8, r3
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	b118      	cbz	r0, 800e0c4 <_vfiprintf_r+0x18>
 800e0bc:	6a03      	ldr	r3, [r0, #32]
 800e0be:	b90b      	cbnz	r3, 800e0c4 <_vfiprintf_r+0x18>
 800e0c0:	f7ff fc7c 	bl	800d9bc <__sinit>
 800e0c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0c6:	07d9      	lsls	r1, r3, #31
 800e0c8:	d405      	bmi.n	800e0d6 <_vfiprintf_r+0x2a>
 800e0ca:	89ab      	ldrh	r3, [r5, #12]
 800e0cc:	059a      	lsls	r2, r3, #22
 800e0ce:	d402      	bmi.n	800e0d6 <_vfiprintf_r+0x2a>
 800e0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0d2:	f7ff fdbc 	bl	800dc4e <__retarget_lock_acquire_recursive>
 800e0d6:	89ab      	ldrh	r3, [r5, #12]
 800e0d8:	071b      	lsls	r3, r3, #28
 800e0da:	d501      	bpl.n	800e0e0 <_vfiprintf_r+0x34>
 800e0dc:	692b      	ldr	r3, [r5, #16]
 800e0de:	b99b      	cbnz	r3, 800e108 <_vfiprintf_r+0x5c>
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f000 faca 	bl	800e67c <__swsetup_r>
 800e0e8:	b170      	cbz	r0, 800e108 <_vfiprintf_r+0x5c>
 800e0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0ec:	07dc      	lsls	r4, r3, #31
 800e0ee:	d504      	bpl.n	800e0fa <_vfiprintf_r+0x4e>
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f4:	b01d      	add	sp, #116	; 0x74
 800e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0fa:	89ab      	ldrh	r3, [r5, #12]
 800e0fc:	0598      	lsls	r0, r3, #22
 800e0fe:	d4f7      	bmi.n	800e0f0 <_vfiprintf_r+0x44>
 800e100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e102:	f7ff fda5 	bl	800dc50 <__retarget_lock_release_recursive>
 800e106:	e7f3      	b.n	800e0f0 <_vfiprintf_r+0x44>
 800e108:	2300      	movs	r3, #0
 800e10a:	9309      	str	r3, [sp, #36]	; 0x24
 800e10c:	2320      	movs	r3, #32
 800e10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e112:	f8cd 800c 	str.w	r8, [sp, #12]
 800e116:	2330      	movs	r3, #48	; 0x30
 800e118:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e2cc <_vfiprintf_r+0x220>
 800e11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e120:	f04f 0901 	mov.w	r9, #1
 800e124:	4623      	mov	r3, r4
 800e126:	469a      	mov	sl, r3
 800e128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e12c:	b10a      	cbz	r2, 800e132 <_vfiprintf_r+0x86>
 800e12e:	2a25      	cmp	r2, #37	; 0x25
 800e130:	d1f9      	bne.n	800e126 <_vfiprintf_r+0x7a>
 800e132:	ebba 0b04 	subs.w	fp, sl, r4
 800e136:	d00b      	beq.n	800e150 <_vfiprintf_r+0xa4>
 800e138:	465b      	mov	r3, fp
 800e13a:	4622      	mov	r2, r4
 800e13c:	4629      	mov	r1, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	f7ff ffa2 	bl	800e088 <__sfputs_r>
 800e144:	3001      	adds	r0, #1
 800e146:	f000 80a9 	beq.w	800e29c <_vfiprintf_r+0x1f0>
 800e14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e14c:	445a      	add	r2, fp
 800e14e:	9209      	str	r2, [sp, #36]	; 0x24
 800e150:	f89a 3000 	ldrb.w	r3, [sl]
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80a1 	beq.w	800e29c <_vfiprintf_r+0x1f0>
 800e15a:	2300      	movs	r3, #0
 800e15c:	f04f 32ff 	mov.w	r2, #4294967295
 800e160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e164:	f10a 0a01 	add.w	sl, sl, #1
 800e168:	9304      	str	r3, [sp, #16]
 800e16a:	9307      	str	r3, [sp, #28]
 800e16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e170:	931a      	str	r3, [sp, #104]	; 0x68
 800e172:	4654      	mov	r4, sl
 800e174:	2205      	movs	r2, #5
 800e176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17a:	4854      	ldr	r0, [pc, #336]	; (800e2cc <_vfiprintf_r+0x220>)
 800e17c:	f7f2 f860 	bl	8000240 <memchr>
 800e180:	9a04      	ldr	r2, [sp, #16]
 800e182:	b9d8      	cbnz	r0, 800e1bc <_vfiprintf_r+0x110>
 800e184:	06d1      	lsls	r1, r2, #27
 800e186:	bf44      	itt	mi
 800e188:	2320      	movmi	r3, #32
 800e18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e18e:	0713      	lsls	r3, r2, #28
 800e190:	bf44      	itt	mi
 800e192:	232b      	movmi	r3, #43	; 0x2b
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e198:	f89a 3000 	ldrb.w	r3, [sl]
 800e19c:	2b2a      	cmp	r3, #42	; 0x2a
 800e19e:	d015      	beq.n	800e1cc <_vfiprintf_r+0x120>
 800e1a0:	9a07      	ldr	r2, [sp, #28]
 800e1a2:	4654      	mov	r4, sl
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f04f 0c0a 	mov.w	ip, #10
 800e1aa:	4621      	mov	r1, r4
 800e1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b0:	3b30      	subs	r3, #48	; 0x30
 800e1b2:	2b09      	cmp	r3, #9
 800e1b4:	d94d      	bls.n	800e252 <_vfiprintf_r+0x1a6>
 800e1b6:	b1b0      	cbz	r0, 800e1e6 <_vfiprintf_r+0x13a>
 800e1b8:	9207      	str	r2, [sp, #28]
 800e1ba:	e014      	b.n	800e1e6 <_vfiprintf_r+0x13a>
 800e1bc:	eba0 0308 	sub.w	r3, r0, r8
 800e1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	9304      	str	r3, [sp, #16]
 800e1c8:	46a2      	mov	sl, r4
 800e1ca:	e7d2      	b.n	800e172 <_vfiprintf_r+0xc6>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	1d19      	adds	r1, r3, #4
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	9103      	str	r1, [sp, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	bfbb      	ittet	lt
 800e1d8:	425b      	neglt	r3, r3
 800e1da:	f042 0202 	orrlt.w	r2, r2, #2
 800e1de:	9307      	strge	r3, [sp, #28]
 800e1e0:	9307      	strlt	r3, [sp, #28]
 800e1e2:	bfb8      	it	lt
 800e1e4:	9204      	strlt	r2, [sp, #16]
 800e1e6:	7823      	ldrb	r3, [r4, #0]
 800e1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ea:	d10c      	bne.n	800e206 <_vfiprintf_r+0x15a>
 800e1ec:	7863      	ldrb	r3, [r4, #1]
 800e1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f0:	d134      	bne.n	800e25c <_vfiprintf_r+0x1b0>
 800e1f2:	9b03      	ldr	r3, [sp, #12]
 800e1f4:	1d1a      	adds	r2, r3, #4
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	9203      	str	r2, [sp, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bfb8      	it	lt
 800e1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e202:	3402      	adds	r4, #2
 800e204:	9305      	str	r3, [sp, #20]
 800e206:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e2dc <_vfiprintf_r+0x230>
 800e20a:	7821      	ldrb	r1, [r4, #0]
 800e20c:	2203      	movs	r2, #3
 800e20e:	4650      	mov	r0, sl
 800e210:	f7f2 f816 	bl	8000240 <memchr>
 800e214:	b138      	cbz	r0, 800e226 <_vfiprintf_r+0x17a>
 800e216:	9b04      	ldr	r3, [sp, #16]
 800e218:	eba0 000a 	sub.w	r0, r0, sl
 800e21c:	2240      	movs	r2, #64	; 0x40
 800e21e:	4082      	lsls	r2, r0
 800e220:	4313      	orrs	r3, r2
 800e222:	3401      	adds	r4, #1
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22a:	4829      	ldr	r0, [pc, #164]	; (800e2d0 <_vfiprintf_r+0x224>)
 800e22c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e230:	2206      	movs	r2, #6
 800e232:	f7f2 f805 	bl	8000240 <memchr>
 800e236:	2800      	cmp	r0, #0
 800e238:	d03f      	beq.n	800e2ba <_vfiprintf_r+0x20e>
 800e23a:	4b26      	ldr	r3, [pc, #152]	; (800e2d4 <_vfiprintf_r+0x228>)
 800e23c:	bb1b      	cbnz	r3, 800e286 <_vfiprintf_r+0x1da>
 800e23e:	9b03      	ldr	r3, [sp, #12]
 800e240:	3307      	adds	r3, #7
 800e242:	f023 0307 	bic.w	r3, r3, #7
 800e246:	3308      	adds	r3, #8
 800e248:	9303      	str	r3, [sp, #12]
 800e24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24c:	443b      	add	r3, r7
 800e24e:	9309      	str	r3, [sp, #36]	; 0x24
 800e250:	e768      	b.n	800e124 <_vfiprintf_r+0x78>
 800e252:	fb0c 3202 	mla	r2, ip, r2, r3
 800e256:	460c      	mov	r4, r1
 800e258:	2001      	movs	r0, #1
 800e25a:	e7a6      	b.n	800e1aa <_vfiprintf_r+0xfe>
 800e25c:	2300      	movs	r3, #0
 800e25e:	3401      	adds	r4, #1
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	4619      	mov	r1, r3
 800e264:	f04f 0c0a 	mov.w	ip, #10
 800e268:	4620      	mov	r0, r4
 800e26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e26e:	3a30      	subs	r2, #48	; 0x30
 800e270:	2a09      	cmp	r2, #9
 800e272:	d903      	bls.n	800e27c <_vfiprintf_r+0x1d0>
 800e274:	2b00      	cmp	r3, #0
 800e276:	d0c6      	beq.n	800e206 <_vfiprintf_r+0x15a>
 800e278:	9105      	str	r1, [sp, #20]
 800e27a:	e7c4      	b.n	800e206 <_vfiprintf_r+0x15a>
 800e27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e280:	4604      	mov	r4, r0
 800e282:	2301      	movs	r3, #1
 800e284:	e7f0      	b.n	800e268 <_vfiprintf_r+0x1bc>
 800e286:	ab03      	add	r3, sp, #12
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	462a      	mov	r2, r5
 800e28c:	4b12      	ldr	r3, [pc, #72]	; (800e2d8 <_vfiprintf_r+0x22c>)
 800e28e:	a904      	add	r1, sp, #16
 800e290:	4630      	mov	r0, r6
 800e292:	f3af 8000 	nop.w
 800e296:	4607      	mov	r7, r0
 800e298:	1c78      	adds	r0, r7, #1
 800e29a:	d1d6      	bne.n	800e24a <_vfiprintf_r+0x19e>
 800e29c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e29e:	07d9      	lsls	r1, r3, #31
 800e2a0:	d405      	bmi.n	800e2ae <_vfiprintf_r+0x202>
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	059a      	lsls	r2, r3, #22
 800e2a6:	d402      	bmi.n	800e2ae <_vfiprintf_r+0x202>
 800e2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2aa:	f7ff fcd1 	bl	800dc50 <__retarget_lock_release_recursive>
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	065b      	lsls	r3, r3, #25
 800e2b2:	f53f af1d 	bmi.w	800e0f0 <_vfiprintf_r+0x44>
 800e2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b8:	e71c      	b.n	800e0f4 <_vfiprintf_r+0x48>
 800e2ba:	ab03      	add	r3, sp, #12
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	462a      	mov	r2, r5
 800e2c0:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <_vfiprintf_r+0x22c>)
 800e2c2:	a904      	add	r1, sp, #16
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f000 f879 	bl	800e3bc <_printf_i>
 800e2ca:	e7e4      	b.n	800e296 <_vfiprintf_r+0x1ea>
 800e2cc:	080106f7 	.word	0x080106f7
 800e2d0:	08010701 	.word	0x08010701
 800e2d4:	00000000 	.word	0x00000000
 800e2d8:	0800e089 	.word	0x0800e089
 800e2dc:	080106fd 	.word	0x080106fd

0800e2e0 <_printf_common>:
 800e2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e4:	4616      	mov	r6, r2
 800e2e6:	4699      	mov	r9, r3
 800e2e8:	688a      	ldr	r2, [r1, #8]
 800e2ea:	690b      	ldr	r3, [r1, #16]
 800e2ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	bfb8      	it	lt
 800e2f4:	4613      	movlt	r3, r2
 800e2f6:	6033      	str	r3, [r6, #0]
 800e2f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	460c      	mov	r4, r1
 800e300:	b10a      	cbz	r2, 800e306 <_printf_common+0x26>
 800e302:	3301      	adds	r3, #1
 800e304:	6033      	str	r3, [r6, #0]
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	0699      	lsls	r1, r3, #26
 800e30a:	bf42      	ittt	mi
 800e30c:	6833      	ldrmi	r3, [r6, #0]
 800e30e:	3302      	addmi	r3, #2
 800e310:	6033      	strmi	r3, [r6, #0]
 800e312:	6825      	ldr	r5, [r4, #0]
 800e314:	f015 0506 	ands.w	r5, r5, #6
 800e318:	d106      	bne.n	800e328 <_printf_common+0x48>
 800e31a:	f104 0a19 	add.w	sl, r4, #25
 800e31e:	68e3      	ldr	r3, [r4, #12]
 800e320:	6832      	ldr	r2, [r6, #0]
 800e322:	1a9b      	subs	r3, r3, r2
 800e324:	42ab      	cmp	r3, r5
 800e326:	dc26      	bgt.n	800e376 <_printf_common+0x96>
 800e328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e32c:	1e13      	subs	r3, r2, #0
 800e32e:	6822      	ldr	r2, [r4, #0]
 800e330:	bf18      	it	ne
 800e332:	2301      	movne	r3, #1
 800e334:	0692      	lsls	r2, r2, #26
 800e336:	d42b      	bmi.n	800e390 <_printf_common+0xb0>
 800e338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e33c:	4649      	mov	r1, r9
 800e33e:	4638      	mov	r0, r7
 800e340:	47c0      	blx	r8
 800e342:	3001      	adds	r0, #1
 800e344:	d01e      	beq.n	800e384 <_printf_common+0xa4>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	f003 0306 	and.w	r3, r3, #6
 800e34e:	2b04      	cmp	r3, #4
 800e350:	bf02      	ittt	eq
 800e352:	68e5      	ldreq	r5, [r4, #12]
 800e354:	6833      	ldreq	r3, [r6, #0]
 800e356:	1aed      	subeq	r5, r5, r3
 800e358:	68a3      	ldr	r3, [r4, #8]
 800e35a:	bf0c      	ite	eq
 800e35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e360:	2500      	movne	r5, #0
 800e362:	4293      	cmp	r3, r2
 800e364:	bfc4      	itt	gt
 800e366:	1a9b      	subgt	r3, r3, r2
 800e368:	18ed      	addgt	r5, r5, r3
 800e36a:	2600      	movs	r6, #0
 800e36c:	341a      	adds	r4, #26
 800e36e:	42b5      	cmp	r5, r6
 800e370:	d11a      	bne.n	800e3a8 <_printf_common+0xc8>
 800e372:	2000      	movs	r0, #0
 800e374:	e008      	b.n	800e388 <_printf_common+0xa8>
 800e376:	2301      	movs	r3, #1
 800e378:	4652      	mov	r2, sl
 800e37a:	4649      	mov	r1, r9
 800e37c:	4638      	mov	r0, r7
 800e37e:	47c0      	blx	r8
 800e380:	3001      	adds	r0, #1
 800e382:	d103      	bne.n	800e38c <_printf_common+0xac>
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38c:	3501      	adds	r5, #1
 800e38e:	e7c6      	b.n	800e31e <_printf_common+0x3e>
 800e390:	18e1      	adds	r1, r4, r3
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	2030      	movs	r0, #48	; 0x30
 800e396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e39a:	4422      	add	r2, r4
 800e39c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3a4:	3302      	adds	r3, #2
 800e3a6:	e7c7      	b.n	800e338 <_printf_common+0x58>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	4649      	mov	r1, r9
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	47c0      	blx	r8
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d0e6      	beq.n	800e384 <_printf_common+0xa4>
 800e3b6:	3601      	adds	r6, #1
 800e3b8:	e7d9      	b.n	800e36e <_printf_common+0x8e>
	...

0800e3bc <_printf_i>:
 800e3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c0:	7e0f      	ldrb	r7, [r1, #24]
 800e3c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3c4:	2f78      	cmp	r7, #120	; 0x78
 800e3c6:	4691      	mov	r9, r2
 800e3c8:	4680      	mov	r8, r0
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	469a      	mov	sl, r3
 800e3ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3d2:	d807      	bhi.n	800e3e4 <_printf_i+0x28>
 800e3d4:	2f62      	cmp	r7, #98	; 0x62
 800e3d6:	d80a      	bhi.n	800e3ee <_printf_i+0x32>
 800e3d8:	2f00      	cmp	r7, #0
 800e3da:	f000 80d4 	beq.w	800e586 <_printf_i+0x1ca>
 800e3de:	2f58      	cmp	r7, #88	; 0x58
 800e3e0:	f000 80c0 	beq.w	800e564 <_printf_i+0x1a8>
 800e3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3ec:	e03a      	b.n	800e464 <_printf_i+0xa8>
 800e3ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3f2:	2b15      	cmp	r3, #21
 800e3f4:	d8f6      	bhi.n	800e3e4 <_printf_i+0x28>
 800e3f6:	a101      	add	r1, pc, #4	; (adr r1, 800e3fc <_printf_i+0x40>)
 800e3f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3fc:	0800e455 	.word	0x0800e455
 800e400:	0800e469 	.word	0x0800e469
 800e404:	0800e3e5 	.word	0x0800e3e5
 800e408:	0800e3e5 	.word	0x0800e3e5
 800e40c:	0800e3e5 	.word	0x0800e3e5
 800e410:	0800e3e5 	.word	0x0800e3e5
 800e414:	0800e469 	.word	0x0800e469
 800e418:	0800e3e5 	.word	0x0800e3e5
 800e41c:	0800e3e5 	.word	0x0800e3e5
 800e420:	0800e3e5 	.word	0x0800e3e5
 800e424:	0800e3e5 	.word	0x0800e3e5
 800e428:	0800e56d 	.word	0x0800e56d
 800e42c:	0800e495 	.word	0x0800e495
 800e430:	0800e527 	.word	0x0800e527
 800e434:	0800e3e5 	.word	0x0800e3e5
 800e438:	0800e3e5 	.word	0x0800e3e5
 800e43c:	0800e58f 	.word	0x0800e58f
 800e440:	0800e3e5 	.word	0x0800e3e5
 800e444:	0800e495 	.word	0x0800e495
 800e448:	0800e3e5 	.word	0x0800e3e5
 800e44c:	0800e3e5 	.word	0x0800e3e5
 800e450:	0800e52f 	.word	0x0800e52f
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	1d1a      	adds	r2, r3, #4
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	602a      	str	r2, [r5, #0]
 800e45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e464:	2301      	movs	r3, #1
 800e466:	e09f      	b.n	800e5a8 <_printf_i+0x1ec>
 800e468:	6820      	ldr	r0, [r4, #0]
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	0607      	lsls	r7, r0, #24
 800e46e:	f103 0104 	add.w	r1, r3, #4
 800e472:	6029      	str	r1, [r5, #0]
 800e474:	d501      	bpl.n	800e47a <_printf_i+0xbe>
 800e476:	681e      	ldr	r6, [r3, #0]
 800e478:	e003      	b.n	800e482 <_printf_i+0xc6>
 800e47a:	0646      	lsls	r6, r0, #25
 800e47c:	d5fb      	bpl.n	800e476 <_printf_i+0xba>
 800e47e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e482:	2e00      	cmp	r6, #0
 800e484:	da03      	bge.n	800e48e <_printf_i+0xd2>
 800e486:	232d      	movs	r3, #45	; 0x2d
 800e488:	4276      	negs	r6, r6
 800e48a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e48e:	485a      	ldr	r0, [pc, #360]	; (800e5f8 <_printf_i+0x23c>)
 800e490:	230a      	movs	r3, #10
 800e492:	e012      	b.n	800e4ba <_printf_i+0xfe>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	6820      	ldr	r0, [r4, #0]
 800e498:	1d19      	adds	r1, r3, #4
 800e49a:	6029      	str	r1, [r5, #0]
 800e49c:	0605      	lsls	r5, r0, #24
 800e49e:	d501      	bpl.n	800e4a4 <_printf_i+0xe8>
 800e4a0:	681e      	ldr	r6, [r3, #0]
 800e4a2:	e002      	b.n	800e4aa <_printf_i+0xee>
 800e4a4:	0641      	lsls	r1, r0, #25
 800e4a6:	d5fb      	bpl.n	800e4a0 <_printf_i+0xe4>
 800e4a8:	881e      	ldrh	r6, [r3, #0]
 800e4aa:	4853      	ldr	r0, [pc, #332]	; (800e5f8 <_printf_i+0x23c>)
 800e4ac:	2f6f      	cmp	r7, #111	; 0x6f
 800e4ae:	bf0c      	ite	eq
 800e4b0:	2308      	moveq	r3, #8
 800e4b2:	230a      	movne	r3, #10
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4ba:	6865      	ldr	r5, [r4, #4]
 800e4bc:	60a5      	str	r5, [r4, #8]
 800e4be:	2d00      	cmp	r5, #0
 800e4c0:	bfa2      	ittt	ge
 800e4c2:	6821      	ldrge	r1, [r4, #0]
 800e4c4:	f021 0104 	bicge.w	r1, r1, #4
 800e4c8:	6021      	strge	r1, [r4, #0]
 800e4ca:	b90e      	cbnz	r6, 800e4d0 <_printf_i+0x114>
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	d04b      	beq.n	800e568 <_printf_i+0x1ac>
 800e4d0:	4615      	mov	r5, r2
 800e4d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4d6:	fb03 6711 	mls	r7, r3, r1, r6
 800e4da:	5dc7      	ldrb	r7, [r0, r7]
 800e4dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4e0:	4637      	mov	r7, r6
 800e4e2:	42bb      	cmp	r3, r7
 800e4e4:	460e      	mov	r6, r1
 800e4e6:	d9f4      	bls.n	800e4d2 <_printf_i+0x116>
 800e4e8:	2b08      	cmp	r3, #8
 800e4ea:	d10b      	bne.n	800e504 <_printf_i+0x148>
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	07de      	lsls	r6, r3, #31
 800e4f0:	d508      	bpl.n	800e504 <_printf_i+0x148>
 800e4f2:	6923      	ldr	r3, [r4, #16]
 800e4f4:	6861      	ldr	r1, [r4, #4]
 800e4f6:	4299      	cmp	r1, r3
 800e4f8:	bfde      	ittt	le
 800e4fa:	2330      	movle	r3, #48	; 0x30
 800e4fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e500:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e504:	1b52      	subs	r2, r2, r5
 800e506:	6122      	str	r2, [r4, #16]
 800e508:	f8cd a000 	str.w	sl, [sp]
 800e50c:	464b      	mov	r3, r9
 800e50e:	aa03      	add	r2, sp, #12
 800e510:	4621      	mov	r1, r4
 800e512:	4640      	mov	r0, r8
 800e514:	f7ff fee4 	bl	800e2e0 <_printf_common>
 800e518:	3001      	adds	r0, #1
 800e51a:	d14a      	bne.n	800e5b2 <_printf_i+0x1f6>
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295
 800e520:	b004      	add	sp, #16
 800e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	f043 0320 	orr.w	r3, r3, #32
 800e52c:	6023      	str	r3, [r4, #0]
 800e52e:	4833      	ldr	r0, [pc, #204]	; (800e5fc <_printf_i+0x240>)
 800e530:	2778      	movs	r7, #120	; 0x78
 800e532:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	6829      	ldr	r1, [r5, #0]
 800e53a:	061f      	lsls	r7, r3, #24
 800e53c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e540:	d402      	bmi.n	800e548 <_printf_i+0x18c>
 800e542:	065f      	lsls	r7, r3, #25
 800e544:	bf48      	it	mi
 800e546:	b2b6      	uxthmi	r6, r6
 800e548:	07df      	lsls	r7, r3, #31
 800e54a:	bf48      	it	mi
 800e54c:	f043 0320 	orrmi.w	r3, r3, #32
 800e550:	6029      	str	r1, [r5, #0]
 800e552:	bf48      	it	mi
 800e554:	6023      	strmi	r3, [r4, #0]
 800e556:	b91e      	cbnz	r6, 800e560 <_printf_i+0x1a4>
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	f023 0320 	bic.w	r3, r3, #32
 800e55e:	6023      	str	r3, [r4, #0]
 800e560:	2310      	movs	r3, #16
 800e562:	e7a7      	b.n	800e4b4 <_printf_i+0xf8>
 800e564:	4824      	ldr	r0, [pc, #144]	; (800e5f8 <_printf_i+0x23c>)
 800e566:	e7e4      	b.n	800e532 <_printf_i+0x176>
 800e568:	4615      	mov	r5, r2
 800e56a:	e7bd      	b.n	800e4e8 <_printf_i+0x12c>
 800e56c:	682b      	ldr	r3, [r5, #0]
 800e56e:	6826      	ldr	r6, [r4, #0]
 800e570:	6961      	ldr	r1, [r4, #20]
 800e572:	1d18      	adds	r0, r3, #4
 800e574:	6028      	str	r0, [r5, #0]
 800e576:	0635      	lsls	r5, r6, #24
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	d501      	bpl.n	800e580 <_printf_i+0x1c4>
 800e57c:	6019      	str	r1, [r3, #0]
 800e57e:	e002      	b.n	800e586 <_printf_i+0x1ca>
 800e580:	0670      	lsls	r0, r6, #25
 800e582:	d5fb      	bpl.n	800e57c <_printf_i+0x1c0>
 800e584:	8019      	strh	r1, [r3, #0]
 800e586:	2300      	movs	r3, #0
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	4615      	mov	r5, r2
 800e58c:	e7bc      	b.n	800e508 <_printf_i+0x14c>
 800e58e:	682b      	ldr	r3, [r5, #0]
 800e590:	1d1a      	adds	r2, r3, #4
 800e592:	602a      	str	r2, [r5, #0]
 800e594:	681d      	ldr	r5, [r3, #0]
 800e596:	6862      	ldr	r2, [r4, #4]
 800e598:	2100      	movs	r1, #0
 800e59a:	4628      	mov	r0, r5
 800e59c:	f7f1 fe50 	bl	8000240 <memchr>
 800e5a0:	b108      	cbz	r0, 800e5a6 <_printf_i+0x1ea>
 800e5a2:	1b40      	subs	r0, r0, r5
 800e5a4:	6060      	str	r0, [r4, #4]
 800e5a6:	6863      	ldr	r3, [r4, #4]
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b0:	e7aa      	b.n	800e508 <_printf_i+0x14c>
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	462a      	mov	r2, r5
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	47d0      	blx	sl
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d0ad      	beq.n	800e51c <_printf_i+0x160>
 800e5c0:	6823      	ldr	r3, [r4, #0]
 800e5c2:	079b      	lsls	r3, r3, #30
 800e5c4:	d413      	bmi.n	800e5ee <_printf_i+0x232>
 800e5c6:	68e0      	ldr	r0, [r4, #12]
 800e5c8:	9b03      	ldr	r3, [sp, #12]
 800e5ca:	4298      	cmp	r0, r3
 800e5cc:	bfb8      	it	lt
 800e5ce:	4618      	movlt	r0, r3
 800e5d0:	e7a6      	b.n	800e520 <_printf_i+0x164>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	4632      	mov	r2, r6
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	4640      	mov	r0, r8
 800e5da:	47d0      	blx	sl
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d09d      	beq.n	800e51c <_printf_i+0x160>
 800e5e0:	3501      	adds	r5, #1
 800e5e2:	68e3      	ldr	r3, [r4, #12]
 800e5e4:	9903      	ldr	r1, [sp, #12]
 800e5e6:	1a5b      	subs	r3, r3, r1
 800e5e8:	42ab      	cmp	r3, r5
 800e5ea:	dcf2      	bgt.n	800e5d2 <_printf_i+0x216>
 800e5ec:	e7eb      	b.n	800e5c6 <_printf_i+0x20a>
 800e5ee:	2500      	movs	r5, #0
 800e5f0:	f104 0619 	add.w	r6, r4, #25
 800e5f4:	e7f5      	b.n	800e5e2 <_printf_i+0x226>
 800e5f6:	bf00      	nop
 800e5f8:	08010708 	.word	0x08010708
 800e5fc:	08010719 	.word	0x08010719

0800e600 <__swbuf_r>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	460e      	mov	r6, r1
 800e604:	4614      	mov	r4, r2
 800e606:	4605      	mov	r5, r0
 800e608:	b118      	cbz	r0, 800e612 <__swbuf_r+0x12>
 800e60a:	6a03      	ldr	r3, [r0, #32]
 800e60c:	b90b      	cbnz	r3, 800e612 <__swbuf_r+0x12>
 800e60e:	f7ff f9d5 	bl	800d9bc <__sinit>
 800e612:	69a3      	ldr	r3, [r4, #24]
 800e614:	60a3      	str	r3, [r4, #8]
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	071a      	lsls	r2, r3, #28
 800e61a:	d525      	bpl.n	800e668 <__swbuf_r+0x68>
 800e61c:	6923      	ldr	r3, [r4, #16]
 800e61e:	b31b      	cbz	r3, 800e668 <__swbuf_r+0x68>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	6922      	ldr	r2, [r4, #16]
 800e624:	1a98      	subs	r0, r3, r2
 800e626:	6963      	ldr	r3, [r4, #20]
 800e628:	b2f6      	uxtb	r6, r6
 800e62a:	4283      	cmp	r3, r0
 800e62c:	4637      	mov	r7, r6
 800e62e:	dc04      	bgt.n	800e63a <__swbuf_r+0x3a>
 800e630:	4621      	mov	r1, r4
 800e632:	4628      	mov	r0, r5
 800e634:	f7ff fcc0 	bl	800dfb8 <_fflush_r>
 800e638:	b9e0      	cbnz	r0, 800e674 <__swbuf_r+0x74>
 800e63a:	68a3      	ldr	r3, [r4, #8]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	60a3      	str	r3, [r4, #8]
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	6022      	str	r2, [r4, #0]
 800e646:	701e      	strb	r6, [r3, #0]
 800e648:	6962      	ldr	r2, [r4, #20]
 800e64a:	1c43      	adds	r3, r0, #1
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d004      	beq.n	800e65a <__swbuf_r+0x5a>
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	07db      	lsls	r3, r3, #31
 800e654:	d506      	bpl.n	800e664 <__swbuf_r+0x64>
 800e656:	2e0a      	cmp	r6, #10
 800e658:	d104      	bne.n	800e664 <__swbuf_r+0x64>
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7ff fcab 	bl	800dfb8 <_fflush_r>
 800e662:	b938      	cbnz	r0, 800e674 <__swbuf_r+0x74>
 800e664:	4638      	mov	r0, r7
 800e666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e668:	4621      	mov	r1, r4
 800e66a:	4628      	mov	r0, r5
 800e66c:	f000 f806 	bl	800e67c <__swsetup_r>
 800e670:	2800      	cmp	r0, #0
 800e672:	d0d5      	beq.n	800e620 <__swbuf_r+0x20>
 800e674:	f04f 37ff 	mov.w	r7, #4294967295
 800e678:	e7f4      	b.n	800e664 <__swbuf_r+0x64>
	...

0800e67c <__swsetup_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4b2a      	ldr	r3, [pc, #168]	; (800e728 <__swsetup_r+0xac>)
 800e680:	4605      	mov	r5, r0
 800e682:	6818      	ldr	r0, [r3, #0]
 800e684:	460c      	mov	r4, r1
 800e686:	b118      	cbz	r0, 800e690 <__swsetup_r+0x14>
 800e688:	6a03      	ldr	r3, [r0, #32]
 800e68a:	b90b      	cbnz	r3, 800e690 <__swsetup_r+0x14>
 800e68c:	f7ff f996 	bl	800d9bc <__sinit>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e696:	0718      	lsls	r0, r3, #28
 800e698:	d422      	bmi.n	800e6e0 <__swsetup_r+0x64>
 800e69a:	06d9      	lsls	r1, r3, #27
 800e69c:	d407      	bmi.n	800e6ae <__swsetup_r+0x32>
 800e69e:	2309      	movs	r3, #9
 800e6a0:	602b      	str	r3, [r5, #0]
 800e6a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6a6:	81a3      	strh	r3, [r4, #12]
 800e6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ac:	e034      	b.n	800e718 <__swsetup_r+0x9c>
 800e6ae:	0758      	lsls	r0, r3, #29
 800e6b0:	d512      	bpl.n	800e6d8 <__swsetup_r+0x5c>
 800e6b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6b4:	b141      	cbz	r1, 800e6c8 <__swsetup_r+0x4c>
 800e6b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ba:	4299      	cmp	r1, r3
 800e6bc:	d002      	beq.n	800e6c4 <__swsetup_r+0x48>
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7ff faf4 	bl	800dcac <_free_r>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	6363      	str	r3, [r4, #52]	; 0x34
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	6063      	str	r3, [r4, #4]
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	6023      	str	r3, [r4, #0]
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	f043 0308 	orr.w	r3, r3, #8
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	b94b      	cbnz	r3, 800e6f8 <__swsetup_r+0x7c>
 800e6e4:	89a3      	ldrh	r3, [r4, #12]
 800e6e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6ee:	d003      	beq.n	800e6f8 <__swsetup_r+0x7c>
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f000 f884 	bl	800e800 <__smakebuf_r>
 800e6f8:	89a0      	ldrh	r0, [r4, #12]
 800e6fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6fe:	f010 0301 	ands.w	r3, r0, #1
 800e702:	d00a      	beq.n	800e71a <__swsetup_r+0x9e>
 800e704:	2300      	movs	r3, #0
 800e706:	60a3      	str	r3, [r4, #8]
 800e708:	6963      	ldr	r3, [r4, #20]
 800e70a:	425b      	negs	r3, r3
 800e70c:	61a3      	str	r3, [r4, #24]
 800e70e:	6923      	ldr	r3, [r4, #16]
 800e710:	b943      	cbnz	r3, 800e724 <__swsetup_r+0xa8>
 800e712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e716:	d1c4      	bne.n	800e6a2 <__swsetup_r+0x26>
 800e718:	bd38      	pop	{r3, r4, r5, pc}
 800e71a:	0781      	lsls	r1, r0, #30
 800e71c:	bf58      	it	pl
 800e71e:	6963      	ldrpl	r3, [r4, #20]
 800e720:	60a3      	str	r3, [r4, #8]
 800e722:	e7f4      	b.n	800e70e <__swsetup_r+0x92>
 800e724:	2000      	movs	r0, #0
 800e726:	e7f7      	b.n	800e718 <__swsetup_r+0x9c>
 800e728:	200000a0 	.word	0x200000a0

0800e72c <_raise_r>:
 800e72c:	291f      	cmp	r1, #31
 800e72e:	b538      	push	{r3, r4, r5, lr}
 800e730:	4604      	mov	r4, r0
 800e732:	460d      	mov	r5, r1
 800e734:	d904      	bls.n	800e740 <_raise_r+0x14>
 800e736:	2316      	movs	r3, #22
 800e738:	6003      	str	r3, [r0, #0]
 800e73a:	f04f 30ff 	mov.w	r0, #4294967295
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e742:	b112      	cbz	r2, 800e74a <_raise_r+0x1e>
 800e744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e748:	b94b      	cbnz	r3, 800e75e <_raise_r+0x32>
 800e74a:	4620      	mov	r0, r4
 800e74c:	f000 f830 	bl	800e7b0 <_getpid_r>
 800e750:	462a      	mov	r2, r5
 800e752:	4601      	mov	r1, r0
 800e754:	4620      	mov	r0, r4
 800e756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e75a:	f000 b817 	b.w	800e78c <_kill_r>
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d00a      	beq.n	800e778 <_raise_r+0x4c>
 800e762:	1c59      	adds	r1, r3, #1
 800e764:	d103      	bne.n	800e76e <_raise_r+0x42>
 800e766:	2316      	movs	r3, #22
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	2001      	movs	r0, #1
 800e76c:	e7e7      	b.n	800e73e <_raise_r+0x12>
 800e76e:	2400      	movs	r4, #0
 800e770:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e774:	4628      	mov	r0, r5
 800e776:	4798      	blx	r3
 800e778:	2000      	movs	r0, #0
 800e77a:	e7e0      	b.n	800e73e <_raise_r+0x12>

0800e77c <raise>:
 800e77c:	4b02      	ldr	r3, [pc, #8]	; (800e788 <raise+0xc>)
 800e77e:	4601      	mov	r1, r0
 800e780:	6818      	ldr	r0, [r3, #0]
 800e782:	f7ff bfd3 	b.w	800e72c <_raise_r>
 800e786:	bf00      	nop
 800e788:	200000a0 	.word	0x200000a0

0800e78c <_kill_r>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	4d07      	ldr	r5, [pc, #28]	; (800e7ac <_kill_r+0x20>)
 800e790:	2300      	movs	r3, #0
 800e792:	4604      	mov	r4, r0
 800e794:	4608      	mov	r0, r1
 800e796:	4611      	mov	r1, r2
 800e798:	602b      	str	r3, [r5, #0]
 800e79a:	f7f5 f865 	bl	8003868 <_kill>
 800e79e:	1c43      	adds	r3, r0, #1
 800e7a0:	d102      	bne.n	800e7a8 <_kill_r+0x1c>
 800e7a2:	682b      	ldr	r3, [r5, #0]
 800e7a4:	b103      	cbz	r3, 800e7a8 <_kill_r+0x1c>
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20009200 	.word	0x20009200

0800e7b0 <_getpid_r>:
 800e7b0:	f7f5 b852 	b.w	8003858 <_getpid>

0800e7b4 <__swhatbuf_r>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7bc:	2900      	cmp	r1, #0
 800e7be:	b096      	sub	sp, #88	; 0x58
 800e7c0:	4615      	mov	r5, r2
 800e7c2:	461e      	mov	r6, r3
 800e7c4:	da0d      	bge.n	800e7e2 <__swhatbuf_r+0x2e>
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7cc:	f04f 0100 	mov.w	r1, #0
 800e7d0:	bf0c      	ite	eq
 800e7d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7d6:	2340      	movne	r3, #64	; 0x40
 800e7d8:	2000      	movs	r0, #0
 800e7da:	6031      	str	r1, [r6, #0]
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	b016      	add	sp, #88	; 0x58
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
 800e7e2:	466a      	mov	r2, sp
 800e7e4:	f000 f848 	bl	800e878 <_fstat_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	dbec      	blt.n	800e7c6 <__swhatbuf_r+0x12>
 800e7ec:	9901      	ldr	r1, [sp, #4]
 800e7ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7f6:	4259      	negs	r1, r3
 800e7f8:	4159      	adcs	r1, r3
 800e7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7fe:	e7eb      	b.n	800e7d8 <__swhatbuf_r+0x24>

0800e800 <__smakebuf_r>:
 800e800:	898b      	ldrh	r3, [r1, #12]
 800e802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e804:	079d      	lsls	r5, r3, #30
 800e806:	4606      	mov	r6, r0
 800e808:	460c      	mov	r4, r1
 800e80a:	d507      	bpl.n	800e81c <__smakebuf_r+0x1c>
 800e80c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	2301      	movs	r3, #1
 800e816:	6163      	str	r3, [r4, #20]
 800e818:	b002      	add	sp, #8
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	ab01      	add	r3, sp, #4
 800e81e:	466a      	mov	r2, sp
 800e820:	f7ff ffc8 	bl	800e7b4 <__swhatbuf_r>
 800e824:	9900      	ldr	r1, [sp, #0]
 800e826:	4605      	mov	r5, r0
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff fab3 	bl	800dd94 <_malloc_r>
 800e82e:	b948      	cbnz	r0, 800e844 <__smakebuf_r+0x44>
 800e830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e834:	059a      	lsls	r2, r3, #22
 800e836:	d4ef      	bmi.n	800e818 <__smakebuf_r+0x18>
 800e838:	f023 0303 	bic.w	r3, r3, #3
 800e83c:	f043 0302 	orr.w	r3, r3, #2
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	e7e3      	b.n	800e80c <__smakebuf_r+0xc>
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	6020      	str	r0, [r4, #0]
 800e848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e84c:	81a3      	strh	r3, [r4, #12]
 800e84e:	9b00      	ldr	r3, [sp, #0]
 800e850:	6163      	str	r3, [r4, #20]
 800e852:	9b01      	ldr	r3, [sp, #4]
 800e854:	6120      	str	r0, [r4, #16]
 800e856:	b15b      	cbz	r3, 800e870 <__smakebuf_r+0x70>
 800e858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e85c:	4630      	mov	r0, r6
 800e85e:	f000 f81d 	bl	800e89c <_isatty_r>
 800e862:	b128      	cbz	r0, 800e870 <__smakebuf_r+0x70>
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	f043 0301 	orr.w	r3, r3, #1
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	431d      	orrs	r5, r3
 800e874:	81a5      	strh	r5, [r4, #12]
 800e876:	e7cf      	b.n	800e818 <__smakebuf_r+0x18>

0800e878 <_fstat_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4d07      	ldr	r5, [pc, #28]	; (800e898 <_fstat_r+0x20>)
 800e87c:	2300      	movs	r3, #0
 800e87e:	4604      	mov	r4, r0
 800e880:	4608      	mov	r0, r1
 800e882:	4611      	mov	r1, r2
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	f7f5 f84e 	bl	8003926 <_fstat>
 800e88a:	1c43      	adds	r3, r0, #1
 800e88c:	d102      	bne.n	800e894 <_fstat_r+0x1c>
 800e88e:	682b      	ldr	r3, [r5, #0]
 800e890:	b103      	cbz	r3, 800e894 <_fstat_r+0x1c>
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	bd38      	pop	{r3, r4, r5, pc}
 800e896:	bf00      	nop
 800e898:	20009200 	.word	0x20009200

0800e89c <_isatty_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d06      	ldr	r5, [pc, #24]	; (800e8b8 <_isatty_r+0x1c>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	f7f5 f84d 	bl	8003946 <_isatty>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_isatty_r+0x1a>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_isatty_r+0x1a>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	20009200 	.word	0x20009200

0800e8bc <_sbrk>:
 800e8bc:	4a04      	ldr	r2, [pc, #16]	; (800e8d0 <_sbrk+0x14>)
 800e8be:	6811      	ldr	r1, [r2, #0]
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	b909      	cbnz	r1, 800e8c8 <_sbrk+0xc>
 800e8c4:	4903      	ldr	r1, [pc, #12]	; (800e8d4 <_sbrk+0x18>)
 800e8c6:	6011      	str	r1, [r2, #0]
 800e8c8:	6810      	ldr	r0, [r2, #0]
 800e8ca:	4403      	add	r3, r0
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	4770      	bx	lr
 800e8d0:	20009210 	.word	0x20009210
 800e8d4:	20009218 	.word	0x20009218

0800e8d8 <_init>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	bf00      	nop
 800e8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8de:	bc08      	pop	{r3}
 800e8e0:	469e      	mov	lr, r3
 800e8e2:	4770      	bx	lr

0800e8e4 <_fini>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	bf00      	nop
 800e8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ea:	bc08      	pop	{r3}
 800e8ec:	469e      	mov	lr, r3
 800e8ee:	4770      	bx	lr
