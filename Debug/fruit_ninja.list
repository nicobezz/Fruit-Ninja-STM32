
fruit_ninja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00116ff0  080109f8  080109f8  000209f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  081279e8  081279e8  001400a8  2**0
                  CONTENTS
  4 .ARM          00000008  081279e8  081279e8  001379e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  081279f0  081279f0  001400a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  081279f0  081279f0  001379f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  081279f4  081279f4  001379f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  081279f8  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092cc  200000a8  08127aa0  001400a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009374  08127aa0  00149374  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001400a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  001400d6  2**0
                  CONTENTS, READONLY
 13 .debug_info   000301a1  00000000  00000000  00140119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f43  00000000  00000000  001702ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  00177200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c61  00000000  00000000  001796d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380ec  00000000  00000000  0017b339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033815  00000000  00000000  001b3425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00137330  00000000  00000000  001e6c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a638  00000000  00000000  0031df6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  003285a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080109dc 	.word	0x080109dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	080109dc 	.word	0x080109dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f803 	bl	80005ec <BSP_LCD_InitEx>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80005f6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000604:	f000 f934 	bl	8000870 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000608:	f000 fd44 	bl	8001094 <LCD_IO_GetID>
 800060c:	4603      	mov	r3, r0
 800060e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000612:	2b11      	cmp	r3, #17
 8000614:	d001      	beq.n	800061a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000616:	2301      	movs	r3, #1
 8000618:	e111      	b.n	800083e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800061a:	f000 fd43 	bl	80010a4 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000620:	4a8a      	ldr	r2, [pc, #552]	; (800084c <BSP_LCD_InitEx+0x260>)
 8000622:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000624:	4888      	ldr	r0, [pc, #544]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000626:	f005 fca5 	bl	8005f74 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800062e:	2305      	movs	r3, #5
 8000630:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800063a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	4a82      	ldr	r2, [pc, #520]	; (8000850 <BSP_LCD_InitEx+0x264>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	0a9b      	lsrs	r3, r3, #10
 800064e:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000650:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800065a:	f005 fb6f 	bl	8005d3c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800066a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800066e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800067c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 8000680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000684:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000692:	2301      	movs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000696:	230f      	movs	r3, #15
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800069a:	2310      	movs	r3, #16
 800069c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80006dc:	4a5f      	ldr	r2, [pc, #380]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e6:	fb03 f202 	mul.w	r2, r3, r2
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	441a      	add	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	441a      	add	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000716:	fb03 f202 	mul.w	r2, r3, r2
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800072a:	4a4c      	ldr	r2, [pc, #304]	; (800085c <BSP_LCD_InitEx+0x270>)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <BSP_LCD_InitEx+0x270>)
 800073e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000746:	2210      	movs	r2, #16
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BSP_LCD_InitEx+0x270>)
 800074c:	2200      	movs	r2, #0
 800074e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <BSP_LCD_InitEx+0x270>)
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <BSP_LCD_InitEx+0x270>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <BSP_LCD_InitEx+0x270>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000784:	f005 fd4e 	bl	8006224 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800078e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	3b01      	subs	r3, #1
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800079a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <BSP_LCD_InitEx+0x268>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	441a      	add	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4413      	add	r3, r2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	441a      	add	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	441a      	add	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007d2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007f0:	f008 fab4 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <BSP_LCD_InitEx+0x27c>)
 8000816:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <BSP_LCD_InitEx+0x270>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800081c:	f007 fd28 	bl	8008270 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000822:	f007 fa7d 	bl	8007d20 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000828:	f006 f856 	bl	80068d8 <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <BSP_LCD_InitEx+0x280>)
 800082e:	f000 f935 	bl	8000a9c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f86c 	bl	8001914 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000230 	.word	0x20000230
 800084c:	40016c00 	.word	0x40016c00
 8000850:	43215e57 	.word	0x43215e57
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004
 800085c:	200000c4 	.word	0x200000c4
 8000860:	20000188 	.word	0x20000188
 8000864:	20000268 	.word	0x20000268
 8000868:	40016800 	.word	0x40016800
 800086c:	20000030 	.word	0x20000030

08000870 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <BSP_LCD_Reset+0x68>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008a6:	f006 f93b 	bl	8006b20 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008b2:	f006 fbed 	bl	8007090 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80008b6:	2014      	movs	r0, #20
 80008b8:	f004 fdaa 	bl	8005410 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008c4:	f006 fbe4 	bl	8007090 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f004 fda1 	bl	8005410 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40022400 	.word	0x40022400

080008e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <BSP_LCD_GetXSize+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <BSP_LCD_GetYSize+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004

08000910 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000920:	f7ff ffde 	bl	80008e0 <BSP_LCD_GetXSize>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800092c:	f7ff ffe4 	bl	80008f8 <BSP_LCD_GetYSize>
 8000930:	4603      	mov	r3, r0
 8000932:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000960:	f7ff ffbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000964:	4603      	mov	r3, r0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000968:	f7ff ffc6 	bl	80008f8 <BSP_LCD_GetYSize>
 800096c:	4603      	mov	r3, r0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800097a:	f007 faa1 	bl	8007ec0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3740      	adds	r7, #64	; 0x40
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000188 	.word	0x20000188
 80009c8:	20000250 	.word	0x20000250
 80009cc:	20000030 	.word	0x20000030

080009d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <BSP_LCD_SelectLayer+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000024c 	.word	0x2000024c

080009f0 <BSP_LCD_SetLayerVisible>:
  *          This parameter can be one of the following values:
  *            @arg  ENABLE
  *            @arg  DISABLE
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d112      	bne.n	8000a28 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&(hltdc_discovery), LayerIndex);
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	01db      	lsls	r3, r3, #7
 8000a0c:	4413      	add	r3, r2
 8000a0e:	3384      	adds	r3, #132	; 0x84
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	4611      	mov	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	01d2      	lsls	r2, r2, #7
 8000a1c:	440a      	add	r2, r1
 8000a1e:	3284      	adds	r2, #132	; 0x84
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e011      	b.n	8000a4c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&(hltdc_discovery), LayerIndex);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	4413      	add	r3, r2
 8000a34:	3384      	adds	r3, #132	; 0x84
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	01d2      	lsls	r2, r2, #7
 8000a42:	440a      	add	r2, r1
 8000a44:	3284      	adds	r2, #132	; 0x84
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&(hltdc_discovery));
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	20000188 	.word	0x20000188

08000a6c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <BSP_LCD_SetTextColor+0x28>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <BSP_LCD_SetTextColor+0x2c>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	2000024c 	.word	0x2000024c
 8000a98:	20000250 	.word	0x20000250

08000a9c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <BSP_LCD_SetFont+0x2c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4908      	ldr	r1, [pc, #32]	; (8000acc <BSP_LCD_SetFont+0x30>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000024c 	.word	0x2000024c
 8000acc:	20000250 	.word	0x20000250

08000ad0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <BSP_LCD_GetFont+0x24>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <BSP_LCD_GetFont+0x28>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	20000250 	.word	0x20000250

08000afc <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	460b      	mov	r3, r1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <BSP_LCD_DisplayChar+0x80>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	491b      	ldr	r1, [pc, #108]	; (8000b80 <BSP_LCD_DisplayChar+0x84>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3308      	adds	r3, #8
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6819      	ldr	r1, [r3, #0]
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <BSP_LCD_DisplayChar+0x80>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4c14      	ldr	r4, [pc, #80]	; (8000b80 <BSP_LCD_DisplayChar+0x84>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4423      	add	r3, r4
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b40:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <BSP_LCD_DisplayChar+0x80>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4c0d      	ldr	r4, [pc, #52]	; (8000b80 <BSP_LCD_DisplayChar+0x84>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4423      	add	r3, r4
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	3307      	adds	r3, #7
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da00      	bge.n	8000b62 <BSP_LCD_DisplayChar+0x66>
 8000b60:	3307      	adds	r3, #7
 8000b62:	10db      	asrs	r3, r3, #3
 8000b64:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b68:	18ca      	adds	r2, r1, r3
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fb28 	bl	80011c4 <DrawChar>
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	2000024c 	.word	0x2000024c
 8000b80:	20000250 	.word	0x20000250

08000b84 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	460b      	mov	r3, r1
 8000b94:	81bb      	strh	r3, [r7, #12]
 8000b96:	4613      	mov	r3, r2
 8000b98:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	83fb      	strh	r3, [r7, #30]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000bae:	e002      	b.n	8000bb6 <BSP_LCD_DisplayStringAt+0x32>
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	617a      	str	r2, [r7, #20]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f6      	bne.n	8000bb0 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000bc2:	f7ff fe8d 	bl	80008e0 <BSP_LCD_GetXSize>
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4850      	ldr	r0, [pc, #320]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4403      	add	r3, r0
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d01c      	beq.n	8000c24 <BSP_LCD_DisplayStringAt+0xa0>
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	dc33      	bgt.n	8000c56 <BSP_LCD_DisplayStringAt+0xd2>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <BSP_LCD_DisplayStringAt+0x74>
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d019      	beq.n	8000c2a <BSP_LCD_DisplayStringAt+0xa6>
 8000bf6:	e02e      	b.n	8000c56 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	1ad1      	subs	r1, r2, r3
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4843      	ldr	r0, [pc, #268]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3308      	adds	r3, #8
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	4413      	add	r3, r2
 8000c20:	83fb      	strh	r3, [r7, #30]
      break;
 8000c22:	e01b      	b.n	8000c5c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	83fb      	strh	r3, [r7, #30]
      break;
 8000c28:	e018      	b.n	8000c5c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b299      	uxth	r1, r3
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4836      	ldr	r0, [pc, #216]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4403      	add	r3, r0
 8000c42:	3308      	adds	r3, #8
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	889b      	ldrh	r3, [r3, #4]
 8000c48:	fb11 f303 	smulbb	r3, r1, r3
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	83fb      	strh	r3, [r7, #30]
      break;
 8000c54:	e002      	b.n	8000c5c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	83fb      	strh	r3, [r7, #30]
      break;
 8000c5a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c5c:	8bfb      	ldrh	r3, [r7, #30]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <BSP_LCD_DisplayStringAt+0xe6>
 8000c62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da1d      	bge.n	8000ca6 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c6e:	e01a      	b.n	8000ca6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	89b9      	ldrh	r1, [r7, #12]
 8000c76:	8bfb      	ldrh	r3, [r7, #30]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff3f 	bl	8000afc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4923      	ldr	r1, [pc, #140]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3308      	adds	r3, #8
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	889a      	ldrh	r2, [r3, #4]
 8000c94:	8bfb      	ldrh	r3, [r7, #30]
 8000c96:	4413      	add	r3, r2
 8000c98:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
    i++;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2dc      	uxtb	r4, r3
 8000cb4:	f7ff fe14 	bl	80008e0 <BSP_LCD_GetXSize>
 8000cb8:	8bb9      	ldrh	r1, [r7, #28]
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4d14      	ldr	r5, [pc, #80]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	442b      	add	r3, r5
 8000cca:	3308      	adds	r3, #8
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	fb01 f303 	mul.w	r3, r1, r3
 8000cd4:	1ac3      	subs	r3, r0, r3
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <BSP_LCD_DisplayStringAt+0x188>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4403      	add	r3, r0
 8000ce8:	3308      	adds	r3, #8
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	889b      	ldrh	r3, [r3, #4]
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	bf2c      	ite	cs
 8000cf2:	2301      	movcs	r3, #1
 8000cf4:	2300      	movcc	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4023      	ands	r3, r4
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1b7      	bne.n	8000c70 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000024c 	.word	0x2000024c
 8000d10:	20000250 	.word	0x20000250

08000d14 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000d20:	f7ff fed6 	bl	8000ad0 <BSP_LCD_GetFont>
 8000d24:	4603      	mov	r3, r0
 8000d26:	88db      	ldrh	r3, [r3, #6]
 8000d28:	88fa      	ldrh	r2, [r7, #6]
 8000d2a:	fb12 f303 	smulbb	r3, r2, r3
 8000d2e:	b299      	uxth	r1, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ff25 	bl	8000b84 <BSP_LCD_DisplayStringAt>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <BSP_LCD_DrawLine>:
  * @param  y1: Point 1 Y position
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	4623      	mov	r3, r4
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	4603      	mov	r3, r0
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	807b      	strh	r3, [r7, #2]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000d62:	2300      	movs	r3, #0
 8000d64:	823b      	strh	r3, [r7, #16]
 8000d66:	2300      	movs	r3, #0
 8000d68:	81fb      	strh	r3, [r7, #14]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d6e:	2300      	movs	r3, #0
 8000d70:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d72:	2300      	movs	r3, #0
 8000d74:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d76:	2300      	movs	r3, #0
 8000d78:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	83fb      	strh	r3, [r7, #30]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	83bb      	strh	r3, [r7, #28]
 8000d82:	2300      	movs	r3, #0
 8000d84:	837b      	strh	r3, [r7, #26]
 8000d86:	2300      	movs	r3, #0
 8000d88:	833b      	strh	r3, [r7, #24]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	82fb      	strh	r3, [r7, #22]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	827b      	strh	r3, [r7, #18]

  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bfb8      	it	lt
 8000da0:	425b      	neglt	r3, r3
 8000da2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8000da4:	883a      	ldrh	r2, [r7, #0]
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfb8      	it	lt
 8000dae:	425b      	neglt	r3, r3
 8000db0:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (x2 >= x1)                 /* The x-values are increasing */
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d304      	bcc.n	8000dcc <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	843b      	strh	r3, [r7, #32]
 8000dca:	e005      	b.n	8000dd8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8000dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8000dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd6:	843b      	strh	r3, [r7, #32]
  }

  if (y2 >= y1)                 /* The y-values are increasing */
 8000dd8:	883a      	ldrh	r2, [r7, #0]
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d304      	bcc.n	8000dea <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	83bb      	strh	r3, [r7, #28]
 8000de8:	e005      	b.n	8000df6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8000df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df4:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8000df6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	db11      	blt.n	8000e26 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8000e02:	2300      	movs	r3, #0
 8000e04:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8000e06:	2300      	movs	r3, #0
 8000e08:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8000e0a:	8a3b      	ldrh	r3, [r7, #16]
 8000e0c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8000e0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da00      	bge.n	8000e18 <BSP_LCD_DrawLine+0xd4>
 8000e16:	3301      	adds	r3, #1
 8000e18:	105b      	asrs	r3, r3, #1
 8000e1a:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8000e20:	8a3b      	ldrh	r3, [r7, #16]
 8000e22:	82bb      	strh	r3, [r7, #20]
 8000e24:	e010      	b.n	8000e48 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8000e26:	2300      	movs	r3, #0
 8000e28:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8000e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da00      	bge.n	8000e3c <BSP_LCD_DrawLine+0xf8>
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	105b      	asrs	r3, r3, #1
 8000e3e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8000e40:	8a3b      	ldrh	r3, [r7, #16]
 8000e42:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	827b      	strh	r3, [r7, #18]
 8000e4c:	e037      	b.n	8000ebe <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8000e4e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000e50:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <BSP_LCD_DrawLine+0x190>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4c20      	ldr	r4, [pc, #128]	; (8000ed8 <BSP_LCD_DrawLine+0x194>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4423      	add	r3, r4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	f000 f987 	bl	8001178 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8000e6a:	8b3a      	ldrh	r2, [r7, #24]
 8000e6c:	8afb      	ldrh	r3, [r7, #22]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8000e74:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	db0e      	blt.n	8000e9e <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8000e80:	8b3a      	ldrh	r2, [r7, #24]
 8000e82:	8b7b      	ldrh	r3, [r7, #26]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8000e8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8000e94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e96:	8bfb      	ldrh	r3, [r7, #30]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8000e9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ea0:	8c3b      	ldrh	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8000ea8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000eaa:	8bbb      	ldrh	r3, [r7, #28]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000eb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	827b      	strh	r3, [r7, #18]
 8000ebe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	ddc1      	ble.n	8000e4e <BSP_LCD_DrawLine+0x10a>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	372c      	adds	r7, #44	; 0x2c
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	2000024c 	.word	0x2000024c
 8000ed8:	20000250 	.word	0x20000250

08000edc <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	330a      	adds	r3, #10
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	330b      	adds	r3, #11
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	441a      	add	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	330c      	adds	r3, #12
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	441a      	add	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	330d      	adds	r3, #13
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	061b      	lsls	r3, r3, #24
 8000f20:	4413      	add	r3, r2
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3312      	adds	r3, #18
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3313      	adds	r3, #19
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	441a      	add	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3314      	adds	r3, #20
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	441a      	add	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3315      	adds	r3, #21
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	061b      	lsls	r3, r3, #24
 8000f48:	4413      	add	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3316      	adds	r3, #22
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3317      	adds	r3, #23
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	441a      	add	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3318      	adds	r3, #24
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	441a      	add	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3319      	adds	r3, #25
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	061b      	lsls	r3, r3, #24
 8000f70:	4413      	add	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	331c      	adds	r3, #28
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	331d      	adds	r3, #29
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	4413      	add	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <BSP_LCD_DrawBitmap+0x15c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <BSP_LCD_DrawBitmap+0x160>)
 8000f8e:	2134      	movs	r1, #52	; 0x34
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	335c      	adds	r3, #92	; 0x5c
 8000f98:	681c      	ldr	r4, [r3, #0]
 8000f9a:	f7ff fca1 	bl	80008e0 <BSP_LCD_GetXSize>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	fb03 f202 	mul.w	r2, r3, r2
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4423      	add	r3, r4
 8000fae:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3b20      	subs	r3, #32
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	d802      	bhi.n	8000fbe <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	e008      	b.n	8000fd0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3b10      	subs	r3, #16
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d802      	bhi.n	8000fcc <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e001      	b.n	8000fd0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	08d2      	lsrs	r2, r2, #3
 8000fde:	fb03 f202 	mul.w	r2, r3, r2
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	4413      	add	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff0:	e018      	b.n	8001024 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8000ff2:	6a39      	ldr	r1, [r7, #32]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f99b 	bl	8001334 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8000ffe:	f7ff fc6f 	bl	80008e0 <BSP_LCD_GetXSize>
 8001002:	4603      	mov	r3, r0
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	6a3a      	ldr	r2, [r7, #32]
 8001008:	4413      	add	r3, r2
 800100a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	425b      	negs	r3, r3
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
 8001024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3e2      	bcc.n	8000ff2 <BSP_LCD_DrawBitmap+0x116>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	372c      	adds	r7, #44	; 0x2c
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	2000024c 	.word	0x2000024c
 800103c:	20000188 	.word	0x20000188

08001040 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d80d      	bhi.n	800106c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4613      	mov	r3, r2
 8001060:	2215      	movs	r2, #21
 8001062:	2100      	movs	r1, #0
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <DSI_IO_WriteCmd+0x50>)
 8001066:	f005 fc73 	bl	8006950 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800106a:	e00d      	b.n	8001088 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2239      	movs	r2, #57	; 0x39
 8001080:	2100      	movs	r1, #0
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <DSI_IO_WriteCmd+0x50>)
 8001084:	f005 fc86 	bl	8006994 <HAL_DSI_LongWrite>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000230 	.word	0x20000230

08001094 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001098:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a31      	ldr	r2, [pc, #196]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010cc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010d8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a25      	ldr	r2, [pc, #148]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 80010f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010fc:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001104:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001108:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a19      	ldr	r2, [pc, #100]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800112c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <BSP_LCD_MspInit+0xd0>)
 8001134:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001138:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2103      	movs	r1, #3
 800113e:	2058      	movs	r0, #88	; 0x58
 8001140:	f004 fa42 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001144:	2058      	movs	r0, #88	; 0x58
 8001146:	f004 fa5b 	bl	8005600 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2103      	movs	r1, #3
 800114e:	205a      	movs	r0, #90	; 0x5a
 8001150:	f004 fa3a 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001154:	205a      	movs	r0, #90	; 0x5a
 8001156:	f004 fa53 	bl	8005600 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2103      	movs	r1, #3
 800115e:	2062      	movs	r0, #98	; 0x62
 8001160:	f004 fa32 	bl	80055c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001164:	2062      	movs	r0, #98	; 0x62
 8001166:	f004 fa4b 	bl	8005600 <HAL_NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	460b      	mov	r3, r1
 8001186:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <BSP_LCD_DrawPixel+0x44>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <BSP_LCD_DrawPixel+0x48>)
 800118e:	2134      	movs	r1, #52	; 0x34
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	335c      	adds	r3, #92	; 0x5c
 8001198:	681c      	ldr	r4, [r3, #0]
 800119a:	88bd      	ldrh	r5, [r7, #4]
 800119c:	f7ff fba0 	bl	80008e0 <BSP_LCD_GetXSize>
 80011a0:	4603      	mov	r3, r0
 80011a2:	fb03 f205 	mul.w	r2, r3, r5
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4423      	add	r3, r4
 80011ae:	461a      	mov	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	2000024c 	.word	0x2000024c
 80011c0:	20000188 	.word	0x20000188

080011c4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	603a      	str	r2, [r7, #0]
 80011ce:	80fb      	strh	r3, [r7, #6]
 80011d0:	460b      	mov	r3, r1
 80011d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <DrawChar+0x168>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4953      	ldr	r1, [pc, #332]	; (8001330 <DrawChar+0x16c>)
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3308      	adds	r3, #8
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	88db      	ldrh	r3, [r3, #6]
 80011f2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <DrawChar+0x168>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	494d      	ldr	r1, [pc, #308]	; (8001330 <DrawChar+0x16c>)
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3308      	adds	r3, #8
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800120c:	8a3b      	ldrh	r3, [r7, #16]
 800120e:	3307      	adds	r3, #7
 8001210:	2b00      	cmp	r3, #0
 8001212:	da00      	bge.n	8001216 <DrawChar+0x52>
 8001214:	3307      	adds	r3, #7
 8001216:	10db      	asrs	r3, r3, #3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	8a3b      	ldrh	r3, [r7, #16]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e076      	b.n	800131a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800122c:	8a3b      	ldrh	r3, [r7, #16]
 800122e:	3307      	adds	r3, #7
 8001230:	2b00      	cmp	r3, #0
 8001232:	da00      	bge.n	8001236 <DrawChar+0x72>
 8001234:	3307      	adds	r3, #7
 8001236:	10db      	asrs	r3, r3, #3
 8001238:	461a      	mov	r2, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001246:	8a3b      	ldrh	r3, [r7, #16]
 8001248:	3307      	adds	r3, #7
 800124a:	2b00      	cmp	r3, #0
 800124c:	da00      	bge.n	8001250 <DrawChar+0x8c>
 800124e:	3307      	adds	r3, #7
 8001250:	10db      	asrs	r3, r3, #3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d002      	beq.n	800125c <DrawChar+0x98>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d004      	beq.n	8001264 <DrawChar+0xa0>
 800125a:	e00c      	b.n	8001276 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
      break;
 8001262:	e016      	b.n	8001292 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	3201      	adds	r2, #1
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
      break;
 8001274:	e00d      	b.n	8001292 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	041a      	lsls	r2, r3, #16
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	4313      	orrs	r3, r2
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	3202      	adds	r2, #2
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4313      	orrs	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
      break;
 8001290:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	e036      	b.n	8001306 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001298:	8a3a      	ldrh	r2, [r7, #16]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1ad2      	subs	r2, r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4413      	add	r3, r2
 80012a2:	3b01      	subs	r3, #1
 80012a4:	2201      	movs	r2, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4413      	add	r3, r2
 80012bc:	b298      	uxth	r0, r3
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <DrawChar+0x168>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <DrawChar+0x16c>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff ff50 	bl	8001178 <BSP_LCD_DrawPixel>
 80012d8:	e012      	b.n	8001300 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	4413      	add	r3, r2
 80012e2:	b298      	uxth	r0, r3
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <DrawChar+0x168>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <DrawChar+0x16c>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3304      	adds	r3, #4
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff ff3c 	bl	8001178 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	3301      	adds	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	8a3b      	ldrh	r3, [r7, #16]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3c4      	bcc.n	8001298 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	3301      	adds	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	8a7b      	ldrh	r3, [r7, #18]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	429a      	cmp	r2, r3
 8001320:	d384      	bcc.n	800122c <DrawChar+0x68>
  }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000024c 	.word	0x2000024c
 8001330:	20000250 	.word	0x20000250

08001334 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001348:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001358:	2200      	movs	r2, #0
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800136a:	2200      	movs	r2, #0
 800136c:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <LL_ConvertLineToARGB8888+0x84>)
 8001372:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001376:	f004 f9e3 	bl	8005740 <HAL_DMA2D_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d115      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8001380:	2101      	movs	r1, #1
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 8001384:	f004 fb4a 	bl	8005a1c <HAL_DMA2D_ConfigLayer>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10e      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 800139a:	f004 fa2b 	bl	80057f4 <HAL_DMA2D_Start>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80013a4:	210a      	movs	r1, #10
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <LL_ConvertLineToARGB8888+0x80>)
 80013a8:	f004 fa4f 	bl	800584a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000130 	.word	0x20000130
 80013b8:	4002b000 	.word	0x4002b000

080013bc <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <BSP_TS_Init+0xb0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a25      	ldr	r2, [pc, #148]	; (8001470 <BSP_TS_Init+0xb4>)
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	b292      	uxth	r2, r2
 80013de:	4610      	mov	r0, r2
 80013e0:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <BSP_TS_Init+0xb0>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2054      	movs	r0, #84	; 0x54
 80013e8:	4798      	blx	r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80013ee:	7b7b      	ldrb	r3, [r7, #13]
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d009      	beq.n	8001408 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <BSP_TS_Init+0xb0>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2070      	movs	r0, #112	; 0x70
 80013fa:	4798      	blx	r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <BSP_TS_Init+0xb4>)
 8001402:	2270      	movs	r2, #112	; 0x70
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e002      	b.n	800140e <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <BSP_TS_Init+0xb4>)
 800140a:	2254      	movs	r2, #84	; 0x54
 800140c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	2b11      	cmp	r3, #17
 8001412:	d002      	beq.n	800141a <BSP_TS_Init+0x5e>
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2b11      	cmp	r3, #17
 8001418:	d121      	bne.n	800145e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <BSP_TS_Init+0xb8>)
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <BSP_TS_Init+0xb0>)
 800141e:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d203      	bcs.n	8001430 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <BSP_TS_Init+0xbc>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e002      	b.n	8001436 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <BSP_TS_Init+0xbc>)
 8001432:	220c      	movs	r2, #12
 8001434:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d112      	bne.n	8001462 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <BSP_TS_Init+0xb8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <BSP_TS_Init+0xb4>)
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	b292      	uxth	r2, r2
 8001448:	4610      	mov	r0, r2
 800144a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <BSP_TS_Init+0xb8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <BSP_TS_Init+0xb4>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	b292      	uxth	r2, r2
 8001458:	4610      	mov	r0, r2
 800145a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800145c:	e001      	b.n	8001462 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800145e:	2303      	movs	r3, #3
 8001460:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000008 	.word	0x20000008
 8001470:	200002fd 	.word	0x200002fd
 8001474:	200002f8 	.word	0x200002f8
 8001478:	200002fc 	.word	0x200002fc

0800147c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8001488:	4b81      	ldr	r3, [pc, #516]	; (8001690 <BSP_TS_GetState+0x214>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	4a81      	ldr	r2, [pc, #516]	; (8001694 <BSP_TS_GetState+0x218>)
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	b292      	uxth	r2, r2
 8001494:	4610      	mov	r0, r2
 8001496:	4798      	blx	r3
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80ee 	beq.w	8001686 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e0e3      	b.n	8001678 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80014b0:	4b77      	ldr	r3, [pc, #476]	; (8001690 <BSP_TS_GetState+0x214>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a77      	ldr	r2, [pc, #476]	; (8001694 <BSP_TS_GetState+0x218>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	b290      	uxth	r0, r2
 80014bc:	f107 0110 	add.w	r1, r7, #16
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	0052      	lsls	r2, r2, #1
 80014c4:	188c      	adds	r4, r1, r2
 80014c6:	f107 010c 	add.w	r1, r7, #12
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	0052      	lsls	r2, r2, #1
 80014ce:	440a      	add	r2, r1
 80014d0:	4621      	mov	r1, r4
 80014d2:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80014d4:	4b70      	ldr	r3, [pc, #448]	; (8001698 <BSP_TS_GetState+0x21c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d019      	beq.n	8001514 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	3320      	adds	r3, #32
 80014e6:	443b      	add	r3, r7
 80014e8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80014ec:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3320      	adds	r3, #32
 80014f4:	443b      	add	r3, r7
 80014f6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	3320      	adds	r3, #32
 8001500:	443b      	add	r3, r7
 8001502:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	3320      	adds	r3, #32
 800150c:	443b      	add	r3, r7
 800150e:	8b3a      	ldrh	r2, [r7, #24]
 8001510:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8001514:	4b60      	ldr	r3, [pc, #384]	; (8001698 <BSP_TS_GetState+0x21c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00f      	beq.n	8001540 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	3320      	adds	r3, #32
 8001526:	443b      	add	r3, r7
 8001528:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800152c:	f240 331f 	movw	r3, #799	; 0x31f
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	3320      	adds	r3, #32
 800153a:	443b      	add	r3, r7
 800153c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <BSP_TS_GetState+0x21c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00f      	beq.n	800156c <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	3320      	adds	r3, #32
 8001552:	443b      	add	r3, r7
 8001554:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001558:	f240 13df 	movw	r3, #479	; 0x1df
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	3320      	adds	r3, #32
 8001566:	443b      	add	r3, r7
 8001568:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	3320      	adds	r3, #32
 8001572:	443b      	add	r3, r7
 8001574:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001578:	4619      	mov	r1, r3
 800157a:	4a48      	ldr	r2, [pc, #288]	; (800169c <BSP_TS_GetState+0x220>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	4299      	cmp	r1, r3
 8001584:	d90d      	bls.n	80015a2 <BSP_TS_GetState+0x126>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3320      	adds	r3, #32
 800158c:	443b      	add	r3, r7
 800158e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8001592:	4942      	ldr	r1, [pc, #264]	; (800169c <BSP_TS_GetState+0x220>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800159a:	b29b      	uxth	r3, r3
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	e00c      	b.n	80015bc <BSP_TS_GetState+0x140>
 80015a2:	4a3e      	ldr	r2, [pc, #248]	; (800169c <BSP_TS_GetState+0x220>)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	3320      	adds	r3, #32
 80015b2:	443b      	add	r3, r7
 80015b4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	3320      	adds	r3, #32
 80015c4:	443b      	add	r3, r7
 80015c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4a34      	ldr	r2, [pc, #208]	; (80016a0 <BSP_TS_GetState+0x224>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	4299      	cmp	r1, r3
 80015d6:	d90d      	bls.n	80015f4 <BSP_TS_GetState+0x178>
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	3320      	adds	r3, #32
 80015de:	443b      	add	r3, r7
 80015e0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80015e4:	492e      	ldr	r1, [pc, #184]	; (80016a0 <BSP_TS_GetState+0x224>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	e00c      	b.n	800160e <BSP_TS_GetState+0x192>
 80015f4:	4a2a      	ldr	r2, [pc, #168]	; (80016a0 <BSP_TS_GetState+0x224>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3320      	adds	r3, #32
 8001604:	443b      	add	r3, r7
 8001606:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8001610:	8afa      	ldrh	r2, [r7, #22]
 8001612:	8abb      	ldrh	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	2b05      	cmp	r3, #5
 8001618:	dd15      	ble.n	8001646 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	3320      	adds	r3, #32
 8001620:	443b      	add	r3, r7
 8001622:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001626:	4619      	mov	r1, r3
 8001628:	4a1c      	ldr	r2, [pc, #112]	; (800169c <BSP_TS_GetState+0x220>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	3320      	adds	r3, #32
 8001636:	443b      	add	r3, r7
 8001638:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800163c:	4619      	mov	r1, r3
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <BSP_TS_GetState+0x224>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <BSP_TS_GetState+0x220>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	b299      	uxth	r1, r3
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	460a      	mov	r2, r1
 800165a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800165c:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <BSP_TS_GetState+0x224>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	b299      	uxth	r1, r3
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	460a      	mov	r2, r1
 8001670:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4293      	cmp	r3, r2
 8001682:	f4ff af15 	bcc.w	80014b0 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8001686:	7efb      	ldrb	r3, [r7, #27]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3724      	adds	r7, #36	; 0x24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	200002f8 	.word	0x200002f8
 8001694:	200002fd 	.word	0x200002fd
 8001698:	200002fc 	.word	0x200002fc
 800169c:	20000300 	.word	0x20000300
 80016a0:	20000308 	.word	0x20000308

080016a4 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f90d 	bl	80018d0 <ft6x06_GetInstance>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d10e      	bne.n	80016de <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f905 	bl	80018d0 <ft6x06_GetInstance>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d806      	bhi.n	80016de <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	b2d1      	uxtb	r1, r2
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <ft6x06_Init+0x44>)
 80016d8:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80016da:	f002 ffb3 	bl	8004644 <TS_IO_Init>
    }
  }
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000310 	.word	0x20000310

080016ec <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 800170c:	f002 ff9a 	bl	8004644 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	21a8      	movs	r1, #168	; 0xa8
 8001716:	4618      	mov	r0, r3
 8001718:	f002 ffb8 	bl	800468c <TS_IO_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	b29b      	uxth	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f8bc 	bl	80018b2 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f88d 	bl	800185c <ft6x06_TS_DisableIT>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2102      	movs	r1, #2
 8001760:	4618      	mov	r0, r3
 8001762:	f002 ff93 	bl	800468c <TS_IO_Read>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <ft6x06_TS_DetectTouch+0x50>)
 8001788:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <ft6x06_TS_DetectTouch+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	b2db      	uxtb	r3, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000314 	.word	0x20000314

080017a0 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <ft6x06_TS_GetXY+0x90>)
 80017b4:	789a      	ldrb	r2, [r3, #2]
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <ft6x06_TS_GetXY+0x90>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d234      	bcs.n	8001828 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <ft6x06_TS_GetXY+0x90>)
 80017c0:	789b      	ldrb	r3, [r3, #2]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <ft6x06_TS_GetXY+0x2c>
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d003      	beq.n	80017d2 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80017ca:	e005      	b.n	80017d8 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80017cc:	2303      	movs	r3, #3
 80017ce:	75fb      	strb	r3, [r7, #23]
      break;
 80017d0:	e002      	b.n	80017d8 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80017d2:	2309      	movs	r3, #9
 80017d4:	75fb      	strb	r3, [r7, #23]
      break;
 80017d6:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	f107 0210 	add.w	r2, r7, #16
 80017e0:	7df9      	ldrb	r1, [r7, #23]
 80017e2:	2304      	movs	r3, #4
 80017e4:	f002 ff70 	bl	80046c8 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80017e8:	7c3b      	ldrb	r3, [r7, #16]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7c7b      	ldrb	r3, [r7, #17]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001802:	7cbb      	ldrb	r3, [r7, #18]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21b      	sxth	r3, r3
 8001808:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800180c:	b21a      	sxth	r2, r3
 800180e:	7cfb      	ldrb	r3, [r7, #19]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	b29a      	uxth	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <ft6x06_TS_GetXY+0x90>)
 800181e:	789b      	ldrb	r3, [r3, #2]
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b02      	ldr	r3, [pc, #8]	; (8001830 <ft6x06_TS_GetXY+0x90>)
 8001826:	709a      	strb	r2, [r3, #2]
  }
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000314 	.word	0x20000314

08001834 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	21a4      	movs	r1, #164	; 0xa4
 800184e:	4618      	mov	r0, r3
 8001850:	f002 ff02 	bl	8004658 <TS_IO_Write>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	21a4      	movs	r1, #164	; 0xa4
 8001876:	4618      	mov	r0, r3
 8001878:	f002 feee 	bl	8004658 <TS_IO_Write>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e00b      	b.n	80018fc <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <ft6x06_GetInstance+0x40>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d101      	bne.n	80018f6 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	e006      	b.n	8001904 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	3301      	adds	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d9f0      	bls.n	80018e4 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001902:	23ff      	movs	r3, #255	; 0xff
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000310 	.word	0x20000310

08001914 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800191e:	49c1      	ldr	r1, [pc, #772]	; (8001c24 <OTM8009A_Init+0x310>)
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fb8d 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001926:	49c0      	ldr	r1, [pc, #768]	; (8001c28 <OTM8009A_Init+0x314>)
 8001928:	2003      	movs	r0, #3
 800192a:	f7ff fb89 	bl	8001040 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800192e:	49bf      	ldr	r1, [pc, #764]	; (8001c2c <OTM8009A_Init+0x318>)
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fb85 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001936:	49be      	ldr	r1, [pc, #760]	; (8001c30 <OTM8009A_Init+0x31c>)
 8001938:	2002      	movs	r0, #2
 800193a:	f7ff fb81 	bl	8001040 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800193e:	49bb      	ldr	r1, [pc, #748]	; (8001c2c <OTM8009A_Init+0x318>)
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fb7d 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001946:	49bb      	ldr	r1, [pc, #748]	; (8001c34 <OTM8009A_Init+0x320>)
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fb79 	bl	8001040 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 800194e:	200a      	movs	r0, #10
 8001950:	f003 fd5e 	bl	8005410 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001954:	49b8      	ldr	r1, [pc, #736]	; (8001c38 <OTM8009A_Init+0x324>)
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fb72 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800195c:	49b7      	ldr	r1, [pc, #732]	; (8001c3c <OTM8009A_Init+0x328>)
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fb6e 	bl	8001040 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8001964:	200a      	movs	r0, #10
 8001966:	f003 fd53 	bl	8005410 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800196a:	49b5      	ldr	r1, [pc, #724]	; (8001c40 <OTM8009A_Init+0x32c>)
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fb67 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001972:	49b4      	ldr	r1, [pc, #720]	; (8001c44 <OTM8009A_Init+0x330>)
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fb63 	bl	8001040 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800197a:	49b3      	ldr	r1, [pc, #716]	; (8001c48 <OTM8009A_Init+0x334>)
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff fb5f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001982:	49b2      	ldr	r1, [pc, #712]	; (8001c4c <OTM8009A_Init+0x338>)
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fb5b 	bl	8001040 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800198a:	49b1      	ldr	r1, [pc, #708]	; (8001c50 <OTM8009A_Init+0x33c>)
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fb57 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001992:	49b0      	ldr	r1, [pc, #704]	; (8001c54 <OTM8009A_Init+0x340>)
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fb53 	bl	8001040 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800199a:	49a2      	ldr	r1, [pc, #648]	; (8001c24 <OTM8009A_Init+0x310>)
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fb4f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80019a2:	49ad      	ldr	r1, [pc, #692]	; (8001c58 <OTM8009A_Init+0x344>)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fb4b 	bl	8001040 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80019aa:	49ac      	ldr	r1, [pc, #688]	; (8001c5c <OTM8009A_Init+0x348>)
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fb47 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80019b2:	49ab      	ldr	r1, [pc, #684]	; (8001c60 <OTM8009A_Init+0x34c>)
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fb43 	bl	8001040 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80019ba:	49aa      	ldr	r1, [pc, #680]	; (8001c64 <OTM8009A_Init+0x350>)
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fb3f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80019c2:	49a9      	ldr	r1, [pc, #676]	; (8001c68 <OTM8009A_Init+0x354>)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fb3b 	bl	8001040 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80019ca:	49a8      	ldr	r1, [pc, #672]	; (8001c6c <OTM8009A_Init+0x358>)
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fb37 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80019d2:	49a7      	ldr	r1, [pc, #668]	; (8001c70 <OTM8009A_Init+0x35c>)
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fb33 	bl	8001040 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80019da:	49a6      	ldr	r1, [pc, #664]	; (8001c74 <OTM8009A_Init+0x360>)
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fb2f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80019e2:	499a      	ldr	r1, [pc, #616]	; (8001c4c <OTM8009A_Init+0x338>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fb2b 	bl	8001040 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80019ea:	498e      	ldr	r1, [pc, #568]	; (8001c24 <OTM8009A_Init+0x310>)
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fb27 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80019f2:	49a1      	ldr	r1, [pc, #644]	; (8001c78 <OTM8009A_Init+0x364>)
 80019f4:	2002      	movs	r0, #2
 80019f6:	f7ff fb23 	bl	8001040 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80019fa:	49a0      	ldr	r1, [pc, #640]	; (8001c7c <OTM8009A_Init+0x368>)
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fb1f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001a02:	499f      	ldr	r1, [pc, #636]	; (8001c80 <OTM8009A_Init+0x36c>)
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb1b 	bl	8001040 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001a0a:	499e      	ldr	r1, [pc, #632]	; (8001c84 <OTM8009A_Init+0x370>)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fb17 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001a12:	499d      	ldr	r1, [pc, #628]	; (8001c88 <OTM8009A_Init+0x374>)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fb13 	bl	8001040 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001a1a:	499c      	ldr	r1, [pc, #624]	; (8001c8c <OTM8009A_Init+0x378>)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fb0f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001a22:	499b      	ldr	r1, [pc, #620]	; (8001c90 <OTM8009A_Init+0x37c>)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fb0b 	bl	8001040 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001a2a:	498c      	ldr	r1, [pc, #560]	; (8001c5c <OTM8009A_Init+0x348>)
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fb07 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001a32:	4998      	ldr	r1, [pc, #608]	; (8001c94 <OTM8009A_Init+0x380>)
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fb03 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001a3a:	498a      	ldr	r1, [pc, #552]	; (8001c64 <OTM8009A_Init+0x350>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff faff 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001a42:	4995      	ldr	r1, [pc, #596]	; (8001c98 <OTM8009A_Init+0x384>)
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff fafb 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001a4a:	4994      	ldr	r1, [pc, #592]	; (8001c9c <OTM8009A_Init+0x388>)
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff faf7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001a52:	4993      	ldr	r1, [pc, #588]	; (8001ca0 <OTM8009A_Init+0x38c>)
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7ff faf3 	bl	8001040 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001a5a:	4974      	ldr	r1, [pc, #464]	; (8001c2c <OTM8009A_Init+0x318>)
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff faef 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001a62:	4990      	ldr	r1, [pc, #576]	; (8001ca4 <OTM8009A_Init+0x390>)
 8001a64:	2006      	movs	r0, #6
 8001a66:	f7ff faeb 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001a6a:	498f      	ldr	r1, [pc, #572]	; (8001ca8 <OTM8009A_Init+0x394>)
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fae7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001a72:	498e      	ldr	r1, [pc, #568]	; (8001cac <OTM8009A_Init+0x398>)
 8001a74:	200e      	movs	r0, #14
 8001a76:	f7ff fae3 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001a7a:	498d      	ldr	r1, [pc, #564]	; (8001cb0 <OTM8009A_Init+0x39c>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fadf 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001a82:	498c      	ldr	r1, [pc, #560]	; (8001cb4 <OTM8009A_Init+0x3a0>)
 8001a84:	200e      	movs	r0, #14
 8001a86:	f7ff fadb 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001a8a:	498b      	ldr	r1, [pc, #556]	; (8001cb8 <OTM8009A_Init+0x3a4>)
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fad7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001a92:	498a      	ldr	r1, [pc, #552]	; (8001cbc <OTM8009A_Init+0x3a8>)
 8001a94:	200a      	movs	r0, #10
 8001a96:	f7ff fad3 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001a9a:	4989      	ldr	r1, [pc, #548]	; (8001cc0 <OTM8009A_Init+0x3ac>)
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff facf 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001aa2:	4988      	ldr	r1, [pc, #544]	; (8001cc4 <OTM8009A_Init+0x3b0>)
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff facb 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001aaa:	4960      	ldr	r1, [pc, #384]	; (8001c2c <OTM8009A_Init+0x318>)
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fac7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001ab2:	4985      	ldr	r1, [pc, #532]	; (8001cc8 <OTM8009A_Init+0x3b4>)
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f7ff fac3 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001aba:	4984      	ldr	r1, [pc, #528]	; (8001ccc <OTM8009A_Init+0x3b8>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fabf 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001ac2:	4983      	ldr	r1, [pc, #524]	; (8001cd0 <OTM8009A_Init+0x3bc>)
 8001ac4:	200f      	movs	r0, #15
 8001ac6:	f7ff fabb 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001aca:	4977      	ldr	r1, [pc, #476]	; (8001ca8 <OTM8009A_Init+0x394>)
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fab7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001ad2:	4980      	ldr	r1, [pc, #512]	; (8001cd4 <OTM8009A_Init+0x3c0>)
 8001ad4:	200f      	movs	r0, #15
 8001ad6:	f7ff fab3 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001ada:	4975      	ldr	r1, [pc, #468]	; (8001cb0 <OTM8009A_Init+0x39c>)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff faaf 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001ae2:	497d      	ldr	r1, [pc, #500]	; (8001cd8 <OTM8009A_Init+0x3c4>)
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f7ff faab 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001aea:	4973      	ldr	r1, [pc, #460]	; (8001cb8 <OTM8009A_Init+0x3a4>)
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff faa7 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001af2:	497a      	ldr	r1, [pc, #488]	; (8001cdc <OTM8009A_Init+0x3c8>)
 8001af4:	200f      	movs	r0, #15
 8001af6:	f7ff faa3 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001afa:	4971      	ldr	r1, [pc, #452]	; (8001cc0 <OTM8009A_Init+0x3ac>)
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fa9f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001b02:	4977      	ldr	r1, [pc, #476]	; (8001ce0 <OTM8009A_Init+0x3cc>)
 8001b04:	200f      	movs	r0, #15
 8001b06:	f7ff fa9b 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001b0a:	4976      	ldr	r1, [pc, #472]	; (8001ce4 <OTM8009A_Init+0x3d0>)
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fa97 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001b12:	4975      	ldr	r1, [pc, #468]	; (8001ce8 <OTM8009A_Init+0x3d4>)
 8001b14:	200a      	movs	r0, #10
 8001b16:	f7ff fa93 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001b1a:	4974      	ldr	r1, [pc, #464]	; (8001cec <OTM8009A_Init+0x3d8>)
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fa8f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001b22:	4973      	ldr	r1, [pc, #460]	; (8001cf0 <OTM8009A_Init+0x3dc>)
 8001b24:	200a      	movs	r0, #10
 8001b26:	f7ff fa8b 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001b2a:	4940      	ldr	r1, [pc, #256]	; (8001c2c <OTM8009A_Init+0x318>)
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fa87 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001b32:	4970      	ldr	r1, [pc, #448]	; (8001cf4 <OTM8009A_Init+0x3e0>)
 8001b34:	200a      	movs	r0, #10
 8001b36:	f7ff fa83 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001b3a:	4964      	ldr	r1, [pc, #400]	; (8001ccc <OTM8009A_Init+0x3b8>)
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fa7f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001b42:	496d      	ldr	r1, [pc, #436]	; (8001cf8 <OTM8009A_Init+0x3e4>)
 8001b44:	200f      	movs	r0, #15
 8001b46:	f7ff fa7b 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001b4a:	4957      	ldr	r1, [pc, #348]	; (8001ca8 <OTM8009A_Init+0x394>)
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fa77 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001b52:	496a      	ldr	r1, [pc, #424]	; (8001cfc <OTM8009A_Init+0x3e8>)
 8001b54:	200f      	movs	r0, #15
 8001b56:	f7ff fa73 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001b5a:	4955      	ldr	r1, [pc, #340]	; (8001cb0 <OTM8009A_Init+0x39c>)
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fa6f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001b62:	4967      	ldr	r1, [pc, #412]	; (8001d00 <OTM8009A_Init+0x3ec>)
 8001b64:	200a      	movs	r0, #10
 8001b66:	f7ff fa6b 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001b6a:	4953      	ldr	r1, [pc, #332]	; (8001cb8 <OTM8009A_Init+0x3a4>)
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fa67 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001b72:	4964      	ldr	r1, [pc, #400]	; (8001d04 <OTM8009A_Init+0x3f0>)
 8001b74:	200f      	movs	r0, #15
 8001b76:	f7ff fa63 	bl	8001040 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001b7a:	4951      	ldr	r1, [pc, #324]	; (8001cc0 <OTM8009A_Init+0x3ac>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fa5f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001b82:	4961      	ldr	r1, [pc, #388]	; (8001d08 <OTM8009A_Init+0x3f4>)
 8001b84:	200f      	movs	r0, #15
 8001b86:	f7ff fa5b 	bl	8001040 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <OTM8009A_Init+0x348>)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff fa57 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001b92:	495e      	ldr	r1, [pc, #376]	; (8001d0c <OTM8009A_Init+0x3f8>)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fa53 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001b9a:	495d      	ldr	r1, [pc, #372]	; (8001d10 <OTM8009A_Init+0x3fc>)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fa4f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001ba2:	495c      	ldr	r1, [pc, #368]	; (8001d14 <OTM8009A_Init+0x400>)
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff fa4b 	bl	8001040 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001baa:	495b      	ldr	r1, [pc, #364]	; (8001d18 <OTM8009A_Init+0x404>)
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fa47 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001bb2:	495a      	ldr	r1, [pc, #360]	; (8001d1c <OTM8009A_Init+0x408>)
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fa43 	bl	8001040 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bba:	491a      	ldr	r1, [pc, #104]	; (8001c24 <OTM8009A_Init+0x310>)
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff fa3f 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001bc2:	4957      	ldr	r1, [pc, #348]	; (8001d20 <OTM8009A_Init+0x40c>)
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f7ff fa3b 	bl	8001040 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bca:	4916      	ldr	r1, [pc, #88]	; (8001c24 <OTM8009A_Init+0x310>)
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fa37 	bl	8001040 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bd2:	4914      	ldr	r1, [pc, #80]	; (8001c24 <OTM8009A_Init+0x310>)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fa33 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001bda:	4952      	ldr	r1, [pc, #328]	; (8001d24 <OTM8009A_Init+0x410>)
 8001bdc:	2010      	movs	r0, #16
 8001bde:	f7ff fa2f 	bl	8001040 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001be2:	4910      	ldr	r1, [pc, #64]	; (8001c24 <OTM8009A_Init+0x310>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fa2b 	bl	8001040 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001bea:	494f      	ldr	r1, [pc, #316]	; (8001d28 <OTM8009A_Init+0x414>)
 8001bec:	2010      	movs	r0, #16
 8001bee:	f7ff fa27 	bl	8001040 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001bf2:	494e      	ldr	r1, [pc, #312]	; (8001d2c <OTM8009A_Init+0x418>)
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fa23 	bl	8001040 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 8001bfa:	2078      	movs	r0, #120	; 0x78
 8001bfc:	f003 fc08 	bl	8005410 <HAL_Delay>

  switch(ColorCoding)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <OTM8009A_Init+0x304>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	f040 8095 	bne.w	8001d38 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001c0e:	4948      	ldr	r1, [pc, #288]	; (8001d30 <OTM8009A_Init+0x41c>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fa15 	bl	8001040 <DSI_IO_WriteCmd>
    break;
 8001c16:	e090      	b.n	8001d3a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001c18:	4946      	ldr	r1, [pc, #280]	; (8001d34 <OTM8009A_Init+0x420>)
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fa10 	bl	8001040 <DSI_IO_WriteCmd>
    break;
 8001c20:	e08b      	b.n	8001d3a <OTM8009A_Init+0x426>
 8001c22:	bf00      	nop
 8001c24:	08010be8 	.word	0x08010be8
 8001c28:	08010aa0 	.word	0x08010aa0
 8001c2c:	08010bec 	.word	0x08010bec
 8001c30:	08010aa4 	.word	0x08010aa4
 8001c34:	08010bf0 	.word	0x08010bf0
 8001c38:	08010bf4 	.word	0x08010bf4
 8001c3c:	08010bf8 	.word	0x08010bf8
 8001c40:	08010bfc 	.word	0x08010bfc
 8001c44:	08010c00 	.word	0x08010c00
 8001c48:	08010c04 	.word	0x08010c04
 8001c4c:	08010c08 	.word	0x08010c08
 8001c50:	08010c0c 	.word	0x08010c0c
 8001c54:	08010c10 	.word	0x08010c10
 8001c58:	08010c14 	.word	0x08010c14
 8001c5c:	08010c18 	.word	0x08010c18
 8001c60:	08010c1c 	.word	0x08010c1c
 8001c64:	08010c20 	.word	0x08010c20
 8001c68:	08010c24 	.word	0x08010c24
 8001c6c:	08010c28 	.word	0x08010c28
 8001c70:	08010c2c 	.word	0x08010c2c
 8001c74:	08010c30 	.word	0x08010c30
 8001c78:	08010ad0 	.word	0x08010ad0
 8001c7c:	08010c34 	.word	0x08010c34
 8001c80:	08010c38 	.word	0x08010c38
 8001c84:	08010c3c 	.word	0x08010c3c
 8001c88:	08010c40 	.word	0x08010c40
 8001c8c:	08010c44 	.word	0x08010c44
 8001c90:	08010c48 	.word	0x08010c48
 8001c94:	08010c4c 	.word	0x08010c4c
 8001c98:	08010c50 	.word	0x08010c50
 8001c9c:	08010c54 	.word	0x08010c54
 8001ca0:	08010ad4 	.word	0x08010ad4
 8001ca4:	08010ad8 	.word	0x08010ad8
 8001ca8:	08010c58 	.word	0x08010c58
 8001cac:	08010ae0 	.word	0x08010ae0
 8001cb0:	08010c5c 	.word	0x08010c5c
 8001cb4:	08010af0 	.word	0x08010af0
 8001cb8:	08010c60 	.word	0x08010c60
 8001cbc:	08010b00 	.word	0x08010b00
 8001cc0:	08010c64 	.word	0x08010c64
 8001cc4:	08010c9c 	.word	0x08010c9c
 8001cc8:	08010b0c 	.word	0x08010b0c
 8001ccc:	08010c68 	.word	0x08010c68
 8001cd0:	08010b18 	.word	0x08010b18
 8001cd4:	08010b28 	.word	0x08010b28
 8001cd8:	08010b38 	.word	0x08010b38
 8001cdc:	08010b44 	.word	0x08010b44
 8001ce0:	08010b54 	.word	0x08010b54
 8001ce4:	08010c6c 	.word	0x08010c6c
 8001ce8:	08010b64 	.word	0x08010b64
 8001cec:	08010c70 	.word	0x08010c70
 8001cf0:	08010b70 	.word	0x08010b70
 8001cf4:	08010b7c 	.word	0x08010b7c
 8001cf8:	08010b88 	.word	0x08010b88
 8001cfc:	08010b98 	.word	0x08010b98
 8001d00:	08010ba8 	.word	0x08010ba8
 8001d04:	08010bb4 	.word	0x08010bb4
 8001d08:	08010bc4 	.word	0x08010bc4
 8001d0c:	08010ca0 	.word	0x08010ca0
 8001d10:	08010ca4 	.word	0x08010ca4
 8001d14:	08010ca8 	.word	0x08010ca8
 8001d18:	08010cac 	.word	0x08010cac
 8001d1c:	08010cb0 	.word	0x08010cb0
 8001d20:	08010bd4 	.word	0x08010bd4
 8001d24:	08010aa8 	.word	0x08010aa8
 8001d28:	08010abc 	.word	0x08010abc
 8001d2c:	08010c74 	.word	0x08010c74
 8001d30:	08010c78 	.word	0x08010c78
 8001d34:	08010c7c 	.word	0x08010c7c
  default :
    break;
 8001d38:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10b      	bne.n	8001d58 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <OTM8009A_Init+0x488>)
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff f97c 	bl	8001040 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001d48:	4915      	ldr	r1, [pc, #84]	; (8001da0 <OTM8009A_Init+0x48c>)
 8001d4a:	2004      	movs	r0, #4
 8001d4c:	f7ff f978 	bl	8001040 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001d50:	4914      	ldr	r1, [pc, #80]	; (8001da4 <OTM8009A_Init+0x490>)
 8001d52:	2004      	movs	r0, #4
 8001d54:	f7ff f974 	bl	8001040 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001d58:	4913      	ldr	r1, [pc, #76]	; (8001da8 <OTM8009A_Init+0x494>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff f970 	bl	8001040 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001d60:	4912      	ldr	r1, [pc, #72]	; (8001dac <OTM8009A_Init+0x498>)
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff f96c 	bl	8001040 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001d68:	4911      	ldr	r1, [pc, #68]	; (8001db0 <OTM8009A_Init+0x49c>)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff f968 	bl	8001040 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001d70:	4910      	ldr	r1, [pc, #64]	; (8001db4 <OTM8009A_Init+0x4a0>)
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff f964 	bl	8001040 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001d78:	490f      	ldr	r1, [pc, #60]	; (8001db8 <OTM8009A_Init+0x4a4>)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff f960 	bl	8001040 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <OTM8009A_Init+0x4a8>)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff f95c 	bl	8001040 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001d88:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <OTM8009A_Init+0x4ac>)
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff f958 	bl	8001040 <DSI_IO_WriteCmd>

  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08010c80 	.word	0x08010c80
 8001da0:	08010bd8 	.word	0x08010bd8
 8001da4:	08010be0 	.word	0x08010be0
 8001da8:	08010c84 	.word	0x08010c84
 8001dac:	08010c88 	.word	0x08010c88
 8001db0:	08010c8c 	.word	0x08010c8c
 8001db4:	08010c90 	.word	0x08010c90
 8001db8:	08010c94 	.word	0x08010c94
 8001dbc:	08010be8 	.word	0x08010be8
 8001dc0:	08010c98 	.word	0x08010c98

08001dc4 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8001dcc:	f7fe fe80 	bl	8000ad0 <BSP_LCD_GetFont>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8001dd2:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <__io_putchar+0x190>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80b6 	bne.w	8001f48 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <__io_putchar+0x194>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001de4:	4b5d      	ldr	r3, [pc, #372]	; (8001f5c <__io_putchar+0x198>)
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <__io_putchar+0x19c>)
 8001dea:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <__io_putchar+0x1a0>)
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <__io_putchar+0x1a4>)
 8001df2:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8001df4:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <__io_putchar+0x194>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8001dfa:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <__io_putchar+0x1a8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8001e00:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <__io_putchar+0x1ac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <__io_putchar+0x1b0>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	f7fe fd68 	bl	80008e0 <BSP_LCD_GetXSize>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	889b      	ldrh	r3, [r3, #4]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	d218      	bcs.n	8001e50 <__io_putchar+0x8c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0a      	cmp	r3, #10
 8001e22:	d015      	beq.n	8001e50 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001e24:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <__io_putchar+0x19c>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <__io_putchar+0x1b0>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	b290      	uxth	r0, r2
 8001e32:	4a50      	ldr	r2, [pc, #320]	; (8001f74 <__io_putchar+0x1b0>)
 8001e34:	8010      	strh	r0, [r2, #0]
 8001e36:	461c      	mov	r4, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	b2d8      	uxtb	r0, r3
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <__io_putchar+0x1b4>)
 8001e3e:	460b      	mov	r3, r1
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	440b      	add	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	4423      	add	r3, r4
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e07b      	b.n	8001f48 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <__io_putchar+0x1a4>)
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <__io_putchar+0x19c>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d314      	bcc.n	8001e86 <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001e5c:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <__io_putchar+0x1b8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <__io_putchar+0x1a4>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <__io_putchar+0x1a4>)
 8001e6e:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <__io_putchar+0x1a4>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2b7c      	cmp	r3, #124	; 0x7c
 8001e76:	d106      	bne.n	8001e86 <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <__io_putchar+0x1a4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	e002      	b.n	8001e86 <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <__io_putchar+0x1b8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <__io_putchar+0x1b0>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e015      	b.n	8001eba <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <__io_putchar+0x19c>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <__io_putchar+0x1b0>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	b290      	uxth	r0, r2
 8001e9c:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <__io_putchar+0x1b0>)
 8001e9e:	8010      	strh	r0, [r2, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <__io_putchar+0x1b4>)
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	015b      	lsls	r3, r3, #5
 8001ea8:	440b      	add	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	4403      	add	r3, r0
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	f7fe fd11 	bl	80008e0 <BSP_LCD_GetXSize>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3df      	bcc.n	8001e8e <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <__io_putchar+0x19c>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <__io_putchar+0x1bc>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4927      	ldr	r1, [pc, #156]	; (8001f78 <__io_putchar+0x1b4>)
 8001eda:	4603      	mov	r3, r0
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	4403      	add	r3, r0
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3380      	adds	r3, #128	; 0x80
 8001ee6:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <__io_putchar+0x1b0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8001eee:	f000 f849 	bl	8001f84 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <__io_putchar+0x19c>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <__io_putchar+0x19c>)
 8001efc:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <__io_putchar+0x19c>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	2b7c      	cmp	r3, #124	; 0x7c
 8001f04:	d108      	bne.n	8001f18 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <__io_putchar+0x19c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <__io_putchar+0x1a4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <__io_putchar+0x1b8>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b0a      	cmp	r3, #10
 8001f1c:	d014      	beq.n	8001f48 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <__io_putchar+0x19c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <__io_putchar+0x1b0>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	b290      	uxth	r0, r2
 8001f2c:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <__io_putchar+0x1b0>)
 8001f2e:	8010      	strh	r0, [r2, #0]
 8001f30:	461c      	mov	r4, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b2d8      	uxtb	r0, r3
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <__io_putchar+0x1b4>)
 8001f38:	460b      	mov	r3, r1
 8001f3a:	015b      	lsls	r3, r3, #5
 8001f3c:	440b      	add	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	4423      	add	r3, r4
 8001f44:	4602      	mov	r2, r0
 8001f46:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20004318 	.word	0x20004318
 8001f58:	20004317 	.word	0x20004317
 8001f5c:	20004314 	.word	0x20004314
 8001f60:	20004310 	.word	0x20004310
 8001f64:	20004312 	.word	0x20004312
 8001f68:	2000430e 	.word	0x2000430e
 8001f6c:	20004319 	.word	0x20004319
 8001f70:	2000431a 	.word	0x2000431a
 8001f74:	2000430c 	.word	0x2000430c
 8001f78:	20000318 	.word	0x20000318
 8001f7c:	20004316 	.word	0x20004316
 8001f80:	20004308 	.word	0x20004308

08001f84 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	807b      	strh	r3, [r7, #2]
 8001f96:	2300      	movs	r3, #0
 8001f98:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2b16      	cmp	r3, #22
 8001fa0:	d826      	bhi.n	8001ff0 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <LCD_LOG_UpdateDisplay+0x104>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d320      	bcc.n	8001ff0 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4a34      	ldr	r2, [pc, #208]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	441a      	add	r2, r3
 8001fb6:	4935      	ldr	r1, [pc, #212]	; (800208c <LCD_LOG_UpdateDisplay+0x108>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3380      	adds	r3, #128	; 0x80
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fd50 	bl	8000a6c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	441a      	add	r2, r3
 8001fdc:	4613      	mov	r3, r2
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <LCD_LOG_UpdateDisplay+0x108>)
 8001fe6:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fe93 	bl	8000d14 <BSP_LCD_DisplayStringAtLine>
 8001fee:	e045      	b.n	800207c <LCD_LOG_UpdateDisplay+0xf8>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <LCD_LOG_UpdateDisplay+0x104>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d204      	bcs.n	8002006 <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	337c      	adds	r3, #124	; 0x7c
 8002002:	80bb      	strh	r3, [r7, #4]
 8002004:	e002      	b.n	800200c <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <LCD_LOG_UpdateDisplay+0x100>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	3b17      	subs	r3, #23
 8002010:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8002012:	2300      	movs	r3, #0
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	e02d      	b.n	8002074 <LCD_LOG_UpdateDisplay+0xf0>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8002018:	79fa      	ldrb	r2, [r7, #7]
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	441a      	add	r2, r3
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <LCD_LOG_UpdateDisplay+0x10c>)
 8002020:	fb83 1302 	smull	r1, r3, r3, r2
 8002024:	4413      	add	r3, r2
 8002026:	1199      	asrs	r1, r3, #6
 8002028:	17d3      	asrs	r3, r2, #31
 800202a:	1ac9      	subs	r1, r1, r3
 800202c:	460b      	mov	r3, r1
 800202e:	015b      	lsls	r3, r3, #5
 8002030:	1a5b      	subs	r3, r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	1ad1      	subs	r1, r2, r3
 8002036:	460b      	mov	r3, r1
 8002038:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800203a:	883a      	ldrh	r2, [r7, #0]
 800203c:	4913      	ldr	r1, [pc, #76]	; (800208c <LCD_LOG_UpdateDisplay+0x108>)
 800203e:	4613      	mov	r3, r2
 8002040:	015b      	lsls	r3, r3, #5
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3380      	adds	r3, #128	; 0x80
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd0d 	bl	8000a6c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	b29b      	uxth	r3, r3
 8002056:	3304      	adds	r3, #4
 8002058:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 800205a:	883a      	ldrh	r2, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <LCD_LOG_UpdateDisplay+0x108>)
 8002066:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fe53 	bl	8000d14 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	3301      	adds	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2b17      	cmp	r3, #23
 8002078:	d9ce      	bls.n	8002018 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20004310 	.word	0x20004310
 8002088:	2000430e 	.word	0x2000430e
 800208c:	20000318 	.word	0x20000318
 8002090:	84210843 	.word	0x84210843

08002094 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_DMA2D_Init+0x34>)
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <MX_DMA2D_Init+0x38>)
 800209c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <MX_DMA2D_Init+0x34>)
 80020a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020a4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_DMA2D_Init+0x34>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_DMA2D_Init+0x34>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_DMA2D_Init+0x34>)
 80020b4:	f003 fb44 	bl	8005740 <HAL_DMA2D_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80020be:	f002 fb3b 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000431c 	.word	0x2000431c
 80020cc:	4002b000 	.word	0x4002b000

080020d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_DMA2D_MspInit+0x38>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10b      	bne.n	80020fa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_DMA2D_MspInit+0x3c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_DMA2D_MspInit+0x3c>)
 80020e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_DMA2D_MspInit+0x3c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	4002b000 	.word	0x4002b000
 800210c:	40023800 	.word	0x40023800

08002110 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0ae      	sub	sp, #184	; 0xb8
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8002116:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002122:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f00d f87f 	bl	800f22e <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002130:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
 8002140:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	226c      	movs	r2, #108	; 0x6c
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f00d f870 	bl	800f22e <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002150:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <MX_DSIHOST_DSI_Init+0x1d8>)
 8002152:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002154:	4b63      	ldr	r3, [pc, #396]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 800215c:	2204      	movs	r2, #4
 800215e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002160:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8002166:	2314      	movs	r3, #20
 8002168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800216c:	2301      	movs	r3, #1
 800216e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002178:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800217c:	4619      	mov	r1, r3
 800217e:	4859      	ldr	r0, [pc, #356]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002180:	f003 fddc 	bl	8005d3c <HAL_DSI_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800218a:	f002 fad5 	bl	8004738 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80021c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021c8:	4619      	mov	r1, r3
 80021ca:	4846      	ldr	r0, [pc, #280]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 80021cc:	f004 fabc 	bl	8006748 <HAL_DSI_ConfigHostTimeouts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80021d6:	f002 faaf 	bl	8004738 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80021da:	231c      	movs	r3, #28
 80021dc:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 80021de:	2321      	movs	r3, #33	; 0x21
 80021e0:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 80021e2:	230f      	movs	r3, #15
 80021e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 80021e6:	2319      	movs	r3, #25
 80021e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80021f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021fa:	4619      	mov	r1, r3
 80021fc:	4839      	ldr	r0, [pc, #228]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 80021fe:	f004 fa39 	bl	8006674 <HAL_DSI_ConfigPhyTimer>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8002208:	f002 fa96 	bl	8004738 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800220c:	2104      	movs	r1, #4
 800220e:	4835      	ldr	r0, [pc, #212]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002210:	f004 fa08 	bl	8006624 <HAL_DSI_ConfigFlowControl>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 800221a:	f002 fa8d 	bl	8004738 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800221e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002222:	4830      	ldr	r0, [pc, #192]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002224:	f004 fc4e 	bl	8006ac4 <HAL_DSI_SetLowPowerRXFilter>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800222e:	f002 fa83 	bl	8004738 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	482b      	ldr	r0, [pc, #172]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002236:	f003 ff11 	bl	800605c <HAL_DSI_ConfigErrorMonitor>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 8002240:	f002 fa7a 	bl	8004738 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8002248:	2305      	movs	r3, #5
 800224a:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 8002258:	f44f 7320 	mov.w	r3, #640	; 0x280
 800225c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8002262:	2304      	movs	r3, #4
 8002264:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8002266:	2302      	movs	r3, #2
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 800226e:	2312      	movs	r3, #18
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 8002272:	2310      	movs	r3, #16
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 8002276:	f240 53e2 	movw	r3, #1506	; 0x5e2
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 800227c:	2304      	movs	r3, #4
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 8002284:	2302      	movs	r3, #2
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8002288:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	480a      	ldr	r0, [pc, #40]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 80022bc:	f003 ffb2 	bl	8006224 <HAL_DSI_ConfigVideoMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 80022c6:	f002 fa37 	bl	8004738 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80022ca:	2100      	movs	r1, #0
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_DSIHOST_DSI_Init+0x1d4>)
 80022ce:	f003 ff81 	bl	80061d4 <HAL_DSI_SetGenericVCID>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 80022d8:	f002 fa2e 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	37b8      	adds	r7, #184	; 0xb8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20004374 	.word	0x20004374
 80022e8:	40016c00 	.word	0x40016c00

080022ec <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_DSI_MspInit+0x38>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10b      	bne.n	8002316 <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_DSI_MspInit+0x3c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_DSI_MspInit+0x3c>)
 8002304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_DSI_MspInit+0x3c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40016c00 	.word	0x40016c00
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_DSI_MspDeInit+0x2c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d105      	bne.n	800234a <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_DSI_MspDeInit+0x30>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_DSI_MspDeInit+0x30>)
 8002344:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40016c00 	.word	0x40016c00
 800235c:	40023800 	.word	0x40023800

08002360 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MX_FMC_Init+0x98>)
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <MX_FMC_Init+0x9c>)
 800237c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_FMC_Init+0x98>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_FMC_Init+0x98>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_FMC_Init+0x98>)
 800238c:	2204      	movs	r2, #4
 800238e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_FMC_Init+0x98>)
 8002392:	2220      	movs	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_FMC_Init+0x98>)
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <MX_FMC_Init+0x98>)
 800239e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_FMC_Init+0x98>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_FMC_Init+0x98>)
 80023ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_FMC_Init+0x98>)
 80023b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_FMC_Init+0x98>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80023c4:	2307      	movs	r3, #7
 80023c6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80023c8:	2304      	movs	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80023cc:	2307      	movs	r3, #7
 80023ce:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80023d0:	2303      	movs	r3, #3
 80023d2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80023d8:	2302      	movs	r3, #2
 80023da:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_FMC_Init+0x98>)
 80023e2:	f007 f8e3 	bl	80095ac <HAL_SDRAM_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80023ec:	f002 f9a4 	bl	8004738 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20004390 	.word	0x20004390
 80023fc:	a0000140 	.word	0xa0000140

08002400 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_FMC_MspInit+0x104>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d16f      	bne.n	80024fc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_FMC_MspInit+0x104>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_FMC_MspInit+0x108>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_FMC_MspInit+0x108>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6393      	str	r3, [r2, #56]	; 0x38
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_FMC_MspInit+0x108>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800243a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800243e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	482d      	ldr	r0, [pc, #180]	; (800250c <HAL_FMC_MspInit+0x10c>)
 8002456:	f004 fb63 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800245a:	f248 1337 	movw	r3, #33079	; 0x8137
 800245e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800246c:	230c      	movs	r3, #12
 800246e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4826      	ldr	r0, [pc, #152]	; (8002510 <HAL_FMC_MspInit+0x110>)
 8002476:	f004 fb53 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800247a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800247e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248c:	230c      	movs	r3, #12
 800248e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4619      	mov	r1, r3
 8002494:	481f      	ldr	r0, [pc, #124]	; (8002514 <HAL_FMC_MspInit+0x114>)
 8002496:	f004 fb43 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800249a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800249e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ac:	230c      	movs	r3, #12
 80024ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4818      	ldr	r0, [pc, #96]	; (8002518 <HAL_FMC_MspInit+0x118>)
 80024b6:	f004 fb33 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80024ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024be:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024cc:	230c      	movs	r3, #12
 80024ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <HAL_FMC_MspInit+0x11c>)
 80024d6:	f004 fb23 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 80024da:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80024de:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ec:	230c      	movs	r3, #12
 80024ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	480a      	ldr	r0, [pc, #40]	; (8002520 <HAL_FMC_MspInit+0x120>)
 80024f6:	f004 fb13 	bl	8006b20 <HAL_GPIO_Init>
 80024fa:	e000      	b.n	80024fe <HAL_FMC_MspInit+0xfe>
    return;
 80024fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200043c4 	.word	0x200043c4
 8002508:	40023800 	.word	0x40023800
 800250c:	40021000 	.word	0x40021000
 8002510:	40021800 	.word	0x40021800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40022000 	.word	0x40022000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021c00 	.word	0x40021c00

08002524 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800252c:	f7ff ff68 	bl	8002400 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <MX_FREERTOS_Init+0x18>)
 800253e:	2100      	movs	r1, #0
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_FREERTOS_Init+0x1c>)
 8002542:	f009 fae5 	bl	800bb10 <osThreadNew>
 8002546:	4603      	mov	r3, r0
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <MX_FREERTOS_Init+0x20>)
 800254a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0801276c 	.word	0x0801276c
 8002554:	0800255d 	.word	0x0800255d
 8002558:	200043c8 	.word	0x200043c8

0800255c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002564:	2001      	movs	r0, #1
 8002566:	f009 fb79 	bl	800bc5c <osDelay>
 800256a:	e7fb      	b.n	8002564 <StartDefaultTask+0x8>

0800256c <fruit_launch>:
/* Functions definition ------------------------------------------------------*/

/**
 * @brief Initializes the launch of max 5 fruits randomly.
 */
void fruit_launch() {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
	srand(HAL_GetTick()); //new random seed
 8002572:	f002 ff41 	bl	80053f8 <HAL_GetTick>
 8002576:	4603      	mov	r3, r0
 8002578:	4618      	mov	r0, r3
 800257a:	f00c fcc7 	bl	800ef0c <srand>

	//random number of fruits
	int n = (rand() % 5) + 1;
 800257e:	f00c fcf3 	bl	800ef68 <rand>
 8002582:	4601      	mov	r1, r0
 8002584:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <fruit_launch+0x18c>)
 8002586:	fb83 2301 	smull	r2, r3, r3, r1
 800258a:	105a      	asrs	r2, r3, #1
 800258c:	17cb      	asrs	r3, r1, #31
 800258e:	1ad2      	subs	r2, r2, r3
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	1aca      	subs	r2, r1, r3
 8002598:	1c53      	adds	r3, r2, #1
 800259a:	607b      	str	r3, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 300)); //Start wait 200-500ms
 800259c:	f00c fce4 	bl	800ef68 <rand>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <fruit_launch+0x190>)
 80025a4:	fb83 1302 	smull	r1, r3, r3, r2
 80025a8:	1199      	asrs	r1, r3, #6
 80025aa:	17d3      	asrs	r3, r2, #31
 80025ac:	1acb      	subs	r3, r1, r3
 80025ae:	21c8      	movs	r1, #200	; 0xc8
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80025ba:	461a      	mov	r2, r3
 80025bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <fruit_launch+0x194>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00a fd29 	bl	800d024 <vTaskDelay>
	if (state == game) //launch only if the game is running
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <fruit_launch+0x198>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <fruit_launch+0x74>
		launch_fruit_random(&fruit1);
 80025da:	484b      	ldr	r0, [pc, #300]	; (8002708 <fruit_launch+0x19c>)
 80025dc:	f000 f92c 	bl	8002838 <launch_fruit_random>
	if (n > 1) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	dd1e      	ble.n	8002624 <fruit_launch+0xb8>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200))); //0-200 ms
 80025e6:	f00c fcbf 	bl	800ef68 <rand>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <fruit_launch+0x190>)
 80025ee:	fb82 1203 	smull	r1, r2, r2, r3
 80025f2:	1191      	asrs	r1, r2, #6
 80025f4:	17da      	asrs	r2, r3, #31
 80025f6:	1a8a      	subs	r2, r1, r2
 80025f8:	21c8      	movs	r1, #200	; 0xc8
 80025fa:	fb01 f202 	mul.w	r2, r1, r2
 80025fe:	1a9a      	subs	r2, r3, r2
 8002600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	4a3d      	ldr	r2, [pc, #244]	; (8002700 <fruit_launch+0x194>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	4618      	mov	r0, r3
 8002612:	f00a fd07 	bl	800d024 <vTaskDelay>
		if (state == game)
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <fruit_launch+0x198>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <fruit_launch+0xb8>
			launch_fruit_random(&fruit2);
 800261e:	483b      	ldr	r0, [pc, #236]	; (800270c <fruit_launch+0x1a0>)
 8002620:	f000 f90a 	bl	8002838 <launch_fruit_random>
	}
	if (n > 2) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	dd1e      	ble.n	8002668 <fruit_launch+0xfc>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200))); //0-200 ms
 800262a:	f00c fc9d 	bl	800ef68 <rand>
 800262e:	4603      	mov	r3, r0
 8002630:	4a32      	ldr	r2, [pc, #200]	; (80026fc <fruit_launch+0x190>)
 8002632:	fb82 1203 	smull	r1, r2, r2, r3
 8002636:	1191      	asrs	r1, r2, #6
 8002638:	17da      	asrs	r2, r3, #31
 800263a:	1a8a      	subs	r2, r1, r2
 800263c:	21c8      	movs	r1, #200	; 0xc8
 800263e:	fb01 f202 	mul.w	r2, r1, r2
 8002642:	1a9a      	subs	r2, r3, r2
 8002644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <fruit_launch+0x194>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	4618      	mov	r0, r3
 8002656:	f00a fce5 	bl	800d024 <vTaskDelay>
		if (state == game)
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <fruit_launch+0x198>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <fruit_launch+0xfc>
			launch_fruit_random(&fruit3);
 8002662:	482b      	ldr	r0, [pc, #172]	; (8002710 <fruit_launch+0x1a4>)
 8002664:	f000 f8e8 	bl	8002838 <launch_fruit_random>
	}
	if (n > 3) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b03      	cmp	r3, #3
 800266c:	dd1e      	ble.n	80026ac <fruit_launch+0x140>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200))); //0-200 ms
 800266e:	f00c fc7b 	bl	800ef68 <rand>
 8002672:	4603      	mov	r3, r0
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <fruit_launch+0x190>)
 8002676:	fb82 1203 	smull	r1, r2, r2, r3
 800267a:	1191      	asrs	r1, r2, #6
 800267c:	17da      	asrs	r2, r3, #31
 800267e:	1a8a      	subs	r2, r1, r2
 8002680:	21c8      	movs	r1, #200	; 0xc8
 8002682:	fb01 f202 	mul.w	r2, r1, r2
 8002686:	1a9a      	subs	r2, r3, r2
 8002688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <fruit_launch+0x194>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	4618      	mov	r0, r3
 800269a:	f00a fcc3 	bl	800d024 <vTaskDelay>
		if (state == game)
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <fruit_launch+0x198>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <fruit_launch+0x140>
			launch_fruit_random(&fruit4);
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <fruit_launch+0x1a8>)
 80026a8:	f000 f8c6 	bl	8002838 <launch_fruit_random>
	}
	if (n > 4) { //max 5 new fruits
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	dd1e      	ble.n	80026f0 <fruit_launch+0x184>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200))); //0-200 ms
 80026b2:	f00c fc59 	bl	800ef68 <rand>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <fruit_launch+0x190>)
 80026ba:	fb82 1203 	smull	r1, r2, r2, r3
 80026be:	1191      	asrs	r1, r2, #6
 80026c0:	17da      	asrs	r2, r3, #31
 80026c2:	1a8a      	subs	r2, r1, r2
 80026c4:	21c8      	movs	r1, #200	; 0xc8
 80026c6:	fb01 f202 	mul.w	r2, r1, r2
 80026ca:	1a9a      	subs	r2, r3, r2
 80026cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <fruit_launch+0x194>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	4618      	mov	r0, r3
 80026de:	f00a fca1 	bl	800d024 <vTaskDelay>
		if (state == game)
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <fruit_launch+0x198>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <fruit_launch+0x184>
			launch_fruit_random(&fruit5);
 80026ea:	480b      	ldr	r0, [pc, #44]	; (8002718 <fruit_launch+0x1ac>)
 80026ec:	f000 f8a4 	bl	8002838 <launch_fruit_random>
	}
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	66666667 	.word	0x66666667
 80026fc:	51eb851f 	.word	0x51eb851f
 8002700:	10624dd3 	.word	0x10624dd3
 8002704:	20004817 	.word	0x20004817
 8002708:	200043cc 	.word	0x200043cc
 800270c:	200043e4 	.word	0x200043e4
 8002710:	200043fc 	.word	0x200043fc
 8002714:	20004414 	.word	0x20004414
 8002718:	2000442c 	.word	0x2000442c

0800271c <fruit_control>:

/**
 * @brief Controls all objects flight paths. (physic position update)
 */
void fruit_control() {
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	fruit_slice_control();
 8002720:	f000 f96c 	bl	80029fc <fruit_slice_control>

	if (fruit1.type != off) //if the object is active
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <fruit_control+0xe0>)
 8002726:	7d1b      	ldrb	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <fruit_control+0x16>
		launch_fruit_physics_update(&fruit1); //update position
 800272c:	4833      	ldr	r0, [pc, #204]	; (80027fc <fruit_control+0xe0>)
 800272e:	f000 f8df 	bl	80028f0 <launch_fruit_physics_update>
	if (fruit2.type != off)
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <fruit_control+0xe4>)
 8002734:	7d1b      	ldrb	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <fruit_control+0x24>
		launch_fruit_physics_update(&fruit2);
 800273a:	4831      	ldr	r0, [pc, #196]	; (8002800 <fruit_control+0xe4>)
 800273c:	f000 f8d8 	bl	80028f0 <launch_fruit_physics_update>
	if (fruit3.type != off)
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <fruit_control+0xe8>)
 8002742:	7d1b      	ldrb	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <fruit_control+0x32>
		launch_fruit_physics_update(&fruit3);
 8002748:	482e      	ldr	r0, [pc, #184]	; (8002804 <fruit_control+0xe8>)
 800274a:	f000 f8d1 	bl	80028f0 <launch_fruit_physics_update>
	if (fruit4.type != off)
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <fruit_control+0xec>)
 8002750:	7d1b      	ldrb	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <fruit_control+0x40>
		launch_fruit_physics_update(&fruit4);
 8002756:	482c      	ldr	r0, [pc, #176]	; (8002808 <fruit_control+0xec>)
 8002758:	f000 f8ca 	bl	80028f0 <launch_fruit_physics_update>
	if (fruit5.type != off)
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <fruit_control+0xf0>)
 800275e:	7d1b      	ldrb	r3, [r3, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <fruit_control+0x4e>
		launch_fruit_physics_update(&fruit5);
 8002764:	4829      	ldr	r0, [pc, #164]	; (800280c <fruit_control+0xf0>)
 8002766:	f000 f8c3 	bl	80028f0 <launch_fruit_physics_update>

	if (slice1_1.type != off) //if the object is active
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <fruit_control+0xf4>)
 800276c:	7e1b      	ldrb	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <fruit_control+0x5c>
		slice_physics_update(&slice1_1); //update position
 8002772:	4827      	ldr	r0, [pc, #156]	; (8002810 <fruit_control+0xf4>)
 8002774:	f000 fc14 	bl	8002fa0 <slice_physics_update>
	if (slice1_2.type != off)
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <fruit_control+0xf8>)
 800277a:	7e1b      	ldrb	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <fruit_control+0x6a>
		slice_physics_update(&slice1_2);
 8002780:	4824      	ldr	r0, [pc, #144]	; (8002814 <fruit_control+0xf8>)
 8002782:	f000 fc0d 	bl	8002fa0 <slice_physics_update>
	if (slice2_1.type != off)
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <fruit_control+0xfc>)
 8002788:	7e1b      	ldrb	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <fruit_control+0x78>
		slice_physics_update(&slice2_1);
 800278e:	4822      	ldr	r0, [pc, #136]	; (8002818 <fruit_control+0xfc>)
 8002790:	f000 fc06 	bl	8002fa0 <slice_physics_update>
	if (slice2_2.type != off)
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <fruit_control+0x100>)
 8002796:	7e1b      	ldrb	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <fruit_control+0x86>
		slice_physics_update(&slice2_2);
 800279c:	481f      	ldr	r0, [pc, #124]	; (800281c <fruit_control+0x100>)
 800279e:	f000 fbff 	bl	8002fa0 <slice_physics_update>
	if (slice3_1.type != off)
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <fruit_control+0x104>)
 80027a4:	7e1b      	ldrb	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <fruit_control+0x94>
		slice_physics_update(&slice3_1);
 80027aa:	481d      	ldr	r0, [pc, #116]	; (8002820 <fruit_control+0x104>)
 80027ac:	f000 fbf8 	bl	8002fa0 <slice_physics_update>
	if (slice3_2.type != off)
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <fruit_control+0x108>)
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <fruit_control+0xa2>
		slice_physics_update(&slice3_2);
 80027b8:	481a      	ldr	r0, [pc, #104]	; (8002824 <fruit_control+0x108>)
 80027ba:	f000 fbf1 	bl	8002fa0 <slice_physics_update>
	if (slice4_1.type != off)
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <fruit_control+0x10c>)
 80027c0:	7e1b      	ldrb	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <fruit_control+0xb0>
		slice_physics_update(&slice4_1);
 80027c6:	4818      	ldr	r0, [pc, #96]	; (8002828 <fruit_control+0x10c>)
 80027c8:	f000 fbea 	bl	8002fa0 <slice_physics_update>
	if (slice4_2.type != off)
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <fruit_control+0x110>)
 80027ce:	7e1b      	ldrb	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <fruit_control+0xbe>
		slice_physics_update(&slice4_2);
 80027d4:	4815      	ldr	r0, [pc, #84]	; (800282c <fruit_control+0x110>)
 80027d6:	f000 fbe3 	bl	8002fa0 <slice_physics_update>
	if (slice5_1.type != off)
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <fruit_control+0x114>)
 80027dc:	7e1b      	ldrb	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <fruit_control+0xcc>
		slice_physics_update(&slice5_1);
 80027e2:	4813      	ldr	r0, [pc, #76]	; (8002830 <fruit_control+0x114>)
 80027e4:	f000 fbdc 	bl	8002fa0 <slice_physics_update>
	if (slice5_2.type != off)
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <fruit_control+0x118>)
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <fruit_control+0xda>
		slice_physics_update(&slice5_2);
 80027f0:	4810      	ldr	r0, [pc, #64]	; (8002834 <fruit_control+0x118>)
 80027f2:	f000 fbd5 	bl	8002fa0 <slice_physics_update>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200043cc 	.word	0x200043cc
 8002800:	200043e4 	.word	0x200043e4
 8002804:	200043fc 	.word	0x200043fc
 8002808:	20004414 	.word	0x20004414
 800280c:	2000442c 	.word	0x2000442c
 8002810:	20004444 	.word	0x20004444
 8002814:	20004460 	.word	0x20004460
 8002818:	2000447c 	.word	0x2000447c
 800281c:	20004498 	.word	0x20004498
 8002820:	200044b4 	.word	0x200044b4
 8002824:	200044d0 	.word	0x200044d0
 8002828:	200044ec 	.word	0x200044ec
 800282c:	20004508 	.word	0x20004508
 8002830:	20004524 	.word	0x20004524
 8002834:	20004540 	.word	0x20004540

08002838 <launch_fruit_random>:

/**
 * @brief Launches a fruit in a random way.
 * @param pointer to a fruit struct
 */
void launch_fruit_random(struct Fruit *fruit) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	//x position 600-1000 // screen space is 0-1600
	fruit->x = ((float) rand() / RAND_MAX) * (400) + 600;
 8002840:	f00c fb92 	bl	800ef68 <rand>
 8002844:	ee07 0a90 	vmov	s15, r0
 8002848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80028d8 <launch_fruit_random+0xa0>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028dc <launch_fruit_random+0xa4>
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80028e0 <launch_fruit_random+0xa8>
 8002860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	edc3 7a00 	vstr	s15, [r3]
	fruit->y = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	605a      	str	r2, [r3, #4]
	fruit->t = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
	//random x speed -400 - 400 mm/s
	fruit->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 800287a:	f00c fb75 	bl	800ef68 <rand>
 800287e:	ee07 0a90 	vmov	s15, r0
 8002882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002886:	eddf 6a14 	vldr	s13, [pc, #80]	; 80028d8 <launch_fruit_random+0xa0>
 800288a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800288e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80028e4 <launch_fruit_random+0xac>
 8002892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002896:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028dc <launch_fruit_random+0xa4>
 800289a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	edc3 7a02 	vstr	s15, [r3, #8]
	fruit->speed_y = 1400.0;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <launch_fruit_random+0xb0>)
 80028a8:	60da      	str	r2, [r3, #12]
	//random fruit type
	fruit->type = (rand() % 5) + 1;
 80028aa:	f00c fb5d 	bl	800ef68 <rand>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <launch_fruit_random+0xb4>)
 80028b2:	fb83 1302 	smull	r1, r3, r3, r2
 80028b6:	1059      	asrs	r1, r3, #1
 80028b8:	17d3      	asrs	r3, r2, #31
 80028ba:	1ac9      	subs	r1, r1, r3
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	1ad1      	subs	r1, r2, r3
 80028c4:	b2cb      	uxtb	r3, r1
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	751a      	strb	r2, [r3, #20]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	4f000000 	.word	0x4f000000
 80028dc:	43c80000 	.word	0x43c80000
 80028e0:	44160000 	.word	0x44160000
 80028e4:	44480000 	.word	0x44480000
 80028e8:	44af0000 	.word	0x44af0000
 80028ec:	66666667 	.word	0x66666667

080028f0 <launch_fruit_physics_update>:

/**
 * @brief Calculate the new position of a fruit
 * @param pointer to a fruit struct
 */
void launch_fruit_physics_update(struct Fruit *fruit) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	const float acc_y = -1500; //mm/s^2 (lower than earths gravity)
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <launch_fruit_physics_update+0x100>)
 80028fa:	60fb      	str	r3, [r7, #12]
	const float t = fruit->t + 0.01; //10ms
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002906:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80029e8 <launch_fruit_physics_update+0xf8>
 800290a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800290e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002912:	edc7 7a02 	vstr	s15, [r7, #8]
	//calculate x shift
	fruit->x = fruit->speed_x * 0.01 + fruit->x; //MRU
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	edd3 7a02 	vldr	s15, [r3, #8]
 800291c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002920:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80029e8 <launch_fruit_physics_update+0xf8>
 8002924:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002932:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002936:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	edc3 7a00 	vstr	s15, [r3]

	//calcuulate y shift
	fruit->y = 0.5 * acc_y * t * t + fruit->speed_y * t; //MRUA
 8002940:	edd7 7a03 	vldr	s15, [r7, #12]
 8002944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002948:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800294c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002950:	edd7 7a02 	vldr	s15, [r7, #8]
 8002954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002958:	ee26 6b07 	vmul.f64	d6, d6, d7
 800295c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002964:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	ed93 7a03 	vldr	s14, [r3, #12]
 800296e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800297a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800297e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edc3 7a01 	vstr	s15, [r3, #4]

	//update t
	fruit->t = fruit->t + 0.01;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edd3 7a04 	vldr	s15, [r3, #16]
 800298e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002992:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80029e8 <launch_fruit_physics_update+0xf8>
 8002996:	ee37 7b06 	vadd.f64	d7, d7, d6
 800299a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	edc3 7a04 	vstr	s15, [r3, #16]

	//control if "landed"
	if ((int) fruit->y < 0) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80029aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ae:	ee17 3a90 	vmov	r3, s15
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da13      	bge.n	80029de <launch_fruit_physics_update+0xee>
		if (fruit->type != bomb) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7d1b      	ldrb	r3, [r3, #20]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d00c      	beq.n	80029d8 <launch_fruit_physics_update+0xe8>
			lives--;
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <launch_fruit_physics_update+0x104>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <launch_fruit_physics_update+0x104>)
 80029c8:	701a      	strb	r2, [r3, #0]
			xTaskNotifyGive(task_display_game_handle); //-1 animation
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <launch_fruit_physics_update+0x108>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	2202      	movs	r2, #2
 80029d2:	2100      	movs	r1, #0
 80029d4:	f00b f9ac 	bl	800dd30 <xTaskGenericNotify>
		}
		fruit->type = off;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	751a      	strb	r2, [r3, #20]

	}

}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	47ae147b 	.word	0x47ae147b
 80029ec:	3f847ae1 	.word	0x3f847ae1
 80029f0:	c4bb8000 	.word	0xc4bb8000
 80029f4:	20004816 	.word	0x20004816
 80029f8:	20004828 	.word	0x20004828

080029fc <fruit_slice_control>:

/**
 * @brief Checks if a fruit has to be sliced.
 */
void fruit_slice_control() {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
	// if the last two points are touching the display
	if (touch_points_x[0] != 0 && touch_points_y[0] != 0
 8002a02:	4b98      	ldr	r3, [pc, #608]	; (8002c64 <fruit_slice_control+0x268>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8127 	beq.w	8002c5a <fruit_slice_control+0x25e>
 8002a0c:	4b96      	ldr	r3, [pc, #600]	; (8002c68 <fruit_slice_control+0x26c>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8122 	beq.w	8002c5a <fruit_slice_control+0x25e>
			&& touch_points_x[1] != 0 && touch_points_y[1] != 0) {
 8002a16:	4b93      	ldr	r3, [pc, #588]	; (8002c64 <fruit_slice_control+0x268>)
 8002a18:	885b      	ldrh	r3, [r3, #2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 811d 	beq.w	8002c5a <fruit_slice_control+0x25e>
 8002a20:	4b91      	ldr	r3, [pc, #580]	; (8002c68 <fruit_slice_control+0x26c>)
 8002a22:	885b      	ldrh	r3, [r3, #2]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8118 	beq.w	8002c5a <fruit_slice_control+0x25e>

		//convert screen point to game points
		float x1 = touch_points_x[0] * 2;
 8002a2a:	4b8e      	ldr	r3, [pc, #568]	; (8002c64 <fruit_slice_control+0x268>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a38:	edc7 7a05 	vstr	s15, [r7, #20]
		float y1 = (Yresolution - touch_points_y[0]) * 2;
 8002a3c:	4b8a      	ldr	r3, [pc, #552]	; (8002c68 <fruit_slice_control+0x26c>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	edc7 7a04 	vstr	s15, [r7, #16]
		float x2 = touch_points_x[1] * 2;
 8002a52:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <fruit_slice_control+0x268>)
 8002a54:	885b      	ldrh	r3, [r3, #2]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a60:	edc7 7a03 	vstr	s15, [r7, #12]
		float y2 = (Yresolution - touch_points_y[1]) * 2;
 8002a64:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <fruit_slice_control+0x26c>)
 8002a66:	885b      	ldrh	r3, [r3, #2]
 8002a68:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a76:	edc7 7a02 	vstr	s15, [r7, #8]
		float x3 = touch_points_x[2] * 2;
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <fruit_slice_control+0x268>)
 8002a7c:	889b      	ldrh	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a88:	edc7 7a01 	vstr	s15, [r7, #4]
		float y3 = (Yresolution - touch_points_y[2]) * 2;
 8002a8c:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <fruit_slice_control+0x26c>)
 8002a8e:	889b      	ldrh	r3, [r3, #4]
 8002a90:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9e:	edc7 7a00 	vstr	s15, [r7]

		if (fruit1.type != off) { //if active
 8002aa2:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <fruit_slice_control+0x270>)
 8002aa4:	7d1b      	ldrb	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d027      	beq.n	8002afa <fruit_slice_control+0xfe>
			//if the "sword" intersects the fruit
			if (doesIntersect(x1, x2, y1, y2, fruit1.x, fruit1.y))
 8002aaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ab6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002aba:	edd7 5a04 	vldr	s11, [r7, #16]
 8002abe:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002ac2:	edd7 5a02 	vldr	s11, [r7, #8]
 8002ac6:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002aca:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <fruit_slice_control+0x270>)
 8002acc:	edd3 5a00 	vldr	s11, [r3]
 8002ad0:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002ad4:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <fruit_slice_control+0x270>)
 8002ad6:	edd3 5a01 	vldr	s11, [r3, #4]
 8002ada:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002ade:	eeb0 1b46 	vmov.f64	d1, d6
 8002ae2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ae6:	f000 f8df 	bl	8002ca8 <doesIntersect>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <fruit_slice_control+0xfe>
				//slice the fruit
				slice_fruit(&fruit1, &slice1_1, &slice1_2);
 8002af0:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <fruit_slice_control+0x274>)
 8002af2:	4960      	ldr	r1, [pc, #384]	; (8002c74 <fruit_slice_control+0x278>)
 8002af4:	485d      	ldr	r0, [pc, #372]	; (8002c6c <fruit_slice_control+0x270>)
 8002af6:	f000 f9bd 	bl	8002e74 <slice_fruit>
		}
		if (fruit2.type != off) {
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <fruit_slice_control+0x27c>)
 8002afc:	7d1b      	ldrb	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d027      	beq.n	8002b52 <fruit_slice_control+0x156>
			if (doesIntersect(x1, x2, y1, y2, fruit2.x, fruit2.y))
 8002b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b0a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b0e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002b12:	edd7 5a04 	vldr	s11, [r7, #16]
 8002b16:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002b1a:	edd7 5a02 	vldr	s11, [r7, #8]
 8002b1e:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002b22:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <fruit_slice_control+0x27c>)
 8002b24:	edd3 5a00 	vldr	s11, [r3]
 8002b28:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <fruit_slice_control+0x27c>)
 8002b2e:	edd3 5a01 	vldr	s11, [r3, #4]
 8002b32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002b36:	eeb0 1b46 	vmov.f64	d1, d6
 8002b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8002b3e:	f000 f8b3 	bl	8002ca8 <doesIntersect>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <fruit_slice_control+0x156>
				slice_fruit(&fruit2, &slice2_1, &slice2_2);
 8002b48:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <fruit_slice_control+0x280>)
 8002b4a:	494d      	ldr	r1, [pc, #308]	; (8002c80 <fruit_slice_control+0x284>)
 8002b4c:	484a      	ldr	r0, [pc, #296]	; (8002c78 <fruit_slice_control+0x27c>)
 8002b4e:	f000 f991 	bl	8002e74 <slice_fruit>
		}
		if (fruit3.type != off) {
 8002b52:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <fruit_slice_control+0x288>)
 8002b54:	7d1b      	ldrb	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d027      	beq.n	8002baa <fruit_slice_control+0x1ae>
			if (doesIntersect(x1, x2, y1, y2, fruit3.x, fruit3.y))
 8002b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b62:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b66:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002b6a:	edd7 5a04 	vldr	s11, [r7, #16]
 8002b6e:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002b72:	edd7 5a02 	vldr	s11, [r7, #8]
 8002b76:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002b7a:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <fruit_slice_control+0x288>)
 8002b7c:	edd3 5a00 	vldr	s11, [r3]
 8002b80:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002b84:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <fruit_slice_control+0x288>)
 8002b86:	edd3 5a01 	vldr	s11, [r3, #4]
 8002b8a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002b8e:	eeb0 1b46 	vmov.f64	d1, d6
 8002b92:	eeb0 0b47 	vmov.f64	d0, d7
 8002b96:	f000 f887 	bl	8002ca8 <doesIntersect>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <fruit_slice_control+0x1ae>
				slice_fruit(&fruit3, &slice3_1, &slice3_2);
 8002ba0:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <fruit_slice_control+0x28c>)
 8002ba2:	493a      	ldr	r1, [pc, #232]	; (8002c8c <fruit_slice_control+0x290>)
 8002ba4:	4837      	ldr	r0, [pc, #220]	; (8002c84 <fruit_slice_control+0x288>)
 8002ba6:	f000 f965 	bl	8002e74 <slice_fruit>
		}
		if (fruit4.type != off) {
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <fruit_slice_control+0x294>)
 8002bac:	7d1b      	ldrb	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d027      	beq.n	8002c02 <fruit_slice_control+0x206>
			if (doesIntersect(x1, x2, y1, y2, fruit4.x, fruit4.y))
 8002bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bba:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bbe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002bc2:	edd7 5a04 	vldr	s11, [r7, #16]
 8002bc6:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002bca:	edd7 5a02 	vldr	s11, [r7, #8]
 8002bce:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <fruit_slice_control+0x294>)
 8002bd4:	edd3 5a00 	vldr	s11, [r3]
 8002bd8:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <fruit_slice_control+0x294>)
 8002bde:	edd3 5a01 	vldr	s11, [r3, #4]
 8002be2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002be6:	eeb0 1b46 	vmov.f64	d1, d6
 8002bea:	eeb0 0b47 	vmov.f64	d0, d7
 8002bee:	f000 f85b 	bl	8002ca8 <doesIntersect>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <fruit_slice_control+0x206>
				slice_fruit(&fruit4, &slice4_1, &slice4_2);
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <fruit_slice_control+0x298>)
 8002bfa:	4927      	ldr	r1, [pc, #156]	; (8002c98 <fruit_slice_control+0x29c>)
 8002bfc:	4824      	ldr	r0, [pc, #144]	; (8002c90 <fruit_slice_control+0x294>)
 8002bfe:	f000 f939 	bl	8002e74 <slice_fruit>
		}
		if (fruit5.type != off) {
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <fruit_slice_control+0x2a0>)
 8002c04:	7d1b      	ldrb	r3, [r3, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d027      	beq.n	8002c5a <fruit_slice_control+0x25e>
			if (doesIntersect(x1, x2, y1, y2, fruit5.x, fruit5.y))
 8002c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c12:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c16:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c1a:	edd7 5a04 	vldr	s11, [r7, #16]
 8002c1e:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002c22:	edd7 5a02 	vldr	s11, [r7, #8]
 8002c26:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <fruit_slice_control+0x2a0>)
 8002c2c:	edd3 5a00 	vldr	s11, [r3]
 8002c30:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <fruit_slice_control+0x2a0>)
 8002c36:	edd3 5a01 	vldr	s11, [r3, #4]
 8002c3a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002c3e:	eeb0 1b46 	vmov.f64	d1, d6
 8002c42:	eeb0 0b47 	vmov.f64	d0, d7
 8002c46:	f000 f82f 	bl	8002ca8 <doesIntersect>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <fruit_slice_control+0x25e>
				slice_fruit(&fruit5, &slice5_1, &slice5_2);
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <fruit_slice_control+0x2a4>)
 8002c52:	4914      	ldr	r1, [pc, #80]	; (8002ca4 <fruit_slice_control+0x2a8>)
 8002c54:	4811      	ldr	r0, [pc, #68]	; (8002c9c <fruit_slice_control+0x2a0>)
 8002c56:	f000 f90d 	bl	8002e74 <slice_fruit>
		}

	}

}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200047ec 	.word	0x200047ec
 8002c68:	20004800 	.word	0x20004800
 8002c6c:	200043cc 	.word	0x200043cc
 8002c70:	20004460 	.word	0x20004460
 8002c74:	20004444 	.word	0x20004444
 8002c78:	200043e4 	.word	0x200043e4
 8002c7c:	20004498 	.word	0x20004498
 8002c80:	2000447c 	.word	0x2000447c
 8002c84:	200043fc 	.word	0x200043fc
 8002c88:	200044d0 	.word	0x200044d0
 8002c8c:	200044b4 	.word	0x200044b4
 8002c90:	20004414 	.word	0x20004414
 8002c94:	20004508 	.word	0x20004508
 8002c98:	200044ec 	.word	0x200044ec
 8002c9c:	2000442c 	.word	0x2000442c
 8002ca0:	20004540 	.word	0x20004540
 8002ca4:	20004524 	.word	0x20004524

08002ca8 <doesIntersect>:
 * @brief Checks if the sword intercepts a fruit.
 * @param two touch points, fruit coordinate
 * @return 0:NO 1:Yes
 */
uint8_t doesIntersect(double x1, double x2, double y1, double y2,
		double centerX, double centerY) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	ed2d 8b04 	vpush	{d8-d9}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002cb6:	ed87 1b08 	vstr	d1, [r7, #32]
 8002cba:	ed87 2b06 	vstr	d2, [r7, #24]
 8002cbe:	ed87 3b04 	vstr	d3, [r7, #16]
 8002cc2:	ed87 4b02 	vstr	d4, [r7, #8]
 8002cc6:	ed87 5b00 	vstr	d5, [r7]
	// Calculate the squared distance between the circle center (fruit) and the line (touch sword)
	float d = fabs(
			(y2 - y1) * centerX - (x2 - x1) * centerY + x2 * y1 - y2 * x1)
 8002cca:	ed97 6b04 	vldr	d6, [r7, #16]
 8002cce:	ed97 7b06 	vldr	d7, [r7, #24]
 8002cd2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002cd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002cde:	ed97 5b08 	vldr	d5, [r7, #32]
 8002ce2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002ce6:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002cea:	ed97 7b00 	vldr	d7, [r7]
 8002cee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002cf2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002cf6:	ed97 5b08 	vldr	d5, [r7, #32]
 8002cfa:	ed97 7b06 	vldr	d7, [r7, #24]
 8002cfe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d0a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002d0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d12:	ee36 7b47 	vsub.f64	d7, d6, d7
	float d = fabs(
 8002d16:	eeb0 8bc7 	vabs.f64	d8, d7
			/ sqrt(pow(y2 - y1, 2) + pow(x2 - x1, 2));
 8002d1a:	ed97 6b04 	vldr	d6, [r7, #16]
 8002d1e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d2a:	eeb0 0b47 	vmov.f64	d0, d7
 8002d2e:	f00d fb83 	bl	8010438 <pow>
 8002d32:	eeb0 9b40 	vmov.f64	d9, d0
 8002d36:	ed97 6b08 	vldr	d6, [r7, #32]
 8002d3a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002d3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d42:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d46:	eeb0 0b47 	vmov.f64	d0, d7
 8002d4a:	f00d fb75 	bl	8010438 <pow>
 8002d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8002d52:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002d56:	eeb0 0b47 	vmov.f64	d0, d7
 8002d5a:	f00d fb19 	bl	8010390 <sqrt>
 8002d5e:	eeb0 6b40 	vmov.f64	d6, d0
 8002d62:	ee88 7b06 	vdiv.f64	d7, d8, d6
	float d = fabs(
 8002d66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Check if the distance is less than or equal to the circle radius
	if (d <= FRUIT_RADIUS) {
 8002d6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d72:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002e70 <doesIntersect+0x1c8>
 8002d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d869      	bhi.n	8002e54 <doesIntersect+0x1ac>
		// Check if the circle is between the two x points
		if ((centerX + FRUIT_RADIUS >= x1 && centerX - FRUIT_RADIUS <= x2)
 8002d80:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d84:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8002e68 <doesIntersect+0x1c0>
 8002d88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d8c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002d90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d80c      	bhi.n	8002db4 <doesIntersect+0x10c>
 8002d9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d9e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002e68 <doesIntersect+0x1c0>
 8002da2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002da6:	ed97 6b08 	vldr	d6, [r7, #32]
 8002daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	da19      	bge.n	8002de8 <doesIntersect+0x140>
				|| (centerX - FRUIT_RADIUS <= x1 && centerX + FRUIT_RADIUS >= x2)) {
 8002db4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002db8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002e68 <doesIntersect+0x1c0>
 8002dbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dc0:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002dc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	db42      	blt.n	8002e54 <doesIntersect+0x1ac>
 8002dce:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dd2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002e68 <doesIntersect+0x1c0>
 8002dd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dda:	ed97 6b08 	vldr	d6, [r7, #32]
 8002dde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de6:	d835      	bhi.n	8002e54 <doesIntersect+0x1ac>
			// Check if the circle is between the two y points
			if ((centerY + FRUIT_RADIUS >= y1 && centerY - FRUIT_RADIUS <= y2)
 8002de8:	ed97 7b00 	vldr	d7, [r7]
 8002dec:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002e68 <doesIntersect+0x1c0>
 8002df0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002df4:	ed97 6b06 	vldr	d6, [r7, #24]
 8002df8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d80c      	bhi.n	8002e1c <doesIntersect+0x174>
 8002e02:	ed97 7b00 	vldr	d7, [r7]
 8002e06:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002e68 <doesIntersect+0x1c0>
 8002e0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8002e12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1a:	da19      	bge.n	8002e50 <doesIntersect+0x1a8>
					|| (centerY - FRUIT_RADIUS <= y1
 8002e1c:	ed97 7b00 	vldr	d7, [r7]
 8002e20:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002e68 <doesIntersect+0x1c0>
 8002e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e28:	ed97 6b06 	vldr	d6, [r7, #24]
 8002e2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	db0e      	blt.n	8002e54 <doesIntersect+0x1ac>
							&& centerY + FRUIT_RADIUS >= y2)) {
 8002e36:	ed97 7b00 	vldr	d7, [r7]
 8002e3a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8002e68 <doesIntersect+0x1c0>
 8002e3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e42:	ed97 6b04 	vldr	d6, [r7, #16]
 8002e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	d801      	bhi.n	8002e54 <doesIntersect+0x1ac>
				return 1; // Intersection
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <doesIntersect+0x1ae>
			}
		}
	}

	return 0; // No intersection
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3738      	adds	r7, #56	; 0x38
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	ecbd 8b04 	vpop	{d8-d9}
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	40490000 	.word	0x40490000
 8002e70:	42480000 	.word	0x42480000

08002e74 <slice_fruit>:
/**
 * @brief Slices a fruit.
 * @param pointer to a fruit struct, two slices struct to use
 */
void slice_fruit(struct Fruit *fruit, struct Slice *slice1,
		struct Slice *slice2) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
	//check if it is a bomb
	if (fruit->type == bomb) {
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	7d1b      	ldrb	r3, [r3, #20]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10d      	bne.n	8002ea4 <slice_fruit+0x30>
		lives--;
 8002e88:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <slice_fruit+0x108>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <slice_fruit+0x108>)
 8002e92:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(task_display_game_handle); //-1 animation
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <slice_fruit+0x10c>)
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f00a ff47 	bl	800dd30 <xTaskGenericNotify>
 8002ea2:	e005      	b.n	8002eb0 <slice_fruit+0x3c>
	}else
		game_points += 10;
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <slice_fruit+0x110>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	330a      	adds	r3, #10
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <slice_fruit+0x110>)
 8002eae:	801a      	strh	r2, [r3, #0]

	//slice type same as fruit
	slice1->type = fruit->type;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	7d1a      	ldrb	r2, [r3, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	761a      	strb	r2, [r3, #24]
	slice2->type = fruit->type;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	7d1a      	ldrb	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	761a      	strb	r2, [r3, #24]
	fruit->type = off;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	751a      	strb	r2, [r3, #20]

	//same x position
	slice1->x = fruit->x;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	601a      	str	r2, [r3, #0]
	slice2->x = fruit->x;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]

	//y position has offset
	const float offset = 70;
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <slice_fruit+0x114>)
 8002ed8:	617b      	str	r3, [r7, #20]
	slice1->y0 = fruit->y + offset;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	edc3 7a02 	vstr	s15, [r3, #8]
	slice2->y0 = fruit->y - offset;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edc3 7a02 	vstr	s15, [r3, #8]

	//random new x speed for each slice
	slice1->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 8002f02:	f00c f831 	bl	800ef68 <rand>
 8002f06:	ee07 0a90 	vmov	s15, r0
 8002f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002f8c <slice_fruit+0x118>
 8002f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f16:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002f90 <slice_fruit+0x11c>
 8002f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f94 <slice_fruit+0x120>
 8002f22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	edc3 7a03 	vstr	s15, [r3, #12]
	slice2->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 8002f2c:	f00c f81c 	bl	800ef68 <rand>
 8002f30:	ee07 0a90 	vmov	s15, r0
 8002f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f38:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002f8c <slice_fruit+0x118>
 8002f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f40:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002f90 <slice_fruit+0x11c>
 8002f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f48:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002f94 <slice_fruit+0x120>
 8002f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edc3 7a03 	vstr	s15, [r3, #12]

	//reset y speed
	slice1->speed_y = 400.0;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <slice_fruit+0x124>)
 8002f5a:	611a      	str	r2, [r3, #16]
	slice2->speed_y = 400.0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <slice_fruit+0x124>)
 8002f60:	611a      	str	r2, [r3, #16]
	slice1->t = 0;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
	slice2->t = 0;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20004816 	.word	0x20004816
 8002f80:	20004828 	.word	0x20004828
 8002f84:	20004814 	.word	0x20004814
 8002f88:	428c0000 	.word	0x428c0000
 8002f8c:	4f000000 	.word	0x4f000000
 8002f90:	44480000 	.word	0x44480000
 8002f94:	43c80000 	.word	0x43c80000
 8002f98:	43c80000 	.word	0x43c80000
 8002f9c:	00000000 	.word	0x00000000

08002fa0 <slice_physics_update>:

/**
 * @brief Calculates new position of a slice.
 * @param pointer to  a slice struct
 */
void slice_physics_update(struct Slice *slice) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	const float acc_y = -1500; //mm/s^2 lower than earths gravity
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <slice_physics_update+0xf0>)
 8002faa:	60fb      	str	r3, [r7, #12]
	const float t = slice->t + 0.01; //10ms
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fb6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8003088 <slice_physics_update+0xe8>
 8002fba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fc2:	edc7 7a02 	vstr	s15, [r7, #8]
	//calculate x shift
	slice->x = slice->speed_x * 0.01 + slice->x; //MRU
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fd0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8003088 <slice_physics_update+0xe8>
 8002fd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fe2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fe6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	edc3 7a00 	vstr	s15, [r3]

	//calculate y shift
	slice->y = 0.5 * acc_y * t * t + slice->speed_y * t + slice->y0; //MRUA
 8002ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002ffc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003000:	edd7 7a02 	vldr	s15, [r7, #8]
 8003004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003008:	ee26 6b07 	vmul.f64	d6, d6, d7
 800300c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003014:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	ed93 7a04 	vldr	s14, [r3, #16]
 800301e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800302a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	edd3 7a02 	vldr	s15, [r3, #8]
 8003034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003038:	ee36 7b07 	vadd.f64	d7, d6, d7
 800303c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edc3 7a01 	vstr	s15, [r3, #4]

	//update t
	slice->t = slice->t + 0.01;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a05 	vldr	s15, [r3, #20]
 800304c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003050:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003088 <slice_physics_update+0xe8>
 8003054:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edc3 7a05 	vstr	s15, [r3, #20]

	//control if "landed"
	if ((int) slice->y < 0) {
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	edd3 7a01 	vldr	s15, [r3, #4]
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	ee17 3a90 	vmov	r3, s15
 8003070:	2b00      	cmp	r3, #0
 8003072:	da02      	bge.n	800307a <slice_physics_update+0xda>
		slice->type = off;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	761a      	strb	r2, [r3, #24]
	}
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	47ae147b 	.word	0x47ae147b
 800308c:	3f847ae1 	.word	0x3f847ae1
 8003090:	c4bb8000 	.word	0xc4bb8000

08003094 <update_screen_game>:
/* Functions definition ------------------------------------------------------*/
/**
 * @brief Updates the screen during gameplay.
 * 			It uses Double Buffering update method.
 */
void update_screen_game() {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
	static uint8_t layer = LTDC_ACTIVE_LAYER_FOREGROUND;

	//Switches layer between foreground and background
	uint8_t prev_layer = layer;
 800309a:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <update_screen_game+0x160>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
	if (layer == LTDC_ACTIVE_LAYER_FOREGROUND)
 80030a0:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <update_screen_game+0x160>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d103      	bne.n	80030b0 <update_screen_game+0x1c>
		layer = LTDC_ACTIVE_LAYER_BACKGROUND;
 80030a8:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <update_screen_game+0x160>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e002      	b.n	80030b6 <update_screen_game+0x22>
	else
		layer = LTDC_ACTIVE_LAYER_FOREGROUND;
 80030b0:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <update_screen_game+0x160>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
	//select the new layer
	BSP_LCD_SelectLayer(layer);
 80030b6:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <update_screen_game+0x160>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fc88 	bl	80009d0 <BSP_LCD_SelectLayer>

	//Draw background image
	BSP_LCD_DrawBitmap(0, 0, bg_bmp);
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <update_screen_game+0x164>)
 80030c2:	2100      	movs	r1, #0
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd ff09 	bl	8000edc <BSP_LCD_DrawBitmap>

	//SLICE Graphic
	if (slice1_1.type != off) //if slice active
 80030ca:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <update_screen_game+0x168>)
 80030cc:	7e1b      	ldrb	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <update_screen_game+0x46>
		Draw_Slice(&slice1_1, 0); //draw the slice
 80030d2:	2100      	movs	r1, #0
 80030d4:	4849      	ldr	r0, [pc, #292]	; (80031fc <update_screen_game+0x168>)
 80030d6:	f000 fa3f 	bl	8003558 <Draw_Slice>
	if (slice1_2.type != off)
 80030da:	4b49      	ldr	r3, [pc, #292]	; (8003200 <update_screen_game+0x16c>)
 80030dc:	7e1b      	ldrb	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <update_screen_game+0x56>
		Draw_Slice(&slice1_2, 180); //180 degrees rotated
 80030e2:	21b4      	movs	r1, #180	; 0xb4
 80030e4:	4846      	ldr	r0, [pc, #280]	; (8003200 <update_screen_game+0x16c>)
 80030e6:	f000 fa37 	bl	8003558 <Draw_Slice>
	if (slice2_1.type != off)
 80030ea:	4b46      	ldr	r3, [pc, #280]	; (8003204 <update_screen_game+0x170>)
 80030ec:	7e1b      	ldrb	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <update_screen_game+0x66>
		Draw_Slice(&slice2_1, 0);
 80030f2:	2100      	movs	r1, #0
 80030f4:	4843      	ldr	r0, [pc, #268]	; (8003204 <update_screen_game+0x170>)
 80030f6:	f000 fa2f 	bl	8003558 <Draw_Slice>
	if (slice2_2.type != off)
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <update_screen_game+0x174>)
 80030fc:	7e1b      	ldrb	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <update_screen_game+0x76>
		Draw_Slice(&slice2_2, 180);
 8003102:	21b4      	movs	r1, #180	; 0xb4
 8003104:	4840      	ldr	r0, [pc, #256]	; (8003208 <update_screen_game+0x174>)
 8003106:	f000 fa27 	bl	8003558 <Draw_Slice>
	if (slice3_1.type != off)
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <update_screen_game+0x178>)
 800310c:	7e1b      	ldrb	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <update_screen_game+0x86>
		Draw_Slice(&slice3_1, 0);
 8003112:	2100      	movs	r1, #0
 8003114:	483d      	ldr	r0, [pc, #244]	; (800320c <update_screen_game+0x178>)
 8003116:	f000 fa1f 	bl	8003558 <Draw_Slice>
	if (slice3_2.type != off)
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <update_screen_game+0x17c>)
 800311c:	7e1b      	ldrb	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <update_screen_game+0x96>
		Draw_Slice(&slice3_2, 180);
 8003122:	21b4      	movs	r1, #180	; 0xb4
 8003124:	483a      	ldr	r0, [pc, #232]	; (8003210 <update_screen_game+0x17c>)
 8003126:	f000 fa17 	bl	8003558 <Draw_Slice>
	if (slice4_1.type != off)
 800312a:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <update_screen_game+0x180>)
 800312c:	7e1b      	ldrb	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <update_screen_game+0xa6>
		Draw_Slice(&slice4_1, 0);
 8003132:	2100      	movs	r1, #0
 8003134:	4837      	ldr	r0, [pc, #220]	; (8003214 <update_screen_game+0x180>)
 8003136:	f000 fa0f 	bl	8003558 <Draw_Slice>
	if (slice4_2.type != off)
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <update_screen_game+0x184>)
 800313c:	7e1b      	ldrb	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <update_screen_game+0xb6>
		Draw_Slice(&slice4_2, 180);
 8003142:	21b4      	movs	r1, #180	; 0xb4
 8003144:	4834      	ldr	r0, [pc, #208]	; (8003218 <update_screen_game+0x184>)
 8003146:	f000 fa07 	bl	8003558 <Draw_Slice>
	if (slice5_1.type != off)
 800314a:	4b34      	ldr	r3, [pc, #208]	; (800321c <update_screen_game+0x188>)
 800314c:	7e1b      	ldrb	r3, [r3, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <update_screen_game+0xc6>
		Draw_Slice(&slice5_1, 0);
 8003152:	2100      	movs	r1, #0
 8003154:	4831      	ldr	r0, [pc, #196]	; (800321c <update_screen_game+0x188>)
 8003156:	f000 f9ff 	bl	8003558 <Draw_Slice>
	if (slice5_2.type != off)
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <update_screen_game+0x18c>)
 800315c:	7e1b      	ldrb	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <update_screen_game+0xd6>
		Draw_Slice(&slice5_2, 180);
 8003162:	21b4      	movs	r1, #180	; 0xb4
 8003164:	482e      	ldr	r0, [pc, #184]	; (8003220 <update_screen_game+0x18c>)
 8003166:	f000 f9f7 	bl	8003558 <Draw_Slice>

	//FRUIT Graphic
	if (fruit1.type != off) //if fruit is active
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <update_screen_game+0x190>)
 800316c:	7d1b      	ldrb	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <update_screen_game+0xe4>
		Draw_Fruit(&fruit1); //draw the fruit
 8003172:	482c      	ldr	r0, [pc, #176]	; (8003224 <update_screen_game+0x190>)
 8003174:	f000 f898 	bl	80032a8 <Draw_Fruit>
	if (fruit2.type != off)
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <update_screen_game+0x194>)
 800317a:	7d1b      	ldrb	r3, [r3, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <update_screen_game+0xf2>
		Draw_Fruit(&fruit2);
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <update_screen_game+0x194>)
 8003182:	f000 f891 	bl	80032a8 <Draw_Fruit>
	if (fruit3.type != off)
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <update_screen_game+0x198>)
 8003188:	7d1b      	ldrb	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <update_screen_game+0x100>
		Draw_Fruit(&fruit3);
 800318e:	4827      	ldr	r0, [pc, #156]	; (800322c <update_screen_game+0x198>)
 8003190:	f000 f88a 	bl	80032a8 <Draw_Fruit>
	if (fruit4.type != off)
 8003194:	4b26      	ldr	r3, [pc, #152]	; (8003230 <update_screen_game+0x19c>)
 8003196:	7d1b      	ldrb	r3, [r3, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <update_screen_game+0x10e>
		Draw_Fruit(&fruit4);
 800319c:	4824      	ldr	r0, [pc, #144]	; (8003230 <update_screen_game+0x19c>)
 800319e:	f000 f883 	bl	80032a8 <Draw_Fruit>
	if (fruit5.type != off)
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <update_screen_game+0x1a0>)
 80031a4:	7d1b      	ldrb	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <update_screen_game+0x11c>
		Draw_Fruit(&fruit5);
 80031aa:	4822      	ldr	r0, [pc, #136]	; (8003234 <update_screen_game+0x1a0>)
 80031ac:	f000 f87c 	bl	80032a8 <Draw_Fruit>

	//Print the sword
	Print_Touch();
 80031b0:	f000 f904 	bl	80033bc <Print_Touch>
	//print points a lives
	Print_Lives();
 80031b4:	f000 f94a 	bl	800344c <Print_Lives>

	//Wait DMA finishes trasfering the new layer data to the display RAM
	while (HAL_DMA2D_GetState(&hdma2d_discovery) != HAL_DMA2D_STATE_READY)
 80031b8:	e002      	b.n	80031c0 <update_screen_game+0x12c>
		vTaskDelay(pdMS_TO_TICKS(1));
 80031ba:	2001      	movs	r0, #1
 80031bc:	f009 ff32 	bl	800d024 <vTaskDelay>
	while (HAL_DMA2D_GetState(&hdma2d_discovery) != HAL_DMA2D_STATE_READY)
 80031c0:	481d      	ldr	r0, [pc, #116]	; (8003238 <update_screen_game+0x1a4>)
 80031c2:	f002 fcc9 	bl	8005b58 <HAL_DMA2D_GetState>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d1f6      	bne.n	80031ba <update_screen_game+0x126>

	//Critical section -> old-new layer switch
	taskENTER_CRITICAL();
 80031cc:	f00b fb8e 	bl	800e8ec <vPortEnterCritical>
	BSP_LCD_SetLayerVisible(prev_layer, DISABLE); //disable the old layer
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fc0b 	bl	80009f0 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(layer, ENABLE); //enables the new layer
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <update_screen_game+0x160>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fc05 	bl	80009f0 <BSP_LCD_SetLayerVisible>
	taskEXIT_CRITICAL();
 80031e6:	f00b fbb5 	bl	800e954 <vPortExitCritical>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000038 	.word	0x20000038
 80031f8:	0806a800 	.word	0x0806a800
 80031fc:	20004444 	.word	0x20004444
 8003200:	20004460 	.word	0x20004460
 8003204:	2000447c 	.word	0x2000447c
 8003208:	20004498 	.word	0x20004498
 800320c:	200044b4 	.word	0x200044b4
 8003210:	200044d0 	.word	0x200044d0
 8003214:	200044ec 	.word	0x200044ec
 8003218:	20004508 	.word	0x20004508
 800321c:	20004524 	.word	0x20004524
 8003220:	20004540 	.word	0x20004540
 8003224:	200043cc 	.word	0x200043cc
 8003228:	200043e4 	.word	0x200043e4
 800322c:	200043fc 	.word	0x200043fc
 8003230:	20004414 	.word	0x20004414
 8003234:	2000442c 	.word	0x2000442c
 8003238:	20000130 	.word	0x20000130

0800323c <update_screen_menu>:

/**
 * @brief Updates the screen with the menu;
 *
 */
void update_screen_menu() {
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	BSP_LCD_DrawBitmap(0, 0, bg_bmp);
 8003240:	4a05      	ldr	r2, [pc, #20]	; (8003258 <update_screen_menu+0x1c>)
 8003242:	2100      	movs	r1, #0
 8003244:	2000      	movs	r0, #0
 8003246:	f7fd fe49 	bl	8000edc <BSP_LCD_DrawBitmap>
	BSP_LCD_DrawBitmap(240, 70, start_bmp);
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <update_screen_menu+0x20>)
 800324c:	2146      	movs	r1, #70	; 0x46
 800324e:	20f0      	movs	r0, #240	; 0xf0
 8003250:	f7fd fe44 	bl	8000edc <BSP_LCD_DrawBitmap>
	//BSP_LCD_DisplayStringAt(0, 210, "PRESS THE SCREEN", CENTER_MODE);
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0806a800 	.word	0x0806a800
 800325c:	0803e8a8 	.word	0x0803e8a8

08003260 <update_screen_gameover>:

/**
 * @brief Updates the screen with the game over;
 *
 */
void update_screen_gameover() {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	//BSP_LCD_DrawBitmap(0, 0, bg_bmp);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003264:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003268:	f7fd fc00 	bl	8000a6c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, 210, "GAME OVER", CENTER_MODE);
 800326c:	2301      	movs	r3, #1
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <update_screen_gameover+0x38>)
 8003270:	21d2      	movs	r1, #210	; 0xd2
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fc86 	bl	8000b84 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "Points: %d", game_points);
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <update_screen_gameover+0x3c>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <update_screen_gameover+0x40>)
 8003280:	4808      	ldr	r0, [pc, #32]	; (80032a4 <update_screen_gameover+0x44>)
 8003282:	f00b ff71 	bl	800f168 <siprintf>
	BSP_LCD_DisplayStringAt(0, 0, buffer, LEFT_MODE);
 8003286:	2303      	movs	r3, #3
 8003288:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <update_screen_gameover+0x44>)
 800328a:	2100      	movs	r1, #0
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fc79 	bl	8000b84 <BSP_LCD_DisplayStringAt>
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	08010a04 	.word	0x08010a04
 800329c:	20004814 	.word	0x20004814
 80032a0:	08010a10 	.word	0x08010a10
 80032a4:	2000455c 	.word	0x2000455c

080032a8 <Draw_Fruit>:

/**
 * @brief Draws a fruit on the screen.
 * @param Pointer to the fruit to draw.
 */
void Draw_Fruit(struct Fruit *fruit) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	//convert game coordinates to pixel
	uint32_t x = fruit->x / 2.0;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80032be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80032c6:	ee17 3a90 	vmov	r3, s15
 80032ca:	60fb      	str	r3, [r7, #12]
	uint32_t y = Yresolution - (fruit->y / 2.0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80032da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032de:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80033a0 <Draw_Fruit+0xf8>
 80032e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80032e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80032ea:	ee17 3a90 	vmov	r3, s15
 80032ee:	60bb      	str	r3, [r7, #8]

	//draw the correct image corresponding to the fruit type
	switch (fruit->type) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7d1b      	ldrb	r3, [r3, #20]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d84d      	bhi.n	8003396 <Draw_Fruit+0xee>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <Draw_Fruit+0x58>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003315 	.word	0x08003315
 8003304:	0800332f 	.word	0x0800332f
 8003308:	08003349 	.word	0x08003349
 800330c:	08003363 	.word	0x08003363
 8003310:	0800337d 	.word	0x0800337d
	case bomb:
		drawBitmap(x - 50, y - 50, (uint32_t*) bomb_bmp, 180);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b32      	subs	r3, #50	; 0x32
 800331a:	b298      	uxth	r0, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b32      	subs	r3, #50	; 0x32
 8003322:	b299      	uxth	r1, r3
 8003324:	23b4      	movs	r3, #180	; 0xb4
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <Draw_Fruit+0x100>)
 8003328:	f000 f992 	bl	8003650 <drawBitmap>
		break;
 800332c:	e033      	b.n	8003396 <Draw_Fruit+0xee>
	case apple:
		drawBitmap(x - 50, y - 50, (uint32_t*) apple_bmp, 180);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b32      	subs	r3, #50	; 0x32
 8003334:	b298      	uxth	r0, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b32      	subs	r3, #50	; 0x32
 800333c:	b299      	uxth	r1, r3
 800333e:	23b4      	movs	r3, #180	; 0xb4
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <Draw_Fruit+0x104>)
 8003342:	f000 f985 	bl	8003650 <drawBitmap>
		break;
 8003346:	e026      	b.n	8003396 <Draw_Fruit+0xee>
	case coconut:
		drawBitmap(x - 50, y - 50, (uint32_t*) coconut_bmp, 180);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b32      	subs	r3, #50	; 0x32
 800334e:	b298      	uxth	r0, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b32      	subs	r3, #50	; 0x32
 8003356:	b299      	uxth	r1, r3
 8003358:	23b4      	movs	r3, #180	; 0xb4
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <Draw_Fruit+0x108>)
 800335c:	f000 f978 	bl	8003650 <drawBitmap>
		break;
 8003360:	e019      	b.n	8003396 <Draw_Fruit+0xee>
	case watermelon:
		drawBitmap(x - 50, y - 50, (uint32_t*) watermelon_bmp, 180);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b32      	subs	r3, #50	; 0x32
 8003368:	b298      	uxth	r0, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b32      	subs	r3, #50	; 0x32
 8003370:	b299      	uxth	r1, r3
 8003372:	23b4      	movs	r3, #180	; 0xb4
 8003374:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <Draw_Fruit+0x10c>)
 8003376:	f000 f96b 	bl	8003650 <drawBitmap>
		break;
 800337a:	e00c      	b.n	8003396 <Draw_Fruit+0xee>
	case orange:
		drawBitmap(x - 50, y - 50, (uint32_t*) orange_bmp, 180);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b32      	subs	r3, #50	; 0x32
 8003382:	b298      	uxth	r0, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b32      	subs	r3, #50	; 0x32
 800338a:	b299      	uxth	r1, r3
 800338c:	23b4      	movs	r3, #180	; 0xb4
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <Draw_Fruit+0x110>)
 8003390:	f000 f95e 	bl	8003650 <drawBitmap>
		break;
 8003394:	bf00      	nop
	}
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00000000 	.word	0x00000000
 80033a4:	407e0000 	.word	0x407e0000
 80033a8:	08039a50 	.word	0x08039a50
 80033ac:	0801c440 	.word	0x0801c440
 80033b0:	08021298 	.word	0x08021298
 80033b4:	08012790 	.word	0x08012790
 80033b8:	080175e8 	.word	0x080175e8

080033bc <Print_Touch>:

/**
 * @brief Draws the sword on the screen.
 *
 */
void Print_Touch() {
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 80033c2:	481f      	ldr	r0, [pc, #124]	; (8003440 <Print_Touch+0x84>)
 80033c4:	f7fd fb52 	bl	8000a6c <BSP_LCD_SetTextColor>
	//cycle the touch points buffer
	for (uint16_t i = 0; i < TOUCH_CIRCBUFFER_SIZE - 1; i++) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	80fb      	strh	r3, [r7, #6]
 80033cc:	e030      	b.n	8003430 <Print_Touch+0x74>
		if (touch_points_x[i] != 0 && touch_points_y[i] != 0
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <Print_Touch+0x88>)
 80033d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d027      	beq.n	800342a <Print_Touch+0x6e>
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <Print_Touch+0x8c>)
 80033de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d021      	beq.n	800342a <Print_Touch+0x6e>
				&& touch_points_x[i + 1] != 0 && touch_points_y[i + 1] != 0) {
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a16      	ldr	r2, [pc, #88]	; (8003444 <Print_Touch+0x88>)
 80033ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <Print_Touch+0x6e>
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <Print_Touch+0x8c>)
 80033fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <Print_Touch+0x6e>
			//if there are two points, draw a line connecting them
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <Print_Touch+0x88>)
 8003406:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <Print_Touch+0x8c>)
 800340e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
					touch_points_x[i + 1], touch_points_y[i + 1]);
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	3301      	adds	r3, #1
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 8003416:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <Print_Touch+0x88>)
 8003418:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
					touch_points_x[i + 1], touch_points_y[i + 1]);
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	3301      	adds	r3, #1
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 8003420:	4c09      	ldr	r4, [pc, #36]	; (8003448 <Print_Touch+0x8c>)
 8003422:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8003426:	f7fd fc8d 	bl	8000d44 <BSP_LCD_DrawLine>
	for (uint16_t i = 0; i < TOUCH_CIRCBUFFER_SIZE - 1; i++) {
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	3301      	adds	r3, #1
 800342e:	80fb      	strh	r3, [r7, #6]
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b08      	cmp	r3, #8
 8003434:	d9cb      	bls.n	80033ce <Print_Touch+0x12>
		}

	}
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bd90      	pop	{r4, r7, pc}
 8003440:	ff808080 	.word	0xff808080
 8003444:	200047ec 	.word	0x200047ec
 8003448:	20004800 	.word	0x20004800

0800344c <Print_Lives>:

/**
 * @brief Prints score and lives.
 *
 */
void Print_Lives() {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
	static uint32_t time = 0;
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003452:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003456:	f7fd fb09 	bl	8000a6c <BSP_LCD_SetTextColor>

	//Print X corresponding to the lives
	if (lives == 3)
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <Print_Lives+0xdc>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d106      	bne.n	8003470 <Print_Lives+0x24>
		BSP_LCD_DisplayStringAt(0, 0, "XXX", RIGHT_MODE);
 8003462:	2302      	movs	r3, #2
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <Print_Lives+0xe0>)
 8003466:	2100      	movs	r1, #0
 8003468:	2000      	movs	r0, #0
 800346a:	f7fd fb8b 	bl	8000b84 <BSP_LCD_DisplayStringAt>
 800346e:	e01f      	b.n	80034b0 <Print_Lives+0x64>
	else if (lives == 2)
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <Print_Lives+0xdc>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d106      	bne.n	8003486 <Print_Lives+0x3a>
		BSP_LCD_DisplayStringAt(0, 0, "XX", RIGHT_MODE);
 8003478:	2302      	movs	r3, #2
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <Print_Lives+0xe4>)
 800347c:	2100      	movs	r1, #0
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fb80 	bl	8000b84 <BSP_LCD_DisplayStringAt>
 8003484:	e014      	b.n	80034b0 <Print_Lives+0x64>
	else if (lives == 1)
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <Print_Lives+0xdc>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <Print_Lives+0x50>
		BSP_LCD_DisplayStringAt(0, 0, "X", RIGHT_MODE);
 800348e:	2302      	movs	r3, #2
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <Print_Lives+0xe8>)
 8003492:	2100      	movs	r1, #0
 8003494:	2000      	movs	r0, #0
 8003496:	f7fd fb75 	bl	8000b84 <BSP_LCD_DisplayStringAt>
 800349a:	e009      	b.n	80034b0 <Print_Lives+0x64>
	else if (lives == 0)
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <Print_Lives+0xdc>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <Print_Lives+0x64>
		BSP_LCD_DisplayStringAt(0, 210, "GAME OVER", CENTER_MODE);
 80034a4:	2301      	movs	r3, #1
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <Print_Lives+0xec>)
 80034a8:	21d2      	movs	r1, #210	; 0xd2
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd fb6a 	bl	8000b84 <BSP_LCD_DisplayStringAt>

	//Print the game points
	sprintf(buffer, "Points: %d", game_points);
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <Print_Lives+0xf0>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4922      	ldr	r1, [pc, #136]	; (8003540 <Print_Lives+0xf4>)
 80034b8:	4822      	ldr	r0, [pc, #136]	; (8003544 <Print_Lives+0xf8>)
 80034ba:	f00b fe55 	bl	800f168 <siprintf>
	BSP_LCD_DisplayStringAt(0, 0, buffer, LEFT_MODE);
 80034be:	2303      	movs	r3, #3
 80034c0:	4a20      	ldr	r2, [pc, #128]	; (8003544 <Print_Lives+0xf8>)
 80034c2:	2100      	movs	r1, #0
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fd fb5d 	bl	8000b84 <BSP_LCD_DisplayStringAt>

	//-1 animation
	//get if there was a live loss
	uint32_t retval = ulTaskNotifyTake(pdTRUE, 0);
 80034ca:	2100      	movs	r1, #0
 80034cc:	2001      	movs	r0, #1
 80034ce:	f00a fbe3 	bl	800dc98 <ulTaskNotifyTake>
 80034d2:	6078      	str	r0, [r7, #4]
	if (retval > 0)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <Print_Lives+0x98>
		time = HAL_GetTick(); //reset time
 80034da:	f001 ff8d 	bl	80053f8 <HAL_GetTick>
 80034de:	4603      	mov	r3, r0
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <Print_Lives+0xfc>)
 80034e2:	6013      	str	r3, [r2, #0]
	//if there was a live loss in the last second
	if ((HAL_GetTick() - time) < pdMS_TO_TICKS(1000)) {
 80034e4:	f001 ff88 	bl	80053f8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <Print_Lives+0xfc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034f4:	d214      	bcs.n	8003520 <Print_Lives+0xd4>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80034f6:	4815      	ldr	r0, [pc, #84]	; (800354c <Print_Lives+0x100>)
 80034f8:	f7fd fab8 	bl	8000a6c <BSP_LCD_SetTextColor>
		//display a "-1" going down corresponding to the time
		BSP_LCD_DisplayStringAt(0, 10 + (HAL_GetTick() - time) / 25, "-1",
 80034fc:	f001 ff7c 	bl	80053f8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <Print_Lives+0xfc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <Print_Lives+0x104>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	b29b      	uxth	r3, r3
 8003512:	330a      	adds	r3, #10
 8003514:	b299      	uxth	r1, r3
 8003516:	2302      	movs	r3, #2
 8003518:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <Print_Lives+0x108>)
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd fb32 	bl	8000b84 <BSP_LCD_DisplayStringAt>
				RIGHT_MODE);
	}
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20004816 	.word	0x20004816
 800352c:	08010a1c 	.word	0x08010a1c
 8003530:	08010a20 	.word	0x08010a20
 8003534:	08010a24 	.word	0x08010a24
 8003538:	08010a04 	.word	0x08010a04
 800353c:	20004814 	.word	0x20004814
 8003540:	08010a10 	.word	0x08010a10
 8003544:	2000455c 	.word	0x2000455c
 8003548:	20004570 	.word	0x20004570
 800354c:	ffff0000 	.word	0xffff0000
 8003550:	51eb851f 	.word	0x51eb851f
 8003554:	08010a28 	.word	0x08010a28

08003558 <Draw_Slice>:

/**
 * @brief Draws a fruit slice on the screen.
 * @param Pointer to the slice to draw, rotation of the slice.
 */
void Draw_Slice(struct Slice *slice, int rotation) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	//convert game coordinates to pixel
	uint32_t x = slice->x / 2.0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800356c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003570:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003574:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003578:	ee17 3a90 	vmov	r3, s15
 800357c:	60fb      	str	r3, [r7, #12]
	uint32_t y = Yresolution - (slice->y / 2.0);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	edd3 7a01 	vldr	s15, [r3, #4]
 8003584:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800358c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003590:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003638 <Draw_Slice+0xe0>
 8003594:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003598:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800359c:	ee17 3a90 	vmov	r3, s15
 80035a0:	60bb      	str	r3, [r7, #8]

	//print correct slice corresponding to the type
	switch (slice->type) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7e1b      	ldrb	r3, [r3, #24]
 80035a6:	3b02      	subs	r3, #2
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d83f      	bhi.n	800362c <Draw_Slice+0xd4>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <Draw_Slice+0x5c>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035df 	.word	0x080035df
 80035bc:	080035f9 	.word	0x080035f9
 80035c0:	08003613 	.word	0x08003613
	case apple:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_apple_bmp, rotation);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b32      	subs	r3, #50	; 0x32
 80035ca:	b298      	uxth	r0, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b32      	subs	r3, #50	; 0x32
 80035d2:	b299      	uxth	r1, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <Draw_Slice+0xe8>)
 80035d8:	f000 f83a 	bl	8003650 <drawBitmap>
		break;
 80035dc:	e026      	b.n	800362c <Draw_Slice+0xd4>
	case coconut:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_coconut_bmp, rotation);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b32      	subs	r3, #50	; 0x32
 80035e4:	b298      	uxth	r0, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b32      	subs	r3, #50	; 0x32
 80035ec:	b299      	uxth	r1, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <Draw_Slice+0xec>)
 80035f2:	f000 f82d 	bl	8003650 <drawBitmap>
		break;
 80035f6:	e019      	b.n	800362c <Draw_Slice+0xd4>
	case watermelon:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_watermelon_bmp, rotation);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b32      	subs	r3, #50	; 0x32
 80035fe:	b298      	uxth	r0, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b32      	subs	r3, #50	; 0x32
 8003606:	b299      	uxth	r1, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <Draw_Slice+0xf0>)
 800360c:	f000 f820 	bl	8003650 <drawBitmap>
		break;
 8003610:	e00c      	b.n	800362c <Draw_Slice+0xd4>
	case orange:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_orange_bmp, rotation);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b32      	subs	r3, #50	; 0x32
 8003618:	b298      	uxth	r0, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b32      	subs	r3, #50	; 0x32
 8003620:	b299      	uxth	r1, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4a09      	ldr	r2, [pc, #36]	; (800364c <Draw_Slice+0xf4>)
 8003626:	f000 f813 	bl	8003650 <drawBitmap>
		break;
 800362a:	bf00      	nop
	}
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f3af 8000 	nop.w
 8003638:	00000000 	.word	0x00000000
 800363c:	407e0000 	.word	0x407e0000
 8003640:	0802af48 	.word	0x0802af48
 8003644:	08034bf8 	.word	0x08034bf8
 8003648:	0802fda0 	.word	0x0802fda0
 800364c:	080260f0 	.word	0x080260f0

08003650 <drawBitmap>:
/**
 * @brief User function to draw a 100x100px bitmap with transparency and rotation.
 * @param Image coordinates, pointer to bitmap, image rotation
 */
void drawBitmap(uint16_t Xpos, uint16_t Ypos, const uint32_t *bitmap,
		int rotation) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60ba      	str	r2, [r7, #8]
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	4603      	mov	r3, r0
 800365c:	81fb      	strh	r3, [r7, #14]
 800365e:	460b      	mov	r3, r1
 8003660:	81bb      	strh	r3, [r7, #12]
	uint16_t x, y;

	//cycle trough height and width of the image
	for (y = 0; y < 100; y++) {
 8003662:	2300      	movs	r3, #0
 8003664:	83bb      	strh	r3, [r7, #28]
 8003666:	e054      	b.n	8003712 <drawBitmap+0xc2>
		for (x = 0; x < 100; x++) {
 8003668:	2300      	movs	r3, #0
 800366a:	83fb      	strh	r3, [r7, #30]
 800366c:	e04b      	b.n	8003706 <drawBitmap+0xb6>
			uint16_t rotatedX, rotatedY;

			//convert coordinates corresponding to the rotation
			if (rotation == 180) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2bb4      	cmp	r3, #180	; 0xb4
 8003672:	d108      	bne.n	8003686 <drawBitmap+0x36>
				rotatedX = 99 - x;
 8003674:	8bfb      	ldrh	r3, [r7, #30]
 8003676:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 800367a:	837b      	strh	r3, [r7, #26]
				rotatedY = 99 - y;
 800367c:	8bbb      	ldrh	r3, [r7, #28]
 800367e:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8003682:	833b      	strh	r3, [r7, #24]
 8003684:	e003      	b.n	800368e <drawBitmap+0x3e>
			} else {
				rotatedX = x;
 8003686:	8bfb      	ldrh	r3, [r7, #30]
 8003688:	837b      	strh	r3, [r7, #26]
				rotatedY = y;
 800368a:	8bbb      	ldrh	r3, [r7, #28]
 800368c:	833b      	strh	r3, [r7, #24]
			}
			//get the pixel value
			uint32_t pixelValue = bitmap[(rotatedY * 50 + rotatedX / 2) + 13];
 800368e:	8b3b      	ldrh	r3, [r7, #24]
 8003690:	2232      	movs	r2, #50	; 0x32
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	8b7a      	ldrh	r2, [r7, #26]
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	b292      	uxth	r2, r2
 800369c:	4413      	add	r3, r2
 800369e:	330d      	adds	r3, #13
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4413      	add	r3, r2
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	617b      	str	r3, [r7, #20]

			//if it is not black (trasparency)
			if ((pixelValue & 0xFF000000) != 0) {
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d025      	beq.n	8003700 <drawBitmap+0xb0>
				//convert pixel value to ARGB8888
				pixelValue = convertToARGB8888(pixelValue);
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f000 f834 	bl	8003722 <convertToARGB8888>
 80036ba:	6178      	str	r0, [r7, #20]
				//if the coordinate is on the screen
				if (Xpos + x > 0&& Ypos + y > 0 && Xpos + x < Xresolution
 80036bc:	89fa      	ldrh	r2, [r7, #14]
 80036be:	8bfb      	ldrh	r3, [r7, #30]
 80036c0:	4413      	add	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dd1c      	ble.n	8003700 <drawBitmap+0xb0>
 80036c6:	89ba      	ldrh	r2, [r7, #12]
 80036c8:	8bbb      	ldrh	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dd17      	ble.n	8003700 <drawBitmap+0xb0>
 80036d0:	89fa      	ldrh	r2, [r7, #14]
 80036d2:	8bfb      	ldrh	r3, [r7, #30]
 80036d4:	4413      	add	r3, r2
 80036d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80036da:	da11      	bge.n	8003700 <drawBitmap+0xb0>
				&& Ypos + y < Yresolution)
 80036dc:	89ba      	ldrh	r2, [r7, #12]
 80036de:	8bbb      	ldrh	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80036e6:	da0b      	bge.n	8003700 <drawBitmap+0xb0>
					BSP_LCD_DrawPixel(Xpos + x, Ypos + y, pixelValue);
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	8bfb      	ldrh	r3, [r7, #30]
 80036ec:	4413      	add	r3, r2
 80036ee:	b298      	uxth	r0, r3
 80036f0:	89ba      	ldrh	r2, [r7, #12]
 80036f2:	8bbb      	ldrh	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7fd fd3c 	bl	8001178 <BSP_LCD_DrawPixel>
		for (x = 0; x < 100; x++) {
 8003700:	8bfb      	ldrh	r3, [r7, #30]
 8003702:	3301      	adds	r3, #1
 8003704:	83fb      	strh	r3, [r7, #30]
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	2b63      	cmp	r3, #99	; 0x63
 800370a:	d9b0      	bls.n	800366e <drawBitmap+0x1e>
	for (y = 0; y < 100; y++) {
 800370c:	8bbb      	ldrh	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	83bb      	strh	r3, [r7, #28]
 8003712:	8bbb      	ldrh	r3, [r7, #28]
 8003714:	2b63      	cmp	r3, #99	; 0x63
 8003716:	d9a7      	bls.n	8003668 <drawBitmap+0x18>
					//Draw the pixel
			}
		}
	}
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <convertToARGB8888>:
/**
 * @brief User function to convert RGB565 to ARGB8888.
 * @param RGB565 Pixel value
 * @return ARGB8888 Pixel value
 */
uint32_t convertToARGB8888(uint32_t originalPixelValue) {
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
	// Extract RGB components from RGB565
	uint8_t red = ((originalPixelValue >> 8) & 0xF8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 13) & 0x07);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0b5b      	lsrs	r3, r3, #13
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b2db      	uxtb	r3, r3
	uint8_t red = ((originalPixelValue >> 8) & 0xF8)
 8003742:	4313      	orrs	r3, r2
 8003744:	73fb      	strb	r3, [r7, #15]
	uint8_t green = ((originalPixelValue >> 3) & 0xFC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	08db      	lsrs	r3, r3, #3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f023 0303 	bic.w	r3, r3, #3
 8003750:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 9) & 0x03);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	b2db      	uxtb	r3, r3
	uint8_t green = ((originalPixelValue >> 3) & 0xFC)
 800375e:	4313      	orrs	r3, r2
 8003760:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = ((originalPixelValue << 3) & 0xF8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 2) & 0x07);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	b2db      	uxtb	r3, r3
	uint8_t blue = ((originalPixelValue << 3) & 0xF8)
 8003776:	4313      	orrs	r3, r2
 8003778:	737b      	strb	r3, [r7, #13]

	// Alpha value (assuming fully opaque)
	uint8_t alpha = 0xFF;
 800377a:	23ff      	movs	r3, #255	; 0xff
 800377c:	733b      	strb	r3, [r7, #12]

	// Pack into ARGB8888 format
	uint32_t argb8888Value = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800377e:	7b3b      	ldrb	r3, [r7, #12]
 8003780:	061a      	lsls	r2, r3, #24
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	431a      	orrs	r2, r3
 800378e:	7b7b      	ldrb	r3, [r7, #13]
 8003790:	4313      	orrs	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]

	return argb8888Value;
 8003794:	68bb      	ldr	r3, [r7, #8]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b090      	sub	sp, #64	; 0x40
 80037a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ba:	4bac      	ldr	r3, [pc, #688]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4aab      	ldr	r2, [pc, #684]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037c0:	f043 0310 	orr.w	r3, r3, #16
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4ba9      	ldr	r3, [pc, #676]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037d2:	4ba6      	ldr	r3, [pc, #664]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4aa5      	ldr	r2, [pc, #660]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4ba3      	ldr	r3, [pc, #652]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	4ba0      	ldr	r3, [pc, #640]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a9f      	ldr	r2, [pc, #636]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b9d      	ldr	r3, [pc, #628]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003802:	4b9a      	ldr	r3, [pc, #616]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a99      	ldr	r2, [pc, #612]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003808:	f043 0308 	orr.w	r3, r3, #8
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b97      	ldr	r3, [pc, #604]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381a:	4b94      	ldr	r3, [pc, #592]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a93      	ldr	r2, [pc, #588]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b91      	ldr	r3, [pc, #580]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a8d      	ldr	r2, [pc, #564]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800384a:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a87      	ldr	r2, [pc, #540]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b85      	ldr	r3, [pc, #532]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003862:	4b82      	ldr	r3, [pc, #520]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a81      	ldr	r2, [pc, #516]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b7f      	ldr	r3, [pc, #508]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800387a:	4b7c      	ldr	r3, [pc, #496]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a7b      	ldr	r2, [pc, #492]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003892:	4b76      	ldr	r3, [pc, #472]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a75      	ldr	r2, [pc, #468]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b73      	ldr	r3, [pc, #460]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038aa:	4b70      	ldr	r3, [pc, #448]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a6f      	ldr	r2, [pc, #444]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <MX_GPIO_Init+0x2c8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80038c2:	2378      	movs	r3, #120	; 0x78
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2302      	movs	r3, #2
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80038d2:	2306      	movs	r3, #6
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038da:	4619      	mov	r1, r3
 80038dc:	4864      	ldr	r0, [pc, #400]	; (8003a70 <MX_GPIO_Init+0x2cc>)
 80038de:	f003 f91f 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80038e2:	2304      	movs	r3, #4
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038f2:	2309      	movs	r3, #9
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80038f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	485c      	ldr	r0, [pc, #368]	; (8003a70 <MX_GPIO_Init+0x2cc>)
 80038fe:	f003 f90f 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003902:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003914:	230b      	movs	r3, #11
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391c:	4619      	mov	r1, r3
 800391e:	4855      	ldr	r0, [pc, #340]	; (8003a74 <MX_GPIO_Init+0x2d0>)
 8003920:	f003 f8fe 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800392a:	2312      	movs	r3, #18
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003936:	2304      	movs	r3, #4
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393e:	4619      	mov	r1, r3
 8003940:	484d      	ldr	r0, [pc, #308]	; (8003a78 <MX_GPIO_Init+0x2d4>)
 8003942:	f003 f8ed 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003946:	f643 4323 	movw	r3, #15395	; 0x3c23
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003958:	230a      	movs	r3, #10
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003960:	4619      	mov	r1, r3
 8003962:	4845      	ldr	r0, [pc, #276]	; (8003a78 <MX_GPIO_Init+0x2d4>)
 8003964:	f003 f8dc 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 8003968:	2310      	movs	r3, #16
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003978:	230a      	movs	r3, #10
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 800397c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003980:	4619      	mov	r1, r3
 8003982:	483d      	ldr	r0, [pc, #244]	; (8003a78 <MX_GPIO_Init+0x2d4>)
 8003984:	f003 f8cc 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8003988:	23c0      	movs	r3, #192	; 0xc0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003998:	230b      	movs	r3, #11
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800399c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a0:	4619      	mov	r1, r3
 80039a2:	4836      	ldr	r0, [pc, #216]	; (8003a7c <MX_GPIO_Init+0x2d8>)
 80039a4:	f003 f8bc 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 80039a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039ba:	2308      	movs	r3, #8
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 80039be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c2:	4619      	mov	r1, r3
 80039c4:	482e      	ldr	r0, [pc, #184]	; (8003a80 <MX_GPIO_Init+0x2dc>)
 80039c6:	f003 f8ab 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80039ca:	2340      	movs	r3, #64	; 0x40
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d6:	2303      	movs	r3, #3
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80039da:	230a      	movs	r3, #10
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80039de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e2:	4619      	mov	r1, r3
 80039e4:	4824      	ldr	r0, [pc, #144]	; (8003a78 <MX_GPIO_Init+0x2d4>)
 80039e6:	f003 f89b 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 80039ea:	f247 033b 	movw	r3, #28731	; 0x703b
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f0:	2300      	movs	r3, #0
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80039f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fc:	4619      	mov	r1, r3
 80039fe:	4821      	ldr	r0, [pc, #132]	; (8003a84 <MX_GPIO_Init+0x2e0>)
 8003a00:	f003 f88e 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8003a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003a16:	2303      	movs	r3, #3
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4817      	ldr	r0, [pc, #92]	; (8003a80 <MX_GPIO_Init+0x2dc>)
 8003a22:	f003 f87d 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8003a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a34:	2303      	movs	r3, #3
 8003a36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a38:	2309      	movs	r3, #9
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a40:	4619      	mov	r1, r3
 8003a42:	480f      	ldr	r0, [pc, #60]	; (8003a80 <MX_GPIO_Init+0x2dc>)
 8003a44:	f003 f86c 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8003a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8003a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a62:	4619      	mov	r1, r3
 8003a64:	4808      	ldr	r0, [pc, #32]	; (8003a88 <MX_GPIO_Init+0x2e4>)
 8003a66:	f003 f85b 	bl	8006b20 <HAL_GPIO_Init>
 8003a6a:	e00f      	b.n	8003a8c <MX_GPIO_Init+0x2e8>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40021800 	.word	0x40021800
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	40020800 	.word	0x40020800
 8003a84:	40022400 	.word	0x40022400
 8003a88:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8003a8c:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a92:	2300      	movs	r3, #0
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	48ba      	ldr	r0, [pc, #744]	; (8003d8c <MX_GPIO_Init+0x5e8>)
 8003aa2:	f003 f83d 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8003aa6:	23f8      	movs	r3, #248	; 0xf8
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	48b5      	ldr	r0, [pc, #724]	; (8003d90 <MX_GPIO_Init+0x5ec>)
 8003aba:	f003 f831 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8003ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad8:	4619      	mov	r1, r3
 8003ada:	48ae      	ldr	r0, [pc, #696]	; (8003d94 <MX_GPIO_Init+0x5f0>)
 8003adc:	f003 f820 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8003ae0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003af2:	230b      	movs	r3, #11
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afa:	4619      	mov	r1, r3
 8003afc:	48a5      	ldr	r0, [pc, #660]	; (8003d94 <MX_GPIO_Init+0x5f0>)
 8003afe:	f003 f80f 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b06:	2300      	movs	r3, #0
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b12:	4619      	mov	r1, r3
 8003b14:	48a0      	ldr	r0, [pc, #640]	; (8003d98 <MX_GPIO_Init+0x5f4>)
 8003b16:	f003 f803 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b32:	4619      	mov	r1, r3
 8003b34:	4898      	ldr	r0, [pc, #608]	; (8003d98 <MX_GPIO_Init+0x5f4>)
 8003b36:	f002 fff3 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b54:	4619      	mov	r1, r3
 8003b56:	4891      	ldr	r0, [pc, #580]	; (8003d9c <MX_GPIO_Init+0x5f8>)
 8003b58:	f002 ffe2 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8003b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b74:	4619      	mov	r1, r3
 8003b76:	4888      	ldr	r0, [pc, #544]	; (8003d98 <MX_GPIO_Init+0x5f4>)
 8003b78:	f002 ffd2 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8003b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003b8e:	230a      	movs	r3, #10
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b96:	4619      	mov	r1, r3
 8003b98:	487c      	ldr	r0, [pc, #496]	; (8003d8c <MX_GPIO_Init+0x5e8>)
 8003b9a:	f002 ffc1 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003baa:	2303      	movs	r3, #3
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bae:	2308      	movs	r3, #8
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4879      	ldr	r0, [pc, #484]	; (8003da0 <MX_GPIO_Init+0x5fc>)
 8003bba:	f002 ffb1 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003bce:	230a      	movs	r3, #10
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4872      	ldr	r0, [pc, #456]	; (8003da4 <MX_GPIO_Init+0x600>)
 8003bda:	f002 ffa1 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003bee:	2306      	movs	r3, #6
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4866      	ldr	r0, [pc, #408]	; (8003d94 <MX_GPIO_Init+0x5f0>)
 8003bfa:	f002 ff91 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8003bfe:	2348      	movs	r3, #72	; 0x48
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c02:	2300      	movs	r3, #0
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4860      	ldr	r0, [pc, #384]	; (8003d94 <MX_GPIO_Init+0x5f0>)
 8003c12:	f002 ff85 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003c26:	2303      	movs	r3, #3
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c2e:	4619      	mov	r1, r3
 8003c30:	485d      	ldr	r0, [pc, #372]	; (8003da8 <MX_GPIO_Init+0x604>)
 8003c32:	f002 ff75 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8003c36:	2340      	movs	r3, #64	; 0x40
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003c46:	2303      	movs	r3, #3
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4855      	ldr	r0, [pc, #340]	; (8003da8 <MX_GPIO_Init+0x604>)
 8003c52:	f002 ff65 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003c56:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c68:	4619      	mov	r1, r3
 8003c6a:	484f      	ldr	r0, [pc, #316]	; (8003da8 <MX_GPIO_Init+0x604>)
 8003c6c:	f002 ff58 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8003c70:	2301      	movs	r3, #1
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003c80:	230a      	movs	r3, #10
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8003c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4845      	ldr	r0, [pc, #276]	; (8003da0 <MX_GPIO_Init+0x5fc>)
 8003c8c:	f002 ff48 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c90:	2332      	movs	r3, #50	; 0x32
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ca0:	230b      	movs	r3, #11
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca8:	4619      	mov	r1, r3
 8003caa:	483d      	ldr	r0, [pc, #244]	; (8003da0 <MX_GPIO_Init+0x5fc>)
 8003cac:	f002 ff38 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4837      	ldr	r0, [pc, #220]	; (8003da0 <MX_GPIO_Init+0x5fc>)
 8003cc4:	f002 ff2c 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003cd8:	2309      	movs	r3, #9
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4832      	ldr	r0, [pc, #200]	; (8003dac <MX_GPIO_Init+0x608>)
 8003ce4:	f002 ff1c 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8003ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8003cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d02:	4619      	mov	r1, r3
 8003d04:	4824      	ldr	r0, [pc, #144]	; (8003d98 <MX_GPIO_Init+0x5f4>)
 8003d06:	f002 ff0b 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d0a:	2386      	movs	r3, #134	; 0x86
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d1a:	230b      	movs	r3, #11
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d22:	4619      	mov	r1, r3
 8003d24:	481d      	ldr	r0, [pc, #116]	; (8003d9c <MX_GPIO_Init+0x5f8>)
 8003d26:	f002 fefb 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8003d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4817      	ldr	r0, [pc, #92]	; (8003d9c <MX_GPIO_Init+0x5f8>)
 8003d40:	f002 feee 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8003d44:	2350      	movs	r3, #80	; 0x50
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d54:	4619      	mov	r1, r3
 8003d56:	4811      	ldr	r0, [pc, #68]	; (8003d9c <MX_GPIO_Init+0x5f8>)
 8003d58:	f002 fee2 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003d6e:	230a      	movs	r3, #10
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8003d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d76:	4619      	mov	r1, r3
 8003d78:	4807      	ldr	r0, [pc, #28]	; (8003d98 <MX_GPIO_Init+0x5f4>)
 8003d7a:	f002 fed1 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d82:	2300      	movs	r3, #0
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	e011      	b.n	8003db0 <MX_GPIO_Init+0x60c>
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40022800 	.word	0x40022800
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40020c00 	.word	0x40020c00
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40021c00 	.word	0x40021c00
 8003da8:	40021400 	.word	0x40021400
 8003dac:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	481c      	ldr	r0, [pc, #112]	; (8003e28 <MX_GPIO_Init+0x684>)
 8003db8:	f002 feb2 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003dbc:	2328      	movs	r3, #40	; 0x28
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003dcc:	230a      	movs	r3, #10
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4815      	ldr	r0, [pc, #84]	; (8003e2c <MX_GPIO_Init+0x688>)
 8003dd8:	f002 fea2 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003ddc:	2340      	movs	r3, #64	; 0x40
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	2302      	movs	r3, #2
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003dec:	2309      	movs	r3, #9
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df4:	4619      	mov	r1, r3
 8003df6:	480c      	ldr	r0, [pc, #48]	; (8003e28 <MX_GPIO_Init+0x684>)
 8003df8:	f002 fe92 	bl	8006b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003dfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	4619      	mov	r1, r3
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <MX_GPIO_Init+0x68c>)
 8003e1a:	f002 fe81 	bl	8006b20 <HAL_GPIO_Init>

}
 8003e1e:	bf00      	nop
 8003e20:	3740      	adds	r7, #64	; 0x40
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021c00 	.word	0x40021c00
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40020400 	.word	0x40020400

08003e34 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <MX_I2C4_Init+0x78>)
 8003e3c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <MX_I2C4_Init+0x7c>)
 8003e42:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e50:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003e6e:	480e      	ldr	r0, [pc, #56]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e70:	f003 f928 	bl	80070c4 <HAL_I2C_Init>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003e7a:	f000 fc5d 	bl	8004738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4809      	ldr	r0, [pc, #36]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e82:	f003 feb5 	bl	8007bf0 <HAL_I2CEx_ConfigAnalogFilter>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003e8c:	f000 fc54 	bl	8004738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003e90:	2100      	movs	r1, #0
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <MX_I2C4_Init+0x74>)
 8003e94:	f003 fef7 	bl	8007c86 <HAL_I2CEx_ConfigDigitalFilter>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003e9e:	f000 fc4b 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20004574 	.word	0x20004574
 8003eac:	40006000 	.word	0x40006000
 8003eb0:	00c0eaff 	.word	0x00c0eaff

08003eb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0ae      	sub	sp, #184	; 0xb8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	2290      	movs	r2, #144	; 0x90
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00b f9aa 	bl	800f22e <memset>
  if(i2cHandle->Instance==I2C4)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a33      	ldr	r2, [pc, #204]	; (8003fac <HAL_I2C_MspInit+0xf8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d15e      	bne.n	8003fa2 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 ff31 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003f00:	f000 fc1a 	bl	8004738 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f22:	f043 0308 	orr.w	r3, r3, #8
 8003f26:	6313      	str	r3, [r2, #48]	; 0x30
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f3a:	2312      	movs	r3, #18
 8003f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003f4c:	230b      	movs	r3, #11
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4816      	ldr	r0, [pc, #88]	; (8003fb4 <HAL_I2C_MspInit+0x100>)
 8003f5a:	f002 fde1 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8003f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f66:	2312      	movs	r3, #18
 8003f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8003f7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f82:	4619      	mov	r1, r3
 8003f84:	480c      	ldr	r0, [pc, #48]	; (8003fb8 <HAL_I2C_MspInit+0x104>)
 8003f86:	f002 fdcb 	bl	8006b20 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_I2C_MspInit+0xfc>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	37b8      	adds	r7, #184	; 0xb8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40006000 	.word	0x40006000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020c00 	.word	0x40020c00

08003fbc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C4)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_I2C_MspDeInit+0x38>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10e      	bne.n	8003fec <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_I2C_MspDeInit+0x3c>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_I2C_MspDeInit+0x3c>)
 8003fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	4807      	ldr	r0, [pc, #28]	; (8003ffc <HAL_I2C_MspDeInit+0x40>)
 8003fde:	f002 ff4b 	bl	8006e78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 8003fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe6:	4806      	ldr	r0, [pc, #24]	; (8004000 <HAL_I2C_MspDeInit+0x44>)
 8003fe8:	f002 ff46 	bl	8006e78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40006000 	.word	0x40006000
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40020c00 	.word	0x40020c00

08004004 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b09a      	sub	sp, #104	; 0x68
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800400a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800400e:	2234      	movs	r2, #52	; 0x34
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f00b f90b 	bl	800f22e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8004018:	463b      	mov	r3, r7
 800401a:	2234      	movs	r2, #52	; 0x34
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f00b f905 	bl	800f22e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8004024:	4b4e      	ldr	r3, [pc, #312]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004026:	4a4f      	ldr	r2, [pc, #316]	; (8004164 <MX_LTDC_Init+0x160>)
 8004028:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800402a:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <MX_LTDC_Init+0x15c>)
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004030:	4b4b      	ldr	r3, [pc, #300]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004036:	4b4a      	ldr	r3, [pc, #296]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004038:	2200      	movs	r2, #0
 800403a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800403c:	4b48      	ldr	r3, [pc, #288]	; (8004160 <MX_LTDC_Init+0x15c>)
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004044:	2207      	movs	r2, #7
 8004046:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8004048:	4b45      	ldr	r3, [pc, #276]	; (8004160 <MX_LTDC_Init+0x15c>)
 800404a:	2203      	movs	r2, #3
 800404c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800404e:	4b44      	ldr	r3, [pc, #272]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004050:	220e      	movs	r2, #14
 8004052:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004056:	2205      	movs	r2, #5
 8004058:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <MX_LTDC_Init+0x15c>)
 800405c:	f240 228e 	movw	r2, #654	; 0x28e
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8004062:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004064:	f240 12e5 	movw	r2, #485	; 0x1e5
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800406a:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <MX_LTDC_Init+0x15c>)
 800406c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8004072:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004074:	f240 12e7 	movw	r2, #487	; 0x1e7
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <MX_LTDC_Init+0x15c>)
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800408a:	4b35      	ldr	r3, [pc, #212]	; (8004160 <MX_LTDC_Init+0x15c>)
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8004092:	4833      	ldr	r0, [pc, #204]	; (8004160 <MX_LTDC_Init+0x15c>)
 8004094:	f003 fe44 	bl	8007d20 <HAL_LTDC_Init>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800409e:	f000 fb4b 	bl	8004738 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80040b2:	2300      	movs	r3, #0
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80040be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80040c4:	2305      	movs	r3, #5
 80040c6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80040e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040ea:	2200      	movs	r2, #0
 80040ec:	4619      	mov	r1, r3
 80040ee:	481c      	ldr	r0, [pc, #112]	; (8004160 <MX_LTDC_Init+0x15c>)
 80040f0:	f003 fee6 	bl	8007ec0 <HAL_LTDC_ConfigLayer>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80040fa:	f000 fb1d 	bl	8004738 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800411a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004120:	2305      	movs	r3, #5
 8004122:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8004142:	463b      	mov	r3, r7
 8004144:	2201      	movs	r2, #1
 8004146:	4619      	mov	r1, r3
 8004148:	4805      	ldr	r0, [pc, #20]	; (8004160 <MX_LTDC_Init+0x15c>)
 800414a:	f003 feb9 	bl	8007ec0 <HAL_LTDC_ConfigLayer>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8004154:	f000 faf0 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	3768      	adds	r7, #104	; 0x68
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200045c8 	.word	0x200045c8
 8004164:	40016800 	.word	0x40016800

08004168 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0a8      	sub	sp, #160	; 0xa0
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	2290      	movs	r2, #144	; 0x90
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f00b f858 	bl	800f22e <memset>
  if(ltdcHandle->Instance==LTDC)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_LTDC_MspInit+0x74>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d124      	bne.n	80041d2 <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004188:	2308      	movs	r3, #8
 800418a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800418c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8004192:	2307      	movs	r3, #7
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8004196:	2303      	movs	r3, #3
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800419a:	2300      	movs	r3, #0
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80041a2:	2300      	movs	r3, #0
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	4618      	mov	r0, r3
 80041ac:	f004 fdd6 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 80041b6:	f000 fabf 	bl	8004738 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_LTDC_MspInit+0x78>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <HAL_LTDC_MspInit+0x78>)
 80041c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041c4:	6453      	str	r3, [r2, #68]	; 0x44
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_LTDC_MspInit+0x78>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80041d2:	bf00      	nop
 80041d4:	37a0      	adds	r7, #160	; 0xa0
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40016800 	.word	0x40016800
 80041e0:	40023800 	.word	0x40023800

080041e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041e8:	f3bf 8f4f 	dsb	sy
}
 80041ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ee:	f3bf 8f6f 	isb	sy
}
 80041f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <SCB_EnableICache+0x48>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80041fc:	f3bf 8f4f 	dsb	sy
}
 8004200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004202:	f3bf 8f6f 	isb	sy
}
 8004206:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <SCB_EnableICache+0x48>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4a07      	ldr	r2, [pc, #28]	; (800422c <SCB_EnableICache+0x48>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004212:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004214:	f3bf 8f4f 	dsb	sy
}
 8004218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800421a:	f3bf 8f6f 	isb	sy
}
 800421e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <SCB_EnableDCache+0x84>)
 8004238:	2200      	movs	r2, #0
 800423a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800423e:	f3bf 8f4f 	dsb	sy
}
 8004242:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <SCB_EnableDCache+0x84>)
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0b5b      	lsrs	r3, r3, #13
 8004250:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004254:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	08db      	lsrs	r3, r3, #3
 800425a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004268:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800426e:	4911      	ldr	r1, [pc, #68]	; (80042b4 <SCB_EnableDCache+0x84>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	60ba      	str	r2, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e5a      	subs	r2, r3, #1
 8004284:	60fa      	str	r2, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800428a:	f3bf 8f4f 	dsb	sy
}
 800428e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <SCB_EnableDCache+0x84>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <SCB_EnableDCache+0x84>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800429c:	f3bf 8f4f 	dsb	sy
}
 80042a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042a2:	f3bf 8f6f 	isb	sy
}
 80042a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t ts_status = TS_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80042c2:	f7ff ff8f 	bl	80041e4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80042c6:	f7ff ffb3 	bl	8004230 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80042ca:	f001 f86b 	bl	80053a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80042ce:	f000 f84b 	bl	8004368 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80042d2:	f7ff fa67 	bl	80037a4 <MX_GPIO_Init>
	MX_FMC_Init();
 80042d6:	f7fe f843 	bl	8002360 <MX_FMC_Init>
	MX_I2C4_Init();
 80042da:	f7ff fdab 	bl	8003e34 <MX_I2C4_Init>
	MX_TIM3_Init();
 80042de:	f000 fbd3 	bl	8004a88 <MX_TIM3_Init>
	MX_DMA2D_Init();
 80042e2:	f7fd fed7 	bl	8002094 <MX_DMA2D_Init>
	MX_DSIHOST_DSI_Init();
 80042e6:	f7fd ff13 	bl	8002110 <MX_DSIHOST_DSI_Init>
	MX_LTDC_Init();
 80042ea:	f7ff fe8b 	bl	8004004 <MX_LTDC_Init>
	MX_TIM4_Init();
 80042ee:	f000 fc25 	bl	8004b3c <MX_TIM4_Init>
	MX_USART1_UART_Init();
 80042f2:	f000 fcef 	bl	8004cd4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//Configure the RAM chip
	BSP_SDRAM_Initialization_sequence(0xFFFF);
 80042f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80042fa:	f000 f8ab 	bl	8004454 <BSP_SDRAM_Initialization_sequence>

	/* Initialize the LCD */
	BSP_LCD_Init();
 80042fe:	f7fc f96d 	bl	80005dc <BSP_LCD_Init>

	/* Initialize the LCD Layers */
	//background layer
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8004302:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8004306:	2000      	movs	r0, #0
 8004308:	f7fc fb02 	bl	8000910 <BSP_LCD_LayerDefaultInit>
	//Foreground layer
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + (BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*5));
 800430c:	f7fc fae8 	bl	80008e0 <BSP_LCD_GetXSize>
 8004310:	4604      	mov	r4, r0
 8004312:	f7fc faf1 	bl	80008f8 <BSP_LCD_GetYSize>
 8004316:	4603      	mov	r3, r0
 8004318:	fb03 f204 	mul.w	r2, r3, r4
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8004326:	4619      	mov	r1, r3
 8004328:	2001      	movs	r0, #1
 800432a:	f7fc faf1 	bl	8000910 <BSP_LCD_LayerDefaultInit>

	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(1);
 800432e:	2001      	movs	r0, #1
 8004330:	f7fc fb4e 	bl	80009d0 <BSP_LCD_SelectLayer>
	// Init Touch screen
	ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8004334:	f7fc fad4 	bl	80008e0 <BSP_LCD_GetXSize>
 8004338:	4603      	mov	r3, r0
 800433a:	b29c      	uxth	r4, r3
 800433c:	f7fc fadc 	bl	80008f8 <BSP_LCD_GetYSize>
 8004340:	4603      	mov	r3, r0
 8004342:	b29b      	uxth	r3, r3
 8004344:	4619      	mov	r1, r3
 8004346:	4620      	mov	r0, r4
 8004348:	f7fd f838 	bl	80013bc <BSP_TS_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	71fb      	strb	r3, [r7, #7]
	if (ts_status != TS_OK) {
		//Error
	}

	freeRTOS_user_init();	//should by placed after kernel initialization!
 8004350:	f000 fd6c 	bl	8004e2c <freeRTOS_user_init>
	srand(1);
 8004354:	2001      	movs	r0, #1
 8004356:	f00a fdd9 	bl	800ef0c <srand>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 800435a:	f007 fb6f 	bl	800ba3c <osKernelInitialize>
	MX_FREERTOS_Init();
 800435e:	f7fe f8eb 	bl	8002538 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8004362:	f007 fb9f 	bl	800baa4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8004366:	e7fe      	b.n	8004366 <main+0xae>

08004368 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b094      	sub	sp, #80	; 0x50
 800436c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	2234      	movs	r2, #52	; 0x34
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f00a ff59 	bl	800f22e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800438c:	f003 ffc0 	bl	8008310 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004390:	4b2e      	ldr	r3, [pc, #184]	; (800444c <SystemClock_Config+0xe4>)
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	4a2d      	ldr	r2, [pc, #180]	; (800444c <SystemClock_Config+0xe4>)
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	6413      	str	r3, [r2, #64]	; 0x40
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <SystemClock_Config+0xe4>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <SystemClock_Config+0xe8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a28      	ldr	r2, [pc, #160]	; (8004450 <SystemClock_Config+0xe8>)
 80043ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b26      	ldr	r3, [pc, #152]	; (8004450 <SystemClock_Config+0xe8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80043c0:	2303      	movs	r3, #3
 80043c2:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043c8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043ca:	2301      	movs	r3, #1
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043ce:	2310      	movs	r3, #16
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d2:	2302      	movs	r3, #2
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80043dc:	2319      	movs	r3, #25
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 400;
 80043e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80043e4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043e6:	2302      	movs	r3, #2
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80043ea:	2304      	movs	r3, #4
 80043ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 7;
 80043ee:	2307      	movs	r3, #7
 80043f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80043f2:	f107 031c 	add.w	r3, r7, #28
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 ffea 	bl	80083d0 <HAL_RCC_OscConfig>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <SystemClock_Config+0x9e>
		Error_Handler();
 8004402:	f000 f999 	bl	8004738 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004406:	f003 ff93 	bl	8008330 <HAL_PWREx_EnableOverDrive>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <SystemClock_Config+0xac>
		Error_Handler();
 8004410:	f000 f992 	bl	8004738 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004414:	230f      	movs	r3, #15
 8004416:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004418:	2302      	movs	r3, #2
 800441a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004420:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004424:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800442a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	2106      	movs	r1, #6
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fa7a 	bl	800892c <HAL_RCC_ClockConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <SystemClock_Config+0xda>
		Error_Handler();
 800443e:	f000 f97b 	bl	8004738 <Error_Handler>
	}
}
 8004442:	bf00      	nop
 8004444:	3750      	adds	r7, #80	; 0x50
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000

08004454 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

	/* Step 1: Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004468:	2210      	movs	r2, #16
 800446a:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800446e:	2201      	movs	r2, #1
 8004470:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004474:	2200      	movs	r2, #0
 8004476:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447c:	4923      	ldr	r1, [pc, #140]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447e:	4824      	ldr	r0, [pc, #144]	; (8004510 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004480:	f005 f8c8 	bl	8009614 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8004484:	2001      	movs	r0, #1
 8004486:	f000 ffc3 	bl	8005410 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800448c:	2202      	movs	r2, #2
 800448e:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8004490:	4b1e      	ldr	r3, [pc, #120]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004492:	2210      	movs	r2, #16
 8004494:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004498:	2201      	movs	r2, #1
 800449a:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80044a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a6:	4919      	ldr	r1, [pc, #100]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044a8:	4819      	ldr	r0, [pc, #100]	; (8004510 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044aa:	f005 f8b3 	bl	8009614 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b0:	2203      	movs	r2, #3
 80044b2:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b6:	2210      	movs	r2, #16
 80044b8:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 8;
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044bc:	2208      	movs	r2, #8
 80044be:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80044c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ca:	4910      	ldr	r1, [pc, #64]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044cc:	4810      	ldr	r0, [pc, #64]	; (8004510 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044ce:	f005 f8a1 	bl	8009614 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 80044d2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80044d6:	60fb      	str	r3, [r7, #12]
			|\
 SDRAM_MODEREG_OPERATING_MODE_STANDARD
			|\
 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044da:	2204      	movs	r2, #4
 80044dc:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e0:	2210      	movs	r2, #16
 80044e2:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a07      	ldr	r2, [pc, #28]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ee:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80044f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f4:	4905      	ldr	r1, [pc, #20]	; (800450c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044f6:	4806      	ldr	r0, [pc, #24]	; (8004510 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044f8:	f005 f88c 	bl	8009614 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4804      	ldr	r0, [pc, #16]	; (8004510 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004500:	f005 f8bd 	bl	800967e <HAL_SDRAM_ProgramRefreshRate>
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20004670 	.word	0x20004670
 8004510:	20004390 	.word	0x20004390

08004514 <I2Cx_Init>:
#define DISCOVERY_I2Cx_TIMING                      ((uint32_t)0x40912732)
#define DISCOVERY_I2Cx                             I2C4
#endif /* DISCOVERY_I2Cx_TIMING */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr);

static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET) {
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f003 f8bf 	bl	80076a0 <HAL_I2C_GetState>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11a      	bne.n	800455e <I2Cx_Init+0x4a>

		i2c_handler->Instance = DISCOVERY_I2Cx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0f      	ldr	r2, [pc, #60]	; (8004568 <I2Cx_Init+0x54>)
 800452c:	601a      	str	r2, [r3, #0]
		i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a0e      	ldr	r2, [pc, #56]	; (800456c <I2Cx_Init+0x58>)
 8004532:	605a      	str	r2, [r3, #4]
		i2c_handler->Init.OwnAddress1 = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
		i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	60da      	str	r2, [r3, #12]
		i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
		i2c_handler->Init.OwnAddress2 = 0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	615a      	str	r2, [r3, #20]
		i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
		i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	621a      	str	r2, [r3, #32]

		/* Init the I2C */
		//I2Cx_MspInit(i2c_handler);
		HAL_I2C_Init(i2c_handler);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f002 fdb3 	bl	80070c4 <HAL_I2C_Init>
	}
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40006000 	.word	0x40006000
 800456c:	40912732 	.word	0x40912732

08004570 <I2Cx_ReadMultiple>:
 * @param  Length: Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler,
		uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer,
		uint16_t Length) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af04      	add	r7, sp, #16
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	72fb      	strb	r3, [r7, #11]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t) Reg, MemAddress,
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	b299      	uxth	r1, r3
 8004592:	88f8      	ldrh	r0, [r7, #6]
 8004594:	893a      	ldrh	r2, [r7, #8]
 8004596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4603      	mov	r3, r0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f002 ff60 	bl	800746c <HAL_I2C_Mem_Read>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]
			Buffer, Length, 1000);

	/* Check the communication status */
	if (status != HAL_OK) {
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <I2Cx_ReadMultiple+0x50>
		/* I2C error occured */
		I2Cx_Error(i2c_handler, Addr);
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	4619      	mov	r1, r3
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f832 	bl	8004624 <I2Cx_Error>
	}
	return status;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2Cx_WriteMultiple>:
 * @param  Length: buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler,
		uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer,
		uint16_t Length) {
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b08a      	sub	sp, #40	; 0x28
 80045ce:	af04      	add	r7, sp, #16
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	4608      	mov	r0, r1
 80045d4:	4611      	mov	r1, r2
 80045d6:	461a      	mov	r2, r3
 80045d8:	4603      	mov	r3, r0
 80045da:	72fb      	strb	r3, [r7, #11]
 80045dc:	460b      	mov	r3, r1
 80045de:	813b      	strh	r3, [r7, #8]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t) Reg, MemAddress,
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	b299      	uxth	r1, r3
 80045ec:	88f8      	ldrh	r0, [r7, #6]
 80045ee:	893a      	ldrh	r2, [r7, #8]
 80045f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045f4:	9302      	str	r3, [sp, #8]
 80045f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4603      	mov	r3, r0
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f002 fe1f 	bl	8007244 <HAL_I2C_Mem_Write>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]
			Buffer, Length, 1000);

	/* Check the communication status */
	if (status != HAL_OK) {
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <I2Cx_WriteMultiple+0x50>
		/* Re-Initiaize the I2C Bus */
		I2Cx_Error(i2c_handler, Addr);
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	4619      	mov	r1, r3
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f805 	bl	8004624 <I2Cx_Error>
	}
	return status;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2Cx_Error>:
 * @param  i2c_handler : I2C handler
 * @param  Addr: I2C Address
 * @retval None
 */

static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
	/* De-initialize the I2C communication bus */
	HAL_I2C_DeInit(i2c_handler);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f002 fdd7 	bl	80071e4 <HAL_I2C_DeInit>

	/* Re-Initialize the I2C communication bus */
	I2Cx_Init(i2c_handler);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff6c 	bl	8004514 <I2Cx_Init>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <TS_IO_Init>:

/**
 * @brief  Initializes Touchscreen low level.
 * @retval None
 */
void TS_IO_Init(void) {
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	I2Cx_Init(&hi2c4);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <TS_IO_Init+0x10>)
 800464a:	f7ff ff63 	bl	8004514 <I2Cx_Init>
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20004574 	.word	0x20004574

08004658 <TS_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af02      	add	r7, sp, #8
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	460b      	mov	r3, r1
 8004664:	71bb      	strb	r3, [r7, #6]
 8004666:	4613      	mov	r3, r2
 8004668:	717b      	strb	r3, [r7, #5]
	I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT,
 800466a:	79bb      	ldrb	r3, [r7, #6]
 800466c:	b29a      	uxth	r2, r3
 800466e:	79f9      	ldrb	r1, [r7, #7]
 8004670:	2301      	movs	r3, #1
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	1d7b      	adds	r3, r7, #5
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2301      	movs	r3, #1
 800467a:	4803      	ldr	r0, [pc, #12]	; (8004688 <TS_IO_Write+0x30>)
 800467c:	f7ff ffa5 	bl	80045ca <I2Cx_WriteMultiple>
			(uint8_t*) &Value, 1);
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20004574 	.word	0x20004574

0800468c <TS_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	4603      	mov	r3, r0
 8004694:	460a      	mov	r2, r1
 8004696:	71fb      	strb	r3, [r7, #7]
 8004698:	4613      	mov	r3, r2
 800469a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_value = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]

	I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT,
 80046a0:	79bb      	ldrb	r3, [r7, #6]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	79f9      	ldrb	r1, [r7, #7]
 80046a6:	2301      	movs	r3, #1
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	f107 030f 	add.w	r3, r7, #15
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2301      	movs	r3, #1
 80046b2:	4804      	ldr	r0, [pc, #16]	; (80046c4 <TS_IO_Read+0x38>)
 80046b4:	f7ff ff5c 	bl	8004570 <I2Cx_ReadMultiple>
			(uint8_t*) &read_value, 1);

	return read_value;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20004574 	.word	0x20004574

080046c8 <TS_IO_ReadMultiple>:
 * @param  Buffer: Pointer to data buffer
 * @param  Length: Length of the data
 * @retval Number of read data
 */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer,
		uint16_t Length) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	603a      	str	r2, [r7, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
 80046d6:	460b      	mov	r3, r1
 80046d8:	71bb      	strb	r3, [r7, #6]
 80046da:	4613      	mov	r3, r2
 80046dc:	80bb      	strh	r3, [r7, #4]
	return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT,
 80046de:	79bb      	ldrb	r3, [r7, #6]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	79f9      	ldrb	r1, [r7, #7]
 80046e4:	88bb      	ldrh	r3, [r7, #4]
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	2301      	movs	r3, #1
 80046ee:	4804      	ldr	r0, [pc, #16]	; (8004700 <TS_IO_ReadMultiple+0x38>)
 80046f0:	f7ff ff3e 	bl	8004570 <I2Cx_ReadMultiple>
 80046f4:	4603      	mov	r3, r0
 80046f6:	b29b      	uxth	r3, r3
			Buffer, Length);
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20004574 	.word	0x20004574

08004704 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a07      	ldr	r2, [pc, #28]	; (8004730 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004716:	f000 fe5b 	bl	80053d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM4) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a05      	ldr	r2, [pc, #20]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_TIM_PeriodElapsedCallback+0x24>
		tim4_cb();
 8004724:	f000 fdf0 	bl	8005308 <tim4_cb>
	}

	/* USER CODE END Callback 1 */
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40001000 	.word	0x40001000
 8004734:	40000800 	.word	0x40000800

08004738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_MspInit+0x4c>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <HAL_MspInit+0x4c>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_MspInit+0x4c>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_MspInit+0x4c>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_MspInit+0x4c>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004770:	6453      	str	r3, [r2, #68]	; 0x44
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <HAL_MspInit+0x4c>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	210f      	movs	r1, #15
 8004782:	f06f 0001 	mvn.w	r0, #1
 8004786:	f000 ff1f 	bl	80055c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	; 0x38
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047a8:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_InitTick+0xe0>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	4a32      	ldr	r2, [pc, #200]	; (8004878 <HAL_InitTick+0xe0>)
 80047ae:	f043 0310 	orr.w	r3, r3, #16
 80047b2:	6413      	str	r3, [r2, #64]	; 0x40
 80047b4:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_InitTick+0xe0>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047c0:	f107 0210 	add.w	r2, r7, #16
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4611      	mov	r1, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fa94 	bl	8008cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047da:	f004 fa65 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 80047de:	6378      	str	r0, [r7, #52]	; 0x34
 80047e0:	e004      	b.n	80047ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047e2:	f004 fa61 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 80047e6:	4603      	mov	r3, r0
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	4a23      	ldr	r2, [pc, #140]	; (800487c <HAL_InitTick+0xe4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	0c9b      	lsrs	r3, r3, #18
 80047f6:	3b01      	subs	r3, #1
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047fa:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_InitTick+0xe8>)
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_InitTick+0xec>)
 80047fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004800:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_InitTick+0xe8>)
 8004802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <HAL_InitTick+0xe8>)
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <HAL_InitTick+0xe8>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <HAL_InitTick+0xe8>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800481a:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_InitTick+0xe8>)
 800481c:	2200      	movs	r2, #0
 800481e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004820:	4817      	ldr	r0, [pc, #92]	; (8004880 <HAL_InitTick+0xe8>)
 8004822:	f004 ff54 	bl	80096ce <HAL_TIM_Base_Init>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800482c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11b      	bne.n	800486c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004834:	4812      	ldr	r0, [pc, #72]	; (8004880 <HAL_InitTick+0xe8>)
 8004836:	f004 ffa1 	bl	800977c <HAL_TIM_Base_Start_IT>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004848:	2036      	movs	r0, #54	; 0x36
 800484a:	f000 fed9 	bl	8005600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b0f      	cmp	r3, #15
 8004852:	d808      	bhi.n	8004866 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004854:	2200      	movs	r2, #0
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	2036      	movs	r0, #54	; 0x36
 800485a:	f000 feb5 	bl	80055c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800485e:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_InitTick+0xf0>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e002      	b.n	800486c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800486c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004870:	4618      	mov	r0, r3
 8004872:	3738      	adds	r7, #56	; 0x38
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	431bde83 	.word	0x431bde83
 8004880:	20004680 	.word	0x20004680
 8004884:	40001000 	.word	0x40001000
 8004888:	20000040 	.word	0x20000040

0800488c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489e:	e7fe      	b.n	800489e <HardFault_Handler+0x4>

080048a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <MemManage_Handler+0x4>

080048a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048aa:	e7fe      	b.n	80048aa <BusFault_Handler+0x4>

080048ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b0:	e7fe      	b.n	80048b0 <UsageFault_Handler+0x4>

080048b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <TIM4_IRQHandler+0x10>)
 80048c6:	f005 f828 	bl	800991a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20004718 	.word	0x20004718

080048d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <USART1_IRQHandler+0x10>)
 80048da:	f005 ffd5 	bl	800a888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20004764 	.word	0x20004764

080048e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048ec:	4802      	ldr	r0, [pc, #8]	; (80048f8 <TIM6_DAC_IRQHandler+0x10>)
 80048ee:	f005 f814 	bl	800991a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20004680 	.word	0x20004680

080048fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
	return 1;
 8004900:	2301      	movs	r3, #1
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <_kill>:

int _kill(int pid, int sig)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004916:	f00a fd2f 	bl	800f378 <__errno>
 800491a:	4603      	mov	r3, r0
 800491c:	2216      	movs	r2, #22
 800491e:	601a      	str	r2, [r3, #0]
	return -1;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_exit>:

void _exit (int status)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004934:	f04f 31ff 	mov.w	r1, #4294967295
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ffe7 	bl	800490c <_kill>
	while (1) {}		/* Make sure we hang here */
 800493e:	e7fe      	b.n	800493e <_exit+0x12>

08004940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e00a      	b.n	8004968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004952:	f3af 8000 	nop.w
 8004956:	4601      	mov	r1, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	60ba      	str	r2, [r7, #8]
 800495e:	b2ca      	uxtb	r2, r1
 8004960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3301      	adds	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	dbf0      	blt.n	8004952 <_read+0x12>
	}

return len;
 8004970:	687b      	ldr	r3, [r7, #4]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e009      	b.n	80049a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	60ba      	str	r2, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fd fa15 	bl	8001dc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	dbf1      	blt.n	800498c <_write+0x12>
	}
	return len;
 80049a8:	687b      	ldr	r3, [r7, #4]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_close>:

int _close(int file)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
	return -1;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049da:	605a      	str	r2, [r3, #4]
	return 0;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <_isatty>:

int _isatty(int file)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
	return 1;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <SystemInit+0x5c>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <SystemInit+0x5c>)
 8004a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004a30:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <SystemInit+0x60>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a11      	ldr	r2, [pc, #68]	; (8004a7c <SystemInit+0x60>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <SystemInit+0x60>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <SystemInit+0x60>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <SystemInit+0x60>)
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <SystemInit+0x64>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <SystemInit+0x60>)
 8004a50:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <SystemInit+0x68>)
 8004a52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <SystemInit+0x60>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <SystemInit+0x60>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <SystemInit+0x60>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <SystemInit+0x5c>)
 8004a68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a6c:	609a      	str	r2, [r3, #8]
#endif
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000ed00 	.word	0xe000ed00
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	fef6ffff 	.word	0xfef6ffff
 8004a84:	24003010 	.word	0x24003010

08004a88 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a8e:	f107 031c 	add.w	r3, r7, #28
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
 8004aa8:	615a      	str	r2, [r3, #20]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004aae:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <MX_TIM3_Init+0xb0>)
 8004ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ad2:	4818      	ldr	r0, [pc, #96]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004ad4:	f004 feca 	bl	800986c <HAL_TIM_PWM_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004ade:	f7ff fe2b 	bl	8004738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004aea:	f107 031c 	add.w	r3, r7, #28
 8004aee:	4619      	mov	r1, r3
 8004af0:	4810      	ldr	r0, [pc, #64]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004af2:	f005 fdcf 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004afc:	f7ff fe1c 	bl	8004738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b00:	2360      	movs	r3, #96	; 0x60
 8004b02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b10:	463b      	mov	r3, r7
 8004b12:	2208      	movs	r2, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	4807      	ldr	r0, [pc, #28]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004b18:	f005 f81e 	bl	8009b58 <HAL_TIM_PWM_ConfigChannel>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004b22:	f7ff fe09 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004b26:	4803      	ldr	r0, [pc, #12]	; (8004b34 <MX_TIM3_Init+0xac>)
 8004b28:	f000 f89c 	bl	8004c64 <HAL_TIM_MspPostInit>

}
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	; 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	200046cc 	.word	0x200046cc
 8004b38:	40000400 	.word	0x40000400

08004b3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b42:	f107 0310 	add.w	r3, r7, #16
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
 8004b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <MX_TIM4_Init+0x98>)
 8004b5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b62:	2263      	movs	r2, #99	; 0x63
 8004b64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b74:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004b80:	4813      	ldr	r0, [pc, #76]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b82:	f004 fda4 	bl	80096ce <HAL_TIM_Base_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004b8c:	f7ff fdd4 	bl	8004738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004b9e:	f005 f8ef 	bl	8009d80 <HAL_TIM_ConfigClockSource>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004ba8:	f7ff fdc6 	bl	8004738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004bac:	2320      	movs	r3, #32
 8004bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4805      	ldr	r0, [pc, #20]	; (8004bd0 <MX_TIM4_Init+0x94>)
 8004bba:	f005 fd6b 	bl	800a694 <HAL_TIMEx_MasterConfigSynchronization>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004bc4:	f7ff fdb8 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004bc8:	bf00      	nop
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20004718 	.word	0x20004718
 8004bd4:	40000800 	.word	0x40000800

08004bd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_TIM_PWM_MspInit+0x38>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10b      	bne.n	8004c02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <HAL_TIM_PWM_MspInit+0x3c>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <HAL_TIM_Base_MspInit+0x44>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_TIM_Base_MspInit+0x48>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <HAL_TIM_Base_MspInit+0x48>)
 8004c30:	f043 0304 	orr.w	r3, r3, #4
 8004c34:	6413      	str	r3, [r2, #64]	; 0x40
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_TIM_Base_MspInit+0x48>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2105      	movs	r1, #5
 8004c46:	201e      	movs	r0, #30
 8004c48:	f000 fcbe 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004c4c:	201e      	movs	r0, #30
 8004c4e:	f000 fcd7 	bl	8005600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40023800 	.word	0x40023800

08004c64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_TIM_MspPostInit+0x64>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d11c      	bne.n	8004cc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_TIM_MspPostInit+0x68>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <HAL_TIM_MspPostInit+0x68>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_TIM_MspPostInit+0x68>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8004c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <HAL_TIM_MspPostInit+0x6c>)
 8004cbc:	f001 ff30 	bl	8006b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004cc0:	bf00      	nop
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40020800 	.word	0x40020800

08004cd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <MX_USART1_UART_Init+0x5c>)
 8004cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004cfa:	220c      	movs	r2, #12
 8004cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_USART1_UART_Init+0x58>)
 8004d18:	f005 fd68 	bl	800a7ec <HAL_UART_Init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004d22:	f7ff fd09 	bl	8004738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20004764 	.word	0x20004764
 8004d30:	40011000 	.word	0x40011000

08004d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0ae      	sub	sp, #184	; 0xb8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	2290      	movs	r2, #144	; 0x90
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f00a fa6a 	bl	800f22e <memset>
  if(uartHandle->Instance==USART1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <HAL_UART_MspInit+0xec>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d159      	bne.n	8004e18 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4618      	mov	r0, r3
 8004d72:	f003 fff3 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004d7c:	f7ff fcdc 	bl	8004738 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6313      	str	r3, [r2, #48]	; 0x30
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <HAL_UART_MspInit+0xf0>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dca:	2307      	movs	r3, #7
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004dd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4814      	ldr	r0, [pc, #80]	; (8004e28 <HAL_UART_MspInit+0xf4>)
 8004dd8:	f001 fea2 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de4:	2302      	movs	r3, #2
 8004de6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004df6:	2307      	movs	r3, #7
 8004df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4809      	ldr	r0, [pc, #36]	; (8004e28 <HAL_UART_MspInit+0xf4>)
 8004e04:	f001 fe8c 	bl	8006b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2105      	movs	r1, #5
 8004e0c:	2025      	movs	r0, #37	; 0x25
 8004e0e:	f000 fbdb 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e12:	2025      	movs	r0, #37	; 0x25
 8004e14:	f000 fbf4 	bl	8005600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004e18:	bf00      	nop
 8004e1a:	37b8      	adds	r7, #184	; 0xb8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40020000 	.word	0x40020000

08004e2c <freeRTOS_user_init>:
/**
 * @brief Create the FreeRTOS objects and tasks.
 * @return true if the tasks are created, false otherwise.
 */

void freeRTOS_user_init(void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af02      	add	r7, sp, #8
	bool retval = true;
 8004e32:	2301      	movs	r3, #1
 8004e34:	71fb      	strb	r3, [r7, #7]

	sem_fruit_control = xSemaphoreCreateBinary();
 8004e36:	2203      	movs	r2, #3
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f007 f910 	bl	800c060 <xQueueGenericCreate>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <freeRTOS_user_init+0x150>)
 8004e44:	6013      	str	r3, [r2, #0]
	if (sem_fruit_control == NULL)
 8004e46:	4b4d      	ldr	r3, [pc, #308]	; (8004f7c <freeRTOS_user_init+0x150>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <freeRTOS_user_init+0x26>
		retval = false;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	71fb      	strb	r3, [r7, #7]

	sem_touch = xSemaphoreCreateBinary();
 8004e52:	2203      	movs	r2, #3
 8004e54:	2100      	movs	r1, #0
 8004e56:	2001      	movs	r0, #1
 8004e58:	f007 f902 	bl	800c060 <xQueueGenericCreate>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a48      	ldr	r2, [pc, #288]	; (8004f80 <freeRTOS_user_init+0x154>)
 8004e60:	6013      	str	r3, [r2, #0]
	if (sem_touch == NULL)
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <freeRTOS_user_init+0x154>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <freeRTOS_user_init+0x42>
		retval = false;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	71fb      	strb	r3, [r7, #7]

	sem_disp = xSemaphoreCreateBinary();
 8004e6e:	2203      	movs	r2, #3
 8004e70:	2100      	movs	r1, #0
 8004e72:	2001      	movs	r0, #1
 8004e74:	f007 f8f4 	bl	800c060 <xQueueGenericCreate>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a42      	ldr	r2, [pc, #264]	; (8004f84 <freeRTOS_user_init+0x158>)
 8004e7c:	6013      	str	r3, [r2, #0]
	if (sem_touch == NULL)
 8004e7e:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <freeRTOS_user_init+0x154>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <freeRTOS_user_init+0x5e>
		retval = false;
 8004e86:	2300      	movs	r3, #0
 8004e88:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate(task_FSM,		//Task function
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <freeRTOS_user_init+0x15c>)
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	2302      	movs	r3, #2
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2300      	movs	r3, #0
 8004e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e98:	493c      	ldr	r1, [pc, #240]	; (8004f8c <freeRTOS_user_init+0x160>)
 8004e9a:	483d      	ldr	r0, [pc, #244]	; (8004f90 <freeRTOS_user_init+0x164>)
 8004e9c:	f007 ff65 	bl	800cd6a <xTaskCreate>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			2,								//Task priority
			&task_FSM_handle);			//Task handle

	retval &= xTaskCreate(task_fruit_launch,		//Task function
 8004eb0:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <freeRTOS_user_init+0x168>)
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ebe:	4933      	ldr	r1, [pc, #204]	; (8004f8c <freeRTOS_user_init+0x160>)
 8004ec0:	4835      	ldr	r0, [pc, #212]	; (8004f98 <freeRTOS_user_init+0x16c>)
 8004ec2:	f007 ff52 	bl	800cd6a <xTaskCreate>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			1,								//Task priority
			&task_fruit_launch_handle);			//Task handle

	retval &= xTaskCreate(task_fruit_control,		//Task function
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <freeRTOS_user_init+0x170>)
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	2302      	movs	r3, #2
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee4:	492e      	ldr	r1, [pc, #184]	; (8004fa0 <freeRTOS_user_init+0x174>)
 8004ee6:	482f      	ldr	r0, [pc, #188]	; (8004fa4 <freeRTOS_user_init+0x178>)
 8004ee8:	f007 ff3f 	bl	800cd6a <xTaskCreate>
 8004eec:	4602      	mov	r2, r0
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			2,								//Task priority
			&task_fruit_control_handle);			//Task handle

	retval &= xTaskCreate(task_display_game,		//Task function
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <freeRTOS_user_init+0x17c>)
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	2302      	movs	r3, #2
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f0a:	4928      	ldr	r1, [pc, #160]	; (8004fac <freeRTOS_user_init+0x180>)
 8004f0c:	4828      	ldr	r0, [pc, #160]	; (8004fb0 <freeRTOS_user_init+0x184>)
 8004f0e:	f007 ff2c 	bl	800cd6a <xTaskCreate>
 8004f12:	4602      	mov	r2, r0
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			2,								//Task priority
			&task_display_game_handle);			//Task handle

	retval &= xTaskCreate(task_touch_fct,		//Task function
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <freeRTOS_user_init+0x188>)
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	2303      	movs	r3, #3
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f30:	4921      	ldr	r1, [pc, #132]	; (8004fb8 <freeRTOS_user_init+0x18c>)
 8004f32:	4822      	ldr	r0, [pc, #136]	; (8004fbc <freeRTOS_user_init+0x190>)
 8004f34:	f007 ff19 	bl	800cd6a <xTaskCreate>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			3,								//Task priority
			&task_touch_handle);			//Task handle

	sw_tim_touch_handle = xTimerCreate("Timer touch", //Timer description
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <freeRTOS_user_init+0x194>)
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2114      	movs	r1, #20
 8004f52:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <freeRTOS_user_init+0x198>)
 8004f54:	f009 f84e 	bl	800dff4 <xTimerCreate>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <freeRTOS_user_init+0x19c>)
 8004f5c:	6013      	str	r3, [r2, #0]
			pdMS_TO_TICKS(20), //Timer period
			pdTRUE, //Timer is periodic
			NULL, //Timer ID
			sw_tim_touch_cb); //Timer callback fct.

	sw_tim_disp_handle = xTimerCreate("Timer display", //Timer description
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <freeRTOS_user_init+0x1a0>)
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	2201      	movs	r2, #1
 8004f66:	2121      	movs	r1, #33	; 0x21
 8004f68:	4819      	ldr	r0, [pc, #100]	; (8004fd0 <freeRTOS_user_init+0x1a4>)
 8004f6a:	f009 f843 	bl	800dff4 <xTimerCreate>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <freeRTOS_user_init+0x1a8>)
 8004f72:	6013      	str	r3, [r2, #0]
			pdMS_TO_TICKS(33), //Timer period
			pdTRUE, //Timer is periodic
			NULL, //Timer ID
			sw_tim_disp_cb); //Timer callback fct.
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20004834 	.word	0x20004834
 8004f80:	20004838 	.word	0x20004838
 8004f84:	2000483c 	.word	0x2000483c
 8004f88:	20004818 	.word	0x20004818
 8004f8c:	08010a2c 	.word	0x08010a2c
 8004f90:	08004fd9 	.word	0x08004fd9
 8004f94:	2000481c 	.word	0x2000481c
 8004f98:	080051a5 	.word	0x080051a5
 8004f9c:	20004820 	.word	0x20004820
 8004fa0:	08010a3c 	.word	0x08010a3c
 8004fa4:	08005201 	.word	0x08005201
 8004fa8:	20004828 	.word	0x20004828
 8004fac:	08010a4c 	.word	0x08010a4c
 8004fb0:	08005235 	.word	0x08005235
 8004fb4:	20004824 	.word	0x20004824
 8004fb8:	08010a5c 	.word	0x08010a5c
 8004fbc:	0800525d 	.word	0x0800525d
 8004fc0:	08005321 	.word	0x08005321
 8004fc4:	08010a6c 	.word	0x08010a6c
 8004fc8:	2000482c 	.word	0x2000482c
 8004fcc:	08005339 	.word	0x08005339
 8004fd0:	08010a78 	.word	0x08010a78
 8004fd4:	20004830 	.word	0x20004830

08004fd8 <task_FSM>:
/**
 * @brief FSM task, controls, start and game over.
 */
static void task_FSM(void *pvParameters) {
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
	while (1) {
		switch (state) {
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <task_FSM+0x178>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f000 8092 	beq.w	800510e <task_FSM+0x136>
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	f300 80a7 	bgt.w	800513e <task_FSM+0x166>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <task_FSM+0x22>
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d03f      	beq.n	8005078 <task_FSM+0xa0>
 8004ff8:	e0a1      	b.n	800513e <task_FSM+0x166>
		case menu:
			//display the menu graphic
			update_screen_menu();
 8004ffa:	f7fe f91f 	bl	800323c <update_screen_menu>
			//wait screen touched
			while (touch_points_x[0] == 0 && touch_points_y[0] == 0)
 8004ffe:	bf00      	nop
 8005000:	4b54      	ldr	r3, [pc, #336]	; (8005154 <task_FSM+0x17c>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <task_FSM+0x38>
 8005008:	4b53      	ldr	r3, [pc, #332]	; (8005158 <task_FSM+0x180>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f7      	beq.n	8005000 <task_FSM+0x28>
				;

			//if "play" is touched
			if (touch_points_x[0] > 290 && touch_points_x[0] < 490
 8005010:	4b50      	ldr	r3, [pc, #320]	; (8005154 <task_FSM+0x17c>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8005018:	d924      	bls.n	8005064 <task_FSM+0x8c>
 800501a:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <task_FSM+0x17c>)
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8005022:	d21f      	bcs.n	8005064 <task_FSM+0x8c>
					&& touch_points_y[0] > 295 && touch_points_y[0] < 360) {
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <task_FSM+0x180>)
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800502c:	d31a      	bcc.n	8005064 <task_FSM+0x8c>
 800502e:	4b4a      	ldr	r3, [pc, #296]	; (8005158 <task_FSM+0x180>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8005036:	d215      	bcs.n	8005064 <task_FSM+0x8c>
				lives = 3; //reset lives
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <task_FSM+0x184>)
 800503a:	2203      	movs	r2, #3
 800503c:	701a      	strb	r2, [r3, #0]
				game_points = 0; //reset game points
 800503e:	4b48      	ldr	r3, [pc, #288]	; (8005160 <task_FSM+0x188>)
 8005040:	2200      	movs	r2, #0
 8005042:	801a      	strh	r2, [r3, #0]
				//start the display game task
				xTimerStart(sw_tim_disp_handle, portMAX_DELAY);
 8005044:	4b47      	ldr	r3, [pc, #284]	; (8005164 <task_FSM+0x18c>)
 8005046:	681c      	ldr	r4, [r3, #0]
 8005048:	f008 f944 	bl	800d2d4 <xTaskGetTickCount>
 800504c:	4602      	mov	r2, r0
 800504e:	f04f 33ff 	mov.w	r3, #4294967295
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	2101      	movs	r1, #1
 8005058:	4620      	mov	r0, r4
 800505a:	f009 f829 	bl	800e0b0 <xTimerGenericCommand>
				state = game;
 800505e:	4b3c      	ldr	r3, [pc, #240]	; (8005150 <task_FSM+0x178>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
			}

			//wait screen released
			while (touch_points_x[0] != 0 && touch_points_y[0] != 0)
 8005064:	bf00      	nop
 8005066:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <task_FSM+0x17c>)
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d06b      	beq.n	8005146 <task_FSM+0x16e>
 800506e:	4b3a      	ldr	r3, [pc, #232]	; (8005158 <task_FSM+0x180>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f7      	bne.n	8005066 <task_FSM+0x8e>
				;
			break;
 8005076:	e066      	b.n	8005146 <task_FSM+0x16e>

		case game:
			//if there are no lives left
			if (lives <= 0) {
 8005078:	4b38      	ldr	r3, [pc, #224]	; (800515c <task_FSM+0x184>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d142      	bne.n	8005106 <task_FSM+0x12e>
				state = gameover;
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <task_FSM+0x178>)
 8005082:	2202      	movs	r2, #2
 8005084:	701a      	strb	r2, [r3, #0]
				//stop the display game task
				xTimerStop(sw_tim_disp_handle, portMAX_DELAY);
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <task_FSM+0x18c>)
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2300      	movs	r3, #0
 8005092:	2200      	movs	r2, #0
 8005094:	2103      	movs	r1, #3
 8005096:	f009 f80b 	bl	800e0b0 <xTimerGenericCommand>

				//reset all objects
				fruit1.type = off;
 800509a:	4b33      	ldr	r3, [pc, #204]	; (8005168 <task_FSM+0x190>)
 800509c:	2200      	movs	r2, #0
 800509e:	751a      	strb	r2, [r3, #20]
				fruit2.type = off;
 80050a0:	4b32      	ldr	r3, [pc, #200]	; (800516c <task_FSM+0x194>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	751a      	strb	r2, [r3, #20]
				fruit3.type = off;
 80050a6:	4b32      	ldr	r3, [pc, #200]	; (8005170 <task_FSM+0x198>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	751a      	strb	r2, [r3, #20]
				fruit4.type = off;
 80050ac:	4b31      	ldr	r3, [pc, #196]	; (8005174 <task_FSM+0x19c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	751a      	strb	r2, [r3, #20]
				fruit5.type = off;
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <task_FSM+0x1a0>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	751a      	strb	r2, [r3, #20]
				slice1_1.type = off;
 80050b8:	4b30      	ldr	r3, [pc, #192]	; (800517c <task_FSM+0x1a4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	761a      	strb	r2, [r3, #24]
				slice1_2.type = off;
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <task_FSM+0x1a8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	761a      	strb	r2, [r3, #24]
				slice2_1.type = off;
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <task_FSM+0x1ac>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	761a      	strb	r2, [r3, #24]
				slice2_2.type = off;
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <task_FSM+0x1b0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	761a      	strb	r2, [r3, #24]
				slice3_1.type = off;
 80050d0:	4b2e      	ldr	r3, [pc, #184]	; (800518c <task_FSM+0x1b4>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	761a      	strb	r2, [r3, #24]
				slice3_2.type = off;
 80050d6:	4b2e      	ldr	r3, [pc, #184]	; (8005190 <task_FSM+0x1b8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	761a      	strb	r2, [r3, #24]
				slice4_1.type = off;
 80050dc:	4b2d      	ldr	r3, [pc, #180]	; (8005194 <task_FSM+0x1bc>)
 80050de:	2200      	movs	r2, #0
 80050e0:	761a      	strb	r2, [r3, #24]
				slice4_2.type = off;
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <task_FSM+0x1c0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	761a      	strb	r2, [r3, #24]
				slice5_1.type = off;
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <task_FSM+0x1c4>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	761a      	strb	r2, [r3, #24]
				slice5_2.type = off;
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <task_FSM+0x1c8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	761a      	strb	r2, [r3, #24]

				//wait screen released
				while (touch_points_x[0] != 0 && touch_points_y[0] != 0)
 80050f4:	bf00      	nop
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <task_FSM+0x17c>)
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <task_FSM+0x12e>
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <task_FSM+0x180>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f7      	bne.n	80050f6 <task_FSM+0x11e>
					;
			}

			vTaskDelay(pdMS_TO_TICKS(33)); //max 30Hz
 8005106:	2021      	movs	r0, #33	; 0x21
 8005108:	f007 ff8c 	bl	800d024 <vTaskDelay>
			break;
 800510c:	e01e      	b.n	800514c <task_FSM+0x174>

		case gameover:
			//display game over
			update_screen_gameover();
 800510e:	f7fe f8a7 	bl	8003260 <update_screen_gameover>

			//wait screen touched
			while (touch_points_x[0] == 0 && touch_points_y[0] == 0)
 8005112:	bf00      	nop
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <task_FSM+0x17c>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <task_FSM+0x14c>
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <task_FSM+0x180>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f7      	beq.n	8005114 <task_FSM+0x13c>
				;

			state = menu;
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <task_FSM+0x178>)
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]

			//wait screen released
			while (touch_points_x[0] != 0 && touch_points_y[0] != 0)
 800512a:	bf00      	nop
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <task_FSM+0x17c>)
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <task_FSM+0x172>
 8005134:	4b08      	ldr	r3, [pc, #32]	; (8005158 <task_FSM+0x180>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f7      	bne.n	800512c <task_FSM+0x154>
				;
			break;
 800513c:	e005      	b.n	800514a <task_FSM+0x172>

		default:
			state = menu;
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <task_FSM+0x178>)
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e74c      	b.n	8004fe0 <task_FSM+0x8>
			break;
 8005146:	bf00      	nop
 8005148:	e74a      	b.n	8004fe0 <task_FSM+0x8>
			break;
 800514a:	bf00      	nop
		switch (state) {
 800514c:	e748      	b.n	8004fe0 <task_FSM+0x8>
 800514e:	bf00      	nop
 8005150:	20004817 	.word	0x20004817
 8005154:	200047ec 	.word	0x200047ec
 8005158:	20004800 	.word	0x20004800
 800515c:	20004816 	.word	0x20004816
 8005160:	20004814 	.word	0x20004814
 8005164:	20004830 	.word	0x20004830
 8005168:	200043cc 	.word	0x200043cc
 800516c:	200043e4 	.word	0x200043e4
 8005170:	200043fc 	.word	0x200043fc
 8005174:	20004414 	.word	0x20004414
 8005178:	2000442c 	.word	0x2000442c
 800517c:	20004444 	.word	0x20004444
 8005180:	20004460 	.word	0x20004460
 8005184:	2000447c 	.word	0x2000447c
 8005188:	20004498 	.word	0x20004498
 800518c:	200044b4 	.word	0x200044b4
 8005190:	200044d0 	.word	0x200044d0
 8005194:	200044ec 	.word	0x200044ec
 8005198:	20004508 	.word	0x20004508
 800519c:	20004524 	.word	0x20004524
 80051a0:	20004540 	.word	0x20004540

080051a4 <task_fruit_launch>:
}

/**
 * @brief Launches fruits when necessary.
 */
static void task_fruit_launch(void *pvParameters) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	while (1) {
		//if all fruits are off
		if (state == game && fruit1.type == off && fruit2.type == off
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <task_fruit_launch+0x44>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d115      	bne.n	80051e0 <task_fruit_launch+0x3c>
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <task_fruit_launch+0x48>)
 80051b6:	7d1b      	ldrb	r3, [r3, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <task_fruit_launch+0x3c>
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <task_fruit_launch+0x4c>)
 80051be:	7d1b      	ldrb	r3, [r3, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <task_fruit_launch+0x3c>
				&& fruit3.type == off && fruit4.type == off
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <task_fruit_launch+0x50>)
 80051c6:	7d1b      	ldrb	r3, [r3, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <task_fruit_launch+0x3c>
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <task_fruit_launch+0x54>)
 80051ce:	7d1b      	ldrb	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <task_fruit_launch+0x3c>
				&& fruit5.type == off)
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <task_fruit_launch+0x58>)
 80051d6:	7d1b      	ldrb	r3, [r3, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <task_fruit_launch+0x3c>
			fruit_launch(); //new random launch sequence
 80051dc:	f7fd f9c6 	bl	800256c <fruit_launch>
		vTaskDelay(pdMS_TO_TICKS(10));
 80051e0:	200a      	movs	r0, #10
 80051e2:	f007 ff1f 	bl	800d024 <vTaskDelay>
		if (state == game && fruit1.type == off && fruit2.type == off
 80051e6:	e7e1      	b.n	80051ac <task_fruit_launch+0x8>
 80051e8:	20004817 	.word	0x20004817
 80051ec:	200043cc 	.word	0x200043cc
 80051f0:	200043e4 	.word	0x200043e4
 80051f4:	200043fc 	.word	0x200043fc
 80051f8:	20004414 	.word	0x20004414
 80051fc:	2000442c 	.word	0x2000442c

08005200 <task_fruit_control>:
}

/**
 * @brief Controls all objects (fruits&slices) actions, position, ...
 */
static void task_fruit_control(void *pvParameters) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8005208:	4808      	ldr	r0, [pc, #32]	; (800522c <task_fruit_control+0x2c>)
 800520a:	f004 fab7 	bl	800977c <HAL_TIM_Base_Start_IT>
	BaseType_t retval;
	while (1) {
		//Wait for the semaphore indefinitely
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <task_fruit_control+0x30>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f04f 31ff 	mov.w	r1, #4294967295
 8005216:	4618      	mov	r0, r3
 8005218:	f007 faaa 	bl	800c770 <xQueueSemaphoreTake>
 800521c:	60f8      	str	r0, [r7, #12]
		if (retval == pdTRUE) {
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d1f4      	bne.n	800520e <task_fruit_control+0xe>
			fruit_control();
 8005224:	f7fd fa7a 	bl	800271c <fruit_control>
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 8005228:	e7f1      	b.n	800520e <task_fruit_control+0xe>
 800522a:	bf00      	nop
 800522c:	20004718 	.word	0x20004718
 8005230:	20004834 	.word	0x20004834

08005234 <task_display_game>:
}

/**
 * @brief Displays the game objects.
 */
static void task_display_game(void *pvParameters) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	BaseType_t retval;

	while (1) {
		//Wait for the semaphore indefinitely
		retval = xSemaphoreTake(sem_disp, portMAX_DELAY);
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <task_display_game+0x24>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f04f 31ff 	mov.w	r1, #4294967295
 8005244:	4618      	mov	r0, r3
 8005246:	f007 fa93 	bl	800c770 <xQueueSemaphoreTake>
 800524a:	60f8      	str	r0, [r7, #12]
		if (retval == pdTRUE) {
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d1f4      	bne.n	800523c <task_display_game+0x8>
			//max 30Hz
			update_screen_game();
 8005252:	f7fd ff1f 	bl	8003094 <update_screen_game>
		retval = xSemaphoreTake(sem_disp, portMAX_DELAY);
 8005256:	e7f1      	b.n	800523c <task_display_game+0x8>
 8005258:	2000483c 	.word	0x2000483c

0800525c <task_touch_fct>:
}

/**
 * @brief Controls user touch inputs.
 */
static void task_touch_fct(void *pvParameters) {
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b08b      	sub	sp, #44	; 0x2c
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
	TS_StateTypeDef TS_State;
	BaseType_t retval;
	xTimerStart(sw_tim_touch_handle, portMAX_DELAY);
 8005264:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <task_touch_fct+0x9c>)
 8005266:	681c      	ldr	r4, [r3, #0]
 8005268:	f008 f834 	bl	800d2d4 <xTaskGetTickCount>
 800526c:	4602      	mov	r2, r0
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	2101      	movs	r1, #1
 8005278:	4620      	mov	r0, r4
 800527a:	f008 ff19 	bl	800e0b0 <xTimerGenericCommand>
	while (1) {
		retval = xSemaphoreTake(sem_touch, portMAX_DELAY);
 800527e:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <task_touch_fct+0xa0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f04f 31ff 	mov.w	r1, #4294967295
 8005286:	4618      	mov	r0, r3
 8005288:	f007 fa72 	bl	800c770 <xQueueSemaphoreTake>
 800528c:	61b8      	str	r0, [r7, #24]

		if (retval == pdTRUE) {
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d1f4      	bne.n	800527e <task_touch_fct+0x22>
			//50Hz

			BSP_TS_GetState(&TS_State);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4618      	mov	r0, r3
 800529a:	f7fc f8ef 	bl	800147c <BSP_TS_GetState>
			//shifts touch points buffer to make place for new value
			for (int i = TOUCH_CIRCBUFFER_SIZE - 1; i > 0; i--) {
 800529e:	2309      	movs	r3, #9
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e014      	b.n	80052ce <task_touch_fct+0x72>
				touch_points_x[i] = touch_points_x[i - 1];
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <task_touch_fct+0xa4>)
 80052aa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <task_touch_fct+0xa4>)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				touch_points_y[i] = touch_points_y[i - 1];
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	4a12      	ldr	r2, [pc, #72]	; (8005304 <task_touch_fct+0xa8>)
 80052bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80052c0:	4a10      	ldr	r2, [pc, #64]	; (8005304 <task_touch_fct+0xa8>)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = TOUCH_CIRCBUFFER_SIZE - 1; i > 0; i--) {
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dce7      	bgt.n	80052a4 <task_touch_fct+0x48>
			}

			//If at least one finger is on the touch
			if (TS_State.touchDetected) {
 80052d4:	7b3b      	ldrb	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <task_touch_fct+0x8c>
				//save the new point in the array
				touch_points_x[0] = TS_State.touchX[0];
 80052da:	89fa      	ldrh	r2, [r7, #14]
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <task_touch_fct+0xa4>)
 80052de:	801a      	strh	r2, [r3, #0]
				touch_points_y[0] = TS_State.touchY[0];
 80052e0:	8a7a      	ldrh	r2, [r7, #18]
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <task_touch_fct+0xa8>)
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e7ca      	b.n	800527e <task_touch_fct+0x22>

			} else {
				//interpreted as no touch
				touch_points_x[0] = 0;
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <task_touch_fct+0xa4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	801a      	strh	r2, [r3, #0]
				touch_points_y[0] = 0;
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <task_touch_fct+0xa8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	801a      	strh	r2, [r3, #0]
		retval = xSemaphoreTake(sem_touch, portMAX_DELAY);
 80052f4:	e7c3      	b.n	800527e <task_touch_fct+0x22>
 80052f6:	bf00      	nop
 80052f8:	2000482c 	.word	0x2000482c
 80052fc:	20004838 	.word	0x20004838
 8005300:	200047ec 	.word	0x200047ec
 8005304:	20004800 	.word	0x20004800

08005308 <tim4_cb>:
}

/**
 * @brief TIM4 callback.
 */
void tim4_cb() {
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
	//10ms - 100Hz
	//Unlocks fruit control task
	xSemaphoreGiveFromISR(sem_fruit_control, NULL);
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <tim4_cb+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f007 f8b0 	bl	800c478 <xQueueGiveFromISR>
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20004834 	.word	0x20004834

08005320 <sw_tim_touch_cb>:
static void sw_tim_touch_cb() {
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
	//20ms - 50Hz
	//Unlocks touch task
	xSemaphoreGiveFromISR(sem_touch, NULL);
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <sw_tim_touch_cb+0x14>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f007 f8a4 	bl	800c478 <xQueueGiveFromISR>
}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20004838 	.word	0x20004838

08005338 <sw_tim_disp_cb>:

static void sw_tim_disp_cb() {
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
	//33ms - 30Hz
	//Unlocks Display game task
	xSemaphoreGiveFromISR(sem_disp, NULL);
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <sw_tim_disp_cb+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f007 f898 	bl	800c478 <xQueueGiveFromISR>
}
 8005348:	bf00      	nop
 800534a:	bd80      	pop	{r7, pc}
 800534c:	2000483c 	.word	0x2000483c

08005350 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8005350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005356:	e003      	b.n	8005360 <LoopCopyDataInit>

08005358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800535a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800535c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800535e:	3104      	adds	r1, #4

08005360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005360:	480b      	ldr	r0, [pc, #44]	; (8005390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005368:	d3f6      	bcc.n	8005358 <CopyDataInit>
  ldr  r2, =_sbss
 800536a:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800536c:	e002      	b.n	8005374 <LoopFillZerobss>

0800536e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800536e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005370:	f842 3b04 	str.w	r3, [r2], #4

08005374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005378:	d3f9      	bcc.n	800536e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800537a:	f7ff fb4f 	bl	8004a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800537e:	f00a f801 	bl	800f384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005382:	f7fe ff99 	bl	80042b8 <main>
  bx  lr    
 8005386:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8005388:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800538c:	081279f8 	.word	0x081279f8
  ldr  r0, =_sdata
 8005390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005394:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8005398:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800539c:	20009374 	.word	0x20009374

080053a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a0:	e7fe      	b.n	80053a0 <ADC_IRQHandler>
	...

080053a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053a8:	4b08      	ldr	r3, [pc, #32]	; (80053cc <HAL_Init+0x28>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a07      	ldr	r2, [pc, #28]	; (80053cc <HAL_Init+0x28>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053b4:	2003      	movs	r0, #3
 80053b6:	f000 f8fc 	bl	80055b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053ba:	200f      	movs	r0, #15
 80053bc:	f7ff f9ec 	bl	8004798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053c0:	f7ff f9c2 	bl	8004748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40023c00 	.word	0x40023c00

080053d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_IncTick+0x20>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_IncTick+0x24>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4413      	add	r3, r2
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_IncTick+0x24>)
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000044 	.word	0x20000044
 80053f4:	20004840 	.word	0x20004840

080053f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return uwTick;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_GetTick+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20004840 	.word	0x20004840

08005410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7ff ffee 	bl	80053f8 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d005      	beq.n	8005436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <HAL_Delay+0x44>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005436:	bf00      	nop
 8005438:	f7ff ffde 	bl	80053f8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d8f7      	bhi.n	8005438 <HAL_Delay+0x28>
  {
  }
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000044 	.word	0x20000044

08005458 <__NVIC_SetPriorityGrouping>:
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <__NVIC_SetPriorityGrouping+0x40>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <__NVIC_SetPriorityGrouping+0x44>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <__NVIC_SetPriorityGrouping+0x40>)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	60d3      	str	r3, [r2, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000ed00 	.word	0xe000ed00
 800549c:	05fa0000 	.word	0x05fa0000

080054a0 <__NVIC_GetPriorityGrouping>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <__NVIC_GetPriorityGrouping+0x18>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 0307 	and.w	r3, r3, #7
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_EnableIRQ>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db0b      	blt.n	80054e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	4907      	ldr	r1, [pc, #28]	; (80054f4 <__NVIC_EnableIRQ+0x38>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2001      	movs	r0, #1
 80054de:	fa00 f202 	lsl.w	r2, r0, r2
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <__NVIC_SetPriority>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db0a      	blt.n	8005522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	490c      	ldr	r1, [pc, #48]	; (8005544 <__NVIC_SetPriority+0x4c>)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	440b      	add	r3, r1
 800551c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005520:	e00a      	b.n	8005538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4908      	ldr	r1, [pc, #32]	; (8005548 <__NVIC_SetPriority+0x50>)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3b04      	subs	r3, #4
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	440b      	add	r3, r1
 8005536:	761a      	strb	r2, [r3, #24]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <NVIC_EncodePriority>:
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf28      	it	cs
 800556a:	2304      	movcs	r3, #4
 800556c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3304      	adds	r3, #4
 8005572:	2b06      	cmp	r3, #6
 8005574:	d902      	bls.n	800557c <NVIC_EncodePriority+0x30>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3b03      	subs	r3, #3
 800557a:	e000      	b.n	800557e <NVIC_EncodePriority+0x32>
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	401a      	ands	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005594:	f04f 31ff 	mov.w	r1, #4294967295
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43d9      	mvns	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	4313      	orrs	r3, r2
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	; 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff4c 	bl	8005458 <__NVIC_SetPriorityGrouping>
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055da:	f7ff ff61 	bl	80054a0 <__NVIC_GetPriorityGrouping>
 80055de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f7ff ffb1 	bl	800554c <NVIC_EncodePriority>
 80055ea:	4602      	mov	r2, r0
 80055ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff ff80 	bl	80054f8 <__NVIC_SetPriority>
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ff54 	bl	80054bc <__NVIC_EnableIRQ>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800562a:	f7ff fee5 	bl	80053f8 <HAL_GetTick>
 800562e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d008      	beq.n	800564e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2280      	movs	r2, #128	; 0x80
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e052      	b.n	80056f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0216 	bic.w	r2, r2, #22
 800565c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800566c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_DMA_Abort+0x62>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0208 	bic.w	r2, r2, #8
 800568c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800569e:	e013      	b.n	80056c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056a0:	f7ff feaa 	bl	80053f8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d90c      	bls.n	80056c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2203      	movs	r2, #3
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e015      	b.n	80056f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e4      	bne.n	80056a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056da:	223f      	movs	r2, #63	; 0x3f
 80056dc:	409a      	lsls	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d004      	beq.n	800571a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e00c      	b.n	8005734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2205      	movs	r2, #5
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e049      	b.n	80057e6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc fcb2 	bl	80020d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	f023 0107 	bic.w	r1, r3, #7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <HAL_DMA2D_Init+0xb0>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68d1      	ldr	r1, [r2, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	430b      	orrs	r3, r1
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	051a      	lsls	r2, r3, #20
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	055b      	lsls	r3, r3, #21
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	ffffc000 	.word	0xffffc000

080057f4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_DMA2D_Start+0x1c>
 800580c:	2302      	movs	r3, #2
 800580e:	e018      	b.n	8005842 <HAL_DMA2D_Start+0x4e>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9a2 	bl	8005b74 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d056      	beq.n	8005914 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005866:	f7ff fdc7 	bl	80053f8 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800586c:	e04b      	b.n	8005906 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f043 0202 	orr.w	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2221      	movs	r2, #33	; 0x21
 80058b2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2204      	movs	r2, #4
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0a5      	b.n	8005a14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d01a      	beq.n	8005906 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058d0:	f7ff fd92 	bl	80053f8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <HAL_DMA2D_PollForTransfer+0x9c>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e086      	b.n	8005a14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ac      	beq.n	800586e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d061      	beq.n	80059fa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005936:	f7ff fd5f 	bl	80053f8 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800593c:	e056      	b.n	80059ec <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02e      	beq.n	80059ae <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f043 0204 	orr.w	r2, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	f043 0202 	orr.w	r2, r3, #2
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2229      	movs	r2, #41	; 0x29
 8005998:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e032      	b.n	8005a14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d01a      	beq.n	80059ec <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7ff fd1f 	bl	80053f8 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <HAL_DMA2D_PollForTransfer+0x182>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10f      	bne.n	80059ec <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2203      	movs	r2, #3
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e013      	b.n	8005a14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0a1      	beq.n	800593e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2212      	movs	r2, #18
 8005a00:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_DMA2D_ConfigLayer+0x20>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e084      	b.n	8005b46 <HAL_DMA2D_ConfigLayer+0x12a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	3320      	adds	r3, #32
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a70:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005a7c:	4b35      	ldr	r3, [pc, #212]	; (8005b54 <HAL_DMA2D_ConfigLayer+0x138>)
 8005a7e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b0a      	cmp	r3, #10
 8005a86:	d003      	beq.n	8005a90 <HAL_DMA2D_ConfigLayer+0x74>
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b09      	cmp	r3, #9
 8005a8e:	d107      	bne.n	8005aa0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e005      	b.n	8005aac <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d120      	bne.n	8005af4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	ea02 0103 	and.w	r1, r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b0a      	cmp	r3, #10
 8005ada:	d003      	beq.n	8005ae4 <HAL_DMA2D_ConfigLayer+0xc8>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d127      	bne.n	8005b34 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
 8005af2:	e01f      	b.n	8005b34 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	ea02 0103 	and.w	r1, r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b0a      	cmp	r3, #10
 8005b1c:	d003      	beq.n	8005b26 <HAL_DMA2D_ConfigLayer+0x10a>
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b09      	cmp	r3, #9
 8005b24:	d106      	bne.n	8005b34 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b32:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	ff33000f 	.word	0xff33000f

08005b58 <HAL_DMA2D_GetState>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL state
  */
HAL_DMA2D_StateTypeDef HAL_DMA2D_GetState(DMA2D_HandleTypeDef *hdma2d)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return hdma2d->State;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b66:	b2db      	uxtb	r3, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b08b      	sub	sp, #44	; 0x2c
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b88:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	041a      	lsls	r2, r3, #16
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bac:	d174      	bne.n	8005c98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bc4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d108      	bne.n	8005be6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	e053      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d106      	bne.n	8005bfc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfa:	e048      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d111      	bne.n	8005c28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	0cdb      	lsrs	r3, r3, #19
 8005c08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	0a9b      	lsrs	r3, r3, #10
 8005c0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	02db      	lsls	r3, r3, #11
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	e032      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d117      	bne.n	8005c60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	0fdb      	lsrs	r3, r3, #31
 8005c34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	0cdb      	lsrs	r3, r3, #19
 8005c3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	0adb      	lsrs	r3, r3, #11
 8005c40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	08db      	lsrs	r3, r3, #3
 8005c46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	431a      	orrs	r2, r3
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	03db      	lsls	r3, r3, #15
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	e016      	b.n	8005c8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	0b1b      	lsrs	r3, r3, #12
 8005c70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	431a      	orrs	r2, r3
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c96:	e003      	b.n	8005ca0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	60da      	str	r2, [r3, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	372c      	adds	r7, #44	; 0x2c
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	019a      	lsls	r2, r3, #6
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cec:	f7ff fb84 	bl	80053f8 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005cf2:	e009      	b.n	8005d08 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005cf4:	f7ff fb80 	bl	80053f8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d02:	d901      	bls.n	8005d08 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e015      	b.n	8005d34 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ee      	beq.n	8005cf4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	019a      	lsls	r2, r3, #6
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	ea42 0103 	orr.w	r1, r2, r3
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	041a      	lsls	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e109      	b.n	8005f64 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	7c5b      	ldrb	r3, [r3, #17]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc fac6 	bl	80022ec <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d8e:	f7ff fb33 	bl	80053f8 <HAL_GetTick>
 8005d92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005d94:	e009      	b.n	8005daa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005d96:	f7ff fb2f 	bl	80053f8 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da4:	d901      	bls.n	8005daa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e0dc      	b.n	8005f64 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ed      	beq.n	8005d96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b69      	ldr	r3, [pc, #420]	; (8005f6c <HAL_DSI_Init+0x230>)
 8005dc8:	400b      	ands	r3, r1
 8005dca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005de2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005dea:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f7ff faf6 	bl	8005410 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e24:	f7ff fae8 	bl	80053f8 <HAL_GetTick>
 8005e28:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005e2a:	e009      	b.n	8005e40 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005e2c:	f7ff fae4 	bl	80053f8 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3a:	d901      	bls.n	8005e40 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e091      	b.n	8005f64 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ed      	beq.n	8005e2c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0206 	orr.w	r2, r2, #6
 8005e60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0203 	bic.w	r2, r2, #3
 8005e74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0203 	bic.w	r2, r2, #3
 8005ea2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6899      	ldr	r1, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_DSI_Init+0x1b0>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	e000      	b.n	8005eee <HAL_DSI_Init+0x1b2>
 8005eec:	2301      	movs	r3, #1
 8005eee:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <HAL_DSI_Init+0x234>)
 8005ef4:	fb03 f202 	mul.w	r2, r3, r2
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	409a      	lsls	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005f24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	fffc8603 	.word	0xfffc8603
 8005f70:	003d0900 	.word	0x003d0900

08005f74 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e066      	b.n	8006054 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0208 	bic.w	r2, r2, #8
 8005fa0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	605a      	str	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0206 	bic.w	r2, r2, #6
 8005fe6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8006012:	2300      	movs	r3, #0
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006026:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fc f976 	bl	800232c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7c1b      	ldrb	r3, [r3, #16]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_DSI_ConfigErrorMonitor+0x16>
 800606e:	2302      	movs	r3, #2
 8006070:	e0aa      	b.n	80061c8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060ac:	430b      	orrs	r3, r1
 80060ae:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80060cc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0202 	orr.w	r2, r2, #2
 8006108:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 020c 	orr.w	r2, r2, #12
 8006126:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0210 	orr.w	r2, r2, #16
 8006144:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0220 	orr.w	r2, r2, #32
 8006162:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006180:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800619e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80061bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7c1b      	ldrb	r3, [r3, #16]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_DSI_SetGenericVCID+0x16>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e016      	b.n	8006218 <HAL_DSI_SetGenericVCID+0x44>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0203 	bic.w	r2, r2, #3
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7c1b      	ldrb	r3, [r3, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_DSI_ConfigVideoMode+0x16>
 8006236:	2302      	movs	r3, #2
 8006238:	e1ee      	b.n	8006618 <HAL_DSI_ConfigVideoMode+0x3f4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0203 	bic.w	r2, r2, #3
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4b8b      	ldr	r3, [pc, #556]	; (80064c0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006292:	400b      	ands	r3, r1
 8006294:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b84      	ldr	r3, [pc, #528]	; (80064c4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80062b4:	400b      	ands	r3, r1
 80062b6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b7b      	ldr	r3, [pc, #492]	; (80064c4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80062d6:	400b      	ands	r3, r1
 80062d8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0203 	bic.w	r2, r2, #3
 80062fa:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0207 	bic.w	r2, r2, #7
 800631c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6959      	ldr	r1, [r3, #20]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	431a      	orrs	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 020f 	bic.w	r2, r2, #15
 800634a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6919      	ldr	r1, [r3, #16]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 020e 	bic.w	r2, r2, #14
 800636e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	005a      	lsls	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d110      	bne.n	80063b4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6919      	ldr	r1, [r3, #16]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80063c0:	400b      	ands	r3, r1
 80063c2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80063e2:	400b      	ands	r3, r1
 80063e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b32      	ldr	r3, [pc, #200]	; (80064cc <HAL_DSI_ConfigVideoMode+0x2a8>)
 8006404:	400b      	ands	r3, r1
 8006406:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006426:	400b      	ands	r3, r1
 8006428:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006448:	400b      	ands	r3, r1
 800644a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800646a:	400b      	ands	r3, r1
 800646c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <HAL_DSI_ConfigVideoMode+0x29c>)
 800648c:	400b      	ands	r3, r1
 800648e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064bc:	e00a      	b.n	80064d4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80064be:	bf00      	nop
 80064c0:	ffffc000 	.word	0xffffc000
 80064c4:	ffffe000 	.word	0xffffe000
 80064c8:	fffff000 	.word	0xfffff000
 80064cc:	ffff8000 	.word	0xffff8000
 80064d0:	fffffc00 	.word	0xfffffc00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80064ea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f6:	041a      	lsls	r2, r3, #16
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800650e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6999      	ldr	r1, [r3, #24]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7c1b      	ldrb	r3, [r3, #16]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_DSI_ConfigFlowControl+0x16>
 8006636:	2302      	movs	r3, #2
 8006638:	e016      	b.n	8006668 <HAL_DSI_ConfigFlowControl+0x44>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 021f 	bic.w	r2, r2, #31
 800664e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	7c1b      	ldrb	r3, [r3, #16]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_DSI_ConfigPhyTimer+0x16>
 8006686:	2302      	movs	r3, #2
 8006688:	e058      	b.n	800673c <HAL_DSI_ConfigPhyTimer+0xc8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4293      	cmp	r3, r2
 800669a:	bf38      	it	cc
 800669c:	4613      	movcc	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80066b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	041a      	lsls	r2, r3, #16
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80066de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006718:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	021a      	lsls	r2, r3, #8
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7c1b      	ldrb	r3, [r3, #16]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_DSI_ConfigHostTimeouts+0x16>
 800675a:	2302      	movs	r3, #2
 800675c:	e0b4      	b.n	80068c8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006772:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6899      	ldr	r1, [r3, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	b292      	uxth	r2, r2
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	041a      	lsls	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	4b47      	ldr	r3, [pc, #284]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80067b6:	400b      	ands	r3, r1
 80067b8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b3f      	ldr	r3, [pc, #252]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80067d8:	400b      	ands	r3, r1
 80067da:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80067fc:	400b      	ands	r3, r1
 80067fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b2b      	ldr	r3, [pc, #172]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8006826:	400b      	ands	r3, r1
 8006828:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800687a:	400b      	ands	r3, r1
 800687c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80068a4:	400b      	ands	r3, r1
 80068a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	ffff0000 	.word	0xffff0000

080068d8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7c1b      	ldrb	r3, [r3, #16]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_DSI_Start+0x14>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e02b      	b.n	8006944 <HAL_DSI_Start+0x6c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	605a      	str	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006914:	2300      	movs	r3, #0
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0208 	orr.w	r2, r2, #8
 8006928:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	7c1b      	ldrb	r3, [r3, #16]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_DSI_ShortWrite+0x1a>
 8006966:	2302      	movs	r3, #2
 8006968:	e010      	b.n	800698c <HAL_DSI_ShortWrite+0x3c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff f9af 	bl	8005cde <DSI_ShortWrite>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	741a      	strb	r2, [r3, #16]

  return status;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	; 0x30
 8006998:	af02      	add	r7, sp, #8
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	7c1b      	ldrb	r3, [r3, #16]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_DSI_LongWrite+0x1e>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e084      	b.n	8006abc <HAL_DSI_LongWrite+0x128>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80069b8:	f7fe fd1e 	bl	80053f8 <HAL_GetTick>
 80069bc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80069be:	e00c      	b.n	80069da <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80069c0:	f7fe fd1a 	bl	80053f8 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ce:	d904      	bls.n	80069da <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e070      	b.n	8006abc <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0eb      	beq.n	80069c0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	bf28      	it	cs
 80069f2:	2303      	movcs	r3, #3
 80069f4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	e00f      	b.n	8006a1c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3eb      	bcc.n	80069fc <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006a3c:	e028      	b.n	8006a90 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	bf28      	it	cs
 8006a44:	2304      	movcs	r3, #4
 8006a46:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	e00e      	b.n	8006a70 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	623b      	str	r3, [r7, #32]
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d3ec      	bcc.n	8006a52 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8006a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1d3      	bne.n	8006a3e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006a9e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	f7ff f8fc 	bl	8005cac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3728      	adds	r7, #40	; 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7c1b      	ldrb	r3, [r3, #16]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_DSI_SetLowPowerRXFilter+0x16>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e01b      	b.n	8006b12 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006af0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	065a      	lsls	r2, r3, #25
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b089      	sub	sp, #36	; 0x24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	e175      	b.n	8006e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b40:	2201      	movs	r2, #1
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	f040 8164 	bne.w	8006e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d005      	beq.n	8006b76 <HAL_GPIO_Init+0x56>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d130      	bne.n	8006bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	2203      	movs	r2, #3
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bac:	2201      	movs	r2, #1
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 0201 	and.w	r2, r3, #1
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d017      	beq.n	8006c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	2203      	movs	r2, #3
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d123      	bne.n	8006c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	08da      	lsrs	r2, r3, #3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3208      	adds	r2, #8
 8006c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	220f      	movs	r2, #15
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	4013      	ands	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	08da      	lsrs	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3208      	adds	r2, #8
 8006c62:	69b9      	ldr	r1, [r7, #24]
 8006c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2203      	movs	r2, #3
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 0203 	and.w	r2, r3, #3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80be 	beq.w	8006e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006caa:	4b66      	ldr	r3, [pc, #408]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	4a65      	ldr	r2, [pc, #404]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cb6:	4b63      	ldr	r3, [pc, #396]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006cc2:	4a61      	ldr	r2, [pc, #388]	; (8006e48 <HAL_GPIO_Init+0x328>)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	220f      	movs	r2, #15
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a58      	ldr	r2, [pc, #352]	; (8006e4c <HAL_GPIO_Init+0x32c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d037      	beq.n	8006d5e <HAL_GPIO_Init+0x23e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a57      	ldr	r2, [pc, #348]	; (8006e50 <HAL_GPIO_Init+0x330>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_GPIO_Init+0x23a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a56      	ldr	r2, [pc, #344]	; (8006e54 <HAL_GPIO_Init+0x334>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d02b      	beq.n	8006d56 <HAL_GPIO_Init+0x236>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a55      	ldr	r2, [pc, #340]	; (8006e58 <HAL_GPIO_Init+0x338>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d025      	beq.n	8006d52 <HAL_GPIO_Init+0x232>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <HAL_GPIO_Init+0x33c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01f      	beq.n	8006d4e <HAL_GPIO_Init+0x22e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a53      	ldr	r2, [pc, #332]	; (8006e60 <HAL_GPIO_Init+0x340>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d019      	beq.n	8006d4a <HAL_GPIO_Init+0x22a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a52      	ldr	r2, [pc, #328]	; (8006e64 <HAL_GPIO_Init+0x344>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <HAL_GPIO_Init+0x226>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a51      	ldr	r2, [pc, #324]	; (8006e68 <HAL_GPIO_Init+0x348>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00d      	beq.n	8006d42 <HAL_GPIO_Init+0x222>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a50      	ldr	r2, [pc, #320]	; (8006e6c <HAL_GPIO_Init+0x34c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <HAL_GPIO_Init+0x21e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a4f      	ldr	r2, [pc, #316]	; (8006e70 <HAL_GPIO_Init+0x350>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <HAL_GPIO_Init+0x21a>
 8006d36:	2309      	movs	r3, #9
 8006d38:	e012      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e010      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	e00e      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d42:	2307      	movs	r3, #7
 8006d44:	e00c      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d46:	2306      	movs	r3, #6
 8006d48:	e00a      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d4a:	2305      	movs	r3, #5
 8006d4c:	e008      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d4e:	2304      	movs	r3, #4
 8006d50:	e006      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d52:	2303      	movs	r3, #3
 8006d54:	e004      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e002      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	f002 0203 	and.w	r2, r2, #3
 8006d66:	0092      	lsls	r2, r2, #2
 8006d68:	4093      	lsls	r3, r2
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d70:	4935      	ldr	r1, [pc, #212]	; (8006e48 <HAL_GPIO_Init+0x328>)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	3302      	adds	r3, #2
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006da2:	4a34      	ldr	r2, [pc, #208]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	4013      	ands	r3, r2
 8006db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dd2:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4013      	ands	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006df6:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e20:	4a14      	ldr	r2, [pc, #80]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	f67f ae86 	bls.w	8006b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3724      	adds	r7, #36	; 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40023800 	.word	0x40023800
 8006e48:	40013800 	.word	0x40013800
 8006e4c:	40020000 	.word	0x40020000
 8006e50:	40020400 	.word	0x40020400
 8006e54:	40020800 	.word	0x40020800
 8006e58:	40020c00 	.word	0x40020c00
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40021400 	.word	0x40021400
 8006e64:	40021800 	.word	0x40021800
 8006e68:	40021c00 	.word	0x40021c00
 8006e6c:	40022000 	.word	0x40022000
 8006e70:	40022400 	.word	0x40022400
 8006e74:	40013c00 	.word	0x40013c00

08006e78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e0d9      	b.n	8007048 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e94:	2201      	movs	r2, #1
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f040 80c9 	bne.w	8007042 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006eb0:	4a6b      	ldr	r2, [pc, #428]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	089b      	lsrs	r3, r3, #2
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	220f      	movs	r2, #15
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a63      	ldr	r2, [pc, #396]	; (8007064 <HAL_GPIO_DeInit+0x1ec>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d037      	beq.n	8006f4a <HAL_GPIO_DeInit+0xd2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a62      	ldr	r2, [pc, #392]	; (8007068 <HAL_GPIO_DeInit+0x1f0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d031      	beq.n	8006f46 <HAL_GPIO_DeInit+0xce>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_GPIO_DeInit+0x1f4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d02b      	beq.n	8006f42 <HAL_GPIO_DeInit+0xca>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a60      	ldr	r2, [pc, #384]	; (8007070 <HAL_GPIO_DeInit+0x1f8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d025      	beq.n	8006f3e <HAL_GPIO_DeInit+0xc6>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a5f      	ldr	r2, [pc, #380]	; (8007074 <HAL_GPIO_DeInit+0x1fc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01f      	beq.n	8006f3a <HAL_GPIO_DeInit+0xc2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a5e      	ldr	r2, [pc, #376]	; (8007078 <HAL_GPIO_DeInit+0x200>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d019      	beq.n	8006f36 <HAL_GPIO_DeInit+0xbe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a5d      	ldr	r2, [pc, #372]	; (800707c <HAL_GPIO_DeInit+0x204>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_GPIO_DeInit+0xba>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a5c      	ldr	r2, [pc, #368]	; (8007080 <HAL_GPIO_DeInit+0x208>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00d      	beq.n	8006f2e <HAL_GPIO_DeInit+0xb6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a5b      	ldr	r2, [pc, #364]	; (8007084 <HAL_GPIO_DeInit+0x20c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <HAL_GPIO_DeInit+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	; (8007088 <HAL_GPIO_DeInit+0x210>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d101      	bne.n	8006f26 <HAL_GPIO_DeInit+0xae>
 8006f22:	2309      	movs	r3, #9
 8006f24:	e012      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f26:	230a      	movs	r3, #10
 8006f28:	e010      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	e00e      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f2e:	2307      	movs	r3, #7
 8006f30:	e00c      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f32:	2306      	movs	r3, #6
 8006f34:	e00a      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f36:	2305      	movs	r3, #5
 8006f38:	e008      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f3a:	2304      	movs	r3, #4
 8006f3c:	e006      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e004      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e002      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	f002 0203 	and.w	r2, r2, #3
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	4093      	lsls	r3, r2
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d132      	bne.n	8006fc2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006f5c:	4b4b      	ldr	r3, [pc, #300]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	43db      	mvns	r3, r3
 8006f64:	4949      	ldr	r1, [pc, #292]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006f6a:	4b48      	ldr	r3, [pc, #288]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	4946      	ldr	r1, [pc, #280]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006f78:	4b44      	ldr	r3, [pc, #272]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	4942      	ldr	r1, [pc, #264]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006f86:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	493f      	ldr	r1, [pc, #252]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	220f      	movs	r2, #15
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006fa4:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	3302      	adds	r3, #2
 8006fac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	482a      	ldr	r0, [pc, #168]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	089b      	lsrs	r3, r3, #2
 8006fba:	400a      	ands	r2, r1
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	2103      	movs	r1, #3
 8006fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	08da      	lsrs	r2, r3, #3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3208      	adds	r2, #8
 8006fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	08d2      	lsrs	r2, r2, #3
 8006ff8:	4019      	ands	r1, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3208      	adds	r2, #8
 8006ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	2103      	movs	r1, #3
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	2101      	movs	r1, #1
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	401a      	ands	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2103      	movs	r1, #3
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	401a      	ands	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3301      	adds	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	f67f af22 	bls.w	8006e94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40013800 	.word	0x40013800
 8007064:	40020000 	.word	0x40020000
 8007068:	40020400 	.word	0x40020400
 800706c:	40020800 	.word	0x40020800
 8007070:	40020c00 	.word	0x40020c00
 8007074:	40021000 	.word	0x40021000
 8007078:	40021400 	.word	0x40021400
 800707c:	40021800 	.word	0x40021800
 8007080:	40021c00 	.word	0x40021c00
 8007084:	40022000 	.word	0x40022000
 8007088:	40022400 	.word	0x40022400
 800708c:	40013c00 	.word	0x40013c00

08007090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	807b      	strh	r3, [r7, #2]
 800709c:	4613      	mov	r3, r2
 800709e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070a0:	787b      	ldrb	r3, [r7, #1]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070a6:	887a      	ldrh	r2, [r7, #2]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80070ac:	e003      	b.n	80070b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80070ae:	887b      	ldrh	r3, [r7, #2]
 80070b0:	041a      	lsls	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	619a      	str	r2, [r3, #24]
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07f      	b.n	80071d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fc fee2 	bl	8003eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2224      	movs	r2, #36	; 0x24
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0201 	bic.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	e006      	b.n	800714c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800714a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d104      	bne.n	800715e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800715c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <HAL_I2C_Init+0x11c>)
 800716a:	430b      	orrs	r3, r1
 800716c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800717c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69d9      	ldr	r1, [r3, #28]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	02008000 	.word	0x02008000

080071e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e021      	b.n	800723a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	; 0x24
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fc fed4 	bl	8003fbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4603      	mov	r3, r0
 8007254:	817b      	strh	r3, [r7, #10]
 8007256:	460b      	mov	r3, r1
 8007258:	813b      	strh	r3, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b20      	cmp	r3, #32
 8007268:	f040 80f9 	bne.w	800745e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <HAL_I2C_Mem_Write+0x34>
 8007272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e0ed      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_I2C_Mem_Write+0x4e>
 800728e:	2302      	movs	r3, #2
 8007290:	e0e6      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800729a:	f7fe f8ad 	bl	80053f8 <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2319      	movs	r3, #25
 80072a6:	2201      	movs	r2, #1
 80072a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fad1 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0d1      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2221      	movs	r2, #33	; 0x21
 80072c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2240      	movs	r2, #64	; 0x40
 80072c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e4:	88f8      	ldrh	r0, [r7, #6]
 80072e6:	893a      	ldrh	r2, [r7, #8]
 80072e8:	8979      	ldrh	r1, [r7, #10]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4603      	mov	r3, r0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f9e1 	bl	80076bc <I2C_RequestMemoryWrite>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0a9      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2bff      	cmp	r3, #255	; 0xff
 8007314:	d90e      	bls.n	8007334 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	22ff      	movs	r2, #255	; 0xff
 800731a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007320:	b2da      	uxtb	r2, r3
 8007322:	8979      	ldrh	r1, [r7, #10]
 8007324:	2300      	movs	r3, #0
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fc2d 	bl	8007b8c <I2C_TransferConfig>
 8007332:	e00f      	b.n	8007354 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007342:	b2da      	uxtb	r2, r3
 8007344:	8979      	ldrh	r1, [r7, #10]
 8007346:	2300      	movs	r3, #0
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fc1c 	bl	8007b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fabb 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e07b      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d034      	beq.n	800740c <HAL_I2C_Mem_Write+0x1c8>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d130      	bne.n	800740c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	2200      	movs	r2, #0
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fa4d 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e04d      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d90e      	bls.n	80073ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	8979      	ldrh	r1, [r7, #10]
 80073dc:	2300      	movs	r3, #0
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fbd1 	bl	8007b8c <I2C_TransferConfig>
 80073ea:	e00f      	b.n	800740c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	8979      	ldrh	r1, [r7, #10]
 80073fe:	2300      	movs	r3, #0
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fbc0 	bl	8007b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d19e      	bne.n	8007354 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa9a 	bl	8007954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e01a      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2220      	movs	r2, #32
 8007430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <HAL_I2C_Mem_Write+0x224>)
 800743e:	400b      	ands	r3, r1
 8007440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	fe00e800 	.word	0xfe00e800

0800746c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	461a      	mov	r2, r3
 800747a:	4603      	mov	r3, r0
 800747c:	817b      	strh	r3, [r7, #10]
 800747e:	460b      	mov	r3, r1
 8007480:	813b      	strh	r3, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b20      	cmp	r3, #32
 8007490:	f040 80fd 	bne.w	800768e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_I2C_Mem_Read+0x34>
 800749a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0f1      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_I2C_Mem_Read+0x4e>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e0ea      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074c2:	f7fd ff99 	bl	80053f8 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2319      	movs	r3, #25
 80074ce:	2201      	movs	r2, #1
 80074d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f9bd 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0d5      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2222      	movs	r2, #34	; 0x22
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2240      	movs	r2, #64	; 0x40
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a3a      	ldr	r2, [r7, #32]
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800750c:	88f8      	ldrh	r0, [r7, #6]
 800750e:	893a      	ldrh	r2, [r7, #8]
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	4603      	mov	r3, r0
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f921 	bl	8007764 <I2C_RequestMemoryRead>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e0ad      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007538:	b29b      	uxth	r3, r3
 800753a:	2bff      	cmp	r3, #255	; 0xff
 800753c:	d90e      	bls.n	800755c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	b2da      	uxtb	r2, r3
 800754a:	8979      	ldrh	r1, [r7, #10]
 800754c:	4b52      	ldr	r3, [pc, #328]	; (8007698 <HAL_I2C_Mem_Read+0x22c>)
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fb19 	bl	8007b8c <I2C_TransferConfig>
 800755a:	e00f      	b.n	800757c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756a:	b2da      	uxtb	r2, r3
 800756c:	8979      	ldrh	r1, [r7, #10]
 800756e:	4b4a      	ldr	r3, [pc, #296]	; (8007698 <HAL_I2C_Mem_Read+0x22c>)
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fb08 	bl	8007b8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2200      	movs	r2, #0
 8007584:	2104      	movs	r1, #4
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f964 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e07c      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d034      	beq.n	800763c <HAL_I2C_Mem_Read+0x1d0>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d130      	bne.n	800763c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	2200      	movs	r2, #0
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f935 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e04d      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d90e      	bls.n	800761c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007608:	b2da      	uxtb	r2, r3
 800760a:	8979      	ldrh	r1, [r7, #10]
 800760c:	2300      	movs	r3, #0
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fab9 	bl	8007b8c <I2C_TransferConfig>
 800761a:	e00f      	b.n	800763c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762a:	b2da      	uxtb	r2, r3
 800762c:	8979      	ldrh	r1, [r7, #10]
 800762e:	2300      	movs	r3, #0
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 faa8 	bl	8007b8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d19a      	bne.n	800757c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f982 	bl	8007954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e01a      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2220      	movs	r2, #32
 8007660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6859      	ldr	r1, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <HAL_I2C_Mem_Read+0x230>)
 800766e:	400b      	ands	r3, r1
 8007670:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	e000      	b.n	8007690 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800768e:	2302      	movs	r3, #2
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	80002400 	.word	0x80002400
 800769c:	fe00e800 	.word	0xfe00e800

080076a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ae:	b2db      	uxtb	r3, r3
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	4608      	mov	r0, r1
 80076c6:	4611      	mov	r1, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	817b      	strh	r3, [r7, #10]
 80076ce:	460b      	mov	r3, r1
 80076d0:	813b      	strh	r3, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	8979      	ldrh	r1, [r7, #10]
 80076dc:	4b20      	ldr	r3, [pc, #128]	; (8007760 <I2C_RequestMemoryWrite+0xa4>)
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fa51 	bl	8007b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	69b9      	ldr	r1, [r7, #24]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f8f0 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e02c      	b.n	8007758 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d105      	bne.n	8007710 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007704:	893b      	ldrh	r3, [r7, #8]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	629a      	str	r2, [r3, #40]	; 0x28
 800770e:	e015      	b.n	800773c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007710:	893b      	ldrh	r3, [r7, #8]
 8007712:	0a1b      	lsrs	r3, r3, #8
 8007714:	b29b      	uxth	r3, r3
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f8d6 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e012      	b.n	8007758 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007732:	893b      	ldrh	r3, [r7, #8]
 8007734:	b2da      	uxtb	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2200      	movs	r2, #0
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f884 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e000      	b.n	8007758 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	80002000 	.word	0x80002000

08007764 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4603      	mov	r3, r0
 8007774:	817b      	strh	r3, [r7, #10]
 8007776:	460b      	mov	r3, r1
 8007778:	813b      	strh	r3, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	8979      	ldrh	r1, [r7, #10]
 8007784:	4b20      	ldr	r3, [pc, #128]	; (8007808 <I2C_RequestMemoryRead+0xa4>)
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	2300      	movs	r3, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f9fe 	bl	8007b8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	69b9      	ldr	r1, [r7, #24]
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f89d 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e02c      	b.n	80077fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077aa:	893b      	ldrh	r3, [r7, #8]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28
 80077b4:	e015      	b.n	80077e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077b6:	893b      	ldrh	r3, [r7, #8]
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f883 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e012      	b.n	80077fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d8:	893b      	ldrh	r3, [r7, #8]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2200      	movs	r2, #0
 80077ea:	2140      	movs	r1, #64	; 0x40
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f831 	bl	8007854 <I2C_WaitOnFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	80002000 	.word	0x80002000

0800780c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d007      	beq.n	8007848 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	619a      	str	r2, [r3, #24]
  }
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	4613      	mov	r3, r2
 8007862:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007864:	e022      	b.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d01e      	beq.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786e:	f7fd fdc3 	bl	80053f8 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d302      	bcc.n	8007884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d113      	bne.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e00f      	b.n	80078cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4013      	ands	r3, r2
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	bf0c      	ite	eq
 80078bc:	2301      	moveq	r3, #1
 80078be:	2300      	movne	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d0cd      	beq.n	8007866 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078e0:	e02c      	b.n	800793c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f870 	bl	80079cc <I2C_IsErrorOccurred>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e02a      	b.n	800794c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d01e      	beq.n	800793c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fe:	f7fd fd7b 	bl	80053f8 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	d302      	bcc.n	8007914 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d113      	bne.n	800793c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e007      	b.n	800794c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d1cb      	bne.n	80078e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007960:	e028      	b.n	80079b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f830 	bl	80079cc <I2C_IsErrorOccurred>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e026      	b.n	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007976:	f7fd fd3f 	bl	80053f8 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	d302      	bcc.n	800798c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d113      	bne.n	80079b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	f043 0220 	orr.w	r2, r3, #32
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e007      	b.n	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d1cf      	bne.n	8007962 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	; 0x28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d068      	beq.n	8007aca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2210      	movs	r2, #16
 80079fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a00:	e049      	b.n	8007a96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d045      	beq.n	8007a96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a0a:	f7fd fcf5 	bl	80053f8 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d302      	bcc.n	8007a20 <I2C_IsErrorOccurred+0x54>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d13a      	bne.n	8007a96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a42:	d121      	bne.n	8007a88 <I2C_IsErrorOccurred+0xbc>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a4a:	d01d      	beq.n	8007a88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a4c:	7cfb      	ldrb	r3, [r7, #19]
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d01a      	beq.n	8007a88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a62:	f7fd fcc9 	bl	80053f8 <HAL_GetTick>
 8007a66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a68:	e00e      	b.n	8007a88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a6a:	f7fd fcc5 	bl	80053f8 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b19      	cmp	r3, #25
 8007a76:	d907      	bls.n	8007a88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	f043 0320 	orr.w	r3, r3, #32
 8007a7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007a86:	e006      	b.n	8007a96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d1e9      	bne.n	8007a6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d003      	beq.n	8007aac <I2C_IsErrorOccurred+0xe0>
 8007aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0aa      	beq.n	8007a02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f043 0304 	orr.w	r3, r3, #4
 8007ac2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	f043 0308 	orr.w	r3, r3, #8
 8007b04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	f043 0302 	orr.w	r3, r3, #2
 8007b26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01c      	beq.n	8007b7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fe63 	bl	800780c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6859      	ldr	r1, [r3, #4]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <I2C_IsErrorOccurred+0x1bc>)
 8007b52:	400b      	ands	r3, r1
 8007b54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3728      	adds	r7, #40	; 0x28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	fe00e800 	.word	0xfe00e800

08007b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	817b      	strh	r3, [r7, #10]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b9e:	897b      	ldrh	r3, [r7, #10]
 8007ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ba4:	7a7b      	ldrb	r3, [r7, #9]
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	0d5b      	lsrs	r3, r3, #21
 8007bc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <I2C_TransferConfig+0x60>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	ea02 0103 	and.w	r1, r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	03ff63ff 	.word	0x03ff63ff

08007bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d138      	bne.n	8007c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e032      	b.n	8007c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2224      	movs	r2, #36	; 0x24
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0201 	orr.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2220      	movs	r2, #32
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	e000      	b.n	8007c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d139      	bne.n	8007d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e033      	b.n	8007d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2224      	movs	r2, #36	; 0x24
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e000      	b.n	8007d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d10:	2302      	movs	r3, #2
  }
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e0bf      	b.n	8007eb2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fc fa0e 	bl	8004168 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007d62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6999      	ldr	r1, [r3, #24]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6899      	ldr	r1, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <HAL_LTDC_Init+0x19c>)
 8007d94:	400b      	ands	r3, r1
 8007d96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	041b      	lsls	r3, r3, #16
 8007d9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6899      	ldr	r1, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <HAL_LTDC_Init+0x19c>)
 8007dc2:	400b      	ands	r3, r1
 8007dc4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68d9      	ldr	r1, [r3, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1a      	ldr	r2, [r3, #32]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6919      	ldr	r1, [r3, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b33      	ldr	r3, [pc, #204]	; (8007ebc <HAL_LTDC_Init+0x19c>)
 8007df0:	400b      	ands	r3, r1
 8007df2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6919      	ldr	r1, [r3, #16]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6959      	ldr	r1, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b27      	ldr	r3, [pc, #156]	; (8007ebc <HAL_LTDC_Init+0x19c>)
 8007e1e:	400b      	ands	r3, r1
 8007e20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6959      	ldr	r1, [r3, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0206 	orr.w	r2, r2, #6
 8007e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	f000f800 	.word	0xf000f800

08007ec0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ec0:	b5b0      	push	{r4, r5, r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_LTDC_ConfigLayer+0x1a>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e02c      	b.n	8007f34 <HAL_LTDC_ConfigLayer+0x74>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2134      	movs	r1, #52	; 0x34
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f811 	bl	8007f3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bdb0      	pop	{r4, r5, r7, pc}

08007f3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	0c1b      	lsrs	r3, r3, #16
 8007f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f58:	4413      	add	r3, r2
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	01db      	lsls	r3, r3, #7
 8007f68:	4413      	add	r3, r2
 8007f6a:	3384      	adds	r3, #132	; 0x84
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	4611      	mov	r1, r2
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	01d2      	lsls	r2, r2, #7
 8007f78:	440a      	add	r2, r1
 8007f7a:	3284      	adds	r2, #132	; 0x84
 8007f7c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	0c1b      	lsrs	r3, r3, #16
 8007f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f92:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f94:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	01db      	lsls	r3, r3, #7
 8007fa0:	440b      	add	r3, r1
 8007fa2:	3384      	adds	r3, #132	; 0x84
 8007fa4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007faa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fba:	4413      	add	r3, r2
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	01db      	lsls	r3, r3, #7
 8007fca:	4413      	add	r3, r2
 8007fcc:	3384      	adds	r3, #132	; 0x84
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	01d2      	lsls	r2, r2, #7
 8007fda:	440a      	add	r2, r1
 8007fdc:	3284      	adds	r2, #132	; 0x84
 8007fde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007fe2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff2:	4413      	add	r3, r2
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	01db      	lsls	r3, r3, #7
 8008000:	440b      	add	r3, r1
 8008002:	3384      	adds	r3, #132	; 0x84
 8008004:	4619      	mov	r1, r3
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4313      	orrs	r3, r2
 800800a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	01db      	lsls	r3, r3, #7
 8008016:	4413      	add	r3, r2
 8008018:	3384      	adds	r3, #132	; 0x84
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	4611      	mov	r1, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	01d2      	lsls	r2, r2, #7
 8008026:	440a      	add	r2, r1
 8008028:	3284      	adds	r2, #132	; 0x84
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	01db      	lsls	r3, r3, #7
 800803a:	4413      	add	r3, r2
 800803c:	3384      	adds	r3, #132	; 0x84
 800803e:	461a      	mov	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	061b      	lsls	r3, r3, #24
 8008060:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	01db      	lsls	r3, r3, #7
 800806c:	4413      	add	r3, r2
 800806e:	3384      	adds	r3, #132	; 0x84
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	4413      	add	r3, r2
 800807e:	3384      	adds	r3, #132	; 0x84
 8008080:	461a      	mov	r2, r3
 8008082:	2300      	movs	r3, #0
 8008084:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800808c:	461a      	mov	r2, r3
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	431a      	orrs	r2, r3
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	431a      	orrs	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	440b      	add	r3, r1
 80080a2:	3384      	adds	r3, #132	; 0x84
 80080a4:	4619      	mov	r1, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	4413      	add	r3, r2
 80080b8:	3384      	adds	r3, #132	; 0x84
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	4611      	mov	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	01d2      	lsls	r2, r2, #7
 80080c6:	440a      	add	r2, r1
 80080c8:	3284      	adds	r2, #132	; 0x84
 80080ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	01db      	lsls	r3, r3, #7
 80080da:	4413      	add	r3, r2
 80080dc:	3384      	adds	r3, #132	; 0x84
 80080de:	461a      	mov	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	01db      	lsls	r3, r3, #7
 80080f0:	4413      	add	r3, r2
 80080f2:	3384      	adds	r3, #132	; 0x84
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	440b      	add	r3, r1
 8008102:	3384      	adds	r3, #132	; 0x84
 8008104:	4619      	mov	r1, r3
 8008106:	4b58      	ldr	r3, [pc, #352]	; (8008268 <LTDC_SetConfig+0x32c>)
 8008108:	4013      	ands	r3, r2
 800810a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	68f9      	ldr	r1, [r7, #12]
 8008116:	6809      	ldr	r1, [r1, #0]
 8008118:	4608      	mov	r0, r1
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	01c9      	lsls	r1, r1, #7
 800811e:	4401      	add	r1, r0
 8008120:	3184      	adds	r1, #132	; 0x84
 8008122:	4313      	orrs	r3, r2
 8008124:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	01db      	lsls	r3, r3, #7
 8008130:	4413      	add	r3, r2
 8008132:	3384      	adds	r3, #132	; 0x84
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	01db      	lsls	r3, r3, #7
 8008140:	4413      	add	r3, r2
 8008142:	3384      	adds	r3, #132	; 0x84
 8008144:	461a      	mov	r2, r3
 8008146:	2300      	movs	r3, #0
 8008148:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	01db      	lsls	r3, r3, #7
 8008154:	4413      	add	r3, r2
 8008156:	3384      	adds	r3, #132	; 0x84
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008168:	2304      	movs	r3, #4
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	e01b      	b.n	80081a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d102      	bne.n	800817c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008176:	2303      	movs	r3, #3
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e014      	b.n	80081a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b04      	cmp	r3, #4
 8008182:	d00b      	beq.n	800819c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008188:	2b02      	cmp	r3, #2
 800818a:	d007      	beq.n	800819c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008190:	2b03      	cmp	r3, #3
 8008192:	d003      	beq.n	800819c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008198:	2b07      	cmp	r3, #7
 800819a:	d102      	bne.n	80081a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800819c:	2302      	movs	r3, #2
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	e001      	b.n	80081a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081a2:	2301      	movs	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	01db      	lsls	r3, r3, #7
 80081b0:	4413      	add	r3, r2
 80081b2:	3384      	adds	r3, #132	; 0x84
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	4611      	mov	r1, r2
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	01d2      	lsls	r2, r2, #7
 80081c0:	440a      	add	r2, r1
 80081c2:	3284      	adds	r2, #132	; 0x84
 80081c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80081c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
 80081d4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6859      	ldr	r1, [r3, #4]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	1acb      	subs	r3, r1, r3
 80081e0:	69f9      	ldr	r1, [r7, #28]
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	6809      	ldr	r1, [r1, #0]
 80081ec:	4608      	mov	r0, r1
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	01c9      	lsls	r1, r1, #7
 80081f2:	4401      	add	r1, r0
 80081f4:	3184      	adds	r1, #132	; 0x84
 80081f6:	4313      	orrs	r3, r2
 80081f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	01db      	lsls	r3, r3, #7
 8008204:	4413      	add	r3, r2
 8008206:	3384      	adds	r3, #132	; 0x84
 8008208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4619      	mov	r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	01db      	lsls	r3, r3, #7
 8008214:	440b      	add	r3, r1
 8008216:	3384      	adds	r3, #132	; 0x84
 8008218:	4619      	mov	r1, r3
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <LTDC_SetConfig+0x330>)
 800821c:	4013      	ands	r3, r2
 800821e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	01db      	lsls	r3, r3, #7
 800822a:	4413      	add	r3, r2
 800822c:	3384      	adds	r3, #132	; 0x84
 800822e:	461a      	mov	r2, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	4413      	add	r3, r2
 8008242:	3384      	adds	r3, #132	; 0x84
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	4611      	mov	r1, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	01d2      	lsls	r2, r2, #7
 8008250:	440a      	add	r2, r1
 8008252:	3284      	adds	r2, #132	; 0x84
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	6013      	str	r3, [r2, #0]
}
 800825a:	bf00      	nop
 800825c:	3724      	adds	r7, #36	; 0x24
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	fffff8f8 	.word	0xfffff8f8
 800826c:	fffff800 	.word	0xfffff800

08008270 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8008282:	2200      	movs	r2, #0
 8008284:	e001      	b.n	800828a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8008286:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8008296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800829a:	e000      	b.n	800829e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800829c:	2200      	movs	r2, #0
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80082aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082ae:	e000      	b.n	80082b2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80082b0:	2200      	movs	r2, #0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	1e5a      	subs	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	4413      	add	r3, r2
 80082ca:	1e5a      	subs	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082de:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 80082e0:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082f4:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fa:	4413      	add	r3, r2
 80082fc:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800831a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831e:	6013      	str	r3, [r2, #0]
}
 8008320:	bf00      	nop
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40007000 	.word	0x40007000

08008330 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800833a:	4b23      	ldr	r3, [pc, #140]	; (80083c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008344:	6413      	str	r3, [r2, #64]	; 0x40
 8008346:	4b20      	ldr	r3, [pc, #128]	; (80083c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008352:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800835e:	f7fd f84b 	bl	80053f8 <HAL_GetTick>
 8008362:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008364:	e009      	b.n	800837a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008366:	f7fd f847 	bl	80053f8 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008374:	d901      	bls.n	800837a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e022      	b.n	80083c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008386:	d1ee      	bne.n	8008366 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a0f      	ldr	r2, [pc, #60]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800838e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008392:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008394:	f7fd f830 	bl	80053f8 <HAL_GetTick>
 8008398:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800839a:	e009      	b.n	80083b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800839c:	f7fd f82c 	bl	80053f8 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083aa:	d901      	bls.n	80083b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e007      	b.n	80083c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083bc:	d1ee      	bne.n	800839c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40023800 	.word	0x40023800
 80083cc:	40007000 	.word	0x40007000

080083d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80083d8:	2300      	movs	r3, #0
 80083da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e29b      	b.n	800891e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8087 	beq.w	8008502 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083f4:	4b96      	ldr	r3, [pc, #600]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d00c      	beq.n	800841a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008400:	4b93      	ldr	r3, [pc, #588]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 030c 	and.w	r3, r3, #12
 8008408:	2b08      	cmp	r3, #8
 800840a:	d112      	bne.n	8008432 <HAL_RCC_OscConfig+0x62>
 800840c:	4b90      	ldr	r3, [pc, #576]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008418:	d10b      	bne.n	8008432 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800841a:	4b8d      	ldr	r3, [pc, #564]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d06c      	beq.n	8008500 <HAL_RCC_OscConfig+0x130>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d168      	bne.n	8008500 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e275      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843a:	d106      	bne.n	800844a <HAL_RCC_OscConfig+0x7a>
 800843c:	4b84      	ldr	r3, [pc, #528]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a83      	ldr	r2, [pc, #524]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e02e      	b.n	80084a8 <HAL_RCC_OscConfig+0xd8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10c      	bne.n	800846c <HAL_RCC_OscConfig+0x9c>
 8008452:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7e      	ldr	r2, [pc, #504]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a7b      	ldr	r2, [pc, #492]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e01d      	b.n	80084a8 <HAL_RCC_OscConfig+0xd8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008474:	d10c      	bne.n	8008490 <HAL_RCC_OscConfig+0xc0>
 8008476:	4b76      	ldr	r3, [pc, #472]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a75      	ldr	r2, [pc, #468]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800847c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	4b73      	ldr	r3, [pc, #460]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a72      	ldr	r2, [pc, #456]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e00b      	b.n	80084a8 <HAL_RCC_OscConfig+0xd8>
 8008490:	4b6f      	ldr	r3, [pc, #444]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a6e      	ldr	r2, [pc, #440]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a6b      	ldr	r2, [pc, #428]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80084a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d013      	beq.n	80084d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b0:	f7fc ffa2 	bl	80053f8 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b8:	f7fc ff9e 	bl	80053f8 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b64      	cmp	r3, #100	; 0x64
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e229      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ca:	4b61      	ldr	r3, [pc, #388]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0xe8>
 80084d6:	e014      	b.n	8008502 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fc ff8e 	bl	80053f8 <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e0:	f7fc ff8a 	bl	80053f8 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b64      	cmp	r3, #100	; 0x64
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e215      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084f2:	4b57      	ldr	r3, [pc, #348]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f0      	bne.n	80084e0 <HAL_RCC_OscConfig+0x110>
 80084fe:	e000      	b.n	8008502 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d069      	beq.n	80085e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800850e:	4b50      	ldr	r3, [pc, #320]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 030c 	and.w	r3, r3, #12
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800851a:	4b4d      	ldr	r3, [pc, #308]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 030c 	and.w	r3, r3, #12
 8008522:	2b08      	cmp	r3, #8
 8008524:	d11c      	bne.n	8008560 <HAL_RCC_OscConfig+0x190>
 8008526:	4b4a      	ldr	r3, [pc, #296]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d116      	bne.n	8008560 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008532:	4b47      	ldr	r3, [pc, #284]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_RCC_OscConfig+0x17a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d001      	beq.n	800854a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e1e9      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854a:	4b41      	ldr	r3, [pc, #260]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	493d      	ldr	r1, [pc, #244]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800855a:	4313      	orrs	r3, r2
 800855c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800855e:	e040      	b.n	80085e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d023      	beq.n	80085b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008568:	4b39      	ldr	r3, [pc, #228]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a38      	ldr	r2, [pc, #224]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008574:	f7fc ff40 	bl	80053f8 <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800857c:	f7fc ff3c 	bl	80053f8 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e1c7      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800858e:	4b30      	ldr	r3, [pc, #192]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800859a:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4929      	ldr	r1, [pc, #164]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]
 80085ae:	e018      	b.n	80085e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a26      	ldr	r2, [pc, #152]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fc ff1c 	bl	80053f8 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c4:	f7fc ff18 	bl	80053f8 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e1a3      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085d6:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d038      	beq.n	8008660 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d019      	beq.n	800862a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085f6:	4b16      	ldr	r3, [pc, #88]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	4a15      	ldr	r2, [pc, #84]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 80085fc:	f043 0301 	orr.w	r3, r3, #1
 8008600:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008602:	f7fc fef9 	bl	80053f8 <HAL_GetTick>
 8008606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008608:	e008      	b.n	800861c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800860a:	f7fc fef5 	bl	80053f8 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	d901      	bls.n	800861c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e180      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800861c:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800861e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d0f0      	beq.n	800860a <HAL_RCC_OscConfig+0x23a>
 8008628:	e01a      	b.n	8008660 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 800862c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862e:	4a08      	ldr	r2, [pc, #32]	; (8008650 <HAL_RCC_OscConfig+0x280>)
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008636:	f7fc fedf 	bl	80053f8 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800863c:	e00a      	b.n	8008654 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800863e:	f7fc fedb 	bl	80053f8 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d903      	bls.n	8008654 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e166      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
 8008650:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008654:	4b92      	ldr	r3, [pc, #584]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ee      	bne.n	800863e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80a4 	beq.w	80087b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800866e:	4b8c      	ldr	r3, [pc, #560]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10d      	bne.n	8008696 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800867a:	4b89      	ldr	r3, [pc, #548]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	4a88      	ldr	r2, [pc, #544]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008684:	6413      	str	r3, [r2, #64]	; 0x40
 8008686:	4b86      	ldr	r3, [pc, #536]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008696:	4b83      	ldr	r3, [pc, #524]	; (80088a4 <HAL_RCC_OscConfig+0x4d4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d118      	bne.n	80086d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086a2:	4b80      	ldr	r3, [pc, #512]	; (80088a4 <HAL_RCC_OscConfig+0x4d4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a7f      	ldr	r2, [pc, #508]	; (80088a4 <HAL_RCC_OscConfig+0x4d4>)
 80086a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086ae:	f7fc fea3 	bl	80053f8 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086b6:	f7fc fe9f 	bl	80053f8 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b64      	cmp	r3, #100	; 0x64
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e12a      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086c8:	4b76      	ldr	r3, [pc, #472]	; (80088a4 <HAL_RCC_OscConfig+0x4d4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0f0      	beq.n	80086b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d106      	bne.n	80086ea <HAL_RCC_OscConfig+0x31a>
 80086dc:	4b70      	ldr	r3, [pc, #448]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80086de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e0:	4a6f      	ldr	r2, [pc, #444]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	6713      	str	r3, [r2, #112]	; 0x70
 80086e8:	e02d      	b.n	8008746 <HAL_RCC_OscConfig+0x376>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10c      	bne.n	800870c <HAL_RCC_OscConfig+0x33c>
 80086f2:	4b6b      	ldr	r3, [pc, #428]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	4a6a      	ldr	r2, [pc, #424]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	6713      	str	r3, [r2, #112]	; 0x70
 80086fe:	4b68      	ldr	r3, [pc, #416]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	4a67      	ldr	r2, [pc, #412]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008704:	f023 0304 	bic.w	r3, r3, #4
 8008708:	6713      	str	r3, [r2, #112]	; 0x70
 800870a:	e01c      	b.n	8008746 <HAL_RCC_OscConfig+0x376>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b05      	cmp	r3, #5
 8008712:	d10c      	bne.n	800872e <HAL_RCC_OscConfig+0x35e>
 8008714:	4b62      	ldr	r3, [pc, #392]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008718:	4a61      	ldr	r2, [pc, #388]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800871a:	f043 0304 	orr.w	r3, r3, #4
 800871e:	6713      	str	r3, [r2, #112]	; 0x70
 8008720:	4b5f      	ldr	r3, [pc, #380]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008724:	4a5e      	ldr	r2, [pc, #376]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	6713      	str	r3, [r2, #112]	; 0x70
 800872c:	e00b      	b.n	8008746 <HAL_RCC_OscConfig+0x376>
 800872e:	4b5c      	ldr	r3, [pc, #368]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008732:	4a5b      	ldr	r2, [pc, #364]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	6713      	str	r3, [r2, #112]	; 0x70
 800873a:	4b59      	ldr	r3, [pc, #356]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873e:	4a58      	ldr	r2, [pc, #352]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008740:	f023 0304 	bic.w	r3, r3, #4
 8008744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d015      	beq.n	800877a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874e:	f7fc fe53 	bl	80053f8 <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008754:	e00a      	b.n	800876c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008756:	f7fc fe4f 	bl	80053f8 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	f241 3288 	movw	r2, #5000	; 0x1388
 8008764:	4293      	cmp	r3, r2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e0d8      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800876c:	4b4c      	ldr	r3, [pc, #304]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800876e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0ee      	beq.n	8008756 <HAL_RCC_OscConfig+0x386>
 8008778:	e014      	b.n	80087a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877a:	f7fc fe3d 	bl	80053f8 <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008780:	e00a      	b.n	8008798 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008782:	f7fc fe39 	bl	80053f8 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008790:	4293      	cmp	r3, r2
 8008792:	d901      	bls.n	8008798 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e0c2      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008798:	4b41      	ldr	r3, [pc, #260]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800879a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1ee      	bne.n	8008782 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d105      	bne.n	80087b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087aa:	4b3d      	ldr	r3, [pc, #244]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80ae 	beq.w	800891c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087c0:	4b37      	ldr	r3, [pc, #220]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f003 030c 	and.w	r3, r3, #12
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d06d      	beq.n	80088a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d14b      	bne.n	800886c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d4:	4b32      	ldr	r3, [pc, #200]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a31      	ldr	r2, [pc, #196]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fc fe0a 	bl	80053f8 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e8:	f7fc fe06 	bl	80053f8 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e091      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087fa:	4b29      	ldr	r3, [pc, #164]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69da      	ldr	r2, [r3, #28]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	019b      	lsls	r3, r3, #6
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	3b01      	subs	r3, #1
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	061b      	lsls	r3, r3, #24
 800882a:	431a      	orrs	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	071b      	lsls	r3, r3, #28
 8008832:	491b      	ldr	r1, [pc, #108]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008834:	4313      	orrs	r3, r2
 8008836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008838:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800883e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008844:	f7fc fdd8 	bl	80053f8 <HAL_GetTick>
 8008848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800884c:	f7fc fdd4 	bl	80053f8 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e05f      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800885e:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0f0      	beq.n	800884c <HAL_RCC_OscConfig+0x47c>
 800886a:	e057      	b.n	800891c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0b      	ldr	r2, [pc, #44]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fc fdbe 	bl	80053f8 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008880:	f7fc fdba 	bl	80053f8 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e045      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <HAL_RCC_OscConfig+0x4d0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f0      	bne.n	8008880 <HAL_RCC_OscConfig+0x4b0>
 800889e:	e03d      	b.n	800891c <HAL_RCC_OscConfig+0x54c>
 80088a0:	40023800 	.word	0x40023800
 80088a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088a8:	4b1f      	ldr	r3, [pc, #124]	; (8008928 <HAL_RCC_OscConfig+0x558>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d030      	beq.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d129      	bne.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d122      	bne.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088d8:	4013      	ands	r3, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d119      	bne.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	3b01      	subs	r3, #1
 80088f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d10f      	bne.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008904:	429a      	cmp	r2, r3
 8008906:	d107      	bne.n	8008918 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008914:	429a      	cmp	r2, r3
 8008916:	d001      	beq.n	800891c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	40023800 	.word	0x40023800

0800892c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0d0      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008944:	4b6a      	ldr	r3, [pc, #424]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d910      	bls.n	8008974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008952:	4b67      	ldr	r3, [pc, #412]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f023 020f 	bic.w	r2, r3, #15
 800895a:	4965      	ldr	r1, [pc, #404]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	4313      	orrs	r3, r2
 8008960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008962:	4b63      	ldr	r3, [pc, #396]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d001      	beq.n	8008974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0b8      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d020      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800898c:	4b59      	ldr	r3, [pc, #356]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	4a58      	ldr	r2, [pc, #352]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0308 	and.w	r3, r3, #8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089a4:	4b53      	ldr	r3, [pc, #332]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	4a52      	ldr	r2, [pc, #328]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80089ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b0:	4b50      	ldr	r3, [pc, #320]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	494d      	ldr	r1, [pc, #308]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d040      	beq.n	8008a50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d107      	bne.n	80089e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d6:	4b47      	ldr	r3, [pc, #284]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d115      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e07f      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d107      	bne.n	80089fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ee:	4b41      	ldr	r3, [pc, #260]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e073      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089fe:	4b3d      	ldr	r3, [pc, #244]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e06b      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a0e:	4b39      	ldr	r3, [pc, #228]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f023 0203 	bic.w	r2, r3, #3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4936      	ldr	r1, [pc, #216]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a20:	f7fc fcea 	bl	80053f8 <HAL_GetTick>
 8008a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a26:	e00a      	b.n	8008a3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a28:	f7fc fce6 	bl	80053f8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e053      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3e:	4b2d      	ldr	r3, [pc, #180]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 020c 	and.w	r2, r3, #12
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d1eb      	bne.n	8008a28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 030f 	and.w	r3, r3, #15
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d210      	bcs.n	8008a80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 020f 	bic.w	r2, r3, #15
 8008a66:	4922      	ldr	r1, [pc, #136]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6e:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e032      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a8c:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4916      	ldr	r1, [pc, #88]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d009      	beq.n	8008abe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008aaa:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	490e      	ldr	r1, [pc, #56]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008abe:	f000 f821 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <HAL_RCC_ClockConfig+0x1c8>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	490a      	ldr	r1, [pc, #40]	; (8008af8 <HAL_RCC_ClockConfig+0x1cc>)
 8008ad0:	5ccb      	ldrb	r3, [r1, r3]
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <HAL_RCC_ClockConfig+0x1d0>)
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_RCC_ClockConfig+0x1d4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fb fe5a 	bl	8004798 <HAL_InitTick>

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40023c00 	.word	0x40023c00
 8008af4:	40023800 	.word	0x40023800
 8008af8:	08126038 	.word	0x08126038
 8008afc:	2000003c 	.word	0x2000003c
 8008b00:	20000040 	.word	0x20000040

08008b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b08:	b090      	sub	sp, #64	; 0x40
 8008b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b10:	2300      	movs	r3, #0
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b14:	2300      	movs	r3, #0
 8008b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b1c:	4b59      	ldr	r3, [pc, #356]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 030c 	and.w	r3, r3, #12
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d00d      	beq.n	8008b44 <HAL_RCC_GetSysClockFreq+0x40>
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	f200 80a1 	bhi.w	8008c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_RCC_GetSysClockFreq+0x34>
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d003      	beq.n	8008b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b36:	e09b      	b.n	8008c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b38:	4b53      	ldr	r3, [pc, #332]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b3c:	e09b      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b3e:	4b53      	ldr	r3, [pc, #332]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b42:	e098      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b44:	4b4f      	ldr	r3, [pc, #316]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b4e:	4b4d      	ldr	r3, [pc, #308]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d028      	beq.n	8008bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b5a:	4b4a      	ldr	r3, [pc, #296]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	099b      	lsrs	r3, r3, #6
 8008b60:	2200      	movs	r2, #0
 8008b62:	623b      	str	r3, [r7, #32]
 8008b64:	627a      	str	r2, [r7, #36]	; 0x24
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4b47      	ldr	r3, [pc, #284]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b70:	fb03 f201 	mul.w	r2, r3, r1
 8008b74:	2300      	movs	r3, #0
 8008b76:	fb00 f303 	mul.w	r3, r0, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	4a43      	ldr	r2, [pc, #268]	; (8008c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8008b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b84:	460a      	mov	r2, r1
 8008b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b8a:	4413      	add	r3, r2
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	2200      	movs	r2, #0
 8008b92:	61bb      	str	r3, [r7, #24]
 8008b94:	61fa      	str	r2, [r7, #28]
 8008b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008b9e:	f7f7 fb9f 	bl	80002e0 <__aeabi_uldivmod>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	e053      	b.n	8008c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bac:	4b35      	ldr	r3, [pc, #212]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	099b      	lsrs	r3, r3, #6
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	617a      	str	r2, [r7, #20]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008bbe:	f04f 0b00 	mov.w	fp, #0
 8008bc2:	4652      	mov	r2, sl
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	f04f 0000 	mov.w	r0, #0
 8008bca:	f04f 0100 	mov.w	r1, #0
 8008bce:	0159      	lsls	r1, r3, #5
 8008bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bd4:	0150      	lsls	r0, r2, #5
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	ebb2 080a 	subs.w	r8, r2, sl
 8008bde:	eb63 090b 	sbc.w	r9, r3, fp
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8008bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	00eb      	lsls	r3, r5, #3
 8008c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c0c:	00e2      	lsls	r2, r4, #3
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461d      	mov	r5, r3
 8008c12:	eb14 030a 	adds.w	r3, r4, sl
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	eb45 030b 	adc.w	r3, r5, fp
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	028b      	lsls	r3, r1, #10
 8008c2e:	4621      	mov	r1, r4
 8008c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c34:	4621      	mov	r1, r4
 8008c36:	028a      	lsls	r2, r1, #10
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	2200      	movs	r2, #0
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	60fa      	str	r2, [r7, #12]
 8008c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c48:	f7f7 fb4a 	bl	80002e0 <__aeabi_uldivmod>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4613      	mov	r3, r2
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	3301      	adds	r3, #1
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c6e:	e002      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3740      	adds	r7, #64	; 0x40
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c82:	bf00      	nop
 8008c84:	40023800 	.word	0x40023800
 8008c88:	00f42400 	.word	0x00f42400
 8008c8c:	017d7840 	.word	0x017d7840

08008c90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c94:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c96:	681b      	ldr	r3, [r3, #0]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	2000003c 	.word	0x2000003c

08008ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008cac:	f7ff fff0 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	0a9b      	lsrs	r3, r3, #10
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	4903      	ldr	r1, [pc, #12]	; (8008ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cbe:	5ccb      	ldrb	r3, [r1, r3]
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	08126048 	.word	0x08126048

08008cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008cd4:	f7ff ffdc 	bl	8008c90 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0b5b      	lsrs	r3, r3, #13
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4903      	ldr	r1, [pc, #12]	; (8008cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	08126048 	.word	0x08126048

08008cf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	220f      	movs	r2, #15
 8008d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 0203 	and.w	r2, r3, #3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	08db      	lsrs	r3, r3, #3
 8008d32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <HAL_RCC_GetClockConfig+0x60>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 020f 	and.w	r2, r3, #15
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40023800 	.word	0x40023800
 8008d58:	40023c00 	.word	0x40023c00

08008d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d012      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d84:	4b69      	ldr	r3, [pc, #420]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4a68      	ldr	r2, [pc, #416]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d8e:	6093      	str	r3, [r2, #8]
 8008d90:	4b66      	ldr	r3, [pc, #408]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	4964      	ldr	r1, [pc, #400]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008db6:	4b5d      	ldr	r3, [pc, #372]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	4959      	ldr	r1, [pc, #356]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd4:	d101      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008de2:	2301      	movs	r3, #1
 8008de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d017      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008df2:	4b4e      	ldr	r3, [pc, #312]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	494a      	ldr	r1, [pc, #296]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e10:	d101      	bne.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008e12:	2301      	movs	r3, #1
 8008e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 808b 	beq.w	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e40:	4b3a      	ldr	r3, [pc, #232]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	4a39      	ldr	r2, [pc, #228]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4c:	4b37      	ldr	r3, [pc, #220]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e54:	60bb      	str	r3, [r7, #8]
 8008e56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e58:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a34      	ldr	r2, [pc, #208]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e64:	f7fc fac8 	bl	80053f8 <HAL_GetTick>
 8008e68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e6c:	f7fc fac4 	bl	80053f8 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b64      	cmp	r3, #100	; 0x64
 8008e78:	d901      	bls.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e38f      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e7e:	4b2c      	ldr	r3, [pc, #176]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f0      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e8a:	4b28      	ldr	r3, [pc, #160]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d035      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d02e      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ea8:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008eb2:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ebc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ebe:	4b1b      	ldr	r3, [pc, #108]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	4a1a      	ldr	r2, [pc, #104]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008eca:	4a18      	ldr	r2, [pc, #96]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ed0:	4b16      	ldr	r3, [pc, #88]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d114      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008edc:	f7fc fa8c 	bl	80053f8 <HAL_GetTick>
 8008ee0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee2:	e00a      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ee4:	f7fc fa88 	bl	80053f8 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e351      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008efa:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0ee      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f12:	d111      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f22:	400b      	ands	r3, r1
 8008f24:	4901      	ldr	r1, [pc, #4]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	608b      	str	r3, [r1, #8]
 8008f2a:	e00b      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008f2c:	40023800 	.word	0x40023800
 8008f30:	40007000 	.word	0x40007000
 8008f34:	0ffffcff 	.word	0x0ffffcff
 8008f38:	4bac      	ldr	r3, [pc, #688]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	4aab      	ldr	r2, [pc, #684]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f42:	6093      	str	r3, [r2, #8]
 8008f44:	4ba9      	ldr	r3, [pc, #676]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f50:	49a6      	ldr	r1, [pc, #664]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d010      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f62:	4ba2      	ldr	r3, [pc, #648]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f68:	4aa0      	ldr	r2, [pc, #640]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008f72:	4b9e      	ldr	r3, [pc, #632]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	499b      	ldr	r1, [pc, #620]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f90:	4b96      	ldr	r3, [pc, #600]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f9e:	4993      	ldr	r1, [pc, #588]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fb2:	4b8e      	ldr	r3, [pc, #568]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc0:	498a      	ldr	r1, [pc, #552]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fd4:	4b85      	ldr	r3, [pc, #532]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe2:	4982      	ldr	r1, [pc, #520]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ff6:	4b7d      	ldr	r3, [pc, #500]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009004:	4979      	ldr	r1, [pc, #484]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009018:	4b74      	ldr	r3, [pc, #464]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800901a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901e:	f023 0203 	bic.w	r2, r3, #3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	4971      	ldr	r1, [pc, #452]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009028:	4313      	orrs	r3, r2
 800902a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800903a:	4b6c      	ldr	r3, [pc, #432]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009040:	f023 020c 	bic.w	r2, r3, #12
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009048:	4968      	ldr	r1, [pc, #416]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800905c:	4b63      	ldr	r3, [pc, #396]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009062:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906a:	4960      	ldr	r1, [pc, #384]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800907e:	4b5b      	ldr	r3, [pc, #364]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009084:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908c:	4957      	ldr	r1, [pc, #348]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80090a0:	4b52      	ldr	r3, [pc, #328]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	494f      	ldr	r1, [pc, #316]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80090c2:	4b4a      	ldr	r3, [pc, #296]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d0:	4946      	ldr	r1, [pc, #280]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80090e4:	4b41      	ldr	r3, [pc, #260]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f2:	493e      	ldr	r1, [pc, #248]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009106:	4b39      	ldr	r3, [pc, #228]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009114:	4935      	ldr	r1, [pc, #212]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009128:	4b30      	ldr	r3, [pc, #192]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800912a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800912e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009136:	492d      	ldr	r1, [pc, #180]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d011      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800914a:	4b28      	ldr	r3, [pc, #160]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800914c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009150:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009158:	4924      	ldr	r1, [pc, #144]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009168:	d101      	bne.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800917a:	2301      	movs	r3, #1
 800917c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800918a:	4b18      	ldr	r3, [pc, #96]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009190:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009198:	4914      	ldr	r1, [pc, #80]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800919a:	4313      	orrs	r3, r2
 800919c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091bc:	490b      	ldr	r1, [pc, #44]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00f      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091e0:	4902      	ldr	r1, [pc, #8]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80091e8:	e002      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80091ea:	bf00      	nop
 80091ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091fc:	4b8a      	ldr	r3, [pc, #552]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920c:	4986      	ldr	r1, [pc, #536]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800920e:	4313      	orrs	r3, r2
 8009210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009220:	4b81      	ldr	r3, [pc, #516]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009226:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009230:	497d      	ldr	r1, [pc, #500]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d006      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80d6 	beq.w	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800924c:	4b76      	ldr	r3, [pc, #472]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a75      	ldr	r2, [pc, #468]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009258:	f7fc f8ce 	bl	80053f8 <HAL_GetTick>
 800925c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800925e:	e008      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009260:	f7fc f8ca 	bl	80053f8 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b64      	cmp	r3, #100	; 0x64
 800926c:	d901      	bls.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e195      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009272:	4b6d      	ldr	r3, [pc, #436]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f0      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d021      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928e:	2b00      	cmp	r3, #0
 8009290:	d11d      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009292:	4b65      	ldr	r3, [pc, #404]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092a0:	4b61      	ldr	r3, [pc, #388]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a6:	0e1b      	lsrs	r3, r3, #24
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	019a      	lsls	r2, r3, #6
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	431a      	orrs	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	061b      	lsls	r3, r3, #24
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	4958      	ldr	r1, [pc, #352]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e2:	d00a      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d02e      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092f8:	d129      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092fa:	4b4b      	ldr	r3, [pc, #300]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009300:	0c1b      	lsrs	r3, r3, #16
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009308:	4b47      	ldr	r3, [pc, #284]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800930a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930e:	0f1b      	lsrs	r3, r3, #28
 8009310:	f003 0307 	and.w	r3, r3, #7
 8009314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	019a      	lsls	r2, r3, #6
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	041b      	lsls	r3, r3, #16
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	061b      	lsls	r3, r3, #24
 8009328:	431a      	orrs	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	071b      	lsls	r3, r3, #28
 800932e:	493e      	ldr	r1, [pc, #248]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009330:	4313      	orrs	r3, r2
 8009332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009336:	4b3c      	ldr	r3, [pc, #240]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800933c:	f023 021f 	bic.w	r2, r3, #31
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	3b01      	subs	r3, #1
 8009346:	4938      	ldr	r1, [pc, #224]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009348:	4313      	orrs	r3, r2
 800934a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01d      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800935a:	4b33      	ldr	r3, [pc, #204]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800935c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009360:	0e1b      	lsrs	r3, r3, #24
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009368:	4b2f      	ldr	r3, [pc, #188]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800936a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936e:	0f1b      	lsrs	r3, r3, #28
 8009370:	f003 0307 	and.w	r3, r3, #7
 8009374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	019a      	lsls	r2, r3, #6
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	431a      	orrs	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	061b      	lsls	r3, r3, #24
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	071b      	lsls	r3, r3, #28
 800938e:	4926      	ldr	r1, [pc, #152]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	019a      	lsls	r2, r3, #6
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	061b      	lsls	r3, r3, #24
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	071b      	lsls	r3, r3, #28
 80093be:	491a      	ldr	r1, [pc, #104]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80093c6:	4b18      	ldr	r3, [pc, #96]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a17      	ldr	r2, [pc, #92]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093d2:	f7fc f811 	bl	80053f8 <HAL_GetTick>
 80093d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80093da:	f7fc f80d 	bl	80053f8 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b64      	cmp	r3, #100	; 0x64
 80093e6:	d901      	bls.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e0d8      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093ec:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0f0      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	f040 80ce 	bne.w	800959c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009400:	4b09      	ldr	r3, [pc, #36]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800940a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940c:	f7fb fff4 	bl	80053f8 <HAL_GetTick>
 8009410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009412:	e00b      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009414:	f7fb fff0 	bl	80053f8 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b64      	cmp	r3, #100	; 0x64
 8009420:	d904      	bls.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e0bb      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009426:	bf00      	nop
 8009428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800942c:	4b5e      	ldr	r3, [pc, #376]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009438:	d0ec      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009456:	2b00      	cmp	r3, #0
 8009458:	d02e      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d12a      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009462:	4b51      	ldr	r3, [pc, #324]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009470:	4b4d      	ldr	r3, [pc, #308]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009476:	0f1b      	lsrs	r3, r3, #28
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	019a      	lsls	r2, r3, #6
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	041b      	lsls	r3, r3, #16
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	061b      	lsls	r3, r3, #24
 8009490:	431a      	orrs	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	071b      	lsls	r3, r3, #28
 8009496:	4944      	ldr	r1, [pc, #272]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009498:	4313      	orrs	r3, r2
 800949a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800949e:	4b42      	ldr	r3, [pc, #264]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ac:	3b01      	subs	r3, #1
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	493d      	ldr	r1, [pc, #244]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d022      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094cc:	d11d      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094ce:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094dc:	4b32      	ldr	r3, [pc, #200]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e2:	0f1b      	lsrs	r3, r3, #28
 80094e4:	f003 0307 	and.w	r3, r3, #7
 80094e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	019a      	lsls	r2, r3, #6
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	431a      	orrs	r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	061b      	lsls	r3, r3, #24
 80094fc:	431a      	orrs	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	071b      	lsls	r3, r3, #28
 8009502:	4929      	ldr	r1, [pc, #164]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009504:	4313      	orrs	r3, r2
 8009506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d028      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951c:	0e1b      	lsrs	r3, r3, #24
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009524:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	f003 0303 	and.w	r3, r3, #3
 8009530:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	019a      	lsls	r2, r3, #6
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	431a      	orrs	r2, r3
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	061b      	lsls	r3, r3, #24
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	071b      	lsls	r3, r3, #28
 800954a:	4917      	ldr	r1, [pc, #92]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009552:	4b15      	ldr	r3, [pc, #84]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4911      	ldr	r1, [pc, #68]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009574:	f7fb ff40 	bl	80053f8 <HAL_GetTick>
 8009578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800957a:	e008      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800957c:	f7fb ff3c 	bl	80053f8 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b64      	cmp	r3, #100	; 0x64
 8009588:	d901      	bls.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e007      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800958e:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800959a:	d1ef      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	40023800 	.word	0x40023800

080095ac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e025      	b.n	800960c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7f8 ffa5 	bl	8002524 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4619      	mov	r1, r3
 80095ec:	4610      	mov	r0, r2
 80095ee:	f002 f91b 	bl	800b828 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	461a      	mov	r2, r3
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	f002 f96f 	bl	800b8e0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009626:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d101      	bne.n	8009632 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800962e:	2302      	movs	r3, #2
 8009630:	e021      	b.n	8009676 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d002      	beq.n	800963e <HAL_SDRAM_SendCommand+0x2a>
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b05      	cmp	r3, #5
 800963c:	d118      	bne.n	8009670 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2202      	movs	r2, #2
 8009642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	4618      	mov	r0, r3
 8009650:	f002 f9b0 	bl	800b9b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d104      	bne.n	8009666 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2205      	movs	r2, #5
 8009660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009664:	e006      	b.n	8009674 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800966e:	e001      	b.n	8009674 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d101      	bne.n	8009698 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009694:	2302      	movs	r3, #2
 8009696:	e016      	b.n	80096c6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d10f      	bne.n	80096c4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 f9a2 	bl	800b9fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e000      	b.n	80096c6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e049      	b.n	8009774 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fb fa8f 	bl	8004c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f000 fc29 	bl	8009f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e054      	b.n	800983e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a26      	ldr	r2, [pc, #152]	; (800984c <HAL_TIM_Base_Start_IT+0xd0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d022      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097be:	d01d      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a22      	ldr	r2, [pc, #136]	; (8009850 <HAL_TIM_Base_Start_IT+0xd4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a21      	ldr	r2, [pc, #132]	; (8009854 <HAL_TIM_Base_Start_IT+0xd8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1f      	ldr	r2, [pc, #124]	; (8009858 <HAL_TIM_Base_Start_IT+0xdc>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00e      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1e      	ldr	r2, [pc, #120]	; (800985c <HAL_TIM_Base_Start_IT+0xe0>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d009      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <HAL_TIM_Base_Start_IT+0xe4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0x80>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a1b      	ldr	r2, [pc, #108]	; (8009864 <HAL_TIM_Base_Start_IT+0xe8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d115      	bne.n	8009828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <HAL_TIM_Base_Start_IT+0xec>)
 8009804:	4013      	ands	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b06      	cmp	r3, #6
 800980c:	d015      	beq.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009814:	d011      	beq.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0201 	orr.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009826:	e008      	b.n	800983a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	e000      	b.n	800983c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40010000 	.word	0x40010000
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40001800 	.word	0x40001800
 8009868:	00010007 	.word	0x00010007

0800986c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e049      	b.n	8009912 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fb f9a0 	bl	8004bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f000 fb5a 	bl	8009f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	2b02      	cmp	r3, #2
 800992e:	d122      	bne.n	8009976 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b02      	cmp	r3, #2
 800993c:	d11b      	bne.n	8009976 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0202 	mvn.w	r2, #2
 8009946:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fae3 	bl	8009f28 <HAL_TIM_IC_CaptureCallback>
 8009962:	e005      	b.n	8009970 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fad5 	bl	8009f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fae6 	bl	8009f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b04      	cmp	r3, #4
 8009982:	d122      	bne.n	80099ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b04      	cmp	r3, #4
 8009990:	d11b      	bne.n	80099ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f06f 0204 	mvn.w	r2, #4
 800999a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fab9 	bl	8009f28 <HAL_TIM_IC_CaptureCallback>
 80099b6:	e005      	b.n	80099c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 faab 	bl	8009f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fabc 	bl	8009f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d122      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	d11b      	bne.n	8009a1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f06f 0208 	mvn.w	r2, #8
 80099ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2204      	movs	r2, #4
 80099f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa8f 	bl	8009f28 <HAL_TIM_IC_CaptureCallback>
 8009a0a:	e005      	b.n	8009a18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa81 	bl	8009f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fa92 	bl	8009f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d122      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d11b      	bne.n	8009a72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f06f 0210 	mvn.w	r2, #16
 8009a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2208      	movs	r2, #8
 8009a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa65 	bl	8009f28 <HAL_TIM_IC_CaptureCallback>
 8009a5e:	e005      	b.n	8009a6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fa57 	bl	8009f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa68 	bl	8009f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d10e      	bne.n	8009a9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d107      	bne.n	8009a9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f06f 0201 	mvn.w	r2, #1
 8009a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7fa fe33 	bl	8004704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa8:	2b80      	cmp	r3, #128	; 0x80
 8009aaa:	d10e      	bne.n	8009aca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab6:	2b80      	cmp	r3, #128	; 0x80
 8009ab8:	d107      	bne.n	8009aca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fe7d 	bl	800a7c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad8:	d10e      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae4:	2b80      	cmp	r3, #128	; 0x80
 8009ae6:	d107      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fe70 	bl	800a7d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d10e      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	d107      	bne.n	8009b24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fa16 	bl	8009f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d10e      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d107      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0220 	mvn.w	r2, #32
 8009b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fe30 	bl	800a7b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e0ff      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b14      	cmp	r3, #20
 8009b82:	f200 80f0 	bhi.w	8009d66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009be1 	.word	0x08009be1
 8009b90:	08009d67 	.word	0x08009d67
 8009b94:	08009d67 	.word	0x08009d67
 8009b98:	08009d67 	.word	0x08009d67
 8009b9c:	08009c21 	.word	0x08009c21
 8009ba0:	08009d67 	.word	0x08009d67
 8009ba4:	08009d67 	.word	0x08009d67
 8009ba8:	08009d67 	.word	0x08009d67
 8009bac:	08009c63 	.word	0x08009c63
 8009bb0:	08009d67 	.word	0x08009d67
 8009bb4:	08009d67 	.word	0x08009d67
 8009bb8:	08009d67 	.word	0x08009d67
 8009bbc:	08009ca3 	.word	0x08009ca3
 8009bc0:	08009d67 	.word	0x08009d67
 8009bc4:	08009d67 	.word	0x08009d67
 8009bc8:	08009d67 	.word	0x08009d67
 8009bcc:	08009ce5 	.word	0x08009ce5
 8009bd0:	08009d67 	.word	0x08009d67
 8009bd4:	08009d67 	.word	0x08009d67
 8009bd8:	08009d67 	.word	0x08009d67
 8009bdc:	08009d25 	.word	0x08009d25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fa5c 	bl	800a0a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0208 	orr.w	r2, r2, #8
 8009bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0204 	bic.w	r2, r2, #4
 8009c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6999      	ldr	r1, [r3, #24]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	619a      	str	r2, [r3, #24]
      break;
 8009c1e:	e0a5      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 faae 	bl	800a188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699a      	ldr	r2, [r3, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6999      	ldr	r1, [r3, #24]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	021a      	lsls	r2, r3, #8
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	619a      	str	r2, [r3, #24]
      break;
 8009c60:	e084      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fb05 	bl	800a278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0208 	orr.w	r2, r2, #8
 8009c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69da      	ldr	r2, [r3, #28]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0204 	bic.w	r2, r2, #4
 8009c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69d9      	ldr	r1, [r3, #28]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	61da      	str	r2, [r3, #28]
      break;
 8009ca0:	e064      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fb5b 	bl	800a364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69d9      	ldr	r1, [r3, #28]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	021a      	lsls	r2, r3, #8
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	61da      	str	r2, [r3, #28]
      break;
 8009ce2:	e043      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fb92 	bl	800a414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0208 	orr.w	r2, r2, #8
 8009cfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0204 	bic.w	r2, r2, #4
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	691a      	ldr	r2, [r3, #16]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d22:	e023      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fbc4 	bl	800a4b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	021a      	lsls	r2, r3, #8
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d64:	e002      	b.n	8009d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop

08009d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e0b4      	b.n	8009f06 <HAL_TIM_ConfigClockSource+0x186>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	4b56      	ldr	r3, [pc, #344]	; (8009f10 <HAL_TIM_ConfigClockSource+0x190>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd4:	d03e      	beq.n	8009e54 <HAL_TIM_ConfigClockSource+0xd4>
 8009dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dda:	f200 8087 	bhi.w	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de2:	f000 8086 	beq.w	8009ef2 <HAL_TIM_ConfigClockSource+0x172>
 8009de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dea:	d87f      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009dec:	2b70      	cmp	r3, #112	; 0x70
 8009dee:	d01a      	beq.n	8009e26 <HAL_TIM_ConfigClockSource+0xa6>
 8009df0:	2b70      	cmp	r3, #112	; 0x70
 8009df2:	d87b      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009df4:	2b60      	cmp	r3, #96	; 0x60
 8009df6:	d050      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x11a>
 8009df8:	2b60      	cmp	r3, #96	; 0x60
 8009dfa:	d877      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009dfc:	2b50      	cmp	r3, #80	; 0x50
 8009dfe:	d03c      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0xfa>
 8009e00:	2b50      	cmp	r3, #80	; 0x50
 8009e02:	d873      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009e04:	2b40      	cmp	r3, #64	; 0x40
 8009e06:	d058      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x13a>
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d86f      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b30      	cmp	r3, #48	; 0x30
 8009e0e:	d064      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x15a>
 8009e10:	2b30      	cmp	r3, #48	; 0x30
 8009e12:	d86b      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	d060      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x15a>
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d867      	bhi.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d05c      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x15a>
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d05a      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x15a>
 8009e24:	e062      	b.n	8009eec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e36:	f000 fc0d 	bl	800a654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	609a      	str	r2, [r3, #8]
      break;
 8009e52:	e04f      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e64:	f000 fbf6 	bl	800a654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e76:	609a      	str	r2, [r3, #8]
      break;
 8009e78:	e03c      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e86:	461a      	mov	r2, r3
 8009e88:	f000 fb6a 	bl	800a560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2150      	movs	r1, #80	; 0x50
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fbc3 	bl	800a61e <TIM_ITRx_SetConfig>
      break;
 8009e98:	e02c      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f000 fb89 	bl	800a5be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2160      	movs	r1, #96	; 0x60
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fbb3 	bl	800a61e <TIM_ITRx_SetConfig>
      break;
 8009eb8:	e01c      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f000 fb4a 	bl	800a560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2140      	movs	r1, #64	; 0x40
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fba3 	bl	800a61e <TIM_ITRx_SetConfig>
      break;
 8009ed8:	e00c      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	f000 fb9a 	bl	800a61e <TIM_ITRx_SetConfig>
      break;
 8009eea:	e003      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef0:	e000      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ef2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	fffeff88 	.word	0xfffeff88

08009f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a40      	ldr	r2, [pc, #256]	; (800a078 <TIM_Base_SetConfig+0x114>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d013      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f82:	d00f      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a3d      	ldr	r2, [pc, #244]	; (800a07c <TIM_Base_SetConfig+0x118>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00b      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a3c      	ldr	r2, [pc, #240]	; (800a080 <TIM_Base_SetConfig+0x11c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d007      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a3b      	ldr	r2, [pc, #236]	; (800a084 <TIM_Base_SetConfig+0x120>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d003      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a3a      	ldr	r2, [pc, #232]	; (800a088 <TIM_Base_SetConfig+0x124>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d108      	bne.n	8009fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a2f      	ldr	r2, [pc, #188]	; (800a078 <TIM_Base_SetConfig+0x114>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d02b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc4:	d027      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a2c      	ldr	r2, [pc, #176]	; (800a07c <TIM_Base_SetConfig+0x118>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d023      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a2b      	ldr	r2, [pc, #172]	; (800a080 <TIM_Base_SetConfig+0x11c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d01f      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a2a      	ldr	r2, [pc, #168]	; (800a084 <TIM_Base_SetConfig+0x120>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d01b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a29      	ldr	r2, [pc, #164]	; (800a088 <TIM_Base_SetConfig+0x124>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d017      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a28      	ldr	r2, [pc, #160]	; (800a08c <TIM_Base_SetConfig+0x128>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d013      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a27      	ldr	r2, [pc, #156]	; (800a090 <TIM_Base_SetConfig+0x12c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00f      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a26      	ldr	r2, [pc, #152]	; (800a094 <TIM_Base_SetConfig+0x130>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d00b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a25      	ldr	r2, [pc, #148]	; (800a098 <TIM_Base_SetConfig+0x134>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d007      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a24      	ldr	r2, [pc, #144]	; (800a09c <TIM_Base_SetConfig+0x138>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d003      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a23      	ldr	r2, [pc, #140]	; (800a0a0 <TIM_Base_SetConfig+0x13c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d108      	bne.n	800a028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <TIM_Base_SetConfig+0x114>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_Base_SetConfig+0xf8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <TIM_Base_SetConfig+0x124>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d103      	bne.n	800a064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	615a      	str	r2, [r3, #20]
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	40010000 	.word	0x40010000
 800a07c:	40000400 	.word	0x40000400
 800a080:	40000800 	.word	0x40000800
 800a084:	40000c00 	.word	0x40000c00
 800a088:	40010400 	.word	0x40010400
 800a08c:	40014000 	.word	0x40014000
 800a090:	40014400 	.word	0x40014400
 800a094:	40014800 	.word	0x40014800
 800a098:	40001800 	.word	0x40001800
 800a09c:	40001c00 	.word	0x40001c00
 800a0a0:	40002000 	.word	0x40002000

0800a0a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f023 0201 	bic.w	r2, r3, #1
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4b2b      	ldr	r3, [pc, #172]	; (800a17c <TIM_OC1_SetConfig+0xd8>)
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f023 0302 	bic.w	r3, r3, #2
 800a0ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a21      	ldr	r2, [pc, #132]	; (800a180 <TIM_OC1_SetConfig+0xdc>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d003      	beq.n	800a108 <TIM_OC1_SetConfig+0x64>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a20      	ldr	r2, [pc, #128]	; (800a184 <TIM_OC1_SetConfig+0xe0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d10c      	bne.n	800a122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f023 0308 	bic.w	r3, r3, #8
 800a10e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f023 0304 	bic.w	r3, r3, #4
 800a120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a16      	ldr	r2, [pc, #88]	; (800a180 <TIM_OC1_SetConfig+0xdc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_OC1_SetConfig+0x8e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a15      	ldr	r2, [pc, #84]	; (800a184 <TIM_OC1_SetConfig+0xe0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d111      	bne.n	800a156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	621a      	str	r2, [r3, #32]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	fffeff8f 	.word	0xfffeff8f
 800a180:	40010000 	.word	0x40010000
 800a184:	40010400 	.word	0x40010400

0800a188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f023 0210 	bic.w	r2, r3, #16
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4b2e      	ldr	r3, [pc, #184]	; (800a26c <TIM_OC2_SetConfig+0xe4>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0320 	bic.w	r3, r3, #32
 800a1d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a23      	ldr	r2, [pc, #140]	; (800a270 <TIM_OC2_SetConfig+0xe8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_OC2_SetConfig+0x68>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a22      	ldr	r2, [pc, #136]	; (800a274 <TIM_OC2_SetConfig+0xec>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10d      	bne.n	800a20c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a20a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a18      	ldr	r2, [pc, #96]	; (800a270 <TIM_OC2_SetConfig+0xe8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_OC2_SetConfig+0x94>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a17      	ldr	r2, [pc, #92]	; (800a274 <TIM_OC2_SetConfig+0xec>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d113      	bne.n	800a244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a22a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	feff8fff 	.word	0xfeff8fff
 800a270:	40010000 	.word	0x40010000
 800a274:	40010400 	.word	0x40010400

0800a278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <TIM_OC3_SetConfig+0xe0>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a22      	ldr	r2, [pc, #136]	; (800a35c <TIM_OC3_SetConfig+0xe4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d003      	beq.n	800a2de <TIM_OC3_SetConfig+0x66>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a21      	ldr	r2, [pc, #132]	; (800a360 <TIM_OC3_SetConfig+0xe8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d10d      	bne.n	800a2fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	021b      	lsls	r3, r3, #8
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a17      	ldr	r2, [pc, #92]	; (800a35c <TIM_OC3_SetConfig+0xe4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d003      	beq.n	800a30a <TIM_OC3_SetConfig+0x92>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a16      	ldr	r2, [pc, #88]	; (800a360 <TIM_OC3_SetConfig+0xe8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d113      	bne.n	800a332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	4313      	orrs	r3, r2
 800a324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	621a      	str	r2, [r3, #32]
}
 800a34c:	bf00      	nop
 800a34e:	371c      	adds	r7, #28
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	fffeff8f 	.word	0xfffeff8f
 800a35c:	40010000 	.word	0x40010000
 800a360:	40010400 	.word	0x40010400

0800a364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	4b1e      	ldr	r3, [pc, #120]	; (800a408 <TIM_OC4_SetConfig+0xa4>)
 800a390:	4013      	ands	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	031b      	lsls	r3, r3, #12
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a13      	ldr	r2, [pc, #76]	; (800a40c <TIM_OC4_SetConfig+0xa8>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_OC4_SetConfig+0x68>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a12      	ldr	r2, [pc, #72]	; (800a410 <TIM_OC4_SetConfig+0xac>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d109      	bne.n	800a3e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	019b      	lsls	r3, r3, #6
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	621a      	str	r2, [r3, #32]
}
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	feff8fff 	.word	0xfeff8fff
 800a40c:	40010000 	.word	0x40010000
 800a410:	40010400 	.word	0x40010400

0800a414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <TIM_OC5_SetConfig+0x98>)
 800a440:	4013      	ands	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	041b      	lsls	r3, r3, #16
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a12      	ldr	r2, [pc, #72]	; (800a4b0 <TIM_OC5_SetConfig+0x9c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d003      	beq.n	800a472 <TIM_OC5_SetConfig+0x5e>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a11      	ldr	r2, [pc, #68]	; (800a4b4 <TIM_OC5_SetConfig+0xa0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d109      	bne.n	800a486 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	621a      	str	r2, [r3, #32]
}
 800a4a0:	bf00      	nop
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	fffeff8f 	.word	0xfffeff8f
 800a4b0:	40010000 	.word	0x40010000
 800a4b4:	40010400 	.word	0x40010400

0800a4b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4b1c      	ldr	r3, [pc, #112]	; (800a554 <TIM_OC6_SetConfig+0x9c>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	051b      	lsls	r3, r3, #20
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a13      	ldr	r2, [pc, #76]	; (800a558 <TIM_OC6_SetConfig+0xa0>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d003      	beq.n	800a518 <TIM_OC6_SetConfig+0x60>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a12      	ldr	r2, [pc, #72]	; (800a55c <TIM_OC6_SetConfig+0xa4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d109      	bne.n	800a52c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a51e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	029b      	lsls	r3, r3, #10
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	4313      	orrs	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	621a      	str	r2, [r3, #32]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	feff8fff 	.word	0xfeff8fff
 800a558:	40010000 	.word	0x40010000
 800a55c:	40010400 	.word	0x40010400

0800a560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f023 0201 	bic.w	r2, r3, #1
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f023 030a 	bic.w	r3, r3, #10
 800a59c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	621a      	str	r2, [r3, #32]
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b087      	sub	sp, #28
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	f023 0210 	bic.w	r2, r3, #16
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	031b      	lsls	r3, r3, #12
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	4313      	orrs	r3, r2
 800a604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	621a      	str	r2, [r3, #32]
}
 800a612:	bf00      	nop
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a61e:	b480      	push	{r7}
 800a620:	b085      	sub	sp, #20
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	f043 0307 	orr.w	r3, r3, #7
 800a640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	609a      	str	r2, [r3, #8]
}
 800a648:	bf00      	nop
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a66e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	021a      	lsls	r2, r3, #8
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	431a      	orrs	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	609a      	str	r2, [r3, #8]
}
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e06d      	b.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a30      	ldr	r2, [pc, #192]	; (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d004      	beq.n	800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a2f      	ldr	r2, [pc, #188]	; (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d108      	bne.n	800a6f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a20      	ldr	r2, [pc, #128]	; (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d022      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a71e:	d01d      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a1d      	ldr	r2, [pc, #116]	; (800a79c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d018      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a1c      	ldr	r2, [pc, #112]	; (800a7a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d013      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a1a      	ldr	r2, [pc, #104]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00e      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d009      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d004      	beq.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d10c      	bne.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a762:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400
 800a79c:	40000400 	.word	0x40000400
 800a7a0:	40000800 	.word	0x40000800
 800a7a4:	40000c00 	.word	0x40000c00
 800a7a8:	40014000 	.word	0x40014000
 800a7ac:	40001800 	.word	0x40001800

0800a7b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e040      	b.n	800a880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fa fa90 	bl	8004d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2224      	movs	r2, #36	; 0x24
 800a818:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0201 	bic.w	r2, r2, #1
 800a828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fb3e 	bl	800aeac <UART_SetConfig>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e022      	b.n	800a880 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fd96 	bl	800b374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fe1d 	bl	800b4b8 <UART_CheckIdleState>
 800a87e:	4603      	mov	r3, r0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b0ba      	sub	sp, #232	; 0xe8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a8b2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a8bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d115      	bne.n	800a8f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c8:	f003 0320 	and.w	r3, r3, #32
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00f      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d4:	f003 0320 	and.w	r3, r3, #32
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 82ac 	beq.w	800ae3e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
      }
      return;
 800a8ee:	e2a6      	b.n	800ae3e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 8117 	beq.w	800ab28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a906:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a90a:	4b85      	ldr	r3, [pc, #532]	; (800ab20 <HAL_UART_IRQHandler+0x298>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 810a 	beq.w	800ab28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d011      	beq.n	800a944 <HAL_UART_IRQHandler+0xbc>
 800a920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2201      	movs	r2, #1
 800a932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93a:	f043 0201 	orr.w	r2, r3, #1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d011      	beq.n	800a974 <HAL_UART_IRQHandler+0xec>
 800a950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2202      	movs	r2, #2
 800a962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a96a:	f043 0204 	orr.w	r2, r3, #4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d011      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x11c>
 800a980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00b      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2204      	movs	r2, #4
 800a992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a99a:	f043 0202 	orr.w	r2, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a8:	f003 0308 	and.w	r3, r3, #8
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d017      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b4:	f003 0320 	and.w	r3, r3, #32
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d105      	bne.n	800a9c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a9bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d6:	f043 0208 	orr.w	r2, r3, #8
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d012      	beq.n	800aa12 <HAL_UART_IRQHandler+0x18a>
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00c      	beq.n	800aa12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa08:	f043 0220 	orr.w	r2, r3, #32
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 8212 	beq.w	800ae42 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa22:	f003 0320 	and.w	r3, r3, #32
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00d      	beq.n	800aa46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d005      	beq.n	800aa6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d04f      	beq.n	800ab0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fe37 	bl	800b6de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7a:	2b40      	cmp	r3, #64	; 0x40
 800aa7c:	d141      	bne.n	800ab02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3308      	adds	r3, #8
 800aa84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aaaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aaae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1d9      	bne.n	800aa7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d013      	beq.n	800aafa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad6:	4a13      	ldr	r2, [pc, #76]	; (800ab24 <HAL_UART_IRQHandler+0x29c>)
 800aad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fa fe0c 	bl	80056fc <HAL_DMA_Abort_IT>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d017      	beq.n	800ab1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaf8:	e00f      	b.n	800ab1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f9b6 	bl	800ae6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab00:	e00b      	b.n	800ab1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f9b2 	bl	800ae6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab08:	e007      	b.n	800ab1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f9ae 	bl	800ae6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ab18:	e193      	b.n	800ae42 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab1a:	bf00      	nop
    return;
 800ab1c:	e191      	b.n	800ae42 <HAL_UART_IRQHandler+0x5ba>
 800ab1e:	bf00      	nop
 800ab20:	04000120 	.word	0x04000120
 800ab24:	0800b7a7 	.word	0x0800b7a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	f040 814c 	bne.w	800adca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 8145 	beq.w	800adca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab44:	f003 0310 	and.w	r3, r3, #16
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 813e 	beq.w	800adca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2210      	movs	r2, #16
 800ab54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab60:	2b40      	cmp	r3, #64	; 0x40
 800ab62:	f040 80b6 	bne.w	800acd2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8165 	beq.w	800ae46 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab86:	429a      	cmp	r2, r3
 800ab88:	f080 815d 	bcs.w	800ae46 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba0:	f000 8086 	beq.w	800acb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	461a      	mov	r2, r3
 800abca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800abda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abde:	e841 2300 	strex	r3, r2, [r1]
 800abe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1da      	bne.n	800aba4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800abfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac00:	f023 0301 	bic.w	r3, r3, #1
 800ac04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e1      	bne.n	800abee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3308      	adds	r3, #8
 800ac4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e3      	bne.n	800ac2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac80:	f023 0310 	bic.w	r3, r3, #16
 800ac84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac92:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e4      	bne.n	800ac70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fa fcb6 	bl	800561c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f8d8 	bl	800ae80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acd0:	e0b9      	b.n	800ae46 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acde:	b29b      	uxth	r3, r3
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acec:	b29b      	uxth	r3, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80ab 	beq.w	800ae4a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800acf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80a6 	beq.w	800ae4a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	e853 3f00 	ldrex	r3, [r3]
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad20:	647b      	str	r3, [r7, #68]	; 0x44
 800ad22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e4      	bne.n	800acfe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3308      	adds	r3, #8
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	e853 3f00 	ldrex	r3, [r3]
 800ad42:	623b      	str	r3, [r7, #32]
   return(result);
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	f023 0301 	bic.w	r3, r3, #1
 800ad4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3308      	adds	r3, #8
 800ad54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad58:	633a      	str	r2, [r7, #48]	; 0x30
 800ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e3      	bne.n	800ad34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f023 0310 	bic.w	r3, r3, #16
 800ad94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	69b9      	ldr	r1, [r7, #24]
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	617b      	str	r3, [r7, #20]
   return(result);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e4      	bne.n	800ad80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2202      	movs	r2, #2
 800adba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f85c 	bl	800ae80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adc8:	e03f      	b.n	800ae4a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800adca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00e      	beq.n	800adf4 <HAL_UART_IRQHandler+0x56c>
 800add6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800adea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f853 	bl	800ae98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adf2:	e02d      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ae00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d01c      	beq.n	800ae4e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
    }
    return;
 800ae1c:	e017      	b.n	800ae4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d012      	beq.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
 800ae2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00c      	beq.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fccb 	bl	800b7d2 <UART_EndTransmit_IT>
    return;
 800ae3c:	e008      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ae3e:	bf00      	nop
 800ae40:	e006      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ae42:	bf00      	nop
 800ae44:	e004      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ae46:	bf00      	nop
 800ae48:	e002      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ae4a:	bf00      	nop
 800ae4c:	e000      	b.n	800ae50 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ae4e:	bf00      	nop
  }

}
 800ae50:	37e8      	adds	r7, #232	; 0xe8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop

0800ae58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	4313      	orrs	r3, r2
 800aece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	4ba6      	ldr	r3, [pc, #664]	; (800b170 <UART_SetConfig+0x2c4>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6812      	ldr	r2, [r2, #0]
 800aede:	6979      	ldr	r1, [r7, #20]
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a1b      	ldr	r3, [r3, #32]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a94      	ldr	r2, [pc, #592]	; (800b174 <UART_SetConfig+0x2c8>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d120      	bne.n	800af6a <UART_SetConfig+0xbe>
 800af28:	4b93      	ldr	r3, [pc, #588]	; (800b178 <UART_SetConfig+0x2cc>)
 800af2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af2e:	f003 0303 	and.w	r3, r3, #3
 800af32:	2b03      	cmp	r3, #3
 800af34:	d816      	bhi.n	800af64 <UART_SetConfig+0xb8>
 800af36:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <UART_SetConfig+0x90>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af59 	.word	0x0800af59
 800af44:	0800af53 	.word	0x0800af53
 800af48:	0800af5f 	.word	0x0800af5f
 800af4c:	2301      	movs	r3, #1
 800af4e:	77fb      	strb	r3, [r7, #31]
 800af50:	e150      	b.n	800b1f4 <UART_SetConfig+0x348>
 800af52:	2302      	movs	r3, #2
 800af54:	77fb      	strb	r3, [r7, #31]
 800af56:	e14d      	b.n	800b1f4 <UART_SetConfig+0x348>
 800af58:	2304      	movs	r3, #4
 800af5a:	77fb      	strb	r3, [r7, #31]
 800af5c:	e14a      	b.n	800b1f4 <UART_SetConfig+0x348>
 800af5e:	2308      	movs	r3, #8
 800af60:	77fb      	strb	r3, [r7, #31]
 800af62:	e147      	b.n	800b1f4 <UART_SetConfig+0x348>
 800af64:	2310      	movs	r3, #16
 800af66:	77fb      	strb	r3, [r7, #31]
 800af68:	e144      	b.n	800b1f4 <UART_SetConfig+0x348>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a83      	ldr	r2, [pc, #524]	; (800b17c <UART_SetConfig+0x2d0>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d132      	bne.n	800afda <UART_SetConfig+0x12e>
 800af74:	4b80      	ldr	r3, [pc, #512]	; (800b178 <UART_SetConfig+0x2cc>)
 800af76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af7a:	f003 030c 	and.w	r3, r3, #12
 800af7e:	2b0c      	cmp	r3, #12
 800af80:	d828      	bhi.n	800afd4 <UART_SetConfig+0x128>
 800af82:	a201      	add	r2, pc, #4	; (adr r2, 800af88 <UART_SetConfig+0xdc>)
 800af84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af88:	0800afbd 	.word	0x0800afbd
 800af8c:	0800afd5 	.word	0x0800afd5
 800af90:	0800afd5 	.word	0x0800afd5
 800af94:	0800afd5 	.word	0x0800afd5
 800af98:	0800afc9 	.word	0x0800afc9
 800af9c:	0800afd5 	.word	0x0800afd5
 800afa0:	0800afd5 	.word	0x0800afd5
 800afa4:	0800afd5 	.word	0x0800afd5
 800afa8:	0800afc3 	.word	0x0800afc3
 800afac:	0800afd5 	.word	0x0800afd5
 800afb0:	0800afd5 	.word	0x0800afd5
 800afb4:	0800afd5 	.word	0x0800afd5
 800afb8:	0800afcf 	.word	0x0800afcf
 800afbc:	2300      	movs	r3, #0
 800afbe:	77fb      	strb	r3, [r7, #31]
 800afc0:	e118      	b.n	800b1f4 <UART_SetConfig+0x348>
 800afc2:	2302      	movs	r3, #2
 800afc4:	77fb      	strb	r3, [r7, #31]
 800afc6:	e115      	b.n	800b1f4 <UART_SetConfig+0x348>
 800afc8:	2304      	movs	r3, #4
 800afca:	77fb      	strb	r3, [r7, #31]
 800afcc:	e112      	b.n	800b1f4 <UART_SetConfig+0x348>
 800afce:	2308      	movs	r3, #8
 800afd0:	77fb      	strb	r3, [r7, #31]
 800afd2:	e10f      	b.n	800b1f4 <UART_SetConfig+0x348>
 800afd4:	2310      	movs	r3, #16
 800afd6:	77fb      	strb	r3, [r7, #31]
 800afd8:	e10c      	b.n	800b1f4 <UART_SetConfig+0x348>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a68      	ldr	r2, [pc, #416]	; (800b180 <UART_SetConfig+0x2d4>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d120      	bne.n	800b026 <UART_SetConfig+0x17a>
 800afe4:	4b64      	ldr	r3, [pc, #400]	; (800b178 <UART_SetConfig+0x2cc>)
 800afe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800afee:	2b30      	cmp	r3, #48	; 0x30
 800aff0:	d013      	beq.n	800b01a <UART_SetConfig+0x16e>
 800aff2:	2b30      	cmp	r3, #48	; 0x30
 800aff4:	d814      	bhi.n	800b020 <UART_SetConfig+0x174>
 800aff6:	2b20      	cmp	r3, #32
 800aff8:	d009      	beq.n	800b00e <UART_SetConfig+0x162>
 800affa:	2b20      	cmp	r3, #32
 800affc:	d810      	bhi.n	800b020 <UART_SetConfig+0x174>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d002      	beq.n	800b008 <UART_SetConfig+0x15c>
 800b002:	2b10      	cmp	r3, #16
 800b004:	d006      	beq.n	800b014 <UART_SetConfig+0x168>
 800b006:	e00b      	b.n	800b020 <UART_SetConfig+0x174>
 800b008:	2300      	movs	r3, #0
 800b00a:	77fb      	strb	r3, [r7, #31]
 800b00c:	e0f2      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b00e:	2302      	movs	r3, #2
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e0ef      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b014:	2304      	movs	r3, #4
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e0ec      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b01a:	2308      	movs	r3, #8
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e0e9      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b020:	2310      	movs	r3, #16
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	e0e6      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a56      	ldr	r2, [pc, #344]	; (800b184 <UART_SetConfig+0x2d8>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d120      	bne.n	800b072 <UART_SetConfig+0x1c6>
 800b030:	4b51      	ldr	r3, [pc, #324]	; (800b178 <UART_SetConfig+0x2cc>)
 800b032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b03a:	2bc0      	cmp	r3, #192	; 0xc0
 800b03c:	d013      	beq.n	800b066 <UART_SetConfig+0x1ba>
 800b03e:	2bc0      	cmp	r3, #192	; 0xc0
 800b040:	d814      	bhi.n	800b06c <UART_SetConfig+0x1c0>
 800b042:	2b80      	cmp	r3, #128	; 0x80
 800b044:	d009      	beq.n	800b05a <UART_SetConfig+0x1ae>
 800b046:	2b80      	cmp	r3, #128	; 0x80
 800b048:	d810      	bhi.n	800b06c <UART_SetConfig+0x1c0>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <UART_SetConfig+0x1a8>
 800b04e:	2b40      	cmp	r3, #64	; 0x40
 800b050:	d006      	beq.n	800b060 <UART_SetConfig+0x1b4>
 800b052:	e00b      	b.n	800b06c <UART_SetConfig+0x1c0>
 800b054:	2300      	movs	r3, #0
 800b056:	77fb      	strb	r3, [r7, #31]
 800b058:	e0cc      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b05a:	2302      	movs	r3, #2
 800b05c:	77fb      	strb	r3, [r7, #31]
 800b05e:	e0c9      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b060:	2304      	movs	r3, #4
 800b062:	77fb      	strb	r3, [r7, #31]
 800b064:	e0c6      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b066:	2308      	movs	r3, #8
 800b068:	77fb      	strb	r3, [r7, #31]
 800b06a:	e0c3      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b06c:	2310      	movs	r3, #16
 800b06e:	77fb      	strb	r3, [r7, #31]
 800b070:	e0c0      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a44      	ldr	r2, [pc, #272]	; (800b188 <UART_SetConfig+0x2dc>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d125      	bne.n	800b0c8 <UART_SetConfig+0x21c>
 800b07c:	4b3e      	ldr	r3, [pc, #248]	; (800b178 <UART_SetConfig+0x2cc>)
 800b07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b08a:	d017      	beq.n	800b0bc <UART_SetConfig+0x210>
 800b08c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b090:	d817      	bhi.n	800b0c2 <UART_SetConfig+0x216>
 800b092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b096:	d00b      	beq.n	800b0b0 <UART_SetConfig+0x204>
 800b098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09c:	d811      	bhi.n	800b0c2 <UART_SetConfig+0x216>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <UART_SetConfig+0x1fe>
 800b0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a6:	d006      	beq.n	800b0b6 <UART_SetConfig+0x20a>
 800b0a8:	e00b      	b.n	800b0c2 <UART_SetConfig+0x216>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	77fb      	strb	r3, [r7, #31]
 800b0ae:	e0a1      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	77fb      	strb	r3, [r7, #31]
 800b0b4:	e09e      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	77fb      	strb	r3, [r7, #31]
 800b0ba:	e09b      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e098      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b0c2:	2310      	movs	r3, #16
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e095      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a2f      	ldr	r2, [pc, #188]	; (800b18c <UART_SetConfig+0x2e0>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d125      	bne.n	800b11e <UART_SetConfig+0x272>
 800b0d2:	4b29      	ldr	r3, [pc, #164]	; (800b178 <UART_SetConfig+0x2cc>)
 800b0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b0dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0e0:	d017      	beq.n	800b112 <UART_SetConfig+0x266>
 800b0e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0e6:	d817      	bhi.n	800b118 <UART_SetConfig+0x26c>
 800b0e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0ec:	d00b      	beq.n	800b106 <UART_SetConfig+0x25a>
 800b0ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0f2:	d811      	bhi.n	800b118 <UART_SetConfig+0x26c>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <UART_SetConfig+0x254>
 800b0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0fc:	d006      	beq.n	800b10c <UART_SetConfig+0x260>
 800b0fe:	e00b      	b.n	800b118 <UART_SetConfig+0x26c>
 800b100:	2301      	movs	r3, #1
 800b102:	77fb      	strb	r3, [r7, #31]
 800b104:	e076      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b106:	2302      	movs	r3, #2
 800b108:	77fb      	strb	r3, [r7, #31]
 800b10a:	e073      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b10c:	2304      	movs	r3, #4
 800b10e:	77fb      	strb	r3, [r7, #31]
 800b110:	e070      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b112:	2308      	movs	r3, #8
 800b114:	77fb      	strb	r3, [r7, #31]
 800b116:	e06d      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b118:	2310      	movs	r3, #16
 800b11a:	77fb      	strb	r3, [r7, #31]
 800b11c:	e06a      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <UART_SetConfig+0x2e4>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d138      	bne.n	800b19a <UART_SetConfig+0x2ee>
 800b128:	4b13      	ldr	r3, [pc, #76]	; (800b178 <UART_SetConfig+0x2cc>)
 800b12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b132:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b136:	d017      	beq.n	800b168 <UART_SetConfig+0x2bc>
 800b138:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b13c:	d82a      	bhi.n	800b194 <UART_SetConfig+0x2e8>
 800b13e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b142:	d00b      	beq.n	800b15c <UART_SetConfig+0x2b0>
 800b144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b148:	d824      	bhi.n	800b194 <UART_SetConfig+0x2e8>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <UART_SetConfig+0x2aa>
 800b14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b152:	d006      	beq.n	800b162 <UART_SetConfig+0x2b6>
 800b154:	e01e      	b.n	800b194 <UART_SetConfig+0x2e8>
 800b156:	2300      	movs	r3, #0
 800b158:	77fb      	strb	r3, [r7, #31]
 800b15a:	e04b      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b15c:	2302      	movs	r3, #2
 800b15e:	77fb      	strb	r3, [r7, #31]
 800b160:	e048      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b162:	2304      	movs	r3, #4
 800b164:	77fb      	strb	r3, [r7, #31]
 800b166:	e045      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b168:	2308      	movs	r3, #8
 800b16a:	77fb      	strb	r3, [r7, #31]
 800b16c:	e042      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b16e:	bf00      	nop
 800b170:	efff69f3 	.word	0xefff69f3
 800b174:	40011000 	.word	0x40011000
 800b178:	40023800 	.word	0x40023800
 800b17c:	40004400 	.word	0x40004400
 800b180:	40004800 	.word	0x40004800
 800b184:	40004c00 	.word	0x40004c00
 800b188:	40005000 	.word	0x40005000
 800b18c:	40011400 	.word	0x40011400
 800b190:	40007800 	.word	0x40007800
 800b194:	2310      	movs	r3, #16
 800b196:	77fb      	strb	r3, [r7, #31]
 800b198:	e02c      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a72      	ldr	r2, [pc, #456]	; (800b368 <UART_SetConfig+0x4bc>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d125      	bne.n	800b1f0 <UART_SetConfig+0x344>
 800b1a4:	4b71      	ldr	r3, [pc, #452]	; (800b36c <UART_SetConfig+0x4c0>)
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b1ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b1b2:	d017      	beq.n	800b1e4 <UART_SetConfig+0x338>
 800b1b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b1b8:	d817      	bhi.n	800b1ea <UART_SetConfig+0x33e>
 800b1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1be:	d00b      	beq.n	800b1d8 <UART_SetConfig+0x32c>
 800b1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1c4:	d811      	bhi.n	800b1ea <UART_SetConfig+0x33e>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <UART_SetConfig+0x326>
 800b1ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ce:	d006      	beq.n	800b1de <UART_SetConfig+0x332>
 800b1d0:	e00b      	b.n	800b1ea <UART_SetConfig+0x33e>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	77fb      	strb	r3, [r7, #31]
 800b1d6:	e00d      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e00a      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b1de:	2304      	movs	r3, #4
 800b1e0:	77fb      	strb	r3, [r7, #31]
 800b1e2:	e007      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	77fb      	strb	r3, [r7, #31]
 800b1e8:	e004      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b1ea:	2310      	movs	r3, #16
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e001      	b.n	800b1f4 <UART_SetConfig+0x348>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1fc:	d15b      	bne.n	800b2b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b1fe:	7ffb      	ldrb	r3, [r7, #31]
 800b200:	2b08      	cmp	r3, #8
 800b202:	d828      	bhi.n	800b256 <UART_SetConfig+0x3aa>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <UART_SetConfig+0x360>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b239 	.word	0x0800b239
 800b214:	0800b241 	.word	0x0800b241
 800b218:	0800b257 	.word	0x0800b257
 800b21c:	0800b247 	.word	0x0800b247
 800b220:	0800b257 	.word	0x0800b257
 800b224:	0800b257 	.word	0x0800b257
 800b228:	0800b257 	.word	0x0800b257
 800b22c:	0800b24f 	.word	0x0800b24f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b230:	f7fd fd3a 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800b234:	61b8      	str	r0, [r7, #24]
        break;
 800b236:	e013      	b.n	800b260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b238:	f7fd fd4a 	bl	8008cd0 <HAL_RCC_GetPCLK2Freq>
 800b23c:	61b8      	str	r0, [r7, #24]
        break;
 800b23e:	e00f      	b.n	800b260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b240:	4b4b      	ldr	r3, [pc, #300]	; (800b370 <UART_SetConfig+0x4c4>)
 800b242:	61bb      	str	r3, [r7, #24]
        break;
 800b244:	e00c      	b.n	800b260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b246:	f7fd fc5d 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 800b24a:	61b8      	str	r0, [r7, #24]
        break;
 800b24c:	e008      	b.n	800b260 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b24e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b252:	61bb      	str	r3, [r7, #24]
        break;
 800b254:	e004      	b.n	800b260 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	77bb      	strb	r3, [r7, #30]
        break;
 800b25e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d074      	beq.n	800b350 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	005a      	lsls	r2, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	441a      	add	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	2b0f      	cmp	r3, #15
 800b280:	d916      	bls.n	800b2b0 <UART_SetConfig+0x404>
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b288:	d212      	bcs.n	800b2b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f023 030f 	bic.w	r3, r3, #15
 800b292:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	085b      	lsrs	r3, r3, #1
 800b298:	b29b      	uxth	r3, r3
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	89fb      	ldrh	r3, [r7, #14]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	89fa      	ldrh	r2, [r7, #14]
 800b2ac:	60da      	str	r2, [r3, #12]
 800b2ae:	e04f      	b.n	800b350 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	77bb      	strb	r3, [r7, #30]
 800b2b4:	e04c      	b.n	800b350 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2b6:	7ffb      	ldrb	r3, [r7, #31]
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d828      	bhi.n	800b30e <UART_SetConfig+0x462>
 800b2bc:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <UART_SetConfig+0x418>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b2e9 	.word	0x0800b2e9
 800b2c8:	0800b2f1 	.word	0x0800b2f1
 800b2cc:	0800b2f9 	.word	0x0800b2f9
 800b2d0:	0800b30f 	.word	0x0800b30f
 800b2d4:	0800b2ff 	.word	0x0800b2ff
 800b2d8:	0800b30f 	.word	0x0800b30f
 800b2dc:	0800b30f 	.word	0x0800b30f
 800b2e0:	0800b30f 	.word	0x0800b30f
 800b2e4:	0800b307 	.word	0x0800b307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2e8:	f7fd fcde 	bl	8008ca8 <HAL_RCC_GetPCLK1Freq>
 800b2ec:	61b8      	str	r0, [r7, #24]
        break;
 800b2ee:	e013      	b.n	800b318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f0:	f7fd fcee 	bl	8008cd0 <HAL_RCC_GetPCLK2Freq>
 800b2f4:	61b8      	str	r0, [r7, #24]
        break;
 800b2f6:	e00f      	b.n	800b318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2f8:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <UART_SetConfig+0x4c4>)
 800b2fa:	61bb      	str	r3, [r7, #24]
        break;
 800b2fc:	e00c      	b.n	800b318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2fe:	f7fd fc01 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 800b302:	61b8      	str	r0, [r7, #24]
        break;
 800b304:	e008      	b.n	800b318 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b30a:	61bb      	str	r3, [r7, #24]
        break;
 800b30c:	e004      	b.n	800b318 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	77bb      	strb	r3, [r7, #30]
        break;
 800b316:	bf00      	nop
    }

    if (pclk != 0U)
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d018      	beq.n	800b350 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	085a      	lsrs	r2, r3, #1
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	441a      	add	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2b0f      	cmp	r3, #15
 800b336:	d909      	bls.n	800b34c <UART_SetConfig+0x4a0>
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33e:	d205      	bcs.n	800b34c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60da      	str	r2, [r3, #12]
 800b34a:	e001      	b.n	800b350 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b35c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	40007c00 	.word	0x40007c00
 800b36c:	40023800 	.word	0x40023800
 800b370:	00f42400 	.word	0x00f42400

0800b374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	f003 0301 	and.w	r3, r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00a      	beq.n	800b39e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	430a      	orrs	r2, r1
 800b39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00a      	beq.n	800b3c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	f003 0308 	and.w	r3, r3, #8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	f003 0320 	and.w	r3, r3, #32
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d01a      	beq.n	800b48a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	430a      	orrs	r2, r1
 800b468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b472:	d10a      	bne.n	800b48a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	605a      	str	r2, [r3, #4]
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c8:	f7f9 ff96 	bl	80053f8 <HAL_GetTick>
 800b4cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d10e      	bne.n	800b4fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f831 	bl	800b552 <UART_WaitOnFlagUntilTimeout>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e027      	b.n	800b54a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b04      	cmp	r3, #4
 800b506:	d10e      	bne.n	800b526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f81b 	bl	800b552 <UART_WaitOnFlagUntilTimeout>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e011      	b.n	800b54a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2220      	movs	r2, #32
 800b530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b09c      	sub	sp, #112	; 0x70
 800b556:	af00      	add	r7, sp, #0
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	603b      	str	r3, [r7, #0]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b562:	e0a7      	b.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	f000 80a3 	beq.w	800b6b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b56e:	f7f9 ff43 	bl	80053f8 <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d302      	bcc.n	800b584 <UART_WaitOnFlagUntilTimeout+0x32>
 800b57e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b580:	2b00      	cmp	r3, #0
 800b582:	d13f      	bne.n	800b604 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b594:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b598:	667b      	str	r3, [r7, #100]	; 0x64
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e6      	bne.n	800b584 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	f023 0301 	bic.w	r3, r3, #1
 800b5cc:	663b      	str	r3, [r7, #96]	; 0x60
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5d6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b5d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5de:	e841 2300 	strex	r3, r2, [r1]
 800b5e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1e5      	bne.n	800b5b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e068      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d050      	beq.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b61c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b620:	d148      	bne.n	800b6b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b62a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	e853 3f00 	ldrex	r3, [r3]
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b640:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b64a:	637b      	str	r3, [r7, #52]	; 0x34
 800b64c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b652:	e841 2300 	strex	r3, r2, [r1]
 800b656:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1e6      	bne.n	800b62c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3308      	adds	r3, #8
 800b664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	613b      	str	r3, [r7, #16]
   return(result);
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f023 0301 	bic.w	r3, r3, #1
 800b674:	66bb      	str	r3, [r7, #104]	; 0x68
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3308      	adds	r3, #8
 800b67c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b67e:	623a      	str	r2, [r7, #32]
 800b680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	69f9      	ldr	r1, [r7, #28]
 800b684:	6a3a      	ldr	r2, [r7, #32]
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e5      	bne.n	800b65e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2220      	movs	r2, #32
 800b696:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2220      	movs	r2, #32
 800b6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e010      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	69da      	ldr	r2, [r3, #28]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	bf0c      	ite	eq
 800b6c4:	2301      	moveq	r3, #1
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	f43f af48 	beq.w	800b564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3770      	adds	r7, #112	; 0x70
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b095      	sub	sp, #84	; 0x54
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b704:	643b      	str	r3, [r7, #64]	; 0x40
 800b706:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b70a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e6      	bne.n	800b6e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3308      	adds	r3, #8
 800b71e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	61fb      	str	r3, [r7, #28]
   return(result);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	f023 0301 	bic.w	r3, r3, #1
 800b72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3308      	adds	r3, #8
 800b736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b750:	2b01      	cmp	r3, #1
 800b752:	d118      	bne.n	800b786 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	60bb      	str	r3, [r7, #8]
   return(result);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	647b      	str	r3, [r7, #68]	; 0x44
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b772:	61bb      	str	r3, [r7, #24]
 800b774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	6979      	ldr	r1, [r7, #20]
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	613b      	str	r3, [r7, #16]
   return(result);
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e6      	bne.n	800b754 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b79a:	bf00      	nop
 800b79c:	3754      	adds	r7, #84	; 0x54
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fb51 	bl	800ae6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6979      	ldr	r1, [r7, #20]
 800b7fe:	69ba      	ldr	r2, [r7, #24]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	613b      	str	r3, [r7, #16]
   return(result);
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2220      	movs	r2, #32
 800b810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fb1d 	bl	800ae58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b81e:	bf00      	nop
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d121      	bne.n	800b87e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4b27      	ldr	r3, [pc, #156]	; (800b8dc <FMC_SDRAM_Init+0xb4>)
 800b840:	4013      	ands	r3, r2
 800b842:	683a      	ldr	r2, [r7, #0]
 800b844:	6851      	ldr	r1, [r2, #4]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	6892      	ldr	r2, [r2, #8]
 800b84a:	4311      	orrs	r1, r2
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	68d2      	ldr	r2, [r2, #12]
 800b850:	4311      	orrs	r1, r2
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	6912      	ldr	r2, [r2, #16]
 800b856:	4311      	orrs	r1, r2
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	6952      	ldr	r2, [r2, #20]
 800b85c:	4311      	orrs	r1, r2
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	6992      	ldr	r2, [r2, #24]
 800b862:	4311      	orrs	r1, r2
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	69d2      	ldr	r2, [r2, #28]
 800b868:	4311      	orrs	r1, r2
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	6a12      	ldr	r2, [r2, #32]
 800b86e:	4311      	orrs	r1, r2
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b874:	430a      	orrs	r2, r1
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e026      	b.n	800b8cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	69d9      	ldr	r1, [r3, #28]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	4319      	orrs	r1, r3
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	430b      	orrs	r3, r1
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <FMC_SDRAM_Init+0xb4>)
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	6851      	ldr	r1, [r2, #4]
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	6892      	ldr	r2, [r2, #8]
 800b8ac:	4311      	orrs	r1, r2
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	68d2      	ldr	r2, [r2, #12]
 800b8b2:	4311      	orrs	r1, r2
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	6912      	ldr	r2, [r2, #16]
 800b8b8:	4311      	orrs	r1, r2
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	6952      	ldr	r2, [r2, #20]
 800b8be:	4311      	orrs	r1, r2
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	6992      	ldr	r2, [r2, #24]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	ffff8000 	.word	0xffff8000

0800b8e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d128      	bne.n	800b944 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	1e59      	subs	r1, r3, #1
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	3b01      	subs	r3, #1
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4319      	orrs	r1, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	3b01      	subs	r3, #1
 800b910:	021b      	lsls	r3, r3, #8
 800b912:	4319      	orrs	r1, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	3b01      	subs	r3, #1
 800b91a:	031b      	lsls	r3, r3, #12
 800b91c:	4319      	orrs	r1, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	3b01      	subs	r3, #1
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	4319      	orrs	r1, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	051b      	lsls	r3, r3, #20
 800b930:	4319      	orrs	r1, r3
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	3b01      	subs	r3, #1
 800b938:	061b      	lsls	r3, r3, #24
 800b93a:	430b      	orrs	r3, r1
 800b93c:	431a      	orrs	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	609a      	str	r2, [r3, #8]
 800b942:	e02d      	b.n	800b9a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	4b19      	ldr	r3, [pc, #100]	; (800b9b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800b94a:	4013      	ands	r3, r2
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	68d2      	ldr	r2, [r2, #12]
 800b950:	3a01      	subs	r2, #1
 800b952:	0311      	lsls	r1, r2, #12
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	6952      	ldr	r2, [r2, #20]
 800b958:	3a01      	subs	r2, #1
 800b95a:	0512      	lsls	r2, r2, #20
 800b95c:	430a      	orrs	r2, r1
 800b95e:	431a      	orrs	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	1e59      	subs	r1, r3, #1
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	3b01      	subs	r3, #1
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	4319      	orrs	r1, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	3b01      	subs	r3, #1
 800b982:	021b      	lsls	r3, r3, #8
 800b984:	4319      	orrs	r1, r3
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	4319      	orrs	r1, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	3b01      	subs	r3, #1
 800b996:	061b      	lsls	r3, r3, #24
 800b998:	430b      	orrs	r3, r1
 800b99a:	431a      	orrs	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	ff0f0fff 	.word	0xff0f0fff

0800b9b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	691a      	ldr	r2, [r3, #16]
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <FMC_SDRAM_SendCommand+0x44>)
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	6811      	ldr	r1, [r2, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	6852      	ldr	r2, [r2, #4]
 800b9d0:	4311      	orrs	r1, r2
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	6892      	ldr	r2, [r2, #8]
 800b9d6:	3a01      	subs	r2, #1
 800b9d8:	0152      	lsls	r2, r2, #5
 800b9da:	4311      	orrs	r1, r2
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	68d2      	ldr	r2, [r2, #12]
 800b9e0:	0252      	lsls	r2, r2, #9
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	ffc00000 	.word	0xffc00000

0800b9fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	0052      	lsls	r2, r2, #1
 800ba12:	431a      	orrs	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	ffffc001 	.word	0xffffc001

0800ba2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ba30:	bf00      	nop
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
	...

0800ba3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba42:	f3ef 8305 	mrs	r3, IPSR
 800ba46:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10f      	bne.n	800ba6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba52:	607b      	str	r3, [r7, #4]
  return(result);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba5a:	f3ef 8311 	mrs	r3, BASEPRI
 800ba5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <osKernelInitialize+0x3a>
 800ba66:	4b0e      	ldr	r3, [pc, #56]	; (800baa0 <osKernelInitialize+0x64>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d103      	bne.n	800ba76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ba6e:	f06f 0305 	mvn.w	r3, #5
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e00c      	b.n	800ba90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba76:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <osKernelInitialize+0x64>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba7e:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <osKernelInitialize+0x64>)
 800ba80:	2201      	movs	r2, #1
 800ba82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	e002      	b.n	800ba90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ba8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ba90:	68fb      	ldr	r3, [r7, #12]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20004844 	.word	0x20004844

0800baa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baaa:	f3ef 8305 	mrs	r3, IPSR
 800baae:	60bb      	str	r3, [r7, #8]
  return(result);
 800bab0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10f      	bne.n	800bad6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bab6:	f3ef 8310 	mrs	r3, PRIMASK
 800baba:	607b      	str	r3, [r7, #4]
  return(result);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d105      	bne.n	800bace <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bac2:	f3ef 8311 	mrs	r3, BASEPRI
 800bac6:	603b      	str	r3, [r7, #0]
  return(result);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <osKernelStart+0x3a>
 800bace:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <osKernelStart+0x68>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d103      	bne.n	800bade <osKernelStart+0x3a>
    stat = osErrorISR;
 800bad6:	f06f 0305 	mvn.w	r3, #5
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	e010      	b.n	800bb00 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <osKernelStart+0x68>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d109      	bne.n	800bafa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bae6:	f7ff ffa1 	bl	800ba2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800baea:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <osKernelStart+0x68>)
 800baec:	2202      	movs	r2, #2
 800baee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800baf0:	f001 face 	bl	800d090 <vTaskStartScheduler>
      stat = osOK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	e002      	b.n	800bb00 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800bafa:	f04f 33ff 	mov.w	r3, #4294967295
 800bafe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bb00:	68fb      	ldr	r3, [r7, #12]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20004844 	.word	0x20004844

0800bb10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b090      	sub	sp, #64	; 0x40
 800bb14:	af04      	add	r7, sp, #16
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb20:	f3ef 8305 	mrs	r3, IPSR
 800bb24:	61fb      	str	r3, [r7, #28]
  return(result);
 800bb26:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f040 808f 	bne.w	800bc4c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb32:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb3a:	f3ef 8311 	mrs	r3, BASEPRI
 800bb3e:	617b      	str	r3, [r7, #20]
  return(result);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <osThreadNew+0x3e>
 800bb46:	4b44      	ldr	r3, [pc, #272]	; (800bc58 <osThreadNew+0x148>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d07e      	beq.n	800bc4c <osThreadNew+0x13c>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d07b      	beq.n	800bc4c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800bb54:	2380      	movs	r3, #128	; 0x80
 800bb56:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800bb58:	2318      	movs	r3, #24
 800bb5a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800bb60:	f04f 33ff 	mov.w	r3, #4294967295
 800bb64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d045      	beq.n	800bbf8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <osThreadNew+0x6a>
        name = attr->name;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d008      	beq.n	800bba0 <osThreadNew+0x90>
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	2b38      	cmp	r3, #56	; 0x38
 800bb92:	d805      	bhi.n	800bba0 <osThreadNew+0x90>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <osThreadNew+0x94>
        return (NULL);
 800bba0:	2300      	movs	r3, #0
 800bba2:	e054      	b.n	800bc4e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	089b      	lsrs	r3, r3, #2
 800bbb2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00e      	beq.n	800bbda <osThreadNew+0xca>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	2ba7      	cmp	r3, #167	; 0xa7
 800bbc2:	d90a      	bls.n	800bbda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d006      	beq.n	800bbda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <osThreadNew+0xca>
        mem = 1;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	623b      	str	r3, [r7, #32]
 800bbd8:	e010      	b.n	800bbfc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10c      	bne.n	800bbfc <osThreadNew+0xec>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d108      	bne.n	800bbfc <osThreadNew+0xec>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d104      	bne.n	800bbfc <osThreadNew+0xec>
          mem = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	623b      	str	r3, [r7, #32]
 800bbf6:	e001      	b.n	800bbfc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d110      	bne.n	800bc24 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc0a:	9202      	str	r2, [sp, #8]
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f001 f843 	bl	800cca4 <xTaskCreateStatic>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	e013      	b.n	800bc4c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d110      	bne.n	800bc4c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	f107 0310 	add.w	r3, r7, #16
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f001 f894 	bl	800cd6a <xTaskCreate>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d001      	beq.n	800bc4c <osThreadNew+0x13c>
          hTask = NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc4c:	693b      	ldr	r3, [r7, #16]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3730      	adds	r7, #48	; 0x30
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20004844 	.word	0x20004844

0800bc5c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc64:	f3ef 8305 	mrs	r3, IPSR
 800bc68:	613b      	str	r3, [r7, #16]
  return(result);
 800bc6a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10f      	bne.n	800bc90 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc70:	f3ef 8310 	mrs	r3, PRIMASK
 800bc74:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d105      	bne.n	800bc88 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc7c:	f3ef 8311 	mrs	r3, BASEPRI
 800bc80:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d007      	beq.n	800bc98 <osDelay+0x3c>
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <osDelay+0x58>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d103      	bne.n	800bc98 <osDelay+0x3c>
    stat = osErrorISR;
 800bc90:	f06f 0305 	mvn.w	r3, #5
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e007      	b.n	800bca8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 f9be 	bl	800d024 <vTaskDelay>
    }
  }

  return (stat);
 800bca8:	697b      	ldr	r3, [r7, #20]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20004844 	.word	0x20004844

0800bcb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a07      	ldr	r2, [pc, #28]	; (800bce4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bcc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	4a06      	ldr	r2, [pc, #24]	; (800bce8 <vApplicationGetIdleTaskMemory+0x30>)
 800bcce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	601a      	str	r2, [r3, #0]
}
 800bcd6:	bf00      	nop
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20004848 	.word	0x20004848
 800bce8:	200048f0 	.word	0x200048f0

0800bcec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4a07      	ldr	r2, [pc, #28]	; (800bd18 <vApplicationGetTimerTaskMemory+0x2c>)
 800bcfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	4a06      	ldr	r2, [pc, #24]	; (800bd1c <vApplicationGetTimerTaskMemory+0x30>)
 800bd02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd0a:	601a      	str	r2, [r3, #0]
}
 800bd0c:	bf00      	nop
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	20004af0 	.word	0x20004af0
 800bd1c:	20004b98 	.word	0x20004b98

0800bd20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f103 0208 	add.w	r2, r3, #8
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f04f 32ff 	mov.w	r2, #4294967295
 800bd38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f103 0208 	add.w	r2, r3, #8
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f103 0208 	add.w	r2, r3, #8
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b085      	sub	sp, #20
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	601a      	str	r2, [r3, #0]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b085      	sub	sp, #20
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd8:	d103      	bne.n	800bde2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e00c      	b.n	800bdfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3308      	adds	r3, #8
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e002      	b.n	800bdf0 <vListInsert+0x2e>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d2f6      	bcs.n	800bdea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	601a      	str	r2, [r3, #0]
}
 800be28:	bf00      	nop
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	6892      	ldr	r2, [r2, #8]
 800be4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	6852      	ldr	r2, [r2, #4]
 800be54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d103      	bne.n	800be68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1e5a      	subs	r2, r3, #1
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10c      	bne.n	800beb6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	b672      	cpsid	i
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	b662      	cpsie	i
 800beb0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800beb6:	f002 fd19 	bl	800e8ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec2:	68f9      	ldr	r1, [r7, #12]
 800bec4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bec6:	fb01 f303 	mul.w	r3, r1, r3
 800beca:	441a      	add	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee6:	3b01      	subs	r3, #1
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800beec:	fb01 f303 	mul.w	r3, r1, r3
 800bef0:	441a      	add	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	22ff      	movs	r2, #255	; 0xff
 800befa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	22ff      	movs	r2, #255	; 0xff
 800bf02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d114      	bne.n	800bf36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01a      	beq.n	800bf4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3310      	adds	r3, #16
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f001 fb61 	bl	800d5e0 <xTaskRemoveFromEventList>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d012      	beq.n	800bf4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf24:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <xQueueGenericReset+0xd0>)
 800bf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2a:	601a      	str	r2, [r3, #0]
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	e009      	b.n	800bf4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3310      	adds	r3, #16
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff fef0 	bl	800bd20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3324      	adds	r3, #36	; 0x24
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff feeb 	bl	800bd20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf4a:	f002 fd03 	bl	800e954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf4e:	2301      	movs	r3, #1
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08e      	sub	sp, #56	; 0x38
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10c      	bne.n	800bf8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	b672      	cpsid	i
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	b662      	cpsie	i
 800bf84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10c      	bne.n	800bfaa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	b672      	cpsid	i
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	b662      	cpsie	i
 800bfa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <xQueueGenericCreateStatic+0x5a>
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <xQueueGenericCreateStatic+0x5e>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <xQueueGenericCreateStatic+0x60>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10c      	bne.n	800bfda <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	b672      	cpsid	i
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	b662      	cpsie	i
 800bfd4:	623b      	str	r3, [r7, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d102      	bne.n	800bfe6 <xQueueGenericCreateStatic+0x8a>
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d101      	bne.n	800bfea <xQueueGenericCreateStatic+0x8e>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e000      	b.n	800bfec <xQueueGenericCreateStatic+0x90>
 800bfea:	2300      	movs	r3, #0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10c      	bne.n	800c00a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	b672      	cpsid	i
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	b662      	cpsie	i
 800c004:	61fb      	str	r3, [r7, #28]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c00a:	2350      	movs	r3, #80	; 0x50
 800c00c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2b50      	cmp	r3, #80	; 0x50
 800c012:	d00c      	beq.n	800c02e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	b672      	cpsid	i
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	b662      	cpsie	i
 800c028:	61bb      	str	r3, [r7, #24]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c02e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00d      	beq.n	800c056 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c042:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	4613      	mov	r3, r2
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 f847 	bl	800c0e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c058:	4618      	mov	r0, r3
 800c05a:	3730      	adds	r7, #48	; 0x30
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	; 0x28
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10c      	bne.n	800c08e <xQueueGenericCreate+0x2e>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	b672      	cpsid	i
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	b662      	cpsie	i
 800c088:	613b      	str	r3, [r7, #16]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c094:	2300      	movs	r3, #0
 800c096:	61fb      	str	r3, [r7, #28]
 800c098:	e004      	b.n	800c0a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	fb02 f303 	mul.w	r3, r2, r3
 800c0a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	3350      	adds	r3, #80	; 0x50
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f002 fd4b 	bl	800eb44 <pvPortMalloc>
 800c0ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d011      	beq.n	800c0da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	3350      	adds	r3, #80	; 0x50
 800c0be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0c8:	79fa      	ldrb	r2, [r7, #7]
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f000 f805 	bl	800c0e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0da:	69bb      	ldr	r3, [r7, #24]
	}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3720      	adds	r7, #32
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d103      	bne.n	800c100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c112:	2101      	movs	r1, #1
 800c114:	69b8      	ldr	r0, [r7, #24]
 800c116:	f7ff feb7 	bl	800be88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	78fa      	ldrb	r2, [r7, #3]
 800c11e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08e      	sub	sp, #56	; 0x38
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c13a:	2300      	movs	r3, #0
 800c13c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10c      	bne.n	800c162 <xQueueGenericSend+0x36>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	b672      	cpsid	i
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	b662      	cpsie	i
 800c15c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <xQueueGenericSend+0x44>
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <xQueueGenericSend+0x48>
 800c170:	2301      	movs	r3, #1
 800c172:	e000      	b.n	800c176 <xQueueGenericSend+0x4a>
 800c174:	2300      	movs	r3, #0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10c      	bne.n	800c194 <xQueueGenericSend+0x68>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	b672      	cpsid	i
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	b662      	cpsie	i
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b02      	cmp	r3, #2
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSend+0x76>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d101      	bne.n	800c1a6 <xQueueGenericSend+0x7a>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericSend+0x7c>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10c      	bne.n	800c1c6 <xQueueGenericSend+0x9a>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	b672      	cpsid	i
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	b662      	cpsie	i
 800c1c0:	623b      	str	r3, [r7, #32]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1c6:	f001 fbd5 	bl	800d974 <xTaskGetSchedulerState>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <xQueueGenericSend+0xaa>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <xQueueGenericSend+0xae>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <xQueueGenericSend+0xb0>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10c      	bne.n	800c1fa <xQueueGenericSend+0xce>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	b672      	cpsid	i
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	b662      	cpsie	i
 800c1f4:	61fb      	str	r3, [r7, #28]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1fa:	f002 fb77 	bl	800e8ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c206:	429a      	cmp	r2, r3
 800c208:	d302      	bcc.n	800c210 <xQueueGenericSend+0xe4>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d129      	bne.n	800c264 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c216:	f000 fbd7 	bl	800c9c8 <prvCopyDataToQueue>
 800c21a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d010      	beq.n	800c246 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	3324      	adds	r3, #36	; 0x24
 800c228:	4618      	mov	r0, r3
 800c22a:	f001 f9d9 	bl	800d5e0 <xTaskRemoveFromEventList>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d013      	beq.n	800c25c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c234:	4b3f      	ldr	r3, [pc, #252]	; (800c334 <xQueueGenericSend+0x208>)
 800c236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	e00a      	b.n	800c25c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c24c:	4b39      	ldr	r3, [pc, #228]	; (800c334 <xQueueGenericSend+0x208>)
 800c24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c25c:	f002 fb7a 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800c260:	2301      	movs	r3, #1
 800c262:	e063      	b.n	800c32c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d103      	bne.n	800c272 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c26a:	f002 fb73 	bl	800e954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	e05c      	b.n	800c32c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c278:	f107 0314 	add.w	r3, r7, #20
 800c27c:	4618      	mov	r0, r3
 800c27e:	f001 fa15 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c282:	2301      	movs	r3, #1
 800c284:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c286:	f002 fb65 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c28a:	f000 ff75 	bl	800d178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c28e:	f002 fb2d 	bl	800e8ec <vPortEnterCritical>
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c298:	b25b      	sxtb	r3, r3
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d103      	bne.n	800c2a8 <xQueueGenericSend+0x17c>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d103      	bne.n	800c2be <xQueueGenericSend+0x192>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2be:	f002 fb49 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2c2:	1d3a      	adds	r2, r7, #4
 800c2c4:	f107 0314 	add.w	r3, r7, #20
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 fa04 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d124      	bne.n	800c320 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2d8:	f000 fc6e 	bl	800cbb8 <prvIsQueueFull>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d018      	beq.n	800c314 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	3310      	adds	r3, #16
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 f924 	bl	800d538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2f2:	f000 fbf9 	bl	800cae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c2f6:	f000 ff4d 	bl	800d194 <xTaskResumeAll>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f47f af7c 	bne.w	800c1fa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c302:	4b0c      	ldr	r3, [pc, #48]	; (800c334 <xQueueGenericSend+0x208>)
 800c304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	e772      	b.n	800c1fa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c316:	f000 fbe7 	bl	800cae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c31a:	f000 ff3b 	bl	800d194 <xTaskResumeAll>
 800c31e:	e76c      	b.n	800c1fa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c322:	f000 fbe1 	bl	800cae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c326:	f000 ff35 	bl	800d194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c32a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3738      	adds	r7, #56	; 0x38
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	e000ed04 	.word	0xe000ed04

0800c338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08e      	sub	sp, #56	; 0x38
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10c      	bne.n	800c36a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	b672      	cpsid	i
 800c356:	f383 8811 	msr	BASEPRI, r3
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	b662      	cpsie	i
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d103      	bne.n	800c378 <xQueueGenericSendFromISR+0x40>
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <xQueueGenericSendFromISR+0x44>
 800c378:	2301      	movs	r3, #1
 800c37a:	e000      	b.n	800c37e <xQueueGenericSendFromISR+0x46>
 800c37c:	2300      	movs	r3, #0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10c      	bne.n	800c39c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	b672      	cpsid	i
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	b662      	cpsie	i
 800c396:	623b      	str	r3, [r7, #32]
}
 800c398:	bf00      	nop
 800c39a:	e7fe      	b.n	800c39a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d103      	bne.n	800c3aa <xQueueGenericSendFromISR+0x72>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d101      	bne.n	800c3ae <xQueueGenericSendFromISR+0x76>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e000      	b.n	800c3b0 <xQueueGenericSendFromISR+0x78>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10c      	bne.n	800c3ce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	b672      	cpsid	i
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	b662      	cpsie	i
 800c3c8:	61fb      	str	r3, [r7, #28]
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3ce:	f002 fb75 	bl	800eabc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3d2:	f3ef 8211 	mrs	r2, BASEPRI
 800c3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3da:	b672      	cpsid	i
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	b662      	cpsie	i
 800c3ea:	61ba      	str	r2, [r7, #24]
 800c3ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d302      	bcc.n	800c404 <xQueueGenericSendFromISR+0xcc>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d12c      	bne.n	800c45e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c40a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c414:	f000 fad8 	bl	800c9c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c418:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c420:	d112      	bne.n	800c448 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	d016      	beq.n	800c458 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	3324      	adds	r3, #36	; 0x24
 800c42e:	4618      	mov	r0, r3
 800c430:	f001 f8d6 	bl	800d5e0 <xTaskRemoveFromEventList>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00e      	beq.n	800c458 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	e007      	b.n	800c458 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c44c:	3301      	adds	r3, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	b25a      	sxtb	r2, r3
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c458:	2301      	movs	r3, #1
 800c45a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c45c:	e001      	b.n	800c462 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c45e:	2300      	movs	r3, #0
 800c460:	637b      	str	r3, [r7, #52]	; 0x34
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c46c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c470:	4618      	mov	r0, r3
 800c472:	3738      	adds	r7, #56	; 0x38
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08e      	sub	sp, #56	; 0x38
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10c      	bne.n	800c4a6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	b672      	cpsid	i
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	b662      	cpsie	i
 800c4a0:	623b      	str	r3, [r7, #32]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00c      	beq.n	800c4c8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	b672      	cpsid	i
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	b662      	cpsie	i
 800c4c2:	61fb      	str	r3, [r7, #28]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <xQueueGiveFromISR+0x60>
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <xQueueGiveFromISR+0x64>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e000      	b.n	800c4de <xQueueGiveFromISR+0x66>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10c      	bne.n	800c4fc <xQueueGiveFromISR+0x84>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	b672      	cpsid	i
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	b662      	cpsie	i
 800c4f6:	61bb      	str	r3, [r7, #24]
}
 800c4f8:	bf00      	nop
 800c4fa:	e7fe      	b.n	800c4fa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4fc:	f002 fade 	bl	800eabc <vPortValidateInterruptPriority>
	__asm volatile
 800c500:	f3ef 8211 	mrs	r2, BASEPRI
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	b672      	cpsid	i
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	b662      	cpsie	i
 800c518:	617a      	str	r2, [r7, #20]
 800c51a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c51c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c51e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d22b      	bcs.n	800c588 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54a:	d112      	bne.n	800c572 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c550:	2b00      	cmp	r3, #0
 800c552:	d016      	beq.n	800c582 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	3324      	adds	r3, #36	; 0x24
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 f841 	bl	800d5e0 <xTaskRemoveFromEventList>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00e      	beq.n	800c582 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2201      	movs	r2, #1
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	e007      	b.n	800c582 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c576:	3301      	adds	r3, #1
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	b25a      	sxtb	r2, r3
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c582:	2301      	movs	r3, #1
 800c584:	637b      	str	r3, [r7, #52]	; 0x34
 800c586:	e001      	b.n	800c58c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c588:	2300      	movs	r3, #0
 800c58a:	637b      	str	r3, [r7, #52]	; 0x34
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f383 8811 	msr	BASEPRI, r3
}
 800c596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3738      	adds	r7, #56	; 0x38
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08c      	sub	sp, #48	; 0x30
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10c      	bne.n	800c5d8 <xQueueReceive+0x34>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	b672      	cpsid	i
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	b662      	cpsie	i
 800c5d2:	623b      	str	r3, [r7, #32]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d103      	bne.n	800c5e6 <xQueueReceive+0x42>
 800c5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <xQueueReceive+0x46>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <xQueueReceive+0x48>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10c      	bne.n	800c60a <xQueueReceive+0x66>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	b672      	cpsid	i
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	b662      	cpsie	i
 800c604:	61fb      	str	r3, [r7, #28]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c60a:	f001 f9b3 	bl	800d974 <xTaskGetSchedulerState>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <xQueueReceive+0x76>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <xQueueReceive+0x7a>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e000      	b.n	800c620 <xQueueReceive+0x7c>
 800c61e:	2300      	movs	r3, #0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10c      	bne.n	800c63e <xQueueReceive+0x9a>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	b672      	cpsid	i
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	b662      	cpsie	i
 800c638:	61bb      	str	r3, [r7, #24]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c63e:	f002 f955 	bl	800e8ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c646:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d01f      	beq.n	800c68e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c652:	f000 fa23 	bl	800ca9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	1e5a      	subs	r2, r3, #1
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00f      	beq.n	800c686 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	3310      	adds	r3, #16
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 ffb8 	bl	800d5e0 <xTaskRemoveFromEventList>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d007      	beq.n	800c686 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c676:	4b3d      	ldr	r3, [pc, #244]	; (800c76c <xQueueReceive+0x1c8>)
 800c678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c686:	f002 f965 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e069      	b.n	800c762 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d103      	bne.n	800c69c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c694:	f002 f95e 	bl	800e954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c698:	2300      	movs	r3, #0
 800c69a:	e062      	b.n	800c762 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6a2:	f107 0310 	add.w	r3, r7, #16
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f001 f800 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6b0:	f002 f950 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6b4:	f000 fd60 	bl	800d178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6b8:	f002 f918 	bl	800e8ec <vPortEnterCritical>
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6c2:	b25b      	sxtb	r3, r3
 800c6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c8:	d103      	bne.n	800c6d2 <xQueueReceive+0x12e>
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6d8:	b25b      	sxtb	r3, r3
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6de:	d103      	bne.n	800c6e8 <xQueueReceive+0x144>
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6e8:	f002 f934 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ec:	1d3a      	adds	r2, r7, #4
 800c6ee:	f107 0310 	add.w	r3, r7, #16
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 ffef 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d123      	bne.n	800c748 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c702:	f000 fa43 	bl	800cb8c <prvIsQueueEmpty>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d017      	beq.n	800c73c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	3324      	adds	r3, #36	; 0x24
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	4611      	mov	r1, r2
 800c714:	4618      	mov	r0, r3
 800c716:	f000 ff0f 	bl	800d538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c71c:	f000 f9e4 	bl	800cae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c720:	f000 fd38 	bl	800d194 <xTaskResumeAll>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d189      	bne.n	800c63e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <xQueueReceive+0x1c8>)
 800c72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	e780      	b.n	800c63e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73e:	f000 f9d3 	bl	800cae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c742:	f000 fd27 	bl	800d194 <xTaskResumeAll>
 800c746:	e77a      	b.n	800c63e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74a:	f000 f9cd 	bl	800cae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c74e:	f000 fd21 	bl	800d194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c754:	f000 fa1a 	bl	800cb8c <prvIsQueueEmpty>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f43f af6f 	beq.w	800c63e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c762:	4618      	mov	r0, r3
 800c764:	3730      	adds	r7, #48	; 0x30
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	e000ed04 	.word	0xe000ed04

0800c770 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08e      	sub	sp, #56	; 0x38
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c77a:	2300      	movs	r3, #0
 800c77c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c782:	2300      	movs	r3, #0
 800c784:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10c      	bne.n	800c7a6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	b672      	cpsid	i
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	b662      	cpsie	i
 800c7a0:	623b      	str	r3, [r7, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00c      	beq.n	800c7c8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	b672      	cpsid	i
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	b662      	cpsie	i
 800c7c2:	61fb      	str	r3, [r7, #28]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7c8:	f001 f8d4 	bl	800d974 <xTaskGetSchedulerState>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <xQueueSemaphoreTake+0x68>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <xQueueSemaphoreTake+0x6c>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <xQueueSemaphoreTake+0x6e>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10c      	bne.n	800c7fc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	b672      	cpsid	i
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	b662      	cpsie	i
 800c7f6:	61bb      	str	r3, [r7, #24]
}
 800c7f8:	bf00      	nop
 800c7fa:	e7fe      	b.n	800c7fa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7fc:	f002 f876 	bl	800e8ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d024      	beq.n	800c856 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	1e5a      	subs	r2, r3, #1
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d104      	bne.n	800c826 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c81c:	f001 fa28 	bl	800dc70 <pvTaskIncrementMutexHeldCount>
 800c820:	4602      	mov	r2, r0
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00f      	beq.n	800c84e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c830:	3310      	adds	r3, #16
 800c832:	4618      	mov	r0, r3
 800c834:	f000 fed4 	bl	800d5e0 <xTaskRemoveFromEventList>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d007      	beq.n	800c84e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c83e:	4b55      	ldr	r3, [pc, #340]	; (800c994 <xQueueSemaphoreTake+0x224>)
 800c840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c84e:	f002 f881 	bl	800e954 <vPortExitCritical>
				return pdPASS;
 800c852:	2301      	movs	r3, #1
 800c854:	e099      	b.n	800c98a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d113      	bne.n	800c884 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00c      	beq.n	800c87c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	617b      	str	r3, [r7, #20]
}
 800c878:	bf00      	nop
 800c87a:	e7fe      	b.n	800c87a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c87c:	f002 f86a 	bl	800e954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c880:	2300      	movs	r3, #0
 800c882:	e082      	b.n	800c98a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c88a:	f107 030c 	add.w	r3, r7, #12
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 ff0c 	bl	800d6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c894:	2301      	movs	r3, #1
 800c896:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c898:	f002 f85c 	bl	800e954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c89c:	f000 fc6c 	bl	800d178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8a0:	f002 f824 	bl	800e8ec <vPortEnterCritical>
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8aa:	b25b      	sxtb	r3, r3
 800c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b0:	d103      	bne.n	800c8ba <xQueueSemaphoreTake+0x14a>
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c0:	b25b      	sxtb	r3, r3
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d103      	bne.n	800c8d0 <xQueueSemaphoreTake+0x160>
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8d0:	f002 f840 	bl	800e954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8d4:	463a      	mov	r2, r7
 800c8d6:	f107 030c 	add.w	r3, r7, #12
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 fefb 	bl	800d6d8 <xTaskCheckForTimeOut>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d132      	bne.n	800c94e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8ea:	f000 f94f 	bl	800cb8c <prvIsQueueEmpty>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d026      	beq.n	800c942 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d109      	bne.n	800c910 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c8fc:	f001 fff6 	bl	800e8ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	4618      	mov	r0, r3
 800c906:	f001 f853 	bl	800d9b0 <xTaskPriorityInherit>
 800c90a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c90c:	f002 f822 	bl	800e954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	3324      	adds	r3, #36	; 0x24
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	4611      	mov	r1, r2
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fe0d 	bl	800d538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c91e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c920:	f000 f8e2 	bl	800cae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c924:	f000 fc36 	bl	800d194 <xTaskResumeAll>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f47f af66 	bne.w	800c7fc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c930:	4b18      	ldr	r3, [pc, #96]	; (800c994 <xQueueSemaphoreTake+0x224>)
 800c932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	e75c      	b.n	800c7fc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c944:	f000 f8d0 	bl	800cae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c948:	f000 fc24 	bl	800d194 <xTaskResumeAll>
 800c94c:	e756      	b.n	800c7fc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c94e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c950:	f000 f8ca 	bl	800cae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c954:	f000 fc1e 	bl	800d194 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c95a:	f000 f917 	bl	800cb8c <prvIsQueueEmpty>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	f43f af4b 	beq.w	800c7fc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00d      	beq.n	800c988 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c96c:	f001 ffbe 	bl	800e8ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c972:	f000 f811 	bl	800c998 <prvGetDisinheritPriorityAfterTimeout>
 800c976:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c97e:	4618      	mov	r0, r3
 800c980:	f001 f8f0 	bl	800db64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c984:	f001 ffe6 	bl	800e954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3738      	adds	r7, #56	; 0x38
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	e000ed04 	.word	0xe000ed04

0800c998 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d006      	beq.n	800c9b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e001      	b.n	800c9ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
	}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10d      	bne.n	800ca02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d14d      	bne.n	800ca8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f001 f844 	bl	800da80 <xTaskPriorityDisinherit>
 800c9f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	609a      	str	r2, [r3, #8]
 800ca00:	e043      	b.n	800ca8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d119      	bne.n	800ca3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6858      	ldr	r0, [r3, #4]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca10:	461a      	mov	r2, r3
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	f002 fcdd 	bl	800f3d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca20:	441a      	add	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d32b      	bcc.n	800ca8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	605a      	str	r2, [r3, #4]
 800ca3a:	e026      	b.n	800ca8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	68d8      	ldr	r0, [r3, #12]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	461a      	mov	r2, r3
 800ca46:	68b9      	ldr	r1, [r7, #8]
 800ca48:	f002 fcc3 	bl	800f3d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca54:	425b      	negs	r3, r3
 800ca56:	441a      	add	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68da      	ldr	r2, [r3, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d207      	bcs.n	800ca78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	689a      	ldr	r2, [r3, #8]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	425b      	negs	r3, r3
 800ca72:	441a      	add	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d105      	bne.n	800ca8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	1c5a      	adds	r2, r3, #1
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca92:	697b      	ldr	r3, [r7, #20]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3718      	adds	r7, #24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d018      	beq.n	800cae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	441a      	add	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d303      	bcc.n	800cad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68d9      	ldr	r1, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad8:	461a      	mov	r2, r3
 800cada:	6838      	ldr	r0, [r7, #0]
 800cadc:	f002 fc79 	bl	800f3d2 <memcpy>
	}
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800caf0:	f001 fefc 	bl	800e8ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cafa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cafc:	e011      	b.n	800cb22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d012      	beq.n	800cb2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3324      	adds	r3, #36	; 0x24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fd68 	bl	800d5e0 <xTaskRemoveFromEventList>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb16:	f000 fe45 	bl	800d7a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	dce9      	bgt.n	800cafe <prvUnlockQueue+0x16>
 800cb2a:	e000      	b.n	800cb2e <prvUnlockQueue+0x46>
					break;
 800cb2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	22ff      	movs	r2, #255	; 0xff
 800cb32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb36:	f001 ff0d 	bl	800e954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb3a:	f001 fed7 	bl	800e8ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb46:	e011      	b.n	800cb6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d012      	beq.n	800cb76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3310      	adds	r3, #16
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 fd43 	bl	800d5e0 <xTaskRemoveFromEventList>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb60:	f000 fe20 	bl	800d7a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb64:	7bbb      	ldrb	r3, [r7, #14]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dce9      	bgt.n	800cb48 <prvUnlockQueue+0x60>
 800cb74:	e000      	b.n	800cb78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	22ff      	movs	r2, #255	; 0xff
 800cb7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb80:	f001 fee8 	bl	800e954 <vPortExitCritical>
}
 800cb84:	bf00      	nop
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb94:	f001 feaa 	bl	800e8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d102      	bne.n	800cba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cba0:	2301      	movs	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	e001      	b.n	800cbaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbaa:	f001 fed3 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800cbae:	68fb      	ldr	r3, [r7, #12]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbc0:	f001 fe94 	bl	800e8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d102      	bne.n	800cbd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	e001      	b.n	800cbda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbda:	f001 febb 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800cbde:	68fb      	ldr	r3, [r7, #12]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	e014      	b.n	800cc22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbf8:	4a0f      	ldr	r2, [pc, #60]	; (800cc38 <vQueueAddToRegistry+0x50>)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10b      	bne.n	800cc1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc04:	490c      	ldr	r1, [pc, #48]	; (800cc38 <vQueueAddToRegistry+0x50>)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc0e:	4a0a      	ldr	r2, [pc, #40]	; (800cc38 <vQueueAddToRegistry+0x50>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4413      	add	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc1a:	e006      	b.n	800cc2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b07      	cmp	r3, #7
 800cc26:	d9e7      	bls.n	800cbf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	20004f98 	.word	0x20004f98

0800cc3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b086      	sub	sp, #24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc4c:	f001 fe4e 	bl	800e8ec <vPortEnterCritical>
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc56:	b25b      	sxtb	r3, r3
 800cc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5c:	d103      	bne.n	800cc66 <vQueueWaitForMessageRestricted+0x2a>
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc6c:	b25b      	sxtb	r3, r3
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc72:	d103      	bne.n	800cc7c <vQueueWaitForMessageRestricted+0x40>
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc7c:	f001 fe6a 	bl	800e954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	3324      	adds	r3, #36	; 0x24
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 fc77 	bl	800d584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	f7ff ff26 	bl	800cae8 <prvUnlockQueue>
	}
 800cc9c:	bf00      	nop
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08e      	sub	sp, #56	; 0x38
 800cca8:	af04      	add	r7, sp, #16
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10c      	bne.n	800ccd2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	b672      	cpsid	i
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	b662      	cpsie	i
 800cccc:	623b      	str	r3, [r7, #32]
}
 800ccce:	bf00      	nop
 800ccd0:	e7fe      	b.n	800ccd0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10c      	bne.n	800ccf2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	b672      	cpsid	i
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	b662      	cpsie	i
 800ccec:	61fb      	str	r3, [r7, #28]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccf2:	23a8      	movs	r3, #168	; 0xa8
 800ccf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2ba8      	cmp	r3, #168	; 0xa8
 800ccfa:	d00c      	beq.n	800cd16 <xTaskCreateStatic+0x72>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	b672      	cpsid	i
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	b662      	cpsie	i
 800cd10:	61bb      	str	r3, [r7, #24]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d01e      	beq.n	800cd5c <xTaskCreateStatic+0xb8>
 800cd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d01b      	beq.n	800cd5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	2202      	movs	r2, #2
 800cd32:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd36:	2300      	movs	r3, #0
 800cd38:	9303      	str	r3, [sp, #12]
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	9302      	str	r3, [sp, #8]
 800cd3e:	f107 0314 	add.w	r3, r7, #20
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f000 f850 	bl	800cdf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd56:	f000 f8f5 	bl	800cf44 <prvAddNewTaskToReadyList>
 800cd5a:	e001      	b.n	800cd60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd60:	697b      	ldr	r3, [r7, #20]
	}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3728      	adds	r7, #40	; 0x28
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b08c      	sub	sp, #48	; 0x30
 800cd6e:	af04      	add	r7, sp, #16
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	603b      	str	r3, [r7, #0]
 800cd76:	4613      	mov	r3, r2
 800cd78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd7a:	88fb      	ldrh	r3, [r7, #6]
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f001 fee0 	bl	800eb44 <pvPortMalloc>
 800cd84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00e      	beq.n	800cdaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd8c:	20a8      	movs	r0, #168	; 0xa8
 800cd8e:	f001 fed9 	bl	800eb44 <pvPortMalloc>
 800cd92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	631a      	str	r2, [r3, #48]	; 0x30
 800cda0:	e005      	b.n	800cdae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cda2:	6978      	ldr	r0, [r7, #20]
 800cda4:	f001 ff98 	bl	800ecd8 <vPortFree>
 800cda8:	e001      	b.n	800cdae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d017      	beq.n	800cde4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdbc:	88fa      	ldrh	r2, [r7, #6]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	9302      	str	r3, [sp, #8]
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	68b9      	ldr	r1, [r7, #8]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f000 f80e 	bl	800cdf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdd8:	69f8      	ldr	r0, [r7, #28]
 800cdda:	f000 f8b3 	bl	800cf44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdde:	2301      	movs	r3, #1
 800cde0:	61bb      	str	r3, [r7, #24]
 800cde2:	e002      	b.n	800cdea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdea:	69bb      	ldr	r3, [r7, #24]
	}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	21a5      	movs	r1, #165	; 0xa5
 800ce0e:	f002 fa0e 	bl	800f22e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ce1c:	440b      	add	r3, r1
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f003 0307 	and.w	r3, r3, #7
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00c      	beq.n	800ce50 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	b672      	cpsid	i
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	b662      	cpsie	i
 800ce4a:	617b      	str	r3, [r7, #20]
}
 800ce4c:	bf00      	nop
 800ce4e:	e7fe      	b.n	800ce4e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d01f      	beq.n	800ce96 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce56:	2300      	movs	r3, #0
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	e012      	b.n	800ce82 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	4413      	add	r3, r2
 800ce62:	7819      	ldrb	r1, [r3, #0]
 800ce64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	4413      	add	r3, r2
 800ce6a:	3334      	adds	r3, #52	; 0x34
 800ce6c:	460a      	mov	r2, r1
 800ce6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	4413      	add	r3, r2
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d006      	beq.n	800ce8a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	61fb      	str	r3, [r7, #28]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	2b0f      	cmp	r3, #15
 800ce86:	d9e9      	bls.n	800ce5c <prvInitialiseNewTask+0x68>
 800ce88:	e000      	b.n	800ce8c <prvInitialiseNewTask+0x98>
			{
				break;
 800ce8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce94:	e003      	b.n	800ce9e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	2b37      	cmp	r3, #55	; 0x37
 800cea2:	d901      	bls.n	800cea8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cea4:	2337      	movs	r3, #55	; 0x37
 800cea6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebc:	3304      	adds	r3, #4
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe ff4e 	bl	800bd60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	3318      	adds	r3, #24
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe ff49 	bl	800bd60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	3354      	adds	r3, #84	; 0x54
 800cef8:	224c      	movs	r2, #76	; 0x4c
 800cefa:	2100      	movs	r1, #0
 800cefc:	4618      	mov	r0, r3
 800cefe:	f002 f996 	bl	800f22e <memset>
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	4a0c      	ldr	r2, [pc, #48]	; (800cf38 <prvInitialiseNewTask+0x144>)
 800cf06:	659a      	str	r2, [r3, #88]	; 0x58
 800cf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0a:	4a0c      	ldr	r2, [pc, #48]	; (800cf3c <prvInitialiseNewTask+0x148>)
 800cf0c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	4a0b      	ldr	r2, [pc, #44]	; (800cf40 <prvInitialiseNewTask+0x14c>)
 800cf12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	68f9      	ldr	r1, [r7, #12]
 800cf18:	69b8      	ldr	r0, [r7, #24]
 800cf1a:	f001 fbdb 	bl	800e6d4 <pxPortInitialiseStack>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf30:	bf00      	nop
 800cf32:	3720      	adds	r7, #32
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20009224 	.word	0x20009224
 800cf3c:	2000928c 	.word	0x2000928c
 800cf40:	200092f4 	.word	0x200092f4

0800cf44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf4c:	f001 fcce 	bl	800e8ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf50:	4b2d      	ldr	r3, [pc, #180]	; (800d008 <prvAddNewTaskToReadyList+0xc4>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	4a2c      	ldr	r2, [pc, #176]	; (800d008 <prvAddNewTaskToReadyList+0xc4>)
 800cf58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf5a:	4b2c      	ldr	r3, [pc, #176]	; (800d00c <prvAddNewTaskToReadyList+0xc8>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d109      	bne.n	800cf76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf62:	4a2a      	ldr	r2, [pc, #168]	; (800d00c <prvAddNewTaskToReadyList+0xc8>)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf68:	4b27      	ldr	r3, [pc, #156]	; (800d008 <prvAddNewTaskToReadyList+0xc4>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d110      	bne.n	800cf92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf70:	f000 fc3c 	bl	800d7ec <prvInitialiseTaskLists>
 800cf74:	e00d      	b.n	800cf92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf76:	4b26      	ldr	r3, [pc, #152]	; (800d010 <prvAddNewTaskToReadyList+0xcc>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d109      	bne.n	800cf92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf7e:	4b23      	ldr	r3, [pc, #140]	; (800d00c <prvAddNewTaskToReadyList+0xc8>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d802      	bhi.n	800cf92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf8c:	4a1f      	ldr	r2, [pc, #124]	; (800d00c <prvAddNewTaskToReadyList+0xc8>)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf92:	4b20      	ldr	r3, [pc, #128]	; (800d014 <prvAddNewTaskToReadyList+0xd0>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3301      	adds	r3, #1
 800cf98:	4a1e      	ldr	r2, [pc, #120]	; (800d014 <prvAddNewTaskToReadyList+0xd0>)
 800cf9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf9c:	4b1d      	ldr	r3, [pc, #116]	; (800d014 <prvAddNewTaskToReadyList+0xd0>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa8:	4b1b      	ldr	r3, [pc, #108]	; (800d018 <prvAddNewTaskToReadyList+0xd4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d903      	bls.n	800cfb8 <prvAddNewTaskToReadyList+0x74>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	4a18      	ldr	r2, [pc, #96]	; (800d018 <prvAddNewTaskToReadyList+0xd4>)
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4a15      	ldr	r2, [pc, #84]	; (800d01c <prvAddNewTaskToReadyList+0xd8>)
 800cfc6:	441a      	add	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fe fed3 	bl	800bd7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfd4:	f001 fcbe 	bl	800e954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfd8:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <prvAddNewTaskToReadyList+0xcc>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00e      	beq.n	800cffe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <prvAddNewTaskToReadyList+0xc8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d207      	bcs.n	800cffe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfee:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <prvAddNewTaskToReadyList+0xdc>)
 800cff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cffe:	bf00      	nop
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	200054ac 	.word	0x200054ac
 800d00c:	20004fd8 	.word	0x20004fd8
 800d010:	200054b8 	.word	0x200054b8
 800d014:	200054c8 	.word	0x200054c8
 800d018:	200054b4 	.word	0x200054b4
 800d01c:	20004fdc 	.word	0x20004fdc
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d019      	beq.n	800d06a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d036:	4b14      	ldr	r3, [pc, #80]	; (800d088 <vTaskDelay+0x64>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00c      	beq.n	800d058 <vTaskDelay+0x34>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	b672      	cpsid	i
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	b662      	cpsie	i
 800d052:	60bb      	str	r3, [r7, #8]
}
 800d054:	bf00      	nop
 800d056:	e7fe      	b.n	800d056 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d058:	f000 f88e 	bl	800d178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d05c:	2100      	movs	r1, #0
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 ff2a 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d064:	f000 f896 	bl	800d194 <xTaskResumeAll>
 800d068:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d107      	bne.n	800d080 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d070:	4b06      	ldr	r3, [pc, #24]	; (800d08c <vTaskDelay+0x68>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d080:	bf00      	nop
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	200054d4 	.word	0x200054d4
 800d08c:	e000ed04 	.word	0xe000ed04

0800d090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08a      	sub	sp, #40	; 0x28
 800d094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d09a:	2300      	movs	r3, #0
 800d09c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d09e:	463a      	mov	r2, r7
 800d0a0:	1d39      	adds	r1, r7, #4
 800d0a2:	f107 0308 	add.w	r3, r7, #8
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe fe06 	bl	800bcb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	9202      	str	r2, [sp, #8]
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	460a      	mov	r2, r1
 800d0be:	4926      	ldr	r1, [pc, #152]	; (800d158 <vTaskStartScheduler+0xc8>)
 800d0c0:	4826      	ldr	r0, [pc, #152]	; (800d15c <vTaskStartScheduler+0xcc>)
 800d0c2:	f7ff fdef 	bl	800cca4 <xTaskCreateStatic>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	4a25      	ldr	r2, [pc, #148]	; (800d160 <vTaskStartScheduler+0xd0>)
 800d0ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d0cc:	4b24      	ldr	r3, [pc, #144]	; (800d160 <vTaskStartScheduler+0xd0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	e001      	b.n	800d0de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d102      	bne.n	800d0ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d0e4:	f000 ff3c 	bl	800df60 <xTimerCreateTimerTask>
 800d0e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d11d      	bne.n	800d12c <vTaskStartScheduler+0x9c>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	b672      	cpsid	i
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	b662      	cpsie	i
 800d104:	613b      	str	r3, [r7, #16]
}
 800d106:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d108:	4b16      	ldr	r3, [pc, #88]	; (800d164 <vTaskStartScheduler+0xd4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3354      	adds	r3, #84	; 0x54
 800d10e:	4a16      	ldr	r2, [pc, #88]	; (800d168 <vTaskStartScheduler+0xd8>)
 800d110:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d112:	4b16      	ldr	r3, [pc, #88]	; (800d16c <vTaskStartScheduler+0xdc>)
 800d114:	f04f 32ff 	mov.w	r2, #4294967295
 800d118:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d11a:	4b15      	ldr	r3, [pc, #84]	; (800d170 <vTaskStartScheduler+0xe0>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d120:	4b14      	ldr	r3, [pc, #80]	; (800d174 <vTaskStartScheduler+0xe4>)
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d126:	f001 fb63 	bl	800e7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d12a:	e010      	b.n	800d14e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d132:	d10c      	bne.n	800d14e <vTaskStartScheduler+0xbe>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	b672      	cpsid	i
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	b662      	cpsie	i
 800d148:	60fb      	str	r3, [r7, #12]
}
 800d14a:	bf00      	nop
 800d14c:	e7fe      	b.n	800d14c <vTaskStartScheduler+0xbc>
}
 800d14e:	bf00      	nop
 800d150:	3718      	adds	r7, #24
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	08010a88 	.word	0x08010a88
 800d15c:	0800d7bd 	.word	0x0800d7bd
 800d160:	200054d0 	.word	0x200054d0
 800d164:	20004fd8 	.word	0x20004fd8
 800d168:	200000a4 	.word	0x200000a4
 800d16c:	200054cc 	.word	0x200054cc
 800d170:	200054b8 	.word	0x200054b8
 800d174:	200054b0 	.word	0x200054b0

0800d178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d17c:	4b04      	ldr	r3, [pc, #16]	; (800d190 <vTaskSuspendAll+0x18>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3301      	adds	r3, #1
 800d182:	4a03      	ldr	r2, [pc, #12]	; (800d190 <vTaskSuspendAll+0x18>)
 800d184:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d186:	bf00      	nop
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	200054d4 	.word	0x200054d4

0800d194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1a2:	4b43      	ldr	r3, [pc, #268]	; (800d2b0 <xTaskResumeAll+0x11c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10c      	bne.n	800d1c4 <xTaskResumeAll+0x30>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	b672      	cpsid	i
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	b662      	cpsie	i
 800d1be:	603b      	str	r3, [r7, #0]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1c4:	f001 fb92 	bl	800e8ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1c8:	4b39      	ldr	r3, [pc, #228]	; (800d2b0 <xTaskResumeAll+0x11c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	4a38      	ldr	r2, [pc, #224]	; (800d2b0 <xTaskResumeAll+0x11c>)
 800d1d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1d2:	4b37      	ldr	r3, [pc, #220]	; (800d2b0 <xTaskResumeAll+0x11c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d162      	bne.n	800d2a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1da:	4b36      	ldr	r3, [pc, #216]	; (800d2b4 <xTaskResumeAll+0x120>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d05e      	beq.n	800d2a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1e2:	e02f      	b.n	800d244 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e4:	4b34      	ldr	r3, [pc, #208]	; (800d2b8 <xTaskResumeAll+0x124>)
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3318      	adds	r3, #24
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fe fe1f 	bl	800be34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fe1a 	bl	800be34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d204:	4b2d      	ldr	r3, [pc, #180]	; (800d2bc <xTaskResumeAll+0x128>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d903      	bls.n	800d214 <xTaskResumeAll+0x80>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d210:	4a2a      	ldr	r2, [pc, #168]	; (800d2bc <xTaskResumeAll+0x128>)
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4a27      	ldr	r2, [pc, #156]	; (800d2c0 <xTaskResumeAll+0x12c>)
 800d222:	441a      	add	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3304      	adds	r3, #4
 800d228:	4619      	mov	r1, r3
 800d22a:	4610      	mov	r0, r2
 800d22c:	f7fe fda5 	bl	800bd7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d234:	4b23      	ldr	r3, [pc, #140]	; (800d2c4 <xTaskResumeAll+0x130>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d302      	bcc.n	800d244 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d23e:	4b22      	ldr	r3, [pc, #136]	; (800d2c8 <xTaskResumeAll+0x134>)
 800d240:	2201      	movs	r2, #1
 800d242:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d244:	4b1c      	ldr	r3, [pc, #112]	; (800d2b8 <xTaskResumeAll+0x124>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1cb      	bne.n	800d1e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d252:	f000 fb6f 	bl	800d934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d256:	4b1d      	ldr	r3, [pc, #116]	; (800d2cc <xTaskResumeAll+0x138>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d010      	beq.n	800d284 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d262:	f000 f847 	bl	800d2f4 <xTaskIncrementTick>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d26c:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <xTaskResumeAll+0x134>)
 800d26e:	2201      	movs	r2, #1
 800d270:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3b01      	subs	r3, #1
 800d276:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1f1      	bne.n	800d262 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d27e:	4b13      	ldr	r3, [pc, #76]	; (800d2cc <xTaskResumeAll+0x138>)
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d284:	4b10      	ldr	r3, [pc, #64]	; (800d2c8 <xTaskResumeAll+0x134>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d009      	beq.n	800d2a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d290:	4b0f      	ldr	r3, [pc, #60]	; (800d2d0 <xTaskResumeAll+0x13c>)
 800d292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d296:	601a      	str	r2, [r3, #0]
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2a0:	f001 fb58 	bl	800e954 <vPortExitCritical>

	return xAlreadyYielded;
 800d2a4:	68bb      	ldr	r3, [r7, #8]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	200054d4 	.word	0x200054d4
 800d2b4:	200054ac 	.word	0x200054ac
 800d2b8:	2000546c 	.word	0x2000546c
 800d2bc:	200054b4 	.word	0x200054b4
 800d2c0:	20004fdc 	.word	0x20004fdc
 800d2c4:	20004fd8 	.word	0x20004fd8
 800d2c8:	200054c0 	.word	0x200054c0
 800d2cc:	200054bc 	.word	0x200054bc
 800d2d0:	e000ed04 	.word	0xe000ed04

0800d2d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d2da:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <xTaskGetTickCount+0x1c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d2e0:	687b      	ldr	r3, [r7, #4]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	200054b0 	.word	0x200054b0

0800d2f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2fe:	4b50      	ldr	r3, [pc, #320]	; (800d440 <xTaskIncrementTick+0x14c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f040 808b 	bne.w	800d41e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d308:	4b4e      	ldr	r3, [pc, #312]	; (800d444 <xTaskIncrementTick+0x150>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3301      	adds	r3, #1
 800d30e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d310:	4a4c      	ldr	r2, [pc, #304]	; (800d444 <xTaskIncrementTick+0x150>)
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d122      	bne.n	800d362 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d31c:	4b4a      	ldr	r3, [pc, #296]	; (800d448 <xTaskIncrementTick+0x154>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00c      	beq.n	800d340 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32a:	b672      	cpsid	i
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	b662      	cpsie	i
 800d33a:	603b      	str	r3, [r7, #0]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <xTaskIncrementTick+0x4a>
 800d340:	4b41      	ldr	r3, [pc, #260]	; (800d448 <xTaskIncrementTick+0x154>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	4b41      	ldr	r3, [pc, #260]	; (800d44c <xTaskIncrementTick+0x158>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a3f      	ldr	r2, [pc, #252]	; (800d448 <xTaskIncrementTick+0x154>)
 800d34c:	6013      	str	r3, [r2, #0]
 800d34e:	4a3f      	ldr	r2, [pc, #252]	; (800d44c <xTaskIncrementTick+0x158>)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6013      	str	r3, [r2, #0]
 800d354:	4b3e      	ldr	r3, [pc, #248]	; (800d450 <xTaskIncrementTick+0x15c>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	4a3d      	ldr	r2, [pc, #244]	; (800d450 <xTaskIncrementTick+0x15c>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	f000 fae9 	bl	800d934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d362:	4b3c      	ldr	r3, [pc, #240]	; (800d454 <xTaskIncrementTick+0x160>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d349      	bcc.n	800d400 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d36c:	4b36      	ldr	r3, [pc, #216]	; (800d448 <xTaskIncrementTick+0x154>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d104      	bne.n	800d380 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d376:	4b37      	ldr	r3, [pc, #220]	; (800d454 <xTaskIncrementTick+0x160>)
 800d378:	f04f 32ff 	mov.w	r2, #4294967295
 800d37c:	601a      	str	r2, [r3, #0]
					break;
 800d37e:	e03f      	b.n	800d400 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d380:	4b31      	ldr	r3, [pc, #196]	; (800d448 <xTaskIncrementTick+0x154>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d203      	bcs.n	800d3a0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d398:	4a2e      	ldr	r2, [pc, #184]	; (800d454 <xTaskIncrementTick+0x160>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d39e:	e02f      	b.n	800d400 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fd45 	bl	800be34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d004      	beq.n	800d3bc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	3318      	adds	r3, #24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe fd3c 	bl	800be34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c0:	4b25      	ldr	r3, [pc, #148]	; (800d458 <xTaskIncrementTick+0x164>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d903      	bls.n	800d3d0 <xTaskIncrementTick+0xdc>
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3cc:	4a22      	ldr	r2, [pc, #136]	; (800d458 <xTaskIncrementTick+0x164>)
 800d3ce:	6013      	str	r3, [r2, #0]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4a1f      	ldr	r2, [pc, #124]	; (800d45c <xTaskIncrementTick+0x168>)
 800d3de:	441a      	add	r2, r3
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7fe fcc7 	bl	800bd7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	4b1b      	ldr	r3, [pc, #108]	; (800d460 <xTaskIncrementTick+0x16c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d3b8      	bcc.n	800d36c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3fe:	e7b5      	b.n	800d36c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d400:	4b17      	ldr	r3, [pc, #92]	; (800d460 <xTaskIncrementTick+0x16c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d406:	4915      	ldr	r1, [pc, #84]	; (800d45c <xTaskIncrementTick+0x168>)
 800d408:	4613      	mov	r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	440b      	add	r3, r1
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d907      	bls.n	800d428 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d418:	2301      	movs	r3, #1
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	e004      	b.n	800d428 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d41e:	4b11      	ldr	r3, [pc, #68]	; (800d464 <xTaskIncrementTick+0x170>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3301      	adds	r3, #1
 800d424:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <xTaskIncrementTick+0x170>)
 800d426:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <xTaskIncrementTick+0x174>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d430:	2301      	movs	r3, #1
 800d432:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d434:	697b      	ldr	r3, [r7, #20]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	200054d4 	.word	0x200054d4
 800d444:	200054b0 	.word	0x200054b0
 800d448:	20005464 	.word	0x20005464
 800d44c:	20005468 	.word	0x20005468
 800d450:	200054c4 	.word	0x200054c4
 800d454:	200054cc 	.word	0x200054cc
 800d458:	200054b4 	.word	0x200054b4
 800d45c:	20004fdc 	.word	0x20004fdc
 800d460:	20004fd8 	.word	0x20004fd8
 800d464:	200054bc 	.word	0x200054bc
 800d468:	200054c0 	.word	0x200054c0

0800d46c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d472:	4b2b      	ldr	r3, [pc, #172]	; (800d520 <vTaskSwitchContext+0xb4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d47a:	4b2a      	ldr	r3, [pc, #168]	; (800d524 <vTaskSwitchContext+0xb8>)
 800d47c:	2201      	movs	r2, #1
 800d47e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d480:	e048      	b.n	800d514 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800d482:	4b28      	ldr	r3, [pc, #160]	; (800d524 <vTaskSwitchContext+0xb8>)
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d488:	4b27      	ldr	r3, [pc, #156]	; (800d528 <vTaskSwitchContext+0xbc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	e012      	b.n	800d4b6 <vTaskSwitchContext+0x4a>
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10c      	bne.n	800d4b0 <vTaskSwitchContext+0x44>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	b672      	cpsid	i
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	b662      	cpsie	i
 800d4aa:	607b      	str	r3, [r7, #4]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <vTaskSwitchContext+0x42>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	491d      	ldr	r1, [pc, #116]	; (800d52c <vTaskSwitchContext+0xc0>)
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4413      	add	r3, r2
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	440b      	add	r3, r1
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d0e2      	beq.n	800d490 <vTaskSwitchContext+0x24>
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4a15      	ldr	r2, [pc, #84]	; (800d52c <vTaskSwitchContext+0xc0>)
 800d4d6:	4413      	add	r3, r2
 800d4d8:	60bb      	str	r3, [r7, #8]
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	685a      	ldr	r2, [r3, #4]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	605a      	str	r2, [r3, #4]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	685a      	ldr	r2, [r3, #4]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d104      	bne.n	800d4fa <vTaskSwitchContext+0x8e>
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	4a0b      	ldr	r2, [pc, #44]	; (800d530 <vTaskSwitchContext+0xc4>)
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	4a08      	ldr	r2, [pc, #32]	; (800d528 <vTaskSwitchContext+0xbc>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d50a:	4b09      	ldr	r3, [pc, #36]	; (800d530 <vTaskSwitchContext+0xc4>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3354      	adds	r3, #84	; 0x54
 800d510:	4a08      	ldr	r2, [pc, #32]	; (800d534 <vTaskSwitchContext+0xc8>)
 800d512:	6013      	str	r3, [r2, #0]
}
 800d514:	bf00      	nop
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	200054d4 	.word	0x200054d4
 800d524:	200054c0 	.word	0x200054c0
 800d528:	200054b4 	.word	0x200054b4
 800d52c:	20004fdc 	.word	0x20004fdc
 800d530:	20004fd8 	.word	0x20004fd8
 800d534:	200000a4 	.word	0x200000a4

0800d538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10c      	bne.n	800d562 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	b672      	cpsid	i
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	b662      	cpsie	i
 800d55c:	60fb      	str	r3, [r7, #12]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d562:	4b07      	ldr	r3, [pc, #28]	; (800d580 <vTaskPlaceOnEventList+0x48>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3318      	adds	r3, #24
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7fe fc29 	bl	800bdc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d570:	2101      	movs	r1, #1
 800d572:	6838      	ldr	r0, [r7, #0]
 800d574:	f000 fca0 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20004fd8 	.word	0x20004fd8

0800d584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10c      	bne.n	800d5b0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	b672      	cpsid	i
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	b662      	cpsie	i
 800d5aa:	617b      	str	r3, [r7, #20]
}
 800d5ac:	bf00      	nop
 800d5ae:	e7fe      	b.n	800d5ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <vTaskPlaceOnEventListRestricted+0x58>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3318      	adds	r3, #24
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7fe fbde 	bl	800bd7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5ca:	6879      	ldr	r1, [r7, #4]
 800d5cc:	68b8      	ldr	r0, [r7, #8]
 800d5ce:	f000 fc73 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
	}
 800d5d2:	bf00      	nop
 800d5d4:	3718      	adds	r7, #24
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20004fd8 	.word	0x20004fd8

0800d5e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10c      	bne.n	800d610 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	b672      	cpsid	i
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	b662      	cpsie	i
 800d60a:	60fb      	str	r3, [r7, #12]
}
 800d60c:	bf00      	nop
 800d60e:	e7fe      	b.n	800d60e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	3318      	adds	r3, #24
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fc0d 	bl	800be34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d61a:	4b1e      	ldr	r3, [pc, #120]	; (800d694 <xTaskRemoveFromEventList+0xb4>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d11d      	bne.n	800d65e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3304      	adds	r3, #4
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fc04 	bl	800be34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d630:	4b19      	ldr	r3, [pc, #100]	; (800d698 <xTaskRemoveFromEventList+0xb8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d903      	bls.n	800d640 <xTaskRemoveFromEventList+0x60>
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63c:	4a16      	ldr	r2, [pc, #88]	; (800d698 <xTaskRemoveFromEventList+0xb8>)
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4613      	mov	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4a13      	ldr	r2, [pc, #76]	; (800d69c <xTaskRemoveFromEventList+0xbc>)
 800d64e:	441a      	add	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3304      	adds	r3, #4
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7fe fb8f 	bl	800bd7a <vListInsertEnd>
 800d65c:	e005      	b.n	800d66a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	3318      	adds	r3, #24
 800d662:	4619      	mov	r1, r3
 800d664:	480e      	ldr	r0, [pc, #56]	; (800d6a0 <xTaskRemoveFromEventList+0xc0>)
 800d666:	f7fe fb88 	bl	800bd7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66e:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <xTaskRemoveFromEventList+0xc4>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d674:	429a      	cmp	r2, r3
 800d676:	d905      	bls.n	800d684 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d678:	2301      	movs	r3, #1
 800d67a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <xTaskRemoveFromEventList+0xc8>)
 800d67e:	2201      	movs	r2, #1
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	e001      	b.n	800d688 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d688:	697b      	ldr	r3, [r7, #20]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	200054d4 	.word	0x200054d4
 800d698:	200054b4 	.word	0x200054b4
 800d69c:	20004fdc 	.word	0x20004fdc
 800d6a0:	2000546c 	.word	0x2000546c
 800d6a4:	20004fd8 	.word	0x20004fd8
 800d6a8:	200054c0 	.word	0x200054c0

0800d6ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6b4:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <vTaskInternalSetTimeOutState+0x24>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6bc:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <vTaskInternalSetTimeOutState+0x28>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	605a      	str	r2, [r3, #4]
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	200054c4 	.word	0x200054c4
 800d6d4:	200054b0 	.word	0x200054b0

0800d6d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10c      	bne.n	800d702 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	b672      	cpsid	i
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	b662      	cpsie	i
 800d6fc:	613b      	str	r3, [r7, #16]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10c      	bne.n	800d722 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	b672      	cpsid	i
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	b662      	cpsie	i
 800d71c:	60fb      	str	r3, [r7, #12]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d722:	f001 f8e3 	bl	800e8ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d726:	4b1d      	ldr	r3, [pc, #116]	; (800d79c <xTaskCheckForTimeOut+0xc4>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d102      	bne.n	800d746 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d740:	2300      	movs	r3, #0
 800d742:	61fb      	str	r3, [r7, #28]
 800d744:	e023      	b.n	800d78e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	4b15      	ldr	r3, [pc, #84]	; (800d7a0 <xTaskCheckForTimeOut+0xc8>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d007      	beq.n	800d762 <xTaskCheckForTimeOut+0x8a>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	69ba      	ldr	r2, [r7, #24]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d302      	bcc.n	800d762 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d75c:	2301      	movs	r3, #1
 800d75e:	61fb      	str	r3, [r7, #28]
 800d760:	e015      	b.n	800d78e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d20b      	bcs.n	800d784 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	1ad2      	subs	r2, r2, r3
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff ff97 	bl	800d6ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d77e:	2300      	movs	r3, #0
 800d780:	61fb      	str	r3, [r7, #28]
 800d782:	e004      	b.n	800d78e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2200      	movs	r2, #0
 800d788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d78a:	2301      	movs	r3, #1
 800d78c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d78e:	f001 f8e1 	bl	800e954 <vPortExitCritical>

	return xReturn;
 800d792:	69fb      	ldr	r3, [r7, #28]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	200054b0 	.word	0x200054b0
 800d7a0:	200054c4 	.word	0x200054c4

0800d7a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7a8:	4b03      	ldr	r3, [pc, #12]	; (800d7b8 <vTaskMissedYield+0x14>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	601a      	str	r2, [r3, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	200054c0 	.word	0x200054c0

0800d7bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7c4:	f000 f852 	bl	800d86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7c8:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <prvIdleTask+0x28>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d9f9      	bls.n	800d7c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <prvIdleTask+0x2c>)
 800d7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d7e0:	e7f0      	b.n	800d7c4 <prvIdleTask+0x8>
 800d7e2:	bf00      	nop
 800d7e4:	20004fdc 	.word	0x20004fdc
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	607b      	str	r3, [r7, #4]
 800d7f6:	e00c      	b.n	800d812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a12      	ldr	r2, [pc, #72]	; (800d84c <prvInitialiseTaskLists+0x60>)
 800d804:	4413      	add	r3, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe fa8a 	bl	800bd20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3301      	adds	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b37      	cmp	r3, #55	; 0x37
 800d816:	d9ef      	bls.n	800d7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d818:	480d      	ldr	r0, [pc, #52]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d81a:	f7fe fa81 	bl	800bd20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d81e:	480d      	ldr	r0, [pc, #52]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d820:	f7fe fa7e 	bl	800bd20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d824:	480c      	ldr	r0, [pc, #48]	; (800d858 <prvInitialiseTaskLists+0x6c>)
 800d826:	f7fe fa7b 	bl	800bd20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d82a:	480c      	ldr	r0, [pc, #48]	; (800d85c <prvInitialiseTaskLists+0x70>)
 800d82c:	f7fe fa78 	bl	800bd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d830:	480b      	ldr	r0, [pc, #44]	; (800d860 <prvInitialiseTaskLists+0x74>)
 800d832:	f7fe fa75 	bl	800bd20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <prvInitialiseTaskLists+0x78>)
 800d838:	4a05      	ldr	r2, [pc, #20]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <prvInitialiseTaskLists+0x7c>)
 800d83e:	4a05      	ldr	r2, [pc, #20]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d840:	601a      	str	r2, [r3, #0]
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20004fdc 	.word	0x20004fdc
 800d850:	2000543c 	.word	0x2000543c
 800d854:	20005450 	.word	0x20005450
 800d858:	2000546c 	.word	0x2000546c
 800d85c:	20005480 	.word	0x20005480
 800d860:	20005498 	.word	0x20005498
 800d864:	20005464 	.word	0x20005464
 800d868:	20005468 	.word	0x20005468

0800d86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d872:	e019      	b.n	800d8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d874:	f001 f83a 	bl	800e8ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d878:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <prvCheckTasksWaitingTermination+0x50>)
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3304      	adds	r3, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f7fe fad5 	bl	800be34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d88a:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3b01      	subs	r3, #1
 800d890:	4a0b      	ldr	r2, [pc, #44]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d894:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	4a0a      	ldr	r2, [pc, #40]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d89e:	f001 f859 	bl	800e954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f810 	bl	800d8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8a8:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e1      	bne.n	800d874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20005480 	.word	0x20005480
 800d8c0:	200054ac 	.word	0x200054ac
 800d8c4:	20005494 	.word	0x20005494

0800d8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3354      	adds	r3, #84	; 0x54
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f001 fcc3 	bl	800f260 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d108      	bne.n	800d8f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f001 f9f5 	bl	800ecd8 <vPortFree>
				vPortFree( pxTCB );
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f001 f9f2 	bl	800ecd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d8f4:	e01a      	b.n	800d92c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d103      	bne.n	800d908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f001 f9e9 	bl	800ecd8 <vPortFree>
	}
 800d906:	e011      	b.n	800d92c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d00c      	beq.n	800d92c <prvDeleteTCB+0x64>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	b672      	cpsid	i
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	b662      	cpsie	i
 800d926:	60fb      	str	r3, [r7, #12]
}
 800d928:	bf00      	nop
 800d92a:	e7fe      	b.n	800d92a <prvDeleteTCB+0x62>
	}
 800d92c:	bf00      	nop
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d93a:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <prvResetNextTaskUnblockTime+0x38>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d104      	bne.n	800d94e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d944:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <prvResetNextTaskUnblockTime+0x3c>)
 800d946:	f04f 32ff 	mov.w	r2, #4294967295
 800d94a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d94c:	e008      	b.n	800d960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <prvResetNextTaskUnblockTime+0x38>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	4a04      	ldr	r2, [pc, #16]	; (800d970 <prvResetNextTaskUnblockTime+0x3c>)
 800d95e:	6013      	str	r3, [r2, #0]
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	20005464 	.word	0x20005464
 800d970:	200054cc 	.word	0x200054cc

0800d974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <xTaskGetSchedulerState+0x34>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d982:	2301      	movs	r3, #1
 800d984:	607b      	str	r3, [r7, #4]
 800d986:	e008      	b.n	800d99a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d988:	4b08      	ldr	r3, [pc, #32]	; (800d9ac <xTaskGetSchedulerState+0x38>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d990:	2302      	movs	r3, #2
 800d992:	607b      	str	r3, [r7, #4]
 800d994:	e001      	b.n	800d99a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d996:	2300      	movs	r3, #0
 800d998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d99a:	687b      	ldr	r3, [r7, #4]
	}
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	200054b8 	.word	0x200054b8
 800d9ac:	200054d4 	.word	0x200054d4

0800d9b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d051      	beq.n	800da6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ca:	4b2a      	ldr	r3, [pc, #168]	; (800da74 <xTaskPriorityInherit+0xc4>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d241      	bcs.n	800da58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	db06      	blt.n	800d9ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9dc:	4b25      	ldr	r3, [pc, #148]	; (800da74 <xTaskPriorityInherit+0xc4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	6959      	ldr	r1, [r3, #20]
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4a1f      	ldr	r2, [pc, #124]	; (800da78 <xTaskPriorityInherit+0xc8>)
 800d9fc:	4413      	add	r3, r2
 800d9fe:	4299      	cmp	r1, r3
 800da00:	d122      	bne.n	800da48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	3304      	adds	r3, #4
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe fa14 	bl	800be34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da0c:	4b19      	ldr	r3, [pc, #100]	; (800da74 <xTaskPriorityInherit+0xc4>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1a:	4b18      	ldr	r3, [pc, #96]	; (800da7c <xTaskPriorityInherit+0xcc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d903      	bls.n	800da2a <xTaskPriorityInherit+0x7a>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da26:	4a15      	ldr	r2, [pc, #84]	; (800da7c <xTaskPriorityInherit+0xcc>)
 800da28:	6013      	str	r3, [r2, #0]
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4a10      	ldr	r2, [pc, #64]	; (800da78 <xTaskPriorityInherit+0xc8>)
 800da38:	441a      	add	r2, r3
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	3304      	adds	r3, #4
 800da3e:	4619      	mov	r1, r3
 800da40:	4610      	mov	r0, r2
 800da42:	f7fe f99a 	bl	800bd7a <vListInsertEnd>
 800da46:	e004      	b.n	800da52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da48:	4b0a      	ldr	r3, [pc, #40]	; (800da74 <xTaskPriorityInherit+0xc4>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800da52:	2301      	movs	r3, #1
 800da54:	60fb      	str	r3, [r7, #12]
 800da56:	e008      	b.n	800da6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <xTaskPriorityInherit+0xc4>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da62:	429a      	cmp	r2, r3
 800da64:	d201      	bcs.n	800da6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800da66:	2301      	movs	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da6a:	68fb      	ldr	r3, [r7, #12]
	}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20004fd8 	.word	0x20004fd8
 800da78:	20004fdc 	.word	0x20004fdc
 800da7c:	200054b4 	.word	0x200054b4

0800da80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d05a      	beq.n	800db4c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da96:	4b30      	ldr	r3, [pc, #192]	; (800db58 <xTaskPriorityDisinherit+0xd8>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d00c      	beq.n	800daba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	b672      	cpsid	i
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	b662      	cpsie	i
 800dab4:	60fb      	str	r3, [r7, #12]
}
 800dab6:	bf00      	nop
 800dab8:	e7fe      	b.n	800dab8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10c      	bne.n	800dadc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	b672      	cpsid	i
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	b662      	cpsie	i
 800dad6:	60bb      	str	r3, [r7, #8]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae0:	1e5a      	subs	r2, r3, #1
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daee:	429a      	cmp	r2, r3
 800daf0:	d02c      	beq.n	800db4c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d128      	bne.n	800db4c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe f998 	bl	800be34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1c:	4b0f      	ldr	r3, [pc, #60]	; (800db5c <xTaskPriorityDisinherit+0xdc>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d903      	bls.n	800db2c <xTaskPriorityDisinherit+0xac>
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <xTaskPriorityDisinherit+0xdc>)
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4a09      	ldr	r2, [pc, #36]	; (800db60 <xTaskPriorityDisinherit+0xe0>)
 800db3a:	441a      	add	r2, r3
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	3304      	adds	r3, #4
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7fe f919 	bl	800bd7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db48:	2301      	movs	r3, #1
 800db4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db4c:	697b      	ldr	r3, [r7, #20]
	}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20004fd8 	.word	0x20004fd8
 800db5c:	200054b4 	.word	0x200054b4
 800db60:	20004fdc 	.word	0x20004fdc

0800db64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800db72:	2301      	movs	r3, #1
 800db74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d06e      	beq.n	800dc5a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10c      	bne.n	800db9e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	b672      	cpsid	i
 800db8a:	f383 8811 	msr	BASEPRI, r3
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	b662      	cpsie	i
 800db98:	60fb      	str	r3, [r7, #12]
}
 800db9a:	bf00      	nop
 800db9c:	e7fe      	b.n	800db9c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d902      	bls.n	800dbae <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e002      	b.n	800dbb4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d04d      	beq.n	800dc5a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d148      	bne.n	800dc5a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dbc8:	4b26      	ldr	r3, [pc, #152]	; (800dc64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d10c      	bne.n	800dbec <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	60bb      	str	r3, [r7, #8]
}
 800dbe8:	bf00      	nop
 800dbea:	e7fe      	b.n	800dbea <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	69fa      	ldr	r2, [r7, #28]
 800dbf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	699b      	ldr	r3, [r3, #24]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	db04      	blt.n	800dc0a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	6959      	ldr	r1, [r3, #20]
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	4613      	mov	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4a13      	ldr	r2, [pc, #76]	; (800dc68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dc1a:	4413      	add	r3, r2
 800dc1c:	4299      	cmp	r1, r3
 800dc1e:	d11c      	bne.n	800dc5a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	3304      	adds	r3, #4
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe f905 	bl	800be34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2e:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d903      	bls.n	800dc3e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	4a0c      	ldr	r2, [pc, #48]	; (800dc6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc42:	4613      	mov	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4a07      	ldr	r2, [pc, #28]	; (800dc68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dc4c:	441a      	add	r2, r3
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f7fe f890 	bl	800bd7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc5a:	bf00      	nop
 800dc5c:	3720      	adds	r7, #32
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20004fd8 	.word	0x20004fd8
 800dc68:	20004fdc 	.word	0x20004fdc
 800dc6c:	200054b4 	.word	0x200054b4

0800dc70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dc74:	4b07      	ldr	r3, [pc, #28]	; (800dc94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d004      	beq.n	800dc86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc82:	3201      	adds	r2, #1
 800dc84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dc86:	4b03      	ldr	r3, [pc, #12]	; (800dc94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dc88:	681b      	ldr	r3, [r3, #0]
	}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	20004fd8 	.word	0x20004fd8

0800dc98 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800dca2:	f000 fe23 	bl	800e8ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800dca6:	4b20      	ldr	r3, [pc, #128]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d113      	bne.n	800dcda <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800dcb2:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00b      	beq.n	800dcda <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	6838      	ldr	r0, [r7, #0]
 800dcc6:	f000 f8f7 	bl	800deb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800dcca:	4b18      	ldr	r3, [pc, #96]	; (800dd2c <ulTaskNotifyTake+0x94>)
 800dccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dcda:	f000 fe3b 	bl	800e954 <vPortExitCritical>

		taskENTER_CRITICAL();
 800dcde:	f000 fe05 	bl	800e8ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800dce2:	4b11      	ldr	r3, [pc, #68]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dcea:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00e      	beq.n	800dd10 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800dcf8:	4b0b      	ldr	r3, [pc, #44]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800dd02:	e005      	b.n	800dd10 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800dd04:	4b08      	ldr	r3, [pc, #32]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	3a01      	subs	r2, #1
 800dd0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd10:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <ulTaskNotifyTake+0x90>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800dd1a:	f000 fe1b 	bl	800e954 <vPortExitCritical>

		return ulReturn;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
	}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	20004fd8 	.word	0x20004fd8
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08a      	sub	sp, #40	; 0x28
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800dd40:	2301      	movs	r3, #1
 800dd42:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10c      	bne.n	800dd64 <xTaskGenericNotify+0x34>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	b672      	cpsid	i
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	b662      	cpsie	i
 800dd5e:	61bb      	str	r3, [r7, #24]
}
 800dd60:	bf00      	nop
 800dd62:	e7fe      	b.n	800dd62 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800dd68:	f000 fdc0 	bl	800e8ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d004      	beq.n	800dd7c <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800dd82:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	2202      	movs	r2, #2
 800dd88:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d82d      	bhi.n	800ddee <xTaskGenericNotify+0xbe>
 800dd92:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <xTaskGenericNotify+0x68>)
 800dd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd98:	0800de15 	.word	0x0800de15
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddbf 	.word	0x0800ddbf
 800dda4:	0800ddcf 	.word	0x0800ddcf
 800dda8:	0800ddd9 	.word	0x0800ddd9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800ddbc:	e02d      	b.n	800de1a <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ddc4:	1c5a      	adds	r2, r3, #1
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800ddcc:	e025      	b.n	800de1a <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ddce:	6a3b      	ldr	r3, [r7, #32]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800ddd6:	e020      	b.n	800de1a <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ddd8:	7ffb      	ldrb	r3, [r7, #31]
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d004      	beq.n	800dde8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dde6:	e018      	b.n	800de1a <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ddec:	e015      	b.n	800de1a <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ddf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf8:	d00e      	beq.n	800de18 <xTaskGenericNotify+0xe8>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfe:	b672      	cpsid	i
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	b662      	cpsie	i
 800de0e:	617b      	str	r3, [r7, #20]
}
 800de10:	bf00      	nop
 800de12:	e7fe      	b.n	800de12 <xTaskGenericNotify+0xe2>
					break;
 800de14:	bf00      	nop
 800de16:	e000      	b.n	800de1a <xTaskGenericNotify+0xea>

					break;
 800de18:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800de1a:	7ffb      	ldrb	r3, [r7, #31]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d13c      	bne.n	800de9a <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	3304      	adds	r3, #4
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe f805 	bl	800be34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800de2a:	6a3b      	ldr	r3, [r7, #32]
 800de2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2e:	4b1e      	ldr	r3, [pc, #120]	; (800dea8 <xTaskGenericNotify+0x178>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d903      	bls.n	800de3e <xTaskGenericNotify+0x10e>
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3a:	4a1b      	ldr	r2, [pc, #108]	; (800dea8 <xTaskGenericNotify+0x178>)
 800de3c:	6013      	str	r3, [r2, #0]
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de42:	4613      	mov	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4a18      	ldr	r2, [pc, #96]	; (800deac <xTaskGenericNotify+0x17c>)
 800de4c:	441a      	add	r2, r3
 800de4e:	6a3b      	ldr	r3, [r7, #32]
 800de50:	3304      	adds	r3, #4
 800de52:	4619      	mov	r1, r3
 800de54:	4610      	mov	r0, r2
 800de56:	f7fd ff90 	bl	800bd7a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00c      	beq.n	800de7c <xTaskGenericNotify+0x14c>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	b672      	cpsid	i
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	b662      	cpsie	i
 800de76:	613b      	str	r3, [r7, #16]
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de80:	4b0b      	ldr	r3, [pc, #44]	; (800deb0 <xTaskGenericNotify+0x180>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de86:	429a      	cmp	r2, r3
 800de88:	d907      	bls.n	800de9a <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800de8a:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <xTaskGenericNotify+0x184>)
 800de8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800de9a:	f000 fd5b 	bl	800e954 <vPortExitCritical>

		return xReturn;
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3728      	adds	r7, #40	; 0x28
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	200054b4 	.word	0x200054b4
 800deac:	20004fdc 	.word	0x20004fdc
 800deb0:	20004fd8 	.word	0x20004fd8
 800deb4:	e000ed04 	.word	0xe000ed04

0800deb8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dec2:	4b21      	ldr	r3, [pc, #132]	; (800df48 <prvAddCurrentTaskToDelayedList+0x90>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec8:	4b20      	ldr	r3, [pc, #128]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3304      	adds	r3, #4
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fd ffb0 	bl	800be34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d10a      	bne.n	800def2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d007      	beq.n	800def2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3304      	adds	r3, #4
 800dee8:	4619      	mov	r1, r3
 800deea:	4819      	ldr	r0, [pc, #100]	; (800df50 <prvAddCurrentTaskToDelayedList+0x98>)
 800deec:	f7fd ff45 	bl	800bd7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800def0:	e026      	b.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4413      	add	r3, r2
 800def8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800defa:	4b14      	ldr	r3, [pc, #80]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	429a      	cmp	r2, r3
 800df08:	d209      	bcs.n	800df1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3304      	adds	r3, #4
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fd ff53 	bl	800bdc2 <vListInsert>
}
 800df1c:	e010      	b.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df1e:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3304      	adds	r3, #4
 800df28:	4619      	mov	r1, r3
 800df2a:	4610      	mov	r0, r2
 800df2c:	f7fd ff49 	bl	800bdc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	429a      	cmp	r2, r3
 800df38:	d202      	bcs.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df3a:	4a08      	ldr	r2, [pc, #32]	; (800df5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	6013      	str	r3, [r2, #0]
}
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	200054b0 	.word	0x200054b0
 800df4c:	20004fd8 	.word	0x20004fd8
 800df50:	20005498 	.word	0x20005498
 800df54:	20005468 	.word	0x20005468
 800df58:	20005464 	.word	0x20005464
 800df5c:	200054cc 	.word	0x200054cc

0800df60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08a      	sub	sp, #40	; 0x28
 800df64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df66:	2300      	movs	r3, #0
 800df68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df6a:	f000 fb73 	bl	800e654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df6e:	4b1d      	ldr	r3, [pc, #116]	; (800dfe4 <xTimerCreateTimerTask+0x84>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d021      	beq.n	800dfba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df7e:	1d3a      	adds	r2, r7, #4
 800df80:	f107 0108 	add.w	r1, r7, #8
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fd feaf 	bl	800bcec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	9202      	str	r2, [sp, #8]
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	2302      	movs	r3, #2
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	2300      	movs	r3, #0
 800df9e:	460a      	mov	r2, r1
 800dfa0:	4911      	ldr	r1, [pc, #68]	; (800dfe8 <xTimerCreateTimerTask+0x88>)
 800dfa2:	4812      	ldr	r0, [pc, #72]	; (800dfec <xTimerCreateTimerTask+0x8c>)
 800dfa4:	f7fe fe7e 	bl	800cca4 <xTaskCreateStatic>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	4a11      	ldr	r2, [pc, #68]	; (800dff0 <xTimerCreateTimerTask+0x90>)
 800dfac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfae:	4b10      	ldr	r3, [pc, #64]	; (800dff0 <xTimerCreateTimerTask+0x90>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	613b      	str	r3, [r7, #16]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dfda:	697b      	ldr	r3, [r7, #20]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	20005508 	.word	0x20005508
 800dfe8:	08010a90 	.word	0x08010a90
 800dfec:	0800e1ed 	.word	0x0800e1ed
 800dff0:	2000550c 	.word	0x2000550c

0800dff4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e002:	202c      	movs	r0, #44	; 0x2c
 800e004:	f000 fd9e 	bl	800eb44 <pvPortMalloc>
 800e008:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00d      	beq.n	800e02c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	2200      	movs	r2, #0
 800e014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 f805 	bl	800e036 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e02c:	697b      	ldr	r3, [r7, #20]
	}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b086      	sub	sp, #24
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
 800e042:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10c      	bne.n	800e064 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	b672      	cpsid	i
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	b662      	cpsie	i
 800e05e:	617b      	str	r3, [r7, #20]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	2b00      	cmp	r3, #0
 800e068:	d01e      	beq.n	800e0a8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e06a:	f000 faf3 	bl	800e654 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	6a3a      	ldr	r2, [r7, #32]
 800e084:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	3304      	adds	r3, #4
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fd fe68 	bl	800bd60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e09c:	f043 0304 	orr.w	r3, r3, #4
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e0a8:	bf00      	nop
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08a      	sub	sp, #40	; 0x28
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
 800e0bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10c      	bne.n	800e0e2 <xTimerGenericCommand+0x32>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	b672      	cpsid	i
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	b662      	cpsie	i
 800e0dc:	623b      	str	r3, [r7, #32]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e0e2:	4b1a      	ldr	r3, [pc, #104]	; (800e14c <xTimerGenericCommand+0x9c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d02a      	beq.n	800e140 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2b05      	cmp	r3, #5
 800e0fa:	dc18      	bgt.n	800e12e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0fc:	f7ff fc3a 	bl	800d974 <xTaskGetSchedulerState>
 800e100:	4603      	mov	r3, r0
 800e102:	2b02      	cmp	r3, #2
 800e104:	d109      	bne.n	800e11a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e106:	4b11      	ldr	r3, [pc, #68]	; (800e14c <xTimerGenericCommand+0x9c>)
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	f107 0110 	add.w	r1, r7, #16
 800e10e:	2300      	movs	r3, #0
 800e110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e112:	f7fe f80b 	bl	800c12c <xQueueGenericSend>
 800e116:	6278      	str	r0, [r7, #36]	; 0x24
 800e118:	e012      	b.n	800e140 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e11a:	4b0c      	ldr	r3, [pc, #48]	; (800e14c <xTimerGenericCommand+0x9c>)
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	f107 0110 	add.w	r1, r7, #16
 800e122:	2300      	movs	r3, #0
 800e124:	2200      	movs	r2, #0
 800e126:	f7fe f801 	bl	800c12c <xQueueGenericSend>
 800e12a:	6278      	str	r0, [r7, #36]	; 0x24
 800e12c:	e008      	b.n	800e140 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e12e:	4b07      	ldr	r3, [pc, #28]	; (800e14c <xTimerGenericCommand+0x9c>)
 800e130:	6818      	ldr	r0, [r3, #0]
 800e132:	f107 0110 	add.w	r1, r7, #16
 800e136:	2300      	movs	r3, #0
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	f7fe f8fd 	bl	800c338 <xQueueGenericSendFromISR>
 800e13e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e142:	4618      	mov	r0, r3
 800e144:	3728      	adds	r7, #40	; 0x28
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20005508 	.word	0x20005508

0800e150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af02      	add	r7, sp, #8
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e15a:	4b23      	ldr	r3, [pc, #140]	; (800e1e8 <prvProcessExpiredTimer+0x98>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	3304      	adds	r3, #4
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fd fe63 	bl	800be34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e174:	f003 0304 	and.w	r3, r3, #4
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d024      	beq.n	800e1c6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	699a      	ldr	r2, [r3, #24]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	18d1      	adds	r1, r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	6978      	ldr	r0, [r7, #20]
 800e18a:	f000 f8d3 	bl	800e334 <prvInsertTimerInActiveList>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d021      	beq.n	800e1d8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e194:	2300      	movs	r3, #0
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	2300      	movs	r3, #0
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	2100      	movs	r1, #0
 800e19e:	6978      	ldr	r0, [r7, #20]
 800e1a0:	f7ff ff86 	bl	800e0b0 <xTimerGenericCommand>
 800e1a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d115      	bne.n	800e1d8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	b672      	cpsid	i
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	b662      	cpsie	i
 800e1c0:	60fb      	str	r3, [r7, #12]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1cc:	f023 0301 	bic.w	r3, r3, #1
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	6a1b      	ldr	r3, [r3, #32]
 800e1dc:	6978      	ldr	r0, [r7, #20]
 800e1de:	4798      	blx	r3
}
 800e1e0:	bf00      	nop
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	20005500 	.word	0x20005500

0800e1ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1f4:	f107 0308 	add.w	r3, r7, #8
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 f857 	bl	800e2ac <prvGetNextExpireTime>
 800e1fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	4619      	mov	r1, r3
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f000 f803 	bl	800e210 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e20a:	f000 f8d5 	bl	800e3b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e20e:	e7f1      	b.n	800e1f4 <prvTimerTask+0x8>

0800e210 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e21a:	f7fe ffad 	bl	800d178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e21e:	f107 0308 	add.w	r3, r7, #8
 800e222:	4618      	mov	r0, r3
 800e224:	f000 f866 	bl	800e2f4 <prvSampleTimeNow>
 800e228:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d130      	bne.n	800e292 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10a      	bne.n	800e24c <prvProcessTimerOrBlockTask+0x3c>
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d806      	bhi.n	800e24c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e23e:	f7fe ffa9 	bl	800d194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e242:	68f9      	ldr	r1, [r7, #12]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7ff ff83 	bl	800e150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e24a:	e024      	b.n	800e296 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d008      	beq.n	800e264 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e252:	4b13      	ldr	r3, [pc, #76]	; (800e2a0 <prvProcessTimerOrBlockTask+0x90>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <prvProcessTimerOrBlockTask+0x50>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <prvProcessTimerOrBlockTask+0x52>
 800e260:	2300      	movs	r3, #0
 800e262:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e264:	4b0f      	ldr	r3, [pc, #60]	; (800e2a4 <prvProcessTimerOrBlockTask+0x94>)
 800e266:	6818      	ldr	r0, [r3, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	4619      	mov	r1, r3
 800e272:	f7fe fce3 	bl	800cc3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e276:	f7fe ff8d 	bl	800d194 <xTaskResumeAll>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e280:	4b09      	ldr	r3, [pc, #36]	; (800e2a8 <prvProcessTimerOrBlockTask+0x98>)
 800e282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	f3bf 8f6f 	isb	sy
}
 800e290:	e001      	b.n	800e296 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e292:	f7fe ff7f 	bl	800d194 <xTaskResumeAll>
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	20005504 	.word	0x20005504
 800e2a4:	20005508 	.word	0x20005508
 800e2a8:	e000ed04 	.word	0xe000ed04

0800e2ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2b4:	4b0e      	ldr	r3, [pc, #56]	; (800e2f0 <prvGetNextExpireTime+0x44>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <prvGetNextExpireTime+0x16>
 800e2be:	2201      	movs	r2, #1
 800e2c0:	e000      	b.n	800e2c4 <prvGetNextExpireTime+0x18>
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d105      	bne.n	800e2dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2d0:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <prvGetNextExpireTime+0x44>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	e001      	b.n	800e2e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	20005500 	.word	0x20005500

0800e2f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e2fc:	f7fe ffea 	bl	800d2d4 <xTaskGetTickCount>
 800e300:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e302:	4b0b      	ldr	r3, [pc, #44]	; (800e330 <prvSampleTimeNow+0x3c>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d205      	bcs.n	800e318 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e30c:	f000 f93c 	bl	800e588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	e002      	b.n	800e31e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e31e:	4a04      	ldr	r2, [pc, #16]	; (800e330 <prvSampleTimeNow+0x3c>)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e324:	68fb      	ldr	r3, [r7, #12]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	20005510 	.word	0x20005510

0800e334 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
 800e340:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e342:	2300      	movs	r3, #0
 800e344:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	429a      	cmp	r2, r3
 800e358:	d812      	bhi.n	800e380 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	1ad2      	subs	r2, r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	699b      	ldr	r3, [r3, #24]
 800e364:	429a      	cmp	r2, r3
 800e366:	d302      	bcc.n	800e36e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e368:	2301      	movs	r3, #1
 800e36a:	617b      	str	r3, [r7, #20]
 800e36c:	e01b      	b.n	800e3a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e36e:	4b10      	ldr	r3, [pc, #64]	; (800e3b0 <prvInsertTimerInActiveList+0x7c>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3304      	adds	r3, #4
 800e376:	4619      	mov	r1, r3
 800e378:	4610      	mov	r0, r2
 800e37a:	f7fd fd22 	bl	800bdc2 <vListInsert>
 800e37e:	e012      	b.n	800e3a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	429a      	cmp	r2, r3
 800e386:	d206      	bcs.n	800e396 <prvInsertTimerInActiveList+0x62>
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d302      	bcc.n	800e396 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e390:	2301      	movs	r3, #1
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	e007      	b.n	800e3a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e396:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <prvInsertTimerInActiveList+0x80>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	f7fd fd0e 	bl	800bdc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3a6:	697b      	ldr	r3, [r7, #20]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3718      	adds	r7, #24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20005504 	.word	0x20005504
 800e3b4:	20005500 	.word	0x20005500

0800e3b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08e      	sub	sp, #56	; 0x38
 800e3bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3be:	e0d0      	b.n	800e562 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	da1a      	bge.n	800e3fc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3c6:	1d3b      	adds	r3, r7, #4
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10c      	bne.n	800e3ec <prvProcessReceivedCommands+0x34>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d6:	b672      	cpsid	i
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	b662      	cpsie	i
 800e3e6:	61fb      	str	r3, [r7, #28]
}
 800e3e8:	bf00      	nop
 800e3ea:	e7fe      	b.n	800e3ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f2:	6850      	ldr	r0, [r2, #4]
 800e3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f6:	6892      	ldr	r2, [r2, #8]
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f2c0 80af 	blt.w	800e562 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d004      	beq.n	800e41a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	3304      	adds	r3, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f7fd fd0d 	bl	800be34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e41a:	463b      	mov	r3, r7
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff ff69 	bl	800e2f4 <prvSampleTimeNow>
 800e422:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b09      	cmp	r3, #9
 800e428:	f200 809a 	bhi.w	800e560 <prvProcessReceivedCommands+0x1a8>
 800e42c:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <prvProcessReceivedCommands+0x7c>)
 800e42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e432:	bf00      	nop
 800e434:	0800e45d 	.word	0x0800e45d
 800e438:	0800e45d 	.word	0x0800e45d
 800e43c:	0800e45d 	.word	0x0800e45d
 800e440:	0800e4d5 	.word	0x0800e4d5
 800e444:	0800e4e9 	.word	0x0800e4e9
 800e448:	0800e537 	.word	0x0800e537
 800e44c:	0800e45d 	.word	0x0800e45d
 800e450:	0800e45d 	.word	0x0800e45d
 800e454:	0800e4d5 	.word	0x0800e4d5
 800e458:	0800e4e9 	.word	0x0800e4e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e462:	f043 0301 	orr.w	r3, r3, #1
 800e466:	b2da      	uxtb	r2, r3
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	18d1      	adds	r1, r2, r3
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e47c:	f7ff ff5a 	bl	800e334 <prvInsertTimerInActiveList>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d06d      	beq.n	800e562 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e48c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e494:	f003 0304 	and.w	r3, r3, #4
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d062      	beq.n	800e562 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	441a      	add	r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ae:	f7ff fdff 	bl	800e0b0 <xTimerGenericCommand>
 800e4b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d153      	bne.n	800e562 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	b672      	cpsid	i
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	b662      	cpsie	i
 800e4ce:	61bb      	str	r3, [r7, #24]
}
 800e4d0:	bf00      	nop
 800e4d2:	e7fe      	b.n	800e4d2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4da:	f023 0301 	bic.w	r3, r3, #1
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e4e6:	e03c      	b.n	800e562 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10c      	bne.n	800e522 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50c:	b672      	cpsid	i
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	b662      	cpsie	i
 800e51c:	617b      	str	r3, [r7, #20]
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	699a      	ldr	r2, [r3, #24]
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	18d1      	adds	r1, r2, r3
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e530:	f7ff ff00 	bl	800e334 <prvInsertTimerInActiveList>
					break;
 800e534:	e015      	b.n	800e562 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e53c:	f003 0302 	and.w	r3, r3, #2
 800e540:	2b00      	cmp	r3, #0
 800e542:	d103      	bne.n	800e54c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800e544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e546:	f000 fbc7 	bl	800ecd8 <vPortFree>
 800e54a:	e00a      	b.n	800e562 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e552:	f023 0301 	bic.w	r3, r3, #1
 800e556:	b2da      	uxtb	r2, r3
 800e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e55e:	e000      	b.n	800e562 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800e560:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e562:	4b08      	ldr	r3, [pc, #32]	; (800e584 <prvProcessReceivedCommands+0x1cc>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	1d39      	adds	r1, r7, #4
 800e568:	2200      	movs	r2, #0
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe f81a 	bl	800c5a4 <xQueueReceive>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	f47f af24 	bne.w	800e3c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e578:	bf00      	nop
 800e57a:	bf00      	nop
 800e57c:	3730      	adds	r7, #48	; 0x30
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	20005508 	.word	0x20005508

0800e588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b088      	sub	sp, #32
 800e58c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e58e:	e04a      	b.n	800e626 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e590:	4b2e      	ldr	r3, [pc, #184]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e59a:	4b2c      	ldr	r3, [pc, #176]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fd fc43 	bl	800be34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6a1b      	ldr	r3, [r3, #32]
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5bc:	f003 0304 	and.w	r3, r3, #4
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d030      	beq.n	800e626 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d90e      	bls.n	800e5f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5e2:	4b1a      	ldr	r3, [pc, #104]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7fd fbe8 	bl	800bdc2 <vListInsert>
 800e5f2:	e018      	b.n	800e626 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7ff fd56 	bl	800e0b0 <xTimerGenericCommand>
 800e604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10c      	bne.n	800e626 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e610:	b672      	cpsid	i
 800e612:	f383 8811 	msr	BASEPRI, r3
 800e616:	f3bf 8f6f 	isb	sy
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	b662      	cpsie	i
 800e620:	603b      	str	r3, [r7, #0]
}
 800e622:	bf00      	nop
 800e624:	e7fe      	b.n	800e624 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e626:	4b09      	ldr	r3, [pc, #36]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1af      	bne.n	800e590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e630:	4b06      	ldr	r3, [pc, #24]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e636:	4b06      	ldr	r3, [pc, #24]	; (800e650 <prvSwitchTimerLists+0xc8>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a04      	ldr	r2, [pc, #16]	; (800e64c <prvSwitchTimerLists+0xc4>)
 800e63c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e63e:	4a04      	ldr	r2, [pc, #16]	; (800e650 <prvSwitchTimerLists+0xc8>)
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	6013      	str	r3, [r2, #0]
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20005500 	.word	0x20005500
 800e650:	20005504 	.word	0x20005504

0800e654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e65a:	f000 f947 	bl	800e8ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e65e:	4b15      	ldr	r3, [pc, #84]	; (800e6b4 <prvCheckForValidListAndQueue+0x60>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d120      	bne.n	800e6a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e666:	4814      	ldr	r0, [pc, #80]	; (800e6b8 <prvCheckForValidListAndQueue+0x64>)
 800e668:	f7fd fb5a 	bl	800bd20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e66c:	4813      	ldr	r0, [pc, #76]	; (800e6bc <prvCheckForValidListAndQueue+0x68>)
 800e66e:	f7fd fb57 	bl	800bd20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e672:	4b13      	ldr	r3, [pc, #76]	; (800e6c0 <prvCheckForValidListAndQueue+0x6c>)
 800e674:	4a10      	ldr	r2, [pc, #64]	; (800e6b8 <prvCheckForValidListAndQueue+0x64>)
 800e676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e678:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <prvCheckForValidListAndQueue+0x70>)
 800e67a:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <prvCheckForValidListAndQueue+0x68>)
 800e67c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e67e:	2300      	movs	r3, #0
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4b11      	ldr	r3, [pc, #68]	; (800e6c8 <prvCheckForValidListAndQueue+0x74>)
 800e684:	4a11      	ldr	r2, [pc, #68]	; (800e6cc <prvCheckForValidListAndQueue+0x78>)
 800e686:	2110      	movs	r1, #16
 800e688:	200a      	movs	r0, #10
 800e68a:	f7fd fc67 	bl	800bf5c <xQueueGenericCreateStatic>
 800e68e:	4603      	mov	r3, r0
 800e690:	4a08      	ldr	r2, [pc, #32]	; (800e6b4 <prvCheckForValidListAndQueue+0x60>)
 800e692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <prvCheckForValidListAndQueue+0x60>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d005      	beq.n	800e6a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <prvCheckForValidListAndQueue+0x60>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	490b      	ldr	r1, [pc, #44]	; (800e6d0 <prvCheckForValidListAndQueue+0x7c>)
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fe faa0 	bl	800cbe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6a8:	f000 f954 	bl	800e954 <vPortExitCritical>
}
 800e6ac:	bf00      	nop
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20005508 	.word	0x20005508
 800e6b8:	200054d8 	.word	0x200054d8
 800e6bc:	200054ec 	.word	0x200054ec
 800e6c0:	20005500 	.word	0x20005500
 800e6c4:	20005504 	.word	0x20005504
 800e6c8:	200055b4 	.word	0x200055b4
 800e6cc:	20005514 	.word	0x20005514
 800e6d0:	08010a98 	.word	0x08010a98

0800e6d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	3b04      	subs	r3, #4
 800e6e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3b04      	subs	r3, #4
 800e6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	f023 0201 	bic.w	r2, r3, #1
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3b04      	subs	r3, #4
 800e702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e704:	4a0c      	ldr	r2, [pc, #48]	; (800e738 <pxPortInitialiseStack+0x64>)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3b14      	subs	r3, #20
 800e70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3b04      	subs	r3, #4
 800e71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f06f 0202 	mvn.w	r2, #2
 800e722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	3b20      	subs	r3, #32
 800e728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e72a:	68fb      	ldr	r3, [r7, #12]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	0800e73d 	.word	0x0800e73d

0800e73c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e746:	4b14      	ldr	r3, [pc, #80]	; (800e798 <prvTaskExitError+0x5c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e74e:	d00c      	beq.n	800e76a <prvTaskExitError+0x2e>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	b672      	cpsid	i
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	b662      	cpsie	i
 800e764:	60fb      	str	r3, [r7, #12]
}
 800e766:	bf00      	nop
 800e768:	e7fe      	b.n	800e768 <prvTaskExitError+0x2c>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	b672      	cpsid	i
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	b662      	cpsie	i
 800e77e:	60bb      	str	r3, [r7, #8]
}
 800e780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e782:	bf00      	nop
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0fc      	beq.n	800e784 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e78a:	bf00      	nop
 800e78c:	bf00      	nop
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	20000048 	.word	0x20000048
 800e79c:	00000000 	.word	0x00000000

0800e7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7a0:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <pxCurrentTCBConst2>)
 800e7a2:	6819      	ldr	r1, [r3, #0]
 800e7a4:	6808      	ldr	r0, [r1, #0]
 800e7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7aa:	f380 8809 	msr	PSP, r0
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f04f 0000 	mov.w	r0, #0
 800e7b6:	f380 8811 	msr	BASEPRI, r0
 800e7ba:	4770      	bx	lr
 800e7bc:	f3af 8000 	nop.w

0800e7c0 <pxCurrentTCBConst2>:
 800e7c0:	20004fd8 	.word	0x20004fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop

0800e7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7c8:	4808      	ldr	r0, [pc, #32]	; (800e7ec <prvPortStartFirstTask+0x24>)
 800e7ca:	6800      	ldr	r0, [r0, #0]
 800e7cc:	6800      	ldr	r0, [r0, #0]
 800e7ce:	f380 8808 	msr	MSP, r0
 800e7d2:	f04f 0000 	mov.w	r0, #0
 800e7d6:	f380 8814 	msr	CONTROL, r0
 800e7da:	b662      	cpsie	i
 800e7dc:	b661      	cpsie	f
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	df00      	svc	0
 800e7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7ea:	bf00      	nop
 800e7ec:	e000ed08 	.word	0xe000ed08

0800e7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7f6:	4b37      	ldr	r3, [pc, #220]	; (800e8d4 <xPortStartScheduler+0xe4>)
 800e7f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	22ff      	movs	r2, #255	; 0xff
 800e806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e810:	78fb      	ldrb	r3, [r7, #3]
 800e812:	b2db      	uxtb	r3, r3
 800e814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	4b2f      	ldr	r3, [pc, #188]	; (800e8d8 <xPortStartScheduler+0xe8>)
 800e81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e81e:	4b2f      	ldr	r3, [pc, #188]	; (800e8dc <xPortStartScheduler+0xec>)
 800e820:	2207      	movs	r2, #7
 800e822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e824:	e009      	b.n	800e83a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e826:	4b2d      	ldr	r3, [pc, #180]	; (800e8dc <xPortStartScheduler+0xec>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	4a2b      	ldr	r2, [pc, #172]	; (800e8dc <xPortStartScheduler+0xec>)
 800e82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	b2db      	uxtb	r3, r3
 800e838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e842:	2b80      	cmp	r3, #128	; 0x80
 800e844:	d0ef      	beq.n	800e826 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e846:	4b25      	ldr	r3, [pc, #148]	; (800e8dc <xPortStartScheduler+0xec>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f1c3 0307 	rsb	r3, r3, #7
 800e84e:	2b04      	cmp	r3, #4
 800e850:	d00c      	beq.n	800e86c <xPortStartScheduler+0x7c>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e856:	b672      	cpsid	i
 800e858:	f383 8811 	msr	BASEPRI, r3
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f3bf 8f4f 	dsb	sy
 800e864:	b662      	cpsie	i
 800e866:	60bb      	str	r3, [r7, #8]
}
 800e868:	bf00      	nop
 800e86a:	e7fe      	b.n	800e86a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e86c:	4b1b      	ldr	r3, [pc, #108]	; (800e8dc <xPortStartScheduler+0xec>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	021b      	lsls	r3, r3, #8
 800e872:	4a1a      	ldr	r2, [pc, #104]	; (800e8dc <xPortStartScheduler+0xec>)
 800e874:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e876:	4b19      	ldr	r3, [pc, #100]	; (800e8dc <xPortStartScheduler+0xec>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e87e:	4a17      	ldr	r2, [pc, #92]	; (800e8dc <xPortStartScheduler+0xec>)
 800e880:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	b2da      	uxtb	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e88a:	4b15      	ldr	r3, [pc, #84]	; (800e8e0 <xPortStartScheduler+0xf0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a14      	ldr	r2, [pc, #80]	; (800e8e0 <xPortStartScheduler+0xf0>)
 800e890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e894:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e896:	4b12      	ldr	r3, [pc, #72]	; (800e8e0 <xPortStartScheduler+0xf0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a11      	ldr	r2, [pc, #68]	; (800e8e0 <xPortStartScheduler+0xf0>)
 800e89c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8a2:	f000 f8dd 	bl	800ea60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8a6:	4b0f      	ldr	r3, [pc, #60]	; (800e8e4 <xPortStartScheduler+0xf4>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8ac:	f000 f8fc 	bl	800eaa8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8b0:	4b0d      	ldr	r3, [pc, #52]	; (800e8e8 <xPortStartScheduler+0xf8>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a0c      	ldr	r2, [pc, #48]	; (800e8e8 <xPortStartScheduler+0xf8>)
 800e8b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8bc:	f7ff ff84 	bl	800e7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8c0:	f7fe fdd4 	bl	800d46c <vTaskSwitchContext>
	prvTaskExitError();
 800e8c4:	f7ff ff3a 	bl	800e73c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	e000e400 	.word	0xe000e400
 800e8d8:	20005604 	.word	0x20005604
 800e8dc:	20005608 	.word	0x20005608
 800e8e0:	e000ed20 	.word	0xe000ed20
 800e8e4:	20000048 	.word	0x20000048
 800e8e8:	e000ef34 	.word	0xe000ef34

0800e8ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	b672      	cpsid	i
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	b662      	cpsie	i
 800e906:	607b      	str	r3, [r7, #4]
}
 800e908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e90a:	4b10      	ldr	r3, [pc, #64]	; (800e94c <vPortEnterCritical+0x60>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3301      	adds	r3, #1
 800e910:	4a0e      	ldr	r2, [pc, #56]	; (800e94c <vPortEnterCritical+0x60>)
 800e912:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e914:	4b0d      	ldr	r3, [pc, #52]	; (800e94c <vPortEnterCritical+0x60>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d111      	bne.n	800e940 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e91c:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <vPortEnterCritical+0x64>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00c      	beq.n	800e940 <vPortEnterCritical+0x54>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	b672      	cpsid	i
 800e92c:	f383 8811 	msr	BASEPRI, r3
 800e930:	f3bf 8f6f 	isb	sy
 800e934:	f3bf 8f4f 	dsb	sy
 800e938:	b662      	cpsie	i
 800e93a:	603b      	str	r3, [r7, #0]
}
 800e93c:	bf00      	nop
 800e93e:	e7fe      	b.n	800e93e <vPortEnterCritical+0x52>
	}
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	20000048 	.word	0x20000048
 800e950:	e000ed04 	.word	0xe000ed04

0800e954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e95a:	4b13      	ldr	r3, [pc, #76]	; (800e9a8 <vPortExitCritical+0x54>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10c      	bne.n	800e97c <vPortExitCritical+0x28>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	b672      	cpsid	i
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	b662      	cpsie	i
 800e976:	607b      	str	r3, [r7, #4]
}
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e97c:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <vPortExitCritical+0x54>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3b01      	subs	r3, #1
 800e982:	4a09      	ldr	r2, [pc, #36]	; (800e9a8 <vPortExitCritical+0x54>)
 800e984:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e986:	4b08      	ldr	r3, [pc, #32]	; (800e9a8 <vPortExitCritical+0x54>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <vPortExitCritical+0x46>
 800e98e:	2300      	movs	r3, #0
 800e990:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	f383 8811 	msr	BASEPRI, r3
}
 800e998:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e99a:	bf00      	nop
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	20000048 	.word	0x20000048
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9b0:	f3ef 8009 	mrs	r0, PSP
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <pxCurrentTCBConst>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	f01e 0f10 	tst.w	lr, #16
 800e9c0:	bf08      	it	eq
 800e9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	6010      	str	r0, [r2, #0]
 800e9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9d4:	b672      	cpsid	i
 800e9d6:	f380 8811 	msr	BASEPRI, r0
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	b662      	cpsie	i
 800e9e4:	f7fe fd42 	bl	800d46c <vTaskSwitchContext>
 800e9e8:	f04f 0000 	mov.w	r0, #0
 800e9ec:	f380 8811 	msr	BASEPRI, r0
 800e9f0:	bc09      	pop	{r0, r3}
 800e9f2:	6819      	ldr	r1, [r3, #0]
 800e9f4:	6808      	ldr	r0, [r1, #0]
 800e9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fa:	f01e 0f10 	tst.w	lr, #16
 800e9fe:	bf08      	it	eq
 800ea00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea04:	f380 8809 	msr	PSP, r0
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop

0800ea10 <pxCurrentTCBConst>:
 800ea10:	20004fd8 	.word	0x20004fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop

0800ea18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	b672      	cpsid	i
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	b662      	cpsie	i
 800ea32:	607b      	str	r3, [r7, #4]
}
 800ea34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea36:	f7fe fc5d 	bl	800d2f4 <xTaskIncrementTick>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d003      	beq.n	800ea48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea40:	4b06      	ldr	r3, [pc, #24]	; (800ea5c <SysTick_Handler+0x44>)
 800ea42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	f383 8811 	msr	BASEPRI, r3
}
 800ea52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea54:	bf00      	nop
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	e000ed04 	.word	0xe000ed04

0800ea60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea60:	b480      	push	{r7}
 800ea62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea64:	4b0b      	ldr	r3, [pc, #44]	; (800ea94 <vPortSetupTimerInterrupt+0x34>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea6a:	4b0b      	ldr	r3, [pc, #44]	; (800ea98 <vPortSetupTimerInterrupt+0x38>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea70:	4b0a      	ldr	r3, [pc, #40]	; (800ea9c <vPortSetupTimerInterrupt+0x3c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a0a      	ldr	r2, [pc, #40]	; (800eaa0 <vPortSetupTimerInterrupt+0x40>)
 800ea76:	fba2 2303 	umull	r2, r3, r2, r3
 800ea7a:	099b      	lsrs	r3, r3, #6
 800ea7c:	4a09      	ldr	r2, [pc, #36]	; (800eaa4 <vPortSetupTimerInterrupt+0x44>)
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea82:	4b04      	ldr	r3, [pc, #16]	; (800ea94 <vPortSetupTimerInterrupt+0x34>)
 800ea84:	2207      	movs	r2, #7
 800ea86:	601a      	str	r2, [r3, #0]
}
 800ea88:	bf00      	nop
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	e000e010 	.word	0xe000e010
 800ea98:	e000e018 	.word	0xe000e018
 800ea9c:	2000003c 	.word	0x2000003c
 800eaa0:	10624dd3 	.word	0x10624dd3
 800eaa4:	e000e014 	.word	0xe000e014

0800eaa8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eaa8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eab8 <vPortEnableVFP+0x10>
 800eaac:	6801      	ldr	r1, [r0, #0]
 800eaae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eab2:	6001      	str	r1, [r0, #0]
 800eab4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eab6:	bf00      	nop
 800eab8:	e000ed88 	.word	0xe000ed88

0800eabc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eac2:	f3ef 8305 	mrs	r3, IPSR
 800eac6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b0f      	cmp	r3, #15
 800eacc:	d916      	bls.n	800eafc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eace:	4a19      	ldr	r2, [pc, #100]	; (800eb34 <vPortValidateInterruptPriority+0x78>)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4413      	add	r3, r2
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ead8:	4b17      	ldr	r3, [pc, #92]	; (800eb38 <vPortValidateInterruptPriority+0x7c>)
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	7afa      	ldrb	r2, [r7, #11]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d20c      	bcs.n	800eafc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	b672      	cpsid	i
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	b662      	cpsie	i
 800eaf6:	607b      	str	r3, [r7, #4]
}
 800eaf8:	bf00      	nop
 800eafa:	e7fe      	b.n	800eafa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eafc:	4b0f      	ldr	r3, [pc, #60]	; (800eb3c <vPortValidateInterruptPriority+0x80>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb04:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <vPortValidateInterruptPriority+0x84>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d90c      	bls.n	800eb26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	b672      	cpsid	i
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	b662      	cpsie	i
 800eb20:	603b      	str	r3, [r7, #0]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <vPortValidateInterruptPriority+0x68>
	}
 800eb26:	bf00      	nop
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	e000e3f0 	.word	0xe000e3f0
 800eb38:	20005604 	.word	0x20005604
 800eb3c:	e000ed0c 	.word	0xe000ed0c
 800eb40:	20005608 	.word	0x20005608

0800eb44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08a      	sub	sp, #40	; 0x28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb50:	f7fe fb12 	bl	800d178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb54:	4b5b      	ldr	r3, [pc, #364]	; (800ecc4 <pvPortMalloc+0x180>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb5c:	f000 f91a 	bl	800ed94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb60:	4b59      	ldr	r3, [pc, #356]	; (800ecc8 <pvPortMalloc+0x184>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4013      	ands	r3, r2
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f040 8092 	bne.w	800ec92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d01f      	beq.n	800ebb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800eb74:	2208      	movs	r2, #8
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4413      	add	r3, r2
 800eb7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f003 0307 	and.w	r3, r3, #7
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d016      	beq.n	800ebb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f023 0307 	bic.w	r3, r3, #7
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00c      	beq.n	800ebb4 <pvPortMalloc+0x70>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9e:	b672      	cpsid	i
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	b662      	cpsie	i
 800ebae:	617b      	str	r3, [r7, #20]
}
 800ebb0:	bf00      	nop
 800ebb2:	e7fe      	b.n	800ebb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d06b      	beq.n	800ec92 <pvPortMalloc+0x14e>
 800ebba:	4b44      	ldr	r3, [pc, #272]	; (800eccc <pvPortMalloc+0x188>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d866      	bhi.n	800ec92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebc4:	4b42      	ldr	r3, [pc, #264]	; (800ecd0 <pvPortMalloc+0x18c>)
 800ebc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebc8:	4b41      	ldr	r3, [pc, #260]	; (800ecd0 <pvPortMalloc+0x18c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebce:	e004      	b.n	800ebda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d903      	bls.n	800ebec <pvPortMalloc+0xa8>
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1f1      	bne.n	800ebd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebec:	4b35      	ldr	r3, [pc, #212]	; (800ecc4 <pvPortMalloc+0x180>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d04d      	beq.n	800ec92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ebf6:	6a3b      	ldr	r3, [r7, #32]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2208      	movs	r2, #8
 800ebfc:	4413      	add	r3, r2
 800ebfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	2308      	movs	r3, #8
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d921      	bls.n	800ec5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00c      	beq.n	800ec44 <pvPortMalloc+0x100>
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	b672      	cpsid	i
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	b662      	cpsie	i
 800ec3e:	613b      	str	r3, [r7, #16]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	1ad2      	subs	r2, r2, r3
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec56:	69b8      	ldr	r0, [r7, #24]
 800ec58:	f000 f8fe 	bl	800ee58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec5c:	4b1b      	ldr	r3, [pc, #108]	; (800eccc <pvPortMalloc+0x188>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	4a19      	ldr	r2, [pc, #100]	; (800eccc <pvPortMalloc+0x188>)
 800ec68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec6a:	4b18      	ldr	r3, [pc, #96]	; (800eccc <pvPortMalloc+0x188>)
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	4b19      	ldr	r3, [pc, #100]	; (800ecd4 <pvPortMalloc+0x190>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d203      	bcs.n	800ec7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec76:	4b15      	ldr	r3, [pc, #84]	; (800eccc <pvPortMalloc+0x188>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a16      	ldr	r2, [pc, #88]	; (800ecd4 <pvPortMalloc+0x190>)
 800ec7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	4b11      	ldr	r3, [pc, #68]	; (800ecc8 <pvPortMalloc+0x184>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	431a      	orrs	r2, r3
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec92:	f7fe fa7f 	bl	800d194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	f003 0307 	and.w	r3, r3, #7
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00c      	beq.n	800ecba <pvPortMalloc+0x176>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	b672      	cpsid	i
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	b662      	cpsie	i
 800ecb4:	60fb      	str	r3, [r7, #12]
}
 800ecb6:	bf00      	nop
 800ecb8:	e7fe      	b.n	800ecb8 <pvPortMalloc+0x174>
	return pvReturn;
 800ecba:	69fb      	ldr	r3, [r7, #28]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3728      	adds	r7, #40	; 0x28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20009214 	.word	0x20009214
 800ecc8:	20009220 	.word	0x20009220
 800eccc:	20009218 	.word	0x20009218
 800ecd0:	2000920c 	.word	0x2000920c
 800ecd4:	2000921c 	.word	0x2000921c

0800ecd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b086      	sub	sp, #24
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d04c      	beq.n	800ed84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ecea:	2308      	movs	r3, #8
 800ecec:	425b      	negs	r3, r3
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	685a      	ldr	r2, [r3, #4]
 800ecfc:	4b23      	ldr	r3, [pc, #140]	; (800ed8c <vPortFree+0xb4>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4013      	ands	r3, r2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d10c      	bne.n	800ed20 <vPortFree+0x48>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0a:	b672      	cpsid	i
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	b662      	cpsie	i
 800ed1a:	60fb      	str	r3, [r7, #12]
}
 800ed1c:	bf00      	nop
 800ed1e:	e7fe      	b.n	800ed1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00c      	beq.n	800ed42 <vPortFree+0x6a>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	60bb      	str	r3, [r7, #8]
}
 800ed3e:	bf00      	nop
 800ed40:	e7fe      	b.n	800ed40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	4b11      	ldr	r3, [pc, #68]	; (800ed8c <vPortFree+0xb4>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d019      	beq.n	800ed84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d115      	bne.n	800ed84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	4b0b      	ldr	r3, [pc, #44]	; (800ed8c <vPortFree+0xb4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	43db      	mvns	r3, r3
 800ed62:	401a      	ands	r2, r3
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed68:	f7fe fa06 	bl	800d178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <vPortFree+0xb8>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4413      	add	r3, r2
 800ed76:	4a06      	ldr	r2, [pc, #24]	; (800ed90 <vPortFree+0xb8>)
 800ed78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed7a:	6938      	ldr	r0, [r7, #16]
 800ed7c:	f000 f86c 	bl	800ee58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ed80:	f7fe fa08 	bl	800d194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed84:	bf00      	nop
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20009220 	.word	0x20009220
 800ed90:	20009218 	.word	0x20009218

0800ed94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eda0:	4b27      	ldr	r3, [pc, #156]	; (800ee40 <prvHeapInit+0xac>)
 800eda2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f003 0307 	and.w	r3, r3, #7
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00c      	beq.n	800edc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3307      	adds	r3, #7
 800edb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800edbc:	68ba      	ldr	r2, [r7, #8]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	4a1f      	ldr	r2, [pc, #124]	; (800ee40 <prvHeapInit+0xac>)
 800edc4:	4413      	add	r3, r2
 800edc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edcc:	4a1d      	ldr	r2, [pc, #116]	; (800ee44 <prvHeapInit+0xb0>)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800edd2:	4b1c      	ldr	r3, [pc, #112]	; (800ee44 <prvHeapInit+0xb0>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	4413      	add	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ede0:	2208      	movs	r2, #8
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	1a9b      	subs	r3, r3, r2
 800ede6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f023 0307 	bic.w	r3, r3, #7
 800edee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	4a15      	ldr	r2, [pc, #84]	; (800ee48 <prvHeapInit+0xb4>)
 800edf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edf6:	4b14      	ldr	r3, [pc, #80]	; (800ee48 <prvHeapInit+0xb4>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2200      	movs	r2, #0
 800edfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edfe:	4b12      	ldr	r3, [pc, #72]	; (800ee48 <prvHeapInit+0xb4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	1ad2      	subs	r2, r2, r3
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee14:	4b0c      	ldr	r3, [pc, #48]	; (800ee48 <prvHeapInit+0xb4>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	4a0a      	ldr	r2, [pc, #40]	; (800ee4c <prvHeapInit+0xb8>)
 800ee22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	4a09      	ldr	r2, [pc, #36]	; (800ee50 <prvHeapInit+0xbc>)
 800ee2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee2c:	4b09      	ldr	r3, [pc, #36]	; (800ee54 <prvHeapInit+0xc0>)
 800ee2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee32:	601a      	str	r2, [r3, #0]
}
 800ee34:	bf00      	nop
 800ee36:	3714      	adds	r7, #20
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	2000560c 	.word	0x2000560c
 800ee44:	2000920c 	.word	0x2000920c
 800ee48:	20009214 	.word	0x20009214
 800ee4c:	2000921c 	.word	0x2000921c
 800ee50:	20009218 	.word	0x20009218
 800ee54:	20009220 	.word	0x20009220

0800ee58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee60:	4b28      	ldr	r3, [pc, #160]	; (800ef04 <prvInsertBlockIntoFreeList+0xac>)
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e002      	b.n	800ee6c <prvInsertBlockIntoFreeList+0x14>
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	60fb      	str	r3, [r7, #12]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d8f7      	bhi.n	800ee66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	4413      	add	r3, r2
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d108      	bne.n	800ee9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	441a      	add	r2, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	441a      	add	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d118      	bne.n	800eee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	4b15      	ldr	r3, [pc, #84]	; (800ef08 <prvInsertBlockIntoFreeList+0xb0>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d00d      	beq.n	800eed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	441a      	add	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	e008      	b.n	800eee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eed6:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <prvInsertBlockIntoFreeList+0xb0>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	601a      	str	r2, [r3, #0]
 800eede:	e003      	b.n	800eee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d002      	beq.n	800eef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eef6:	bf00      	nop
 800eef8:	3714      	adds	r7, #20
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	2000920c 	.word	0x2000920c
 800ef08:	20009214 	.word	0x20009214

0800ef0c <srand>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4b10      	ldr	r3, [pc, #64]	; (800ef50 <srand+0x44>)
 800ef10:	681d      	ldr	r5, [r3, #0]
 800ef12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ef14:	4604      	mov	r4, r0
 800ef16:	b9b3      	cbnz	r3, 800ef46 <srand+0x3a>
 800ef18:	2018      	movs	r0, #24
 800ef1a:	f000 fad3 	bl	800f4c4 <malloc>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	6328      	str	r0, [r5, #48]	; 0x30
 800ef22:	b920      	cbnz	r0, 800ef2e <srand+0x22>
 800ef24:	4b0b      	ldr	r3, [pc, #44]	; (800ef54 <srand+0x48>)
 800ef26:	480c      	ldr	r0, [pc, #48]	; (800ef58 <srand+0x4c>)
 800ef28:	2146      	movs	r1, #70	; 0x46
 800ef2a:	f000 fa61 	bl	800f3f0 <__assert_func>
 800ef2e:	490b      	ldr	r1, [pc, #44]	; (800ef5c <srand+0x50>)
 800ef30:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <srand+0x54>)
 800ef32:	e9c0 1300 	strd	r1, r3, [r0]
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <srand+0x58>)
 800ef38:	6083      	str	r3, [r0, #8]
 800ef3a:	230b      	movs	r3, #11
 800ef3c:	8183      	strh	r3, [r0, #12]
 800ef3e:	2100      	movs	r1, #0
 800ef40:	2001      	movs	r0, #1
 800ef42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ef46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ef48:	2200      	movs	r2, #0
 800ef4a:	611c      	str	r4, [r3, #16]
 800ef4c:	615a      	str	r2, [r3, #20]
 800ef4e:	bd38      	pop	{r3, r4, r5, pc}
 800ef50:	200000a4 	.word	0x200000a4
 800ef54:	08126050 	.word	0x08126050
 800ef58:	08126067 	.word	0x08126067
 800ef5c:	abcd330e 	.word	0xabcd330e
 800ef60:	e66d1234 	.word	0xe66d1234
 800ef64:	0005deec 	.word	0x0005deec

0800ef68 <rand>:
 800ef68:	4b16      	ldr	r3, [pc, #88]	; (800efc4 <rand+0x5c>)
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	681c      	ldr	r4, [r3, #0]
 800ef6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef70:	b9b3      	cbnz	r3, 800efa0 <rand+0x38>
 800ef72:	2018      	movs	r0, #24
 800ef74:	f000 faa6 	bl	800f4c4 <malloc>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	6320      	str	r0, [r4, #48]	; 0x30
 800ef7c:	b920      	cbnz	r0, 800ef88 <rand+0x20>
 800ef7e:	4b12      	ldr	r3, [pc, #72]	; (800efc8 <rand+0x60>)
 800ef80:	4812      	ldr	r0, [pc, #72]	; (800efcc <rand+0x64>)
 800ef82:	2152      	movs	r1, #82	; 0x52
 800ef84:	f000 fa34 	bl	800f3f0 <__assert_func>
 800ef88:	4911      	ldr	r1, [pc, #68]	; (800efd0 <rand+0x68>)
 800ef8a:	4b12      	ldr	r3, [pc, #72]	; (800efd4 <rand+0x6c>)
 800ef8c:	e9c0 1300 	strd	r1, r3, [r0]
 800ef90:	4b11      	ldr	r3, [pc, #68]	; (800efd8 <rand+0x70>)
 800ef92:	6083      	str	r3, [r0, #8]
 800ef94:	230b      	movs	r3, #11
 800ef96:	8183      	strh	r3, [r0, #12]
 800ef98:	2100      	movs	r1, #0
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800efa0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800efa2:	480e      	ldr	r0, [pc, #56]	; (800efdc <rand+0x74>)
 800efa4:	690b      	ldr	r3, [r1, #16]
 800efa6:	694c      	ldr	r4, [r1, #20]
 800efa8:	4a0d      	ldr	r2, [pc, #52]	; (800efe0 <rand+0x78>)
 800efaa:	4358      	muls	r0, r3
 800efac:	fb02 0004 	mla	r0, r2, r4, r0
 800efb0:	fba3 3202 	umull	r3, r2, r3, r2
 800efb4:	3301      	adds	r3, #1
 800efb6:	eb40 0002 	adc.w	r0, r0, r2
 800efba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800efbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800efc2:	bd10      	pop	{r4, pc}
 800efc4:	200000a4 	.word	0x200000a4
 800efc8:	08126050 	.word	0x08126050
 800efcc:	08126067 	.word	0x08126067
 800efd0:	abcd330e 	.word	0xabcd330e
 800efd4:	e66d1234 	.word	0xe66d1234
 800efd8:	0005deec 	.word	0x0005deec
 800efdc:	5851f42d 	.word	0x5851f42d
 800efe0:	4c957f2d 	.word	0x4c957f2d

0800efe4 <std>:
 800efe4:	2300      	movs	r3, #0
 800efe6:	b510      	push	{r4, lr}
 800efe8:	4604      	mov	r4, r0
 800efea:	e9c0 3300 	strd	r3, r3, [r0]
 800efee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eff2:	6083      	str	r3, [r0, #8]
 800eff4:	8181      	strh	r1, [r0, #12]
 800eff6:	6643      	str	r3, [r0, #100]	; 0x64
 800eff8:	81c2      	strh	r2, [r0, #14]
 800effa:	6183      	str	r3, [r0, #24]
 800effc:	4619      	mov	r1, r3
 800effe:	2208      	movs	r2, #8
 800f000:	305c      	adds	r0, #92	; 0x5c
 800f002:	f000 f914 	bl	800f22e <memset>
 800f006:	4b0d      	ldr	r3, [pc, #52]	; (800f03c <std+0x58>)
 800f008:	6263      	str	r3, [r4, #36]	; 0x24
 800f00a:	4b0d      	ldr	r3, [pc, #52]	; (800f040 <std+0x5c>)
 800f00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f00e:	4b0d      	ldr	r3, [pc, #52]	; (800f044 <std+0x60>)
 800f010:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f012:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <std+0x64>)
 800f014:	6323      	str	r3, [r4, #48]	; 0x30
 800f016:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <std+0x68>)
 800f018:	6224      	str	r4, [r4, #32]
 800f01a:	429c      	cmp	r4, r3
 800f01c:	d006      	beq.n	800f02c <std+0x48>
 800f01e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f022:	4294      	cmp	r4, r2
 800f024:	d002      	beq.n	800f02c <std+0x48>
 800f026:	33d0      	adds	r3, #208	; 0xd0
 800f028:	429c      	cmp	r4, r3
 800f02a:	d105      	bne.n	800f038 <std+0x54>
 800f02c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f034:	f000 b9ca 	b.w	800f3cc <__retarget_lock_init_recursive>
 800f038:	bd10      	pop	{r4, pc}
 800f03a:	bf00      	nop
 800f03c:	0800f1a9 	.word	0x0800f1a9
 800f040:	0800f1cb 	.word	0x0800f1cb
 800f044:	0800f203 	.word	0x0800f203
 800f048:	0800f227 	.word	0x0800f227
 800f04c:	20009224 	.word	0x20009224

0800f050 <stdio_exit_handler>:
 800f050:	4a02      	ldr	r2, [pc, #8]	; (800f05c <stdio_exit_handler+0xc>)
 800f052:	4903      	ldr	r1, [pc, #12]	; (800f060 <stdio_exit_handler+0x10>)
 800f054:	4803      	ldr	r0, [pc, #12]	; (800f064 <stdio_exit_handler+0x14>)
 800f056:	f000 b869 	b.w	800f12c <_fwalk_sglue>
 800f05a:	bf00      	nop
 800f05c:	2000004c 	.word	0x2000004c
 800f060:	0800fd09 	.word	0x0800fd09
 800f064:	20000058 	.word	0x20000058

0800f068 <cleanup_stdio>:
 800f068:	6841      	ldr	r1, [r0, #4]
 800f06a:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <cleanup_stdio+0x34>)
 800f06c:	4299      	cmp	r1, r3
 800f06e:	b510      	push	{r4, lr}
 800f070:	4604      	mov	r4, r0
 800f072:	d001      	beq.n	800f078 <cleanup_stdio+0x10>
 800f074:	f000 fe48 	bl	800fd08 <_fflush_r>
 800f078:	68a1      	ldr	r1, [r4, #8]
 800f07a:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <cleanup_stdio+0x38>)
 800f07c:	4299      	cmp	r1, r3
 800f07e:	d002      	beq.n	800f086 <cleanup_stdio+0x1e>
 800f080:	4620      	mov	r0, r4
 800f082:	f000 fe41 	bl	800fd08 <_fflush_r>
 800f086:	68e1      	ldr	r1, [r4, #12]
 800f088:	4b06      	ldr	r3, [pc, #24]	; (800f0a4 <cleanup_stdio+0x3c>)
 800f08a:	4299      	cmp	r1, r3
 800f08c:	d004      	beq.n	800f098 <cleanup_stdio+0x30>
 800f08e:	4620      	mov	r0, r4
 800f090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f094:	f000 be38 	b.w	800fd08 <_fflush_r>
 800f098:	bd10      	pop	{r4, pc}
 800f09a:	bf00      	nop
 800f09c:	20009224 	.word	0x20009224
 800f0a0:	2000928c 	.word	0x2000928c
 800f0a4:	200092f4 	.word	0x200092f4

0800f0a8 <global_stdio_init.part.0>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <global_stdio_init.part.0+0x30>)
 800f0ac:	4c0b      	ldr	r4, [pc, #44]	; (800f0dc <global_stdio_init.part.0+0x34>)
 800f0ae:	4a0c      	ldr	r2, [pc, #48]	; (800f0e0 <global_stdio_init.part.0+0x38>)
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2104      	movs	r1, #4
 800f0b8:	f7ff ff94 	bl	800efe4 <std>
 800f0bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	2109      	movs	r1, #9
 800f0c4:	f7ff ff8e 	bl	800efe4 <std>
 800f0c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f0cc:	2202      	movs	r2, #2
 800f0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0d2:	2112      	movs	r1, #18
 800f0d4:	f7ff bf86 	b.w	800efe4 <std>
 800f0d8:	2000935c 	.word	0x2000935c
 800f0dc:	20009224 	.word	0x20009224
 800f0e0:	0800f051 	.word	0x0800f051

0800f0e4 <__sfp_lock_acquire>:
 800f0e4:	4801      	ldr	r0, [pc, #4]	; (800f0ec <__sfp_lock_acquire+0x8>)
 800f0e6:	f000 b972 	b.w	800f3ce <__retarget_lock_acquire_recursive>
 800f0ea:	bf00      	nop
 800f0ec:	20009365 	.word	0x20009365

0800f0f0 <__sfp_lock_release>:
 800f0f0:	4801      	ldr	r0, [pc, #4]	; (800f0f8 <__sfp_lock_release+0x8>)
 800f0f2:	f000 b96d 	b.w	800f3d0 <__retarget_lock_release_recursive>
 800f0f6:	bf00      	nop
 800f0f8:	20009365 	.word	0x20009365

0800f0fc <__sinit>:
 800f0fc:	b510      	push	{r4, lr}
 800f0fe:	4604      	mov	r4, r0
 800f100:	f7ff fff0 	bl	800f0e4 <__sfp_lock_acquire>
 800f104:	6a23      	ldr	r3, [r4, #32]
 800f106:	b11b      	cbz	r3, 800f110 <__sinit+0x14>
 800f108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f10c:	f7ff bff0 	b.w	800f0f0 <__sfp_lock_release>
 800f110:	4b04      	ldr	r3, [pc, #16]	; (800f124 <__sinit+0x28>)
 800f112:	6223      	str	r3, [r4, #32]
 800f114:	4b04      	ldr	r3, [pc, #16]	; (800f128 <__sinit+0x2c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1f5      	bne.n	800f108 <__sinit+0xc>
 800f11c:	f7ff ffc4 	bl	800f0a8 <global_stdio_init.part.0>
 800f120:	e7f2      	b.n	800f108 <__sinit+0xc>
 800f122:	bf00      	nop
 800f124:	0800f069 	.word	0x0800f069
 800f128:	2000935c 	.word	0x2000935c

0800f12c <_fwalk_sglue>:
 800f12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f130:	4607      	mov	r7, r0
 800f132:	4688      	mov	r8, r1
 800f134:	4614      	mov	r4, r2
 800f136:	2600      	movs	r6, #0
 800f138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f13c:	f1b9 0901 	subs.w	r9, r9, #1
 800f140:	d505      	bpl.n	800f14e <_fwalk_sglue+0x22>
 800f142:	6824      	ldr	r4, [r4, #0]
 800f144:	2c00      	cmp	r4, #0
 800f146:	d1f7      	bne.n	800f138 <_fwalk_sglue+0xc>
 800f148:	4630      	mov	r0, r6
 800f14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f14e:	89ab      	ldrh	r3, [r5, #12]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d907      	bls.n	800f164 <_fwalk_sglue+0x38>
 800f154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f158:	3301      	adds	r3, #1
 800f15a:	d003      	beq.n	800f164 <_fwalk_sglue+0x38>
 800f15c:	4629      	mov	r1, r5
 800f15e:	4638      	mov	r0, r7
 800f160:	47c0      	blx	r8
 800f162:	4306      	orrs	r6, r0
 800f164:	3568      	adds	r5, #104	; 0x68
 800f166:	e7e9      	b.n	800f13c <_fwalk_sglue+0x10>

0800f168 <siprintf>:
 800f168:	b40e      	push	{r1, r2, r3}
 800f16a:	b500      	push	{lr}
 800f16c:	b09c      	sub	sp, #112	; 0x70
 800f16e:	ab1d      	add	r3, sp, #116	; 0x74
 800f170:	9002      	str	r0, [sp, #8]
 800f172:	9006      	str	r0, [sp, #24]
 800f174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f178:	4809      	ldr	r0, [pc, #36]	; (800f1a0 <siprintf+0x38>)
 800f17a:	9107      	str	r1, [sp, #28]
 800f17c:	9104      	str	r1, [sp, #16]
 800f17e:	4909      	ldr	r1, [pc, #36]	; (800f1a4 <siprintf+0x3c>)
 800f180:	f853 2b04 	ldr.w	r2, [r3], #4
 800f184:	9105      	str	r1, [sp, #20]
 800f186:	6800      	ldr	r0, [r0, #0]
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	a902      	add	r1, sp, #8
 800f18c:	f000 faa8 	bl	800f6e0 <_svfiprintf_r>
 800f190:	9b02      	ldr	r3, [sp, #8]
 800f192:	2200      	movs	r2, #0
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	b01c      	add	sp, #112	; 0x70
 800f198:	f85d eb04 	ldr.w	lr, [sp], #4
 800f19c:	b003      	add	sp, #12
 800f19e:	4770      	bx	lr
 800f1a0:	200000a4 	.word	0x200000a4
 800f1a4:	ffff0208 	.word	0xffff0208

0800f1a8 <__sread>:
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b0:	f000 f8be 	bl	800f330 <_read_r>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	bfab      	itete	ge
 800f1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f1bc:	181b      	addge	r3, r3, r0
 800f1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1c2:	bfac      	ite	ge
 800f1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1c6:	81a3      	strhlt	r3, [r4, #12]
 800f1c8:	bd10      	pop	{r4, pc}

0800f1ca <__swrite>:
 800f1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ce:	461f      	mov	r7, r3
 800f1d0:	898b      	ldrh	r3, [r1, #12]
 800f1d2:	05db      	lsls	r3, r3, #23
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	4616      	mov	r6, r2
 800f1da:	d505      	bpl.n	800f1e8 <__swrite+0x1e>
 800f1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f000 f892 	bl	800f30c <_lseek_r>
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1f2:	81a3      	strh	r3, [r4, #12]
 800f1f4:	4632      	mov	r2, r6
 800f1f6:	463b      	mov	r3, r7
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fe:	f000 b8a9 	b.w	800f354 <_write_r>

0800f202 <__sseek>:
 800f202:	b510      	push	{r4, lr}
 800f204:	460c      	mov	r4, r1
 800f206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f20a:	f000 f87f 	bl	800f30c <_lseek_r>
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	bf15      	itete	ne
 800f214:	6560      	strne	r0, [r4, #84]	; 0x54
 800f216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f21e:	81a3      	strheq	r3, [r4, #12]
 800f220:	bf18      	it	ne
 800f222:	81a3      	strhne	r3, [r4, #12]
 800f224:	bd10      	pop	{r4, pc}

0800f226 <__sclose>:
 800f226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22a:	f000 b809 	b.w	800f240 <_close_r>

0800f22e <memset>:
 800f22e:	4402      	add	r2, r0
 800f230:	4603      	mov	r3, r0
 800f232:	4293      	cmp	r3, r2
 800f234:	d100      	bne.n	800f238 <memset+0xa>
 800f236:	4770      	bx	lr
 800f238:	f803 1b01 	strb.w	r1, [r3], #1
 800f23c:	e7f9      	b.n	800f232 <memset+0x4>
	...

0800f240 <_close_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d06      	ldr	r5, [pc, #24]	; (800f25c <_close_r+0x1c>)
 800f244:	2300      	movs	r3, #0
 800f246:	4604      	mov	r4, r0
 800f248:	4608      	mov	r0, r1
 800f24a:	602b      	str	r3, [r5, #0]
 800f24c:	f7f5 fbb1 	bl	80049b2 <_close>
 800f250:	1c43      	adds	r3, r0, #1
 800f252:	d102      	bne.n	800f25a <_close_r+0x1a>
 800f254:	682b      	ldr	r3, [r5, #0]
 800f256:	b103      	cbz	r3, 800f25a <_close_r+0x1a>
 800f258:	6023      	str	r3, [r4, #0]
 800f25a:	bd38      	pop	{r3, r4, r5, pc}
 800f25c:	20009360 	.word	0x20009360

0800f260 <_reclaim_reent>:
 800f260:	4b29      	ldr	r3, [pc, #164]	; (800f308 <_reclaim_reent+0xa8>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4283      	cmp	r3, r0
 800f266:	b570      	push	{r4, r5, r6, lr}
 800f268:	4604      	mov	r4, r0
 800f26a:	d04b      	beq.n	800f304 <_reclaim_reent+0xa4>
 800f26c:	69c3      	ldr	r3, [r0, #28]
 800f26e:	b143      	cbz	r3, 800f282 <_reclaim_reent+0x22>
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d144      	bne.n	800f300 <_reclaim_reent+0xa0>
 800f276:	69e3      	ldr	r3, [r4, #28]
 800f278:	6819      	ldr	r1, [r3, #0]
 800f27a:	b111      	cbz	r1, 800f282 <_reclaim_reent+0x22>
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 f8d5 	bl	800f42c <_free_r>
 800f282:	6961      	ldr	r1, [r4, #20]
 800f284:	b111      	cbz	r1, 800f28c <_reclaim_reent+0x2c>
 800f286:	4620      	mov	r0, r4
 800f288:	f000 f8d0 	bl	800f42c <_free_r>
 800f28c:	69e1      	ldr	r1, [r4, #28]
 800f28e:	b111      	cbz	r1, 800f296 <_reclaim_reent+0x36>
 800f290:	4620      	mov	r0, r4
 800f292:	f000 f8cb 	bl	800f42c <_free_r>
 800f296:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f298:	b111      	cbz	r1, 800f2a0 <_reclaim_reent+0x40>
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 f8c6 	bl	800f42c <_free_r>
 800f2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2a2:	b111      	cbz	r1, 800f2aa <_reclaim_reent+0x4a>
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 f8c1 	bl	800f42c <_free_r>
 800f2aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f2ac:	b111      	cbz	r1, 800f2b4 <_reclaim_reent+0x54>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 f8bc 	bl	800f42c <_free_r>
 800f2b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f2b6:	b111      	cbz	r1, 800f2be <_reclaim_reent+0x5e>
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 f8b7 	bl	800f42c <_free_r>
 800f2be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f2c0:	b111      	cbz	r1, 800f2c8 <_reclaim_reent+0x68>
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 f8b2 	bl	800f42c <_free_r>
 800f2c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f2ca:	b111      	cbz	r1, 800f2d2 <_reclaim_reent+0x72>
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f000 f8ad 	bl	800f42c <_free_r>
 800f2d2:	6a23      	ldr	r3, [r4, #32]
 800f2d4:	b1b3      	cbz	r3, 800f304 <_reclaim_reent+0xa4>
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2dc:	4718      	bx	r3
 800f2de:	5949      	ldr	r1, [r1, r5]
 800f2e0:	b941      	cbnz	r1, 800f2f4 <_reclaim_reent+0x94>
 800f2e2:	3504      	adds	r5, #4
 800f2e4:	69e3      	ldr	r3, [r4, #28]
 800f2e6:	2d80      	cmp	r5, #128	; 0x80
 800f2e8:	68d9      	ldr	r1, [r3, #12]
 800f2ea:	d1f8      	bne.n	800f2de <_reclaim_reent+0x7e>
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f000 f89d 	bl	800f42c <_free_r>
 800f2f2:	e7c0      	b.n	800f276 <_reclaim_reent+0x16>
 800f2f4:	680e      	ldr	r6, [r1, #0]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 f898 	bl	800f42c <_free_r>
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	e7ef      	b.n	800f2e0 <_reclaim_reent+0x80>
 800f300:	2500      	movs	r5, #0
 800f302:	e7ef      	b.n	800f2e4 <_reclaim_reent+0x84>
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	bf00      	nop
 800f308:	200000a4 	.word	0x200000a4

0800f30c <_lseek_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d07      	ldr	r5, [pc, #28]	; (800f32c <_lseek_r+0x20>)
 800f310:	4604      	mov	r4, r0
 800f312:	4608      	mov	r0, r1
 800f314:	4611      	mov	r1, r2
 800f316:	2200      	movs	r2, #0
 800f318:	602a      	str	r2, [r5, #0]
 800f31a:	461a      	mov	r2, r3
 800f31c:	f7f5 fb70 	bl	8004a00 <_lseek>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_lseek_r+0x1e>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b103      	cbz	r3, 800f32a <_lseek_r+0x1e>
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	20009360 	.word	0x20009360

0800f330 <_read_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4d07      	ldr	r5, [pc, #28]	; (800f350 <_read_r+0x20>)
 800f334:	4604      	mov	r4, r0
 800f336:	4608      	mov	r0, r1
 800f338:	4611      	mov	r1, r2
 800f33a:	2200      	movs	r2, #0
 800f33c:	602a      	str	r2, [r5, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	f7f5 fafe 	bl	8004940 <_read>
 800f344:	1c43      	adds	r3, r0, #1
 800f346:	d102      	bne.n	800f34e <_read_r+0x1e>
 800f348:	682b      	ldr	r3, [r5, #0]
 800f34a:	b103      	cbz	r3, 800f34e <_read_r+0x1e>
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	20009360 	.word	0x20009360

0800f354 <_write_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d07      	ldr	r5, [pc, #28]	; (800f374 <_write_r+0x20>)
 800f358:	4604      	mov	r4, r0
 800f35a:	4608      	mov	r0, r1
 800f35c:	4611      	mov	r1, r2
 800f35e:	2200      	movs	r2, #0
 800f360:	602a      	str	r2, [r5, #0]
 800f362:	461a      	mov	r2, r3
 800f364:	f7f5 fb09 	bl	800497a <_write>
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	d102      	bne.n	800f372 <_write_r+0x1e>
 800f36c:	682b      	ldr	r3, [r5, #0]
 800f36e:	b103      	cbz	r3, 800f372 <_write_r+0x1e>
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	20009360 	.word	0x20009360

0800f378 <__errno>:
 800f378:	4b01      	ldr	r3, [pc, #4]	; (800f380 <__errno+0x8>)
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	200000a4 	.word	0x200000a4

0800f384 <__libc_init_array>:
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	4d0d      	ldr	r5, [pc, #52]	; (800f3bc <__libc_init_array+0x38>)
 800f388:	4c0d      	ldr	r4, [pc, #52]	; (800f3c0 <__libc_init_array+0x3c>)
 800f38a:	1b64      	subs	r4, r4, r5
 800f38c:	10a4      	asrs	r4, r4, #2
 800f38e:	2600      	movs	r6, #0
 800f390:	42a6      	cmp	r6, r4
 800f392:	d109      	bne.n	800f3a8 <__libc_init_array+0x24>
 800f394:	4d0b      	ldr	r5, [pc, #44]	; (800f3c4 <__libc_init_array+0x40>)
 800f396:	4c0c      	ldr	r4, [pc, #48]	; (800f3c8 <__libc_init_array+0x44>)
 800f398:	f001 fb20 	bl	80109dc <_init>
 800f39c:	1b64      	subs	r4, r4, r5
 800f39e:	10a4      	asrs	r4, r4, #2
 800f3a0:	2600      	movs	r6, #0
 800f3a2:	42a6      	cmp	r6, r4
 800f3a4:	d105      	bne.n	800f3b2 <__libc_init_array+0x2e>
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ac:	4798      	blx	r3
 800f3ae:	3601      	adds	r6, #1
 800f3b0:	e7ee      	b.n	800f390 <__libc_init_array+0xc>
 800f3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b6:	4798      	blx	r3
 800f3b8:	3601      	adds	r6, #1
 800f3ba:	e7f2      	b.n	800f3a2 <__libc_init_array+0x1e>
 800f3bc:	081279f0 	.word	0x081279f0
 800f3c0:	081279f0 	.word	0x081279f0
 800f3c4:	081279f0 	.word	0x081279f0
 800f3c8:	081279f4 	.word	0x081279f4

0800f3cc <__retarget_lock_init_recursive>:
 800f3cc:	4770      	bx	lr

0800f3ce <__retarget_lock_acquire_recursive>:
 800f3ce:	4770      	bx	lr

0800f3d0 <__retarget_lock_release_recursive>:
 800f3d0:	4770      	bx	lr

0800f3d2 <memcpy>:
 800f3d2:	440a      	add	r2, r1
 800f3d4:	4291      	cmp	r1, r2
 800f3d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3da:	d100      	bne.n	800f3de <memcpy+0xc>
 800f3dc:	4770      	bx	lr
 800f3de:	b510      	push	{r4, lr}
 800f3e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e8:	4291      	cmp	r1, r2
 800f3ea:	d1f9      	bne.n	800f3e0 <memcpy+0xe>
 800f3ec:	bd10      	pop	{r4, pc}
	...

0800f3f0 <__assert_func>:
 800f3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3f2:	4614      	mov	r4, r2
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4b09      	ldr	r3, [pc, #36]	; (800f41c <__assert_func+0x2c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	68d8      	ldr	r0, [r3, #12]
 800f3fe:	b14c      	cbz	r4, 800f414 <__assert_func+0x24>
 800f400:	4b07      	ldr	r3, [pc, #28]	; (800f420 <__assert_func+0x30>)
 800f402:	9100      	str	r1, [sp, #0]
 800f404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f408:	4906      	ldr	r1, [pc, #24]	; (800f424 <__assert_func+0x34>)
 800f40a:	462b      	mov	r3, r5
 800f40c:	f000 fca4 	bl	800fd58 <fiprintf>
 800f410:	f000 fcde 	bl	800fdd0 <abort>
 800f414:	4b04      	ldr	r3, [pc, #16]	; (800f428 <__assert_func+0x38>)
 800f416:	461c      	mov	r4, r3
 800f418:	e7f3      	b.n	800f402 <__assert_func+0x12>
 800f41a:	bf00      	nop
 800f41c:	200000a4 	.word	0x200000a4
 800f420:	081260bf 	.word	0x081260bf
 800f424:	081260cc 	.word	0x081260cc
 800f428:	081260fa 	.word	0x081260fa

0800f42c <_free_r>:
 800f42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f42e:	2900      	cmp	r1, #0
 800f430:	d044      	beq.n	800f4bc <_free_r+0x90>
 800f432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f436:	9001      	str	r0, [sp, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	f1a1 0404 	sub.w	r4, r1, #4
 800f43e:	bfb8      	it	lt
 800f440:	18e4      	addlt	r4, r4, r3
 800f442:	f000 f8e7 	bl	800f614 <__malloc_lock>
 800f446:	4a1e      	ldr	r2, [pc, #120]	; (800f4c0 <_free_r+0x94>)
 800f448:	9801      	ldr	r0, [sp, #4]
 800f44a:	6813      	ldr	r3, [r2, #0]
 800f44c:	b933      	cbnz	r3, 800f45c <_free_r+0x30>
 800f44e:	6063      	str	r3, [r4, #4]
 800f450:	6014      	str	r4, [r2, #0]
 800f452:	b003      	add	sp, #12
 800f454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f458:	f000 b8e2 	b.w	800f620 <__malloc_unlock>
 800f45c:	42a3      	cmp	r3, r4
 800f45e:	d908      	bls.n	800f472 <_free_r+0x46>
 800f460:	6825      	ldr	r5, [r4, #0]
 800f462:	1961      	adds	r1, r4, r5
 800f464:	428b      	cmp	r3, r1
 800f466:	bf01      	itttt	eq
 800f468:	6819      	ldreq	r1, [r3, #0]
 800f46a:	685b      	ldreq	r3, [r3, #4]
 800f46c:	1949      	addeq	r1, r1, r5
 800f46e:	6021      	streq	r1, [r4, #0]
 800f470:	e7ed      	b.n	800f44e <_free_r+0x22>
 800f472:	461a      	mov	r2, r3
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	b10b      	cbz	r3, 800f47c <_free_r+0x50>
 800f478:	42a3      	cmp	r3, r4
 800f47a:	d9fa      	bls.n	800f472 <_free_r+0x46>
 800f47c:	6811      	ldr	r1, [r2, #0]
 800f47e:	1855      	adds	r5, r2, r1
 800f480:	42a5      	cmp	r5, r4
 800f482:	d10b      	bne.n	800f49c <_free_r+0x70>
 800f484:	6824      	ldr	r4, [r4, #0]
 800f486:	4421      	add	r1, r4
 800f488:	1854      	adds	r4, r2, r1
 800f48a:	42a3      	cmp	r3, r4
 800f48c:	6011      	str	r1, [r2, #0]
 800f48e:	d1e0      	bne.n	800f452 <_free_r+0x26>
 800f490:	681c      	ldr	r4, [r3, #0]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	6053      	str	r3, [r2, #4]
 800f496:	440c      	add	r4, r1
 800f498:	6014      	str	r4, [r2, #0]
 800f49a:	e7da      	b.n	800f452 <_free_r+0x26>
 800f49c:	d902      	bls.n	800f4a4 <_free_r+0x78>
 800f49e:	230c      	movs	r3, #12
 800f4a0:	6003      	str	r3, [r0, #0]
 800f4a2:	e7d6      	b.n	800f452 <_free_r+0x26>
 800f4a4:	6825      	ldr	r5, [r4, #0]
 800f4a6:	1961      	adds	r1, r4, r5
 800f4a8:	428b      	cmp	r3, r1
 800f4aa:	bf04      	itt	eq
 800f4ac:	6819      	ldreq	r1, [r3, #0]
 800f4ae:	685b      	ldreq	r3, [r3, #4]
 800f4b0:	6063      	str	r3, [r4, #4]
 800f4b2:	bf04      	itt	eq
 800f4b4:	1949      	addeq	r1, r1, r5
 800f4b6:	6021      	streq	r1, [r4, #0]
 800f4b8:	6054      	str	r4, [r2, #4]
 800f4ba:	e7ca      	b.n	800f452 <_free_r+0x26>
 800f4bc:	b003      	add	sp, #12
 800f4be:	bd30      	pop	{r4, r5, pc}
 800f4c0:	20009368 	.word	0x20009368

0800f4c4 <malloc>:
 800f4c4:	4b02      	ldr	r3, [pc, #8]	; (800f4d0 <malloc+0xc>)
 800f4c6:	4601      	mov	r1, r0
 800f4c8:	6818      	ldr	r0, [r3, #0]
 800f4ca:	f000 b823 	b.w	800f514 <_malloc_r>
 800f4ce:	bf00      	nop
 800f4d0:	200000a4 	.word	0x200000a4

0800f4d4 <sbrk_aligned>:
 800f4d4:	b570      	push	{r4, r5, r6, lr}
 800f4d6:	4e0e      	ldr	r6, [pc, #56]	; (800f510 <sbrk_aligned+0x3c>)
 800f4d8:	460c      	mov	r4, r1
 800f4da:	6831      	ldr	r1, [r6, #0]
 800f4dc:	4605      	mov	r5, r0
 800f4de:	b911      	cbnz	r1, 800f4e6 <sbrk_aligned+0x12>
 800f4e0:	f000 fc66 	bl	800fdb0 <_sbrk_r>
 800f4e4:	6030      	str	r0, [r6, #0]
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f000 fc61 	bl	800fdb0 <_sbrk_r>
 800f4ee:	1c43      	adds	r3, r0, #1
 800f4f0:	d00a      	beq.n	800f508 <sbrk_aligned+0x34>
 800f4f2:	1cc4      	adds	r4, r0, #3
 800f4f4:	f024 0403 	bic.w	r4, r4, #3
 800f4f8:	42a0      	cmp	r0, r4
 800f4fa:	d007      	beq.n	800f50c <sbrk_aligned+0x38>
 800f4fc:	1a21      	subs	r1, r4, r0
 800f4fe:	4628      	mov	r0, r5
 800f500:	f000 fc56 	bl	800fdb0 <_sbrk_r>
 800f504:	3001      	adds	r0, #1
 800f506:	d101      	bne.n	800f50c <sbrk_aligned+0x38>
 800f508:	f04f 34ff 	mov.w	r4, #4294967295
 800f50c:	4620      	mov	r0, r4
 800f50e:	bd70      	pop	{r4, r5, r6, pc}
 800f510:	2000936c 	.word	0x2000936c

0800f514 <_malloc_r>:
 800f514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f518:	1ccd      	adds	r5, r1, #3
 800f51a:	f025 0503 	bic.w	r5, r5, #3
 800f51e:	3508      	adds	r5, #8
 800f520:	2d0c      	cmp	r5, #12
 800f522:	bf38      	it	cc
 800f524:	250c      	movcc	r5, #12
 800f526:	2d00      	cmp	r5, #0
 800f528:	4607      	mov	r7, r0
 800f52a:	db01      	blt.n	800f530 <_malloc_r+0x1c>
 800f52c:	42a9      	cmp	r1, r5
 800f52e:	d905      	bls.n	800f53c <_malloc_r+0x28>
 800f530:	230c      	movs	r3, #12
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	2600      	movs	r6, #0
 800f536:	4630      	mov	r0, r6
 800f538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f53c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f610 <_malloc_r+0xfc>
 800f540:	f000 f868 	bl	800f614 <__malloc_lock>
 800f544:	f8d8 3000 	ldr.w	r3, [r8]
 800f548:	461c      	mov	r4, r3
 800f54a:	bb5c      	cbnz	r4, 800f5a4 <_malloc_r+0x90>
 800f54c:	4629      	mov	r1, r5
 800f54e:	4638      	mov	r0, r7
 800f550:	f7ff ffc0 	bl	800f4d4 <sbrk_aligned>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	4604      	mov	r4, r0
 800f558:	d155      	bne.n	800f606 <_malloc_r+0xf2>
 800f55a:	f8d8 4000 	ldr.w	r4, [r8]
 800f55e:	4626      	mov	r6, r4
 800f560:	2e00      	cmp	r6, #0
 800f562:	d145      	bne.n	800f5f0 <_malloc_r+0xdc>
 800f564:	2c00      	cmp	r4, #0
 800f566:	d048      	beq.n	800f5fa <_malloc_r+0xe6>
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	4631      	mov	r1, r6
 800f56c:	4638      	mov	r0, r7
 800f56e:	eb04 0903 	add.w	r9, r4, r3
 800f572:	f000 fc1d 	bl	800fdb0 <_sbrk_r>
 800f576:	4581      	cmp	r9, r0
 800f578:	d13f      	bne.n	800f5fa <_malloc_r+0xe6>
 800f57a:	6821      	ldr	r1, [r4, #0]
 800f57c:	1a6d      	subs	r5, r5, r1
 800f57e:	4629      	mov	r1, r5
 800f580:	4638      	mov	r0, r7
 800f582:	f7ff ffa7 	bl	800f4d4 <sbrk_aligned>
 800f586:	3001      	adds	r0, #1
 800f588:	d037      	beq.n	800f5fa <_malloc_r+0xe6>
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	442b      	add	r3, r5
 800f58e:	6023      	str	r3, [r4, #0]
 800f590:	f8d8 3000 	ldr.w	r3, [r8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d038      	beq.n	800f60a <_malloc_r+0xf6>
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	42a2      	cmp	r2, r4
 800f59c:	d12b      	bne.n	800f5f6 <_malloc_r+0xe2>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	605a      	str	r2, [r3, #4]
 800f5a2:	e00f      	b.n	800f5c4 <_malloc_r+0xb0>
 800f5a4:	6822      	ldr	r2, [r4, #0]
 800f5a6:	1b52      	subs	r2, r2, r5
 800f5a8:	d41f      	bmi.n	800f5ea <_malloc_r+0xd6>
 800f5aa:	2a0b      	cmp	r2, #11
 800f5ac:	d917      	bls.n	800f5de <_malloc_r+0xca>
 800f5ae:	1961      	adds	r1, r4, r5
 800f5b0:	42a3      	cmp	r3, r4
 800f5b2:	6025      	str	r5, [r4, #0]
 800f5b4:	bf18      	it	ne
 800f5b6:	6059      	strne	r1, [r3, #4]
 800f5b8:	6863      	ldr	r3, [r4, #4]
 800f5ba:	bf08      	it	eq
 800f5bc:	f8c8 1000 	streq.w	r1, [r8]
 800f5c0:	5162      	str	r2, [r4, r5]
 800f5c2:	604b      	str	r3, [r1, #4]
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f104 060b 	add.w	r6, r4, #11
 800f5ca:	f000 f829 	bl	800f620 <__malloc_unlock>
 800f5ce:	f026 0607 	bic.w	r6, r6, #7
 800f5d2:	1d23      	adds	r3, r4, #4
 800f5d4:	1af2      	subs	r2, r6, r3
 800f5d6:	d0ae      	beq.n	800f536 <_malloc_r+0x22>
 800f5d8:	1b9b      	subs	r3, r3, r6
 800f5da:	50a3      	str	r3, [r4, r2]
 800f5dc:	e7ab      	b.n	800f536 <_malloc_r+0x22>
 800f5de:	42a3      	cmp	r3, r4
 800f5e0:	6862      	ldr	r2, [r4, #4]
 800f5e2:	d1dd      	bne.n	800f5a0 <_malloc_r+0x8c>
 800f5e4:	f8c8 2000 	str.w	r2, [r8]
 800f5e8:	e7ec      	b.n	800f5c4 <_malloc_r+0xb0>
 800f5ea:	4623      	mov	r3, r4
 800f5ec:	6864      	ldr	r4, [r4, #4]
 800f5ee:	e7ac      	b.n	800f54a <_malloc_r+0x36>
 800f5f0:	4634      	mov	r4, r6
 800f5f2:	6876      	ldr	r6, [r6, #4]
 800f5f4:	e7b4      	b.n	800f560 <_malloc_r+0x4c>
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	e7cc      	b.n	800f594 <_malloc_r+0x80>
 800f5fa:	230c      	movs	r3, #12
 800f5fc:	603b      	str	r3, [r7, #0]
 800f5fe:	4638      	mov	r0, r7
 800f600:	f000 f80e 	bl	800f620 <__malloc_unlock>
 800f604:	e797      	b.n	800f536 <_malloc_r+0x22>
 800f606:	6025      	str	r5, [r4, #0]
 800f608:	e7dc      	b.n	800f5c4 <_malloc_r+0xb0>
 800f60a:	605b      	str	r3, [r3, #4]
 800f60c:	deff      	udf	#255	; 0xff
 800f60e:	bf00      	nop
 800f610:	20009368 	.word	0x20009368

0800f614 <__malloc_lock>:
 800f614:	4801      	ldr	r0, [pc, #4]	; (800f61c <__malloc_lock+0x8>)
 800f616:	f7ff beda 	b.w	800f3ce <__retarget_lock_acquire_recursive>
 800f61a:	bf00      	nop
 800f61c:	20009364 	.word	0x20009364

0800f620 <__malloc_unlock>:
 800f620:	4801      	ldr	r0, [pc, #4]	; (800f628 <__malloc_unlock+0x8>)
 800f622:	f7ff bed5 	b.w	800f3d0 <__retarget_lock_release_recursive>
 800f626:	bf00      	nop
 800f628:	20009364 	.word	0x20009364

0800f62c <__ssputs_r>:
 800f62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f630:	688e      	ldr	r6, [r1, #8]
 800f632:	461f      	mov	r7, r3
 800f634:	42be      	cmp	r6, r7
 800f636:	680b      	ldr	r3, [r1, #0]
 800f638:	4682      	mov	sl, r0
 800f63a:	460c      	mov	r4, r1
 800f63c:	4690      	mov	r8, r2
 800f63e:	d82c      	bhi.n	800f69a <__ssputs_r+0x6e>
 800f640:	898a      	ldrh	r2, [r1, #12]
 800f642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f646:	d026      	beq.n	800f696 <__ssputs_r+0x6a>
 800f648:	6965      	ldr	r5, [r4, #20]
 800f64a:	6909      	ldr	r1, [r1, #16]
 800f64c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f650:	eba3 0901 	sub.w	r9, r3, r1
 800f654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f658:	1c7b      	adds	r3, r7, #1
 800f65a:	444b      	add	r3, r9
 800f65c:	106d      	asrs	r5, r5, #1
 800f65e:	429d      	cmp	r5, r3
 800f660:	bf38      	it	cc
 800f662:	461d      	movcc	r5, r3
 800f664:	0553      	lsls	r3, r2, #21
 800f666:	d527      	bpl.n	800f6b8 <__ssputs_r+0x8c>
 800f668:	4629      	mov	r1, r5
 800f66a:	f7ff ff53 	bl	800f514 <_malloc_r>
 800f66e:	4606      	mov	r6, r0
 800f670:	b360      	cbz	r0, 800f6cc <__ssputs_r+0xa0>
 800f672:	6921      	ldr	r1, [r4, #16]
 800f674:	464a      	mov	r2, r9
 800f676:	f7ff feac 	bl	800f3d2 <memcpy>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	6126      	str	r6, [r4, #16]
 800f688:	6165      	str	r5, [r4, #20]
 800f68a:	444e      	add	r6, r9
 800f68c:	eba5 0509 	sub.w	r5, r5, r9
 800f690:	6026      	str	r6, [r4, #0]
 800f692:	60a5      	str	r5, [r4, #8]
 800f694:	463e      	mov	r6, r7
 800f696:	42be      	cmp	r6, r7
 800f698:	d900      	bls.n	800f69c <__ssputs_r+0x70>
 800f69a:	463e      	mov	r6, r7
 800f69c:	6820      	ldr	r0, [r4, #0]
 800f69e:	4632      	mov	r2, r6
 800f6a0:	4641      	mov	r1, r8
 800f6a2:	f000 fb6b 	bl	800fd7c <memmove>
 800f6a6:	68a3      	ldr	r3, [r4, #8]
 800f6a8:	1b9b      	subs	r3, r3, r6
 800f6aa:	60a3      	str	r3, [r4, #8]
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	4433      	add	r3, r6
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	f000 fb90 	bl	800fdde <_realloc_r>
 800f6be:	4606      	mov	r6, r0
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d1e0      	bne.n	800f686 <__ssputs_r+0x5a>
 800f6c4:	6921      	ldr	r1, [r4, #16]
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	f7ff feb0 	bl	800f42c <_free_r>
 800f6cc:	230c      	movs	r3, #12
 800f6ce:	f8ca 3000 	str.w	r3, [sl]
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	f04f 30ff 	mov.w	r0, #4294967295
 800f6de:	e7e9      	b.n	800f6b4 <__ssputs_r+0x88>

0800f6e0 <_svfiprintf_r>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	4698      	mov	r8, r3
 800f6e6:	898b      	ldrh	r3, [r1, #12]
 800f6e8:	061b      	lsls	r3, r3, #24
 800f6ea:	b09d      	sub	sp, #116	; 0x74
 800f6ec:	4607      	mov	r7, r0
 800f6ee:	460d      	mov	r5, r1
 800f6f0:	4614      	mov	r4, r2
 800f6f2:	d50e      	bpl.n	800f712 <_svfiprintf_r+0x32>
 800f6f4:	690b      	ldr	r3, [r1, #16]
 800f6f6:	b963      	cbnz	r3, 800f712 <_svfiprintf_r+0x32>
 800f6f8:	2140      	movs	r1, #64	; 0x40
 800f6fa:	f7ff ff0b 	bl	800f514 <_malloc_r>
 800f6fe:	6028      	str	r0, [r5, #0]
 800f700:	6128      	str	r0, [r5, #16]
 800f702:	b920      	cbnz	r0, 800f70e <_svfiprintf_r+0x2e>
 800f704:	230c      	movs	r3, #12
 800f706:	603b      	str	r3, [r7, #0]
 800f708:	f04f 30ff 	mov.w	r0, #4294967295
 800f70c:	e0d0      	b.n	800f8b0 <_svfiprintf_r+0x1d0>
 800f70e:	2340      	movs	r3, #64	; 0x40
 800f710:	616b      	str	r3, [r5, #20]
 800f712:	2300      	movs	r3, #0
 800f714:	9309      	str	r3, [sp, #36]	; 0x24
 800f716:	2320      	movs	r3, #32
 800f718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f720:	2330      	movs	r3, #48	; 0x30
 800f722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f8c8 <_svfiprintf_r+0x1e8>
 800f726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f72a:	f04f 0901 	mov.w	r9, #1
 800f72e:	4623      	mov	r3, r4
 800f730:	469a      	mov	sl, r3
 800f732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f736:	b10a      	cbz	r2, 800f73c <_svfiprintf_r+0x5c>
 800f738:	2a25      	cmp	r2, #37	; 0x25
 800f73a:	d1f9      	bne.n	800f730 <_svfiprintf_r+0x50>
 800f73c:	ebba 0b04 	subs.w	fp, sl, r4
 800f740:	d00b      	beq.n	800f75a <_svfiprintf_r+0x7a>
 800f742:	465b      	mov	r3, fp
 800f744:	4622      	mov	r2, r4
 800f746:	4629      	mov	r1, r5
 800f748:	4638      	mov	r0, r7
 800f74a:	f7ff ff6f 	bl	800f62c <__ssputs_r>
 800f74e:	3001      	adds	r0, #1
 800f750:	f000 80a9 	beq.w	800f8a6 <_svfiprintf_r+0x1c6>
 800f754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f756:	445a      	add	r2, fp
 800f758:	9209      	str	r2, [sp, #36]	; 0x24
 800f75a:	f89a 3000 	ldrb.w	r3, [sl]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f000 80a1 	beq.w	800f8a6 <_svfiprintf_r+0x1c6>
 800f764:	2300      	movs	r3, #0
 800f766:	f04f 32ff 	mov.w	r2, #4294967295
 800f76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f76e:	f10a 0a01 	add.w	sl, sl, #1
 800f772:	9304      	str	r3, [sp, #16]
 800f774:	9307      	str	r3, [sp, #28]
 800f776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f77a:	931a      	str	r3, [sp, #104]	; 0x68
 800f77c:	4654      	mov	r4, sl
 800f77e:	2205      	movs	r2, #5
 800f780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f784:	4850      	ldr	r0, [pc, #320]	; (800f8c8 <_svfiprintf_r+0x1e8>)
 800f786:	f7f0 fd5b 	bl	8000240 <memchr>
 800f78a:	9a04      	ldr	r2, [sp, #16]
 800f78c:	b9d8      	cbnz	r0, 800f7c6 <_svfiprintf_r+0xe6>
 800f78e:	06d0      	lsls	r0, r2, #27
 800f790:	bf44      	itt	mi
 800f792:	2320      	movmi	r3, #32
 800f794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f798:	0711      	lsls	r1, r2, #28
 800f79a:	bf44      	itt	mi
 800f79c:	232b      	movmi	r3, #43	; 0x2b
 800f79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a8:	d015      	beq.n	800f7d6 <_svfiprintf_r+0xf6>
 800f7aa:	9a07      	ldr	r2, [sp, #28]
 800f7ac:	4654      	mov	r4, sl
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	f04f 0c0a 	mov.w	ip, #10
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7ba:	3b30      	subs	r3, #48	; 0x30
 800f7bc:	2b09      	cmp	r3, #9
 800f7be:	d94d      	bls.n	800f85c <_svfiprintf_r+0x17c>
 800f7c0:	b1b0      	cbz	r0, 800f7f0 <_svfiprintf_r+0x110>
 800f7c2:	9207      	str	r2, [sp, #28]
 800f7c4:	e014      	b.n	800f7f0 <_svfiprintf_r+0x110>
 800f7c6:	eba0 0308 	sub.w	r3, r0, r8
 800f7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	9304      	str	r3, [sp, #16]
 800f7d2:	46a2      	mov	sl, r4
 800f7d4:	e7d2      	b.n	800f77c <_svfiprintf_r+0x9c>
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	1d19      	adds	r1, r3, #4
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	9103      	str	r1, [sp, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	bfbb      	ittet	lt
 800f7e2:	425b      	neglt	r3, r3
 800f7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800f7e8:	9307      	strge	r3, [sp, #28]
 800f7ea:	9307      	strlt	r3, [sp, #28]
 800f7ec:	bfb8      	it	lt
 800f7ee:	9204      	strlt	r2, [sp, #16]
 800f7f0:	7823      	ldrb	r3, [r4, #0]
 800f7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800f7f4:	d10c      	bne.n	800f810 <_svfiprintf_r+0x130>
 800f7f6:	7863      	ldrb	r3, [r4, #1]
 800f7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7fa:	d134      	bne.n	800f866 <_svfiprintf_r+0x186>
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	1d1a      	adds	r2, r3, #4
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	9203      	str	r2, [sp, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfb8      	it	lt
 800f808:	f04f 33ff 	movlt.w	r3, #4294967295
 800f80c:	3402      	adds	r4, #2
 800f80e:	9305      	str	r3, [sp, #20]
 800f810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f8d8 <_svfiprintf_r+0x1f8>
 800f814:	7821      	ldrb	r1, [r4, #0]
 800f816:	2203      	movs	r2, #3
 800f818:	4650      	mov	r0, sl
 800f81a:	f7f0 fd11 	bl	8000240 <memchr>
 800f81e:	b138      	cbz	r0, 800f830 <_svfiprintf_r+0x150>
 800f820:	9b04      	ldr	r3, [sp, #16]
 800f822:	eba0 000a 	sub.w	r0, r0, sl
 800f826:	2240      	movs	r2, #64	; 0x40
 800f828:	4082      	lsls	r2, r0
 800f82a:	4313      	orrs	r3, r2
 800f82c:	3401      	adds	r4, #1
 800f82e:	9304      	str	r3, [sp, #16]
 800f830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f834:	4825      	ldr	r0, [pc, #148]	; (800f8cc <_svfiprintf_r+0x1ec>)
 800f836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f83a:	2206      	movs	r2, #6
 800f83c:	f7f0 fd00 	bl	8000240 <memchr>
 800f840:	2800      	cmp	r0, #0
 800f842:	d038      	beq.n	800f8b6 <_svfiprintf_r+0x1d6>
 800f844:	4b22      	ldr	r3, [pc, #136]	; (800f8d0 <_svfiprintf_r+0x1f0>)
 800f846:	bb1b      	cbnz	r3, 800f890 <_svfiprintf_r+0x1b0>
 800f848:	9b03      	ldr	r3, [sp, #12]
 800f84a:	3307      	adds	r3, #7
 800f84c:	f023 0307 	bic.w	r3, r3, #7
 800f850:	3308      	adds	r3, #8
 800f852:	9303      	str	r3, [sp, #12]
 800f854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f856:	4433      	add	r3, r6
 800f858:	9309      	str	r3, [sp, #36]	; 0x24
 800f85a:	e768      	b.n	800f72e <_svfiprintf_r+0x4e>
 800f85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f860:	460c      	mov	r4, r1
 800f862:	2001      	movs	r0, #1
 800f864:	e7a6      	b.n	800f7b4 <_svfiprintf_r+0xd4>
 800f866:	2300      	movs	r3, #0
 800f868:	3401      	adds	r4, #1
 800f86a:	9305      	str	r3, [sp, #20]
 800f86c:	4619      	mov	r1, r3
 800f86e:	f04f 0c0a 	mov.w	ip, #10
 800f872:	4620      	mov	r0, r4
 800f874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f878:	3a30      	subs	r2, #48	; 0x30
 800f87a:	2a09      	cmp	r2, #9
 800f87c:	d903      	bls.n	800f886 <_svfiprintf_r+0x1a6>
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0c6      	beq.n	800f810 <_svfiprintf_r+0x130>
 800f882:	9105      	str	r1, [sp, #20]
 800f884:	e7c4      	b.n	800f810 <_svfiprintf_r+0x130>
 800f886:	fb0c 2101 	mla	r1, ip, r1, r2
 800f88a:	4604      	mov	r4, r0
 800f88c:	2301      	movs	r3, #1
 800f88e:	e7f0      	b.n	800f872 <_svfiprintf_r+0x192>
 800f890:	ab03      	add	r3, sp, #12
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	462a      	mov	r2, r5
 800f896:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <_svfiprintf_r+0x1f4>)
 800f898:	a904      	add	r1, sp, #16
 800f89a:	4638      	mov	r0, r7
 800f89c:	f3af 8000 	nop.w
 800f8a0:	1c42      	adds	r2, r0, #1
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	d1d6      	bne.n	800f854 <_svfiprintf_r+0x174>
 800f8a6:	89ab      	ldrh	r3, [r5, #12]
 800f8a8:	065b      	lsls	r3, r3, #25
 800f8aa:	f53f af2d 	bmi.w	800f708 <_svfiprintf_r+0x28>
 800f8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8b0:	b01d      	add	sp, #116	; 0x74
 800f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b6:	ab03      	add	r3, sp, #12
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <_svfiprintf_r+0x1f4>)
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f000 f879 	bl	800f9b8 <_printf_i>
 800f8c6:	e7eb      	b.n	800f8a0 <_svfiprintf_r+0x1c0>
 800f8c8:	081260fb 	.word	0x081260fb
 800f8cc:	08126105 	.word	0x08126105
 800f8d0:	00000000 	.word	0x00000000
 800f8d4:	0800f62d 	.word	0x0800f62d
 800f8d8:	08126101 	.word	0x08126101

0800f8dc <_printf_common>:
 800f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e0:	4616      	mov	r6, r2
 800f8e2:	4699      	mov	r9, r3
 800f8e4:	688a      	ldr	r2, [r1, #8]
 800f8e6:	690b      	ldr	r3, [r1, #16]
 800f8e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	bfb8      	it	lt
 800f8f0:	4613      	movlt	r3, r2
 800f8f2:	6033      	str	r3, [r6, #0]
 800f8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8f8:	4607      	mov	r7, r0
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	b10a      	cbz	r2, 800f902 <_printf_common+0x26>
 800f8fe:	3301      	adds	r3, #1
 800f900:	6033      	str	r3, [r6, #0]
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	0699      	lsls	r1, r3, #26
 800f906:	bf42      	ittt	mi
 800f908:	6833      	ldrmi	r3, [r6, #0]
 800f90a:	3302      	addmi	r3, #2
 800f90c:	6033      	strmi	r3, [r6, #0]
 800f90e:	6825      	ldr	r5, [r4, #0]
 800f910:	f015 0506 	ands.w	r5, r5, #6
 800f914:	d106      	bne.n	800f924 <_printf_common+0x48>
 800f916:	f104 0a19 	add.w	sl, r4, #25
 800f91a:	68e3      	ldr	r3, [r4, #12]
 800f91c:	6832      	ldr	r2, [r6, #0]
 800f91e:	1a9b      	subs	r3, r3, r2
 800f920:	42ab      	cmp	r3, r5
 800f922:	dc26      	bgt.n	800f972 <_printf_common+0x96>
 800f924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f928:	1e13      	subs	r3, r2, #0
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	bf18      	it	ne
 800f92e:	2301      	movne	r3, #1
 800f930:	0692      	lsls	r2, r2, #26
 800f932:	d42b      	bmi.n	800f98c <_printf_common+0xb0>
 800f934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f938:	4649      	mov	r1, r9
 800f93a:	4638      	mov	r0, r7
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d01e      	beq.n	800f980 <_printf_common+0xa4>
 800f942:	6823      	ldr	r3, [r4, #0]
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	f003 0306 	and.w	r3, r3, #6
 800f94a:	2b04      	cmp	r3, #4
 800f94c:	bf02      	ittt	eq
 800f94e:	68e5      	ldreq	r5, [r4, #12]
 800f950:	6833      	ldreq	r3, [r6, #0]
 800f952:	1aed      	subeq	r5, r5, r3
 800f954:	68a3      	ldr	r3, [r4, #8]
 800f956:	bf0c      	ite	eq
 800f958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f95c:	2500      	movne	r5, #0
 800f95e:	4293      	cmp	r3, r2
 800f960:	bfc4      	itt	gt
 800f962:	1a9b      	subgt	r3, r3, r2
 800f964:	18ed      	addgt	r5, r5, r3
 800f966:	2600      	movs	r6, #0
 800f968:	341a      	adds	r4, #26
 800f96a:	42b5      	cmp	r5, r6
 800f96c:	d11a      	bne.n	800f9a4 <_printf_common+0xc8>
 800f96e:	2000      	movs	r0, #0
 800f970:	e008      	b.n	800f984 <_printf_common+0xa8>
 800f972:	2301      	movs	r3, #1
 800f974:	4652      	mov	r2, sl
 800f976:	4649      	mov	r1, r9
 800f978:	4638      	mov	r0, r7
 800f97a:	47c0      	blx	r8
 800f97c:	3001      	adds	r0, #1
 800f97e:	d103      	bne.n	800f988 <_printf_common+0xac>
 800f980:	f04f 30ff 	mov.w	r0, #4294967295
 800f984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f988:	3501      	adds	r5, #1
 800f98a:	e7c6      	b.n	800f91a <_printf_common+0x3e>
 800f98c:	18e1      	adds	r1, r4, r3
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	2030      	movs	r0, #48	; 0x30
 800f992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f996:	4422      	add	r2, r4
 800f998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f99c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9a0:	3302      	adds	r3, #2
 800f9a2:	e7c7      	b.n	800f934 <_printf_common+0x58>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	4622      	mov	r2, r4
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	47c0      	blx	r8
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	d0e6      	beq.n	800f980 <_printf_common+0xa4>
 800f9b2:	3601      	adds	r6, #1
 800f9b4:	e7d9      	b.n	800f96a <_printf_common+0x8e>
	...

0800f9b8 <_printf_i>:
 800f9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	7e0f      	ldrb	r7, [r1, #24]
 800f9be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9c0:	2f78      	cmp	r7, #120	; 0x78
 800f9c2:	4691      	mov	r9, r2
 800f9c4:	4680      	mov	r8, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	469a      	mov	sl, r3
 800f9ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9ce:	d807      	bhi.n	800f9e0 <_printf_i+0x28>
 800f9d0:	2f62      	cmp	r7, #98	; 0x62
 800f9d2:	d80a      	bhi.n	800f9ea <_printf_i+0x32>
 800f9d4:	2f00      	cmp	r7, #0
 800f9d6:	f000 80d4 	beq.w	800fb82 <_printf_i+0x1ca>
 800f9da:	2f58      	cmp	r7, #88	; 0x58
 800f9dc:	f000 80c0 	beq.w	800fb60 <_printf_i+0x1a8>
 800f9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9e8:	e03a      	b.n	800fa60 <_printf_i+0xa8>
 800f9ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ee:	2b15      	cmp	r3, #21
 800f9f0:	d8f6      	bhi.n	800f9e0 <_printf_i+0x28>
 800f9f2:	a101      	add	r1, pc, #4	; (adr r1, 800f9f8 <_printf_i+0x40>)
 800f9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9f8:	0800fa51 	.word	0x0800fa51
 800f9fc:	0800fa65 	.word	0x0800fa65
 800fa00:	0800f9e1 	.word	0x0800f9e1
 800fa04:	0800f9e1 	.word	0x0800f9e1
 800fa08:	0800f9e1 	.word	0x0800f9e1
 800fa0c:	0800f9e1 	.word	0x0800f9e1
 800fa10:	0800fa65 	.word	0x0800fa65
 800fa14:	0800f9e1 	.word	0x0800f9e1
 800fa18:	0800f9e1 	.word	0x0800f9e1
 800fa1c:	0800f9e1 	.word	0x0800f9e1
 800fa20:	0800f9e1 	.word	0x0800f9e1
 800fa24:	0800fb69 	.word	0x0800fb69
 800fa28:	0800fa91 	.word	0x0800fa91
 800fa2c:	0800fb23 	.word	0x0800fb23
 800fa30:	0800f9e1 	.word	0x0800f9e1
 800fa34:	0800f9e1 	.word	0x0800f9e1
 800fa38:	0800fb8b 	.word	0x0800fb8b
 800fa3c:	0800f9e1 	.word	0x0800f9e1
 800fa40:	0800fa91 	.word	0x0800fa91
 800fa44:	0800f9e1 	.word	0x0800f9e1
 800fa48:	0800f9e1 	.word	0x0800f9e1
 800fa4c:	0800fb2b 	.word	0x0800fb2b
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	1d1a      	adds	r2, r3, #4
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	602a      	str	r2, [r5, #0]
 800fa58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa60:	2301      	movs	r3, #1
 800fa62:	e09f      	b.n	800fba4 <_printf_i+0x1ec>
 800fa64:	6820      	ldr	r0, [r4, #0]
 800fa66:	682b      	ldr	r3, [r5, #0]
 800fa68:	0607      	lsls	r7, r0, #24
 800fa6a:	f103 0104 	add.w	r1, r3, #4
 800fa6e:	6029      	str	r1, [r5, #0]
 800fa70:	d501      	bpl.n	800fa76 <_printf_i+0xbe>
 800fa72:	681e      	ldr	r6, [r3, #0]
 800fa74:	e003      	b.n	800fa7e <_printf_i+0xc6>
 800fa76:	0646      	lsls	r6, r0, #25
 800fa78:	d5fb      	bpl.n	800fa72 <_printf_i+0xba>
 800fa7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa7e:	2e00      	cmp	r6, #0
 800fa80:	da03      	bge.n	800fa8a <_printf_i+0xd2>
 800fa82:	232d      	movs	r3, #45	; 0x2d
 800fa84:	4276      	negs	r6, r6
 800fa86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa8a:	485a      	ldr	r0, [pc, #360]	; (800fbf4 <_printf_i+0x23c>)
 800fa8c:	230a      	movs	r3, #10
 800fa8e:	e012      	b.n	800fab6 <_printf_i+0xfe>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	6820      	ldr	r0, [r4, #0]
 800fa94:	1d19      	adds	r1, r3, #4
 800fa96:	6029      	str	r1, [r5, #0]
 800fa98:	0605      	lsls	r5, r0, #24
 800fa9a:	d501      	bpl.n	800faa0 <_printf_i+0xe8>
 800fa9c:	681e      	ldr	r6, [r3, #0]
 800fa9e:	e002      	b.n	800faa6 <_printf_i+0xee>
 800faa0:	0641      	lsls	r1, r0, #25
 800faa2:	d5fb      	bpl.n	800fa9c <_printf_i+0xe4>
 800faa4:	881e      	ldrh	r6, [r3, #0]
 800faa6:	4853      	ldr	r0, [pc, #332]	; (800fbf4 <_printf_i+0x23c>)
 800faa8:	2f6f      	cmp	r7, #111	; 0x6f
 800faaa:	bf0c      	ite	eq
 800faac:	2308      	moveq	r3, #8
 800faae:	230a      	movne	r3, #10
 800fab0:	2100      	movs	r1, #0
 800fab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fab6:	6865      	ldr	r5, [r4, #4]
 800fab8:	60a5      	str	r5, [r4, #8]
 800faba:	2d00      	cmp	r5, #0
 800fabc:	bfa2      	ittt	ge
 800fabe:	6821      	ldrge	r1, [r4, #0]
 800fac0:	f021 0104 	bicge.w	r1, r1, #4
 800fac4:	6021      	strge	r1, [r4, #0]
 800fac6:	b90e      	cbnz	r6, 800facc <_printf_i+0x114>
 800fac8:	2d00      	cmp	r5, #0
 800faca:	d04b      	beq.n	800fb64 <_printf_i+0x1ac>
 800facc:	4615      	mov	r5, r2
 800face:	fbb6 f1f3 	udiv	r1, r6, r3
 800fad2:	fb03 6711 	mls	r7, r3, r1, r6
 800fad6:	5dc7      	ldrb	r7, [r0, r7]
 800fad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fadc:	4637      	mov	r7, r6
 800fade:	42bb      	cmp	r3, r7
 800fae0:	460e      	mov	r6, r1
 800fae2:	d9f4      	bls.n	800face <_printf_i+0x116>
 800fae4:	2b08      	cmp	r3, #8
 800fae6:	d10b      	bne.n	800fb00 <_printf_i+0x148>
 800fae8:	6823      	ldr	r3, [r4, #0]
 800faea:	07de      	lsls	r6, r3, #31
 800faec:	d508      	bpl.n	800fb00 <_printf_i+0x148>
 800faee:	6923      	ldr	r3, [r4, #16]
 800faf0:	6861      	ldr	r1, [r4, #4]
 800faf2:	4299      	cmp	r1, r3
 800faf4:	bfde      	ittt	le
 800faf6:	2330      	movle	r3, #48	; 0x30
 800faf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fafc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb00:	1b52      	subs	r2, r2, r5
 800fb02:	6122      	str	r2, [r4, #16]
 800fb04:	f8cd a000 	str.w	sl, [sp]
 800fb08:	464b      	mov	r3, r9
 800fb0a:	aa03      	add	r2, sp, #12
 800fb0c:	4621      	mov	r1, r4
 800fb0e:	4640      	mov	r0, r8
 800fb10:	f7ff fee4 	bl	800f8dc <_printf_common>
 800fb14:	3001      	adds	r0, #1
 800fb16:	d14a      	bne.n	800fbae <_printf_i+0x1f6>
 800fb18:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1c:	b004      	add	sp, #16
 800fb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	f043 0320 	orr.w	r3, r3, #32
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	4833      	ldr	r0, [pc, #204]	; (800fbf8 <_printf_i+0x240>)
 800fb2c:	2778      	movs	r7, #120	; 0x78
 800fb2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	6829      	ldr	r1, [r5, #0]
 800fb36:	061f      	lsls	r7, r3, #24
 800fb38:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb3c:	d402      	bmi.n	800fb44 <_printf_i+0x18c>
 800fb3e:	065f      	lsls	r7, r3, #25
 800fb40:	bf48      	it	mi
 800fb42:	b2b6      	uxthmi	r6, r6
 800fb44:	07df      	lsls	r7, r3, #31
 800fb46:	bf48      	it	mi
 800fb48:	f043 0320 	orrmi.w	r3, r3, #32
 800fb4c:	6029      	str	r1, [r5, #0]
 800fb4e:	bf48      	it	mi
 800fb50:	6023      	strmi	r3, [r4, #0]
 800fb52:	b91e      	cbnz	r6, 800fb5c <_printf_i+0x1a4>
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	f023 0320 	bic.w	r3, r3, #32
 800fb5a:	6023      	str	r3, [r4, #0]
 800fb5c:	2310      	movs	r3, #16
 800fb5e:	e7a7      	b.n	800fab0 <_printf_i+0xf8>
 800fb60:	4824      	ldr	r0, [pc, #144]	; (800fbf4 <_printf_i+0x23c>)
 800fb62:	e7e4      	b.n	800fb2e <_printf_i+0x176>
 800fb64:	4615      	mov	r5, r2
 800fb66:	e7bd      	b.n	800fae4 <_printf_i+0x12c>
 800fb68:	682b      	ldr	r3, [r5, #0]
 800fb6a:	6826      	ldr	r6, [r4, #0]
 800fb6c:	6961      	ldr	r1, [r4, #20]
 800fb6e:	1d18      	adds	r0, r3, #4
 800fb70:	6028      	str	r0, [r5, #0]
 800fb72:	0635      	lsls	r5, r6, #24
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	d501      	bpl.n	800fb7c <_printf_i+0x1c4>
 800fb78:	6019      	str	r1, [r3, #0]
 800fb7a:	e002      	b.n	800fb82 <_printf_i+0x1ca>
 800fb7c:	0670      	lsls	r0, r6, #25
 800fb7e:	d5fb      	bpl.n	800fb78 <_printf_i+0x1c0>
 800fb80:	8019      	strh	r1, [r3, #0]
 800fb82:	2300      	movs	r3, #0
 800fb84:	6123      	str	r3, [r4, #16]
 800fb86:	4615      	mov	r5, r2
 800fb88:	e7bc      	b.n	800fb04 <_printf_i+0x14c>
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	1d1a      	adds	r2, r3, #4
 800fb8e:	602a      	str	r2, [r5, #0]
 800fb90:	681d      	ldr	r5, [r3, #0]
 800fb92:	6862      	ldr	r2, [r4, #4]
 800fb94:	2100      	movs	r1, #0
 800fb96:	4628      	mov	r0, r5
 800fb98:	f7f0 fb52 	bl	8000240 <memchr>
 800fb9c:	b108      	cbz	r0, 800fba2 <_printf_i+0x1ea>
 800fb9e:	1b40      	subs	r0, r0, r5
 800fba0:	6060      	str	r0, [r4, #4]
 800fba2:	6863      	ldr	r3, [r4, #4]
 800fba4:	6123      	str	r3, [r4, #16]
 800fba6:	2300      	movs	r3, #0
 800fba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbac:	e7aa      	b.n	800fb04 <_printf_i+0x14c>
 800fbae:	6923      	ldr	r3, [r4, #16]
 800fbb0:	462a      	mov	r2, r5
 800fbb2:	4649      	mov	r1, r9
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	47d0      	blx	sl
 800fbb8:	3001      	adds	r0, #1
 800fbba:	d0ad      	beq.n	800fb18 <_printf_i+0x160>
 800fbbc:	6823      	ldr	r3, [r4, #0]
 800fbbe:	079b      	lsls	r3, r3, #30
 800fbc0:	d413      	bmi.n	800fbea <_printf_i+0x232>
 800fbc2:	68e0      	ldr	r0, [r4, #12]
 800fbc4:	9b03      	ldr	r3, [sp, #12]
 800fbc6:	4298      	cmp	r0, r3
 800fbc8:	bfb8      	it	lt
 800fbca:	4618      	movlt	r0, r3
 800fbcc:	e7a6      	b.n	800fb1c <_printf_i+0x164>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4632      	mov	r2, r6
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	47d0      	blx	sl
 800fbd8:	3001      	adds	r0, #1
 800fbda:	d09d      	beq.n	800fb18 <_printf_i+0x160>
 800fbdc:	3501      	adds	r5, #1
 800fbde:	68e3      	ldr	r3, [r4, #12]
 800fbe0:	9903      	ldr	r1, [sp, #12]
 800fbe2:	1a5b      	subs	r3, r3, r1
 800fbe4:	42ab      	cmp	r3, r5
 800fbe6:	dcf2      	bgt.n	800fbce <_printf_i+0x216>
 800fbe8:	e7eb      	b.n	800fbc2 <_printf_i+0x20a>
 800fbea:	2500      	movs	r5, #0
 800fbec:	f104 0619 	add.w	r6, r4, #25
 800fbf0:	e7f5      	b.n	800fbde <_printf_i+0x226>
 800fbf2:	bf00      	nop
 800fbf4:	0812610c 	.word	0x0812610c
 800fbf8:	0812611d 	.word	0x0812611d

0800fbfc <__sflush_r>:
 800fbfc:	898a      	ldrh	r2, [r1, #12]
 800fbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc02:	4605      	mov	r5, r0
 800fc04:	0710      	lsls	r0, r2, #28
 800fc06:	460c      	mov	r4, r1
 800fc08:	d458      	bmi.n	800fcbc <__sflush_r+0xc0>
 800fc0a:	684b      	ldr	r3, [r1, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	dc05      	bgt.n	800fc1c <__sflush_r+0x20>
 800fc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	dc02      	bgt.n	800fc1c <__sflush_r+0x20>
 800fc16:	2000      	movs	r0, #0
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc1e:	2e00      	cmp	r6, #0
 800fc20:	d0f9      	beq.n	800fc16 <__sflush_r+0x1a>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc28:	682f      	ldr	r7, [r5, #0]
 800fc2a:	6a21      	ldr	r1, [r4, #32]
 800fc2c:	602b      	str	r3, [r5, #0]
 800fc2e:	d032      	beq.n	800fc96 <__sflush_r+0x9a>
 800fc30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc32:	89a3      	ldrh	r3, [r4, #12]
 800fc34:	075a      	lsls	r2, r3, #29
 800fc36:	d505      	bpl.n	800fc44 <__sflush_r+0x48>
 800fc38:	6863      	ldr	r3, [r4, #4]
 800fc3a:	1ac0      	subs	r0, r0, r3
 800fc3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc3e:	b10b      	cbz	r3, 800fc44 <__sflush_r+0x48>
 800fc40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc42:	1ac0      	subs	r0, r0, r3
 800fc44:	2300      	movs	r3, #0
 800fc46:	4602      	mov	r2, r0
 800fc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc4a:	6a21      	ldr	r1, [r4, #32]
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	47b0      	blx	r6
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	89a3      	ldrh	r3, [r4, #12]
 800fc54:	d106      	bne.n	800fc64 <__sflush_r+0x68>
 800fc56:	6829      	ldr	r1, [r5, #0]
 800fc58:	291d      	cmp	r1, #29
 800fc5a:	d82b      	bhi.n	800fcb4 <__sflush_r+0xb8>
 800fc5c:	4a29      	ldr	r2, [pc, #164]	; (800fd04 <__sflush_r+0x108>)
 800fc5e:	410a      	asrs	r2, r1
 800fc60:	07d6      	lsls	r6, r2, #31
 800fc62:	d427      	bmi.n	800fcb4 <__sflush_r+0xb8>
 800fc64:	2200      	movs	r2, #0
 800fc66:	6062      	str	r2, [r4, #4]
 800fc68:	04d9      	lsls	r1, r3, #19
 800fc6a:	6922      	ldr	r2, [r4, #16]
 800fc6c:	6022      	str	r2, [r4, #0]
 800fc6e:	d504      	bpl.n	800fc7a <__sflush_r+0x7e>
 800fc70:	1c42      	adds	r2, r0, #1
 800fc72:	d101      	bne.n	800fc78 <__sflush_r+0x7c>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	b903      	cbnz	r3, 800fc7a <__sflush_r+0x7e>
 800fc78:	6560      	str	r0, [r4, #84]	; 0x54
 800fc7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc7c:	602f      	str	r7, [r5, #0]
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	d0c9      	beq.n	800fc16 <__sflush_r+0x1a>
 800fc82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc86:	4299      	cmp	r1, r3
 800fc88:	d002      	beq.n	800fc90 <__sflush_r+0x94>
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f7ff fbce 	bl	800f42c <_free_r>
 800fc90:	2000      	movs	r0, #0
 800fc92:	6360      	str	r0, [r4, #52]	; 0x34
 800fc94:	e7c0      	b.n	800fc18 <__sflush_r+0x1c>
 800fc96:	2301      	movs	r3, #1
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b0      	blx	r6
 800fc9c:	1c41      	adds	r1, r0, #1
 800fc9e:	d1c8      	bne.n	800fc32 <__sflush_r+0x36>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d0c5      	beq.n	800fc32 <__sflush_r+0x36>
 800fca6:	2b1d      	cmp	r3, #29
 800fca8:	d001      	beq.n	800fcae <__sflush_r+0xb2>
 800fcaa:	2b16      	cmp	r3, #22
 800fcac:	d101      	bne.n	800fcb2 <__sflush_r+0xb6>
 800fcae:	602f      	str	r7, [r5, #0]
 800fcb0:	e7b1      	b.n	800fc16 <__sflush_r+0x1a>
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb8:	81a3      	strh	r3, [r4, #12]
 800fcba:	e7ad      	b.n	800fc18 <__sflush_r+0x1c>
 800fcbc:	690f      	ldr	r7, [r1, #16]
 800fcbe:	2f00      	cmp	r7, #0
 800fcc0:	d0a9      	beq.n	800fc16 <__sflush_r+0x1a>
 800fcc2:	0793      	lsls	r3, r2, #30
 800fcc4:	680e      	ldr	r6, [r1, #0]
 800fcc6:	bf08      	it	eq
 800fcc8:	694b      	ldreq	r3, [r1, #20]
 800fcca:	600f      	str	r7, [r1, #0]
 800fccc:	bf18      	it	ne
 800fcce:	2300      	movne	r3, #0
 800fcd0:	eba6 0807 	sub.w	r8, r6, r7
 800fcd4:	608b      	str	r3, [r1, #8]
 800fcd6:	f1b8 0f00 	cmp.w	r8, #0
 800fcda:	dd9c      	ble.n	800fc16 <__sflush_r+0x1a>
 800fcdc:	6a21      	ldr	r1, [r4, #32]
 800fcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fce0:	4643      	mov	r3, r8
 800fce2:	463a      	mov	r2, r7
 800fce4:	4628      	mov	r0, r5
 800fce6:	47b0      	blx	r6
 800fce8:	2800      	cmp	r0, #0
 800fcea:	dc06      	bgt.n	800fcfa <__sflush_r+0xfe>
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcf2:	81a3      	strh	r3, [r4, #12]
 800fcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf8:	e78e      	b.n	800fc18 <__sflush_r+0x1c>
 800fcfa:	4407      	add	r7, r0
 800fcfc:	eba8 0800 	sub.w	r8, r8, r0
 800fd00:	e7e9      	b.n	800fcd6 <__sflush_r+0xda>
 800fd02:	bf00      	nop
 800fd04:	dfbffffe 	.word	0xdfbffffe

0800fd08 <_fflush_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	690b      	ldr	r3, [r1, #16]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	b913      	cbnz	r3, 800fd18 <_fflush_r+0x10>
 800fd12:	2500      	movs	r5, #0
 800fd14:	4628      	mov	r0, r5
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	b118      	cbz	r0, 800fd22 <_fflush_r+0x1a>
 800fd1a:	6a03      	ldr	r3, [r0, #32]
 800fd1c:	b90b      	cbnz	r3, 800fd22 <_fflush_r+0x1a>
 800fd1e:	f7ff f9ed 	bl	800f0fc <__sinit>
 800fd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d0f3      	beq.n	800fd12 <_fflush_r+0xa>
 800fd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd2c:	07d0      	lsls	r0, r2, #31
 800fd2e:	d404      	bmi.n	800fd3a <_fflush_r+0x32>
 800fd30:	0599      	lsls	r1, r3, #22
 800fd32:	d402      	bmi.n	800fd3a <_fflush_r+0x32>
 800fd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd36:	f7ff fb4a 	bl	800f3ce <__retarget_lock_acquire_recursive>
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	f7ff ff5d 	bl	800fbfc <__sflush_r>
 800fd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd44:	07da      	lsls	r2, r3, #31
 800fd46:	4605      	mov	r5, r0
 800fd48:	d4e4      	bmi.n	800fd14 <_fflush_r+0xc>
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	059b      	lsls	r3, r3, #22
 800fd4e:	d4e1      	bmi.n	800fd14 <_fflush_r+0xc>
 800fd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd52:	f7ff fb3d 	bl	800f3d0 <__retarget_lock_release_recursive>
 800fd56:	e7dd      	b.n	800fd14 <_fflush_r+0xc>

0800fd58 <fiprintf>:
 800fd58:	b40e      	push	{r1, r2, r3}
 800fd5a:	b503      	push	{r0, r1, lr}
 800fd5c:	4601      	mov	r1, r0
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	4805      	ldr	r0, [pc, #20]	; (800fd78 <fiprintf+0x20>)
 800fd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd66:	6800      	ldr	r0, [r0, #0]
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	f000 f891 	bl	800fe90 <_vfiprintf_r>
 800fd6e:	b002      	add	sp, #8
 800fd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd74:	b003      	add	sp, #12
 800fd76:	4770      	bx	lr
 800fd78:	200000a4 	.word	0x200000a4

0800fd7c <memmove>:
 800fd7c:	4288      	cmp	r0, r1
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	eb01 0402 	add.w	r4, r1, r2
 800fd84:	d902      	bls.n	800fd8c <memmove+0x10>
 800fd86:	4284      	cmp	r4, r0
 800fd88:	4623      	mov	r3, r4
 800fd8a:	d807      	bhi.n	800fd9c <memmove+0x20>
 800fd8c:	1e43      	subs	r3, r0, #1
 800fd8e:	42a1      	cmp	r1, r4
 800fd90:	d008      	beq.n	800fda4 <memmove+0x28>
 800fd92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd9a:	e7f8      	b.n	800fd8e <memmove+0x12>
 800fd9c:	4402      	add	r2, r0
 800fd9e:	4601      	mov	r1, r0
 800fda0:	428a      	cmp	r2, r1
 800fda2:	d100      	bne.n	800fda6 <memmove+0x2a>
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdae:	e7f7      	b.n	800fda0 <memmove+0x24>

0800fdb0 <_sbrk_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4d06      	ldr	r5, [pc, #24]	; (800fdcc <_sbrk_r+0x1c>)
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	4608      	mov	r0, r1
 800fdba:	602b      	str	r3, [r5, #0]
 800fdbc:	f000 fe00 	bl	80109c0 <_sbrk>
 800fdc0:	1c43      	adds	r3, r0, #1
 800fdc2:	d102      	bne.n	800fdca <_sbrk_r+0x1a>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	b103      	cbz	r3, 800fdca <_sbrk_r+0x1a>
 800fdc8:	6023      	str	r3, [r4, #0]
 800fdca:	bd38      	pop	{r3, r4, r5, pc}
 800fdcc:	20009360 	.word	0x20009360

0800fdd0 <abort>:
 800fdd0:	b508      	push	{r3, lr}
 800fdd2:	2006      	movs	r0, #6
 800fdd4:	f000 fa34 	bl	8010240 <raise>
 800fdd8:	2001      	movs	r0, #1
 800fdda:	f7f4 fda7 	bl	800492c <_exit>

0800fdde <_realloc_r>:
 800fdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde2:	4680      	mov	r8, r0
 800fde4:	4614      	mov	r4, r2
 800fde6:	460e      	mov	r6, r1
 800fde8:	b921      	cbnz	r1, 800fdf4 <_realloc_r+0x16>
 800fdea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	4611      	mov	r1, r2
 800fdf0:	f7ff bb90 	b.w	800f514 <_malloc_r>
 800fdf4:	b92a      	cbnz	r2, 800fe02 <_realloc_r+0x24>
 800fdf6:	f7ff fb19 	bl	800f42c <_free_r>
 800fdfa:	4625      	mov	r5, r4
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe02:	f000 fa39 	bl	8010278 <_malloc_usable_size_r>
 800fe06:	4284      	cmp	r4, r0
 800fe08:	4607      	mov	r7, r0
 800fe0a:	d802      	bhi.n	800fe12 <_realloc_r+0x34>
 800fe0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe10:	d812      	bhi.n	800fe38 <_realloc_r+0x5a>
 800fe12:	4621      	mov	r1, r4
 800fe14:	4640      	mov	r0, r8
 800fe16:	f7ff fb7d 	bl	800f514 <_malloc_r>
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d0ed      	beq.n	800fdfc <_realloc_r+0x1e>
 800fe20:	42bc      	cmp	r4, r7
 800fe22:	4622      	mov	r2, r4
 800fe24:	4631      	mov	r1, r6
 800fe26:	bf28      	it	cs
 800fe28:	463a      	movcs	r2, r7
 800fe2a:	f7ff fad2 	bl	800f3d2 <memcpy>
 800fe2e:	4631      	mov	r1, r6
 800fe30:	4640      	mov	r0, r8
 800fe32:	f7ff fafb 	bl	800f42c <_free_r>
 800fe36:	e7e1      	b.n	800fdfc <_realloc_r+0x1e>
 800fe38:	4635      	mov	r5, r6
 800fe3a:	e7df      	b.n	800fdfc <_realloc_r+0x1e>

0800fe3c <__sfputc_r>:
 800fe3c:	6893      	ldr	r3, [r2, #8]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	b410      	push	{r4}
 800fe44:	6093      	str	r3, [r2, #8]
 800fe46:	da08      	bge.n	800fe5a <__sfputc_r+0x1e>
 800fe48:	6994      	ldr	r4, [r2, #24]
 800fe4a:	42a3      	cmp	r3, r4
 800fe4c:	db01      	blt.n	800fe52 <__sfputc_r+0x16>
 800fe4e:	290a      	cmp	r1, #10
 800fe50:	d103      	bne.n	800fe5a <__sfputc_r+0x1e>
 800fe52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe56:	f000 b935 	b.w	80100c4 <__swbuf_r>
 800fe5a:	6813      	ldr	r3, [r2, #0]
 800fe5c:	1c58      	adds	r0, r3, #1
 800fe5e:	6010      	str	r0, [r2, #0]
 800fe60:	7019      	strb	r1, [r3, #0]
 800fe62:	4608      	mov	r0, r1
 800fe64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe68:	4770      	bx	lr

0800fe6a <__sfputs_r>:
 800fe6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	460f      	mov	r7, r1
 800fe70:	4614      	mov	r4, r2
 800fe72:	18d5      	adds	r5, r2, r3
 800fe74:	42ac      	cmp	r4, r5
 800fe76:	d101      	bne.n	800fe7c <__sfputs_r+0x12>
 800fe78:	2000      	movs	r0, #0
 800fe7a:	e007      	b.n	800fe8c <__sfputs_r+0x22>
 800fe7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe80:	463a      	mov	r2, r7
 800fe82:	4630      	mov	r0, r6
 800fe84:	f7ff ffda 	bl	800fe3c <__sfputc_r>
 800fe88:	1c43      	adds	r3, r0, #1
 800fe8a:	d1f3      	bne.n	800fe74 <__sfputs_r+0xa>
 800fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe90 <_vfiprintf_r>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	460d      	mov	r5, r1
 800fe96:	b09d      	sub	sp, #116	; 0x74
 800fe98:	4614      	mov	r4, r2
 800fe9a:	4698      	mov	r8, r3
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	b118      	cbz	r0, 800fea8 <_vfiprintf_r+0x18>
 800fea0:	6a03      	ldr	r3, [r0, #32]
 800fea2:	b90b      	cbnz	r3, 800fea8 <_vfiprintf_r+0x18>
 800fea4:	f7ff f92a 	bl	800f0fc <__sinit>
 800fea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feaa:	07d9      	lsls	r1, r3, #31
 800feac:	d405      	bmi.n	800feba <_vfiprintf_r+0x2a>
 800feae:	89ab      	ldrh	r3, [r5, #12]
 800feb0:	059a      	lsls	r2, r3, #22
 800feb2:	d402      	bmi.n	800feba <_vfiprintf_r+0x2a>
 800feb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feb6:	f7ff fa8a 	bl	800f3ce <__retarget_lock_acquire_recursive>
 800feba:	89ab      	ldrh	r3, [r5, #12]
 800febc:	071b      	lsls	r3, r3, #28
 800febe:	d501      	bpl.n	800fec4 <_vfiprintf_r+0x34>
 800fec0:	692b      	ldr	r3, [r5, #16]
 800fec2:	b99b      	cbnz	r3, 800feec <_vfiprintf_r+0x5c>
 800fec4:	4629      	mov	r1, r5
 800fec6:	4630      	mov	r0, r6
 800fec8:	f000 f93a 	bl	8010140 <__swsetup_r>
 800fecc:	b170      	cbz	r0, 800feec <_vfiprintf_r+0x5c>
 800fece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fed0:	07dc      	lsls	r4, r3, #31
 800fed2:	d504      	bpl.n	800fede <_vfiprintf_r+0x4e>
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295
 800fed8:	b01d      	add	sp, #116	; 0x74
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	89ab      	ldrh	r3, [r5, #12]
 800fee0:	0598      	lsls	r0, r3, #22
 800fee2:	d4f7      	bmi.n	800fed4 <_vfiprintf_r+0x44>
 800fee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fee6:	f7ff fa73 	bl	800f3d0 <__retarget_lock_release_recursive>
 800feea:	e7f3      	b.n	800fed4 <_vfiprintf_r+0x44>
 800feec:	2300      	movs	r3, #0
 800feee:	9309      	str	r3, [sp, #36]	; 0x24
 800fef0:	2320      	movs	r3, #32
 800fef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fefa:	2330      	movs	r3, #48	; 0x30
 800fefc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80100b0 <_vfiprintf_r+0x220>
 800ff00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff04:	f04f 0901 	mov.w	r9, #1
 800ff08:	4623      	mov	r3, r4
 800ff0a:	469a      	mov	sl, r3
 800ff0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff10:	b10a      	cbz	r2, 800ff16 <_vfiprintf_r+0x86>
 800ff12:	2a25      	cmp	r2, #37	; 0x25
 800ff14:	d1f9      	bne.n	800ff0a <_vfiprintf_r+0x7a>
 800ff16:	ebba 0b04 	subs.w	fp, sl, r4
 800ff1a:	d00b      	beq.n	800ff34 <_vfiprintf_r+0xa4>
 800ff1c:	465b      	mov	r3, fp
 800ff1e:	4622      	mov	r2, r4
 800ff20:	4629      	mov	r1, r5
 800ff22:	4630      	mov	r0, r6
 800ff24:	f7ff ffa1 	bl	800fe6a <__sfputs_r>
 800ff28:	3001      	adds	r0, #1
 800ff2a:	f000 80a9 	beq.w	8010080 <_vfiprintf_r+0x1f0>
 800ff2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff30:	445a      	add	r2, fp
 800ff32:	9209      	str	r2, [sp, #36]	; 0x24
 800ff34:	f89a 3000 	ldrb.w	r3, [sl]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f000 80a1 	beq.w	8010080 <_vfiprintf_r+0x1f0>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f04f 32ff 	mov.w	r2, #4294967295
 800ff44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff48:	f10a 0a01 	add.w	sl, sl, #1
 800ff4c:	9304      	str	r3, [sp, #16]
 800ff4e:	9307      	str	r3, [sp, #28]
 800ff50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff54:	931a      	str	r3, [sp, #104]	; 0x68
 800ff56:	4654      	mov	r4, sl
 800ff58:	2205      	movs	r2, #5
 800ff5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5e:	4854      	ldr	r0, [pc, #336]	; (80100b0 <_vfiprintf_r+0x220>)
 800ff60:	f7f0 f96e 	bl	8000240 <memchr>
 800ff64:	9a04      	ldr	r2, [sp, #16]
 800ff66:	b9d8      	cbnz	r0, 800ffa0 <_vfiprintf_r+0x110>
 800ff68:	06d1      	lsls	r1, r2, #27
 800ff6a:	bf44      	itt	mi
 800ff6c:	2320      	movmi	r3, #32
 800ff6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff72:	0713      	lsls	r3, r2, #28
 800ff74:	bf44      	itt	mi
 800ff76:	232b      	movmi	r3, #43	; 0x2b
 800ff78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff80:	2b2a      	cmp	r3, #42	; 0x2a
 800ff82:	d015      	beq.n	800ffb0 <_vfiprintf_r+0x120>
 800ff84:	9a07      	ldr	r2, [sp, #28]
 800ff86:	4654      	mov	r4, sl
 800ff88:	2000      	movs	r0, #0
 800ff8a:	f04f 0c0a 	mov.w	ip, #10
 800ff8e:	4621      	mov	r1, r4
 800ff90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff94:	3b30      	subs	r3, #48	; 0x30
 800ff96:	2b09      	cmp	r3, #9
 800ff98:	d94d      	bls.n	8010036 <_vfiprintf_r+0x1a6>
 800ff9a:	b1b0      	cbz	r0, 800ffca <_vfiprintf_r+0x13a>
 800ff9c:	9207      	str	r2, [sp, #28]
 800ff9e:	e014      	b.n	800ffca <_vfiprintf_r+0x13a>
 800ffa0:	eba0 0308 	sub.w	r3, r0, r8
 800ffa4:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	9304      	str	r3, [sp, #16]
 800ffac:	46a2      	mov	sl, r4
 800ffae:	e7d2      	b.n	800ff56 <_vfiprintf_r+0xc6>
 800ffb0:	9b03      	ldr	r3, [sp, #12]
 800ffb2:	1d19      	adds	r1, r3, #4
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	9103      	str	r1, [sp, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	bfbb      	ittet	lt
 800ffbc:	425b      	neglt	r3, r3
 800ffbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ffc2:	9307      	strge	r3, [sp, #28]
 800ffc4:	9307      	strlt	r3, [sp, #28]
 800ffc6:	bfb8      	it	lt
 800ffc8:	9204      	strlt	r2, [sp, #16]
 800ffca:	7823      	ldrb	r3, [r4, #0]
 800ffcc:	2b2e      	cmp	r3, #46	; 0x2e
 800ffce:	d10c      	bne.n	800ffea <_vfiprintf_r+0x15a>
 800ffd0:	7863      	ldrb	r3, [r4, #1]
 800ffd2:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd4:	d134      	bne.n	8010040 <_vfiprintf_r+0x1b0>
 800ffd6:	9b03      	ldr	r3, [sp, #12]
 800ffd8:	1d1a      	adds	r2, r3, #4
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	9203      	str	r2, [sp, #12]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	bfb8      	it	lt
 800ffe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffe6:	3402      	adds	r4, #2
 800ffe8:	9305      	str	r3, [sp, #20]
 800ffea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80100c0 <_vfiprintf_r+0x230>
 800ffee:	7821      	ldrb	r1, [r4, #0]
 800fff0:	2203      	movs	r2, #3
 800fff2:	4650      	mov	r0, sl
 800fff4:	f7f0 f924 	bl	8000240 <memchr>
 800fff8:	b138      	cbz	r0, 801000a <_vfiprintf_r+0x17a>
 800fffa:	9b04      	ldr	r3, [sp, #16]
 800fffc:	eba0 000a 	sub.w	r0, r0, sl
 8010000:	2240      	movs	r2, #64	; 0x40
 8010002:	4082      	lsls	r2, r0
 8010004:	4313      	orrs	r3, r2
 8010006:	3401      	adds	r4, #1
 8010008:	9304      	str	r3, [sp, #16]
 801000a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000e:	4829      	ldr	r0, [pc, #164]	; (80100b4 <_vfiprintf_r+0x224>)
 8010010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010014:	2206      	movs	r2, #6
 8010016:	f7f0 f913 	bl	8000240 <memchr>
 801001a:	2800      	cmp	r0, #0
 801001c:	d03f      	beq.n	801009e <_vfiprintf_r+0x20e>
 801001e:	4b26      	ldr	r3, [pc, #152]	; (80100b8 <_vfiprintf_r+0x228>)
 8010020:	bb1b      	cbnz	r3, 801006a <_vfiprintf_r+0x1da>
 8010022:	9b03      	ldr	r3, [sp, #12]
 8010024:	3307      	adds	r3, #7
 8010026:	f023 0307 	bic.w	r3, r3, #7
 801002a:	3308      	adds	r3, #8
 801002c:	9303      	str	r3, [sp, #12]
 801002e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010030:	443b      	add	r3, r7
 8010032:	9309      	str	r3, [sp, #36]	; 0x24
 8010034:	e768      	b.n	800ff08 <_vfiprintf_r+0x78>
 8010036:	fb0c 3202 	mla	r2, ip, r2, r3
 801003a:	460c      	mov	r4, r1
 801003c:	2001      	movs	r0, #1
 801003e:	e7a6      	b.n	800ff8e <_vfiprintf_r+0xfe>
 8010040:	2300      	movs	r3, #0
 8010042:	3401      	adds	r4, #1
 8010044:	9305      	str	r3, [sp, #20]
 8010046:	4619      	mov	r1, r3
 8010048:	f04f 0c0a 	mov.w	ip, #10
 801004c:	4620      	mov	r0, r4
 801004e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010052:	3a30      	subs	r2, #48	; 0x30
 8010054:	2a09      	cmp	r2, #9
 8010056:	d903      	bls.n	8010060 <_vfiprintf_r+0x1d0>
 8010058:	2b00      	cmp	r3, #0
 801005a:	d0c6      	beq.n	800ffea <_vfiprintf_r+0x15a>
 801005c:	9105      	str	r1, [sp, #20]
 801005e:	e7c4      	b.n	800ffea <_vfiprintf_r+0x15a>
 8010060:	fb0c 2101 	mla	r1, ip, r1, r2
 8010064:	4604      	mov	r4, r0
 8010066:	2301      	movs	r3, #1
 8010068:	e7f0      	b.n	801004c <_vfiprintf_r+0x1bc>
 801006a:	ab03      	add	r3, sp, #12
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	462a      	mov	r2, r5
 8010070:	4b12      	ldr	r3, [pc, #72]	; (80100bc <_vfiprintf_r+0x22c>)
 8010072:	a904      	add	r1, sp, #16
 8010074:	4630      	mov	r0, r6
 8010076:	f3af 8000 	nop.w
 801007a:	4607      	mov	r7, r0
 801007c:	1c78      	adds	r0, r7, #1
 801007e:	d1d6      	bne.n	801002e <_vfiprintf_r+0x19e>
 8010080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010082:	07d9      	lsls	r1, r3, #31
 8010084:	d405      	bmi.n	8010092 <_vfiprintf_r+0x202>
 8010086:	89ab      	ldrh	r3, [r5, #12]
 8010088:	059a      	lsls	r2, r3, #22
 801008a:	d402      	bmi.n	8010092 <_vfiprintf_r+0x202>
 801008c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801008e:	f7ff f99f 	bl	800f3d0 <__retarget_lock_release_recursive>
 8010092:	89ab      	ldrh	r3, [r5, #12]
 8010094:	065b      	lsls	r3, r3, #25
 8010096:	f53f af1d 	bmi.w	800fed4 <_vfiprintf_r+0x44>
 801009a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801009c:	e71c      	b.n	800fed8 <_vfiprintf_r+0x48>
 801009e:	ab03      	add	r3, sp, #12
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	462a      	mov	r2, r5
 80100a4:	4b05      	ldr	r3, [pc, #20]	; (80100bc <_vfiprintf_r+0x22c>)
 80100a6:	a904      	add	r1, sp, #16
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff fc85 	bl	800f9b8 <_printf_i>
 80100ae:	e7e4      	b.n	801007a <_vfiprintf_r+0x1ea>
 80100b0:	081260fb 	.word	0x081260fb
 80100b4:	08126105 	.word	0x08126105
 80100b8:	00000000 	.word	0x00000000
 80100bc:	0800fe6b 	.word	0x0800fe6b
 80100c0:	08126101 	.word	0x08126101

080100c4 <__swbuf_r>:
 80100c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c6:	460e      	mov	r6, r1
 80100c8:	4614      	mov	r4, r2
 80100ca:	4605      	mov	r5, r0
 80100cc:	b118      	cbz	r0, 80100d6 <__swbuf_r+0x12>
 80100ce:	6a03      	ldr	r3, [r0, #32]
 80100d0:	b90b      	cbnz	r3, 80100d6 <__swbuf_r+0x12>
 80100d2:	f7ff f813 	bl	800f0fc <__sinit>
 80100d6:	69a3      	ldr	r3, [r4, #24]
 80100d8:	60a3      	str	r3, [r4, #8]
 80100da:	89a3      	ldrh	r3, [r4, #12]
 80100dc:	071a      	lsls	r2, r3, #28
 80100de:	d525      	bpl.n	801012c <__swbuf_r+0x68>
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	b31b      	cbz	r3, 801012c <__swbuf_r+0x68>
 80100e4:	6823      	ldr	r3, [r4, #0]
 80100e6:	6922      	ldr	r2, [r4, #16]
 80100e8:	1a98      	subs	r0, r3, r2
 80100ea:	6963      	ldr	r3, [r4, #20]
 80100ec:	b2f6      	uxtb	r6, r6
 80100ee:	4283      	cmp	r3, r0
 80100f0:	4637      	mov	r7, r6
 80100f2:	dc04      	bgt.n	80100fe <__swbuf_r+0x3a>
 80100f4:	4621      	mov	r1, r4
 80100f6:	4628      	mov	r0, r5
 80100f8:	f7ff fe06 	bl	800fd08 <_fflush_r>
 80100fc:	b9e0      	cbnz	r0, 8010138 <__swbuf_r+0x74>
 80100fe:	68a3      	ldr	r3, [r4, #8]
 8010100:	3b01      	subs	r3, #1
 8010102:	60a3      	str	r3, [r4, #8]
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	1c5a      	adds	r2, r3, #1
 8010108:	6022      	str	r2, [r4, #0]
 801010a:	701e      	strb	r6, [r3, #0]
 801010c:	6962      	ldr	r2, [r4, #20]
 801010e:	1c43      	adds	r3, r0, #1
 8010110:	429a      	cmp	r2, r3
 8010112:	d004      	beq.n	801011e <__swbuf_r+0x5a>
 8010114:	89a3      	ldrh	r3, [r4, #12]
 8010116:	07db      	lsls	r3, r3, #31
 8010118:	d506      	bpl.n	8010128 <__swbuf_r+0x64>
 801011a:	2e0a      	cmp	r6, #10
 801011c:	d104      	bne.n	8010128 <__swbuf_r+0x64>
 801011e:	4621      	mov	r1, r4
 8010120:	4628      	mov	r0, r5
 8010122:	f7ff fdf1 	bl	800fd08 <_fflush_r>
 8010126:	b938      	cbnz	r0, 8010138 <__swbuf_r+0x74>
 8010128:	4638      	mov	r0, r7
 801012a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801012c:	4621      	mov	r1, r4
 801012e:	4628      	mov	r0, r5
 8010130:	f000 f806 	bl	8010140 <__swsetup_r>
 8010134:	2800      	cmp	r0, #0
 8010136:	d0d5      	beq.n	80100e4 <__swbuf_r+0x20>
 8010138:	f04f 37ff 	mov.w	r7, #4294967295
 801013c:	e7f4      	b.n	8010128 <__swbuf_r+0x64>
	...

08010140 <__swsetup_r>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	4b2a      	ldr	r3, [pc, #168]	; (80101ec <__swsetup_r+0xac>)
 8010144:	4605      	mov	r5, r0
 8010146:	6818      	ldr	r0, [r3, #0]
 8010148:	460c      	mov	r4, r1
 801014a:	b118      	cbz	r0, 8010154 <__swsetup_r+0x14>
 801014c:	6a03      	ldr	r3, [r0, #32]
 801014e:	b90b      	cbnz	r3, 8010154 <__swsetup_r+0x14>
 8010150:	f7fe ffd4 	bl	800f0fc <__sinit>
 8010154:	89a3      	ldrh	r3, [r4, #12]
 8010156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801015a:	0718      	lsls	r0, r3, #28
 801015c:	d422      	bmi.n	80101a4 <__swsetup_r+0x64>
 801015e:	06d9      	lsls	r1, r3, #27
 8010160:	d407      	bmi.n	8010172 <__swsetup_r+0x32>
 8010162:	2309      	movs	r3, #9
 8010164:	602b      	str	r3, [r5, #0]
 8010166:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801016a:	81a3      	strh	r3, [r4, #12]
 801016c:	f04f 30ff 	mov.w	r0, #4294967295
 8010170:	e034      	b.n	80101dc <__swsetup_r+0x9c>
 8010172:	0758      	lsls	r0, r3, #29
 8010174:	d512      	bpl.n	801019c <__swsetup_r+0x5c>
 8010176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010178:	b141      	cbz	r1, 801018c <__swsetup_r+0x4c>
 801017a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801017e:	4299      	cmp	r1, r3
 8010180:	d002      	beq.n	8010188 <__swsetup_r+0x48>
 8010182:	4628      	mov	r0, r5
 8010184:	f7ff f952 	bl	800f42c <_free_r>
 8010188:	2300      	movs	r3, #0
 801018a:	6363      	str	r3, [r4, #52]	; 0x34
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	2300      	movs	r3, #0
 8010196:	6063      	str	r3, [r4, #4]
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	6023      	str	r3, [r4, #0]
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	f043 0308 	orr.w	r3, r3, #8
 80101a2:	81a3      	strh	r3, [r4, #12]
 80101a4:	6923      	ldr	r3, [r4, #16]
 80101a6:	b94b      	cbnz	r3, 80101bc <__swsetup_r+0x7c>
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101b2:	d003      	beq.n	80101bc <__swsetup_r+0x7c>
 80101b4:	4621      	mov	r1, r4
 80101b6:	4628      	mov	r0, r5
 80101b8:	f000 f88c 	bl	80102d4 <__smakebuf_r>
 80101bc:	89a0      	ldrh	r0, [r4, #12]
 80101be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101c2:	f010 0301 	ands.w	r3, r0, #1
 80101c6:	d00a      	beq.n	80101de <__swsetup_r+0x9e>
 80101c8:	2300      	movs	r3, #0
 80101ca:	60a3      	str	r3, [r4, #8]
 80101cc:	6963      	ldr	r3, [r4, #20]
 80101ce:	425b      	negs	r3, r3
 80101d0:	61a3      	str	r3, [r4, #24]
 80101d2:	6923      	ldr	r3, [r4, #16]
 80101d4:	b943      	cbnz	r3, 80101e8 <__swsetup_r+0xa8>
 80101d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101da:	d1c4      	bne.n	8010166 <__swsetup_r+0x26>
 80101dc:	bd38      	pop	{r3, r4, r5, pc}
 80101de:	0781      	lsls	r1, r0, #30
 80101e0:	bf58      	it	pl
 80101e2:	6963      	ldrpl	r3, [r4, #20]
 80101e4:	60a3      	str	r3, [r4, #8]
 80101e6:	e7f4      	b.n	80101d2 <__swsetup_r+0x92>
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7f7      	b.n	80101dc <__swsetup_r+0x9c>
 80101ec:	200000a4 	.word	0x200000a4

080101f0 <_raise_r>:
 80101f0:	291f      	cmp	r1, #31
 80101f2:	b538      	push	{r3, r4, r5, lr}
 80101f4:	4604      	mov	r4, r0
 80101f6:	460d      	mov	r5, r1
 80101f8:	d904      	bls.n	8010204 <_raise_r+0x14>
 80101fa:	2316      	movs	r3, #22
 80101fc:	6003      	str	r3, [r0, #0]
 80101fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010206:	b112      	cbz	r2, 801020e <_raise_r+0x1e>
 8010208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801020c:	b94b      	cbnz	r3, 8010222 <_raise_r+0x32>
 801020e:	4620      	mov	r0, r4
 8010210:	f000 f830 	bl	8010274 <_getpid_r>
 8010214:	462a      	mov	r2, r5
 8010216:	4601      	mov	r1, r0
 8010218:	4620      	mov	r0, r4
 801021a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801021e:	f000 b817 	b.w	8010250 <_kill_r>
 8010222:	2b01      	cmp	r3, #1
 8010224:	d00a      	beq.n	801023c <_raise_r+0x4c>
 8010226:	1c59      	adds	r1, r3, #1
 8010228:	d103      	bne.n	8010232 <_raise_r+0x42>
 801022a:	2316      	movs	r3, #22
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	2001      	movs	r0, #1
 8010230:	e7e7      	b.n	8010202 <_raise_r+0x12>
 8010232:	2400      	movs	r4, #0
 8010234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010238:	4628      	mov	r0, r5
 801023a:	4798      	blx	r3
 801023c:	2000      	movs	r0, #0
 801023e:	e7e0      	b.n	8010202 <_raise_r+0x12>

08010240 <raise>:
 8010240:	4b02      	ldr	r3, [pc, #8]	; (801024c <raise+0xc>)
 8010242:	4601      	mov	r1, r0
 8010244:	6818      	ldr	r0, [r3, #0]
 8010246:	f7ff bfd3 	b.w	80101f0 <_raise_r>
 801024a:	bf00      	nop
 801024c:	200000a4 	.word	0x200000a4

08010250 <_kill_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4d07      	ldr	r5, [pc, #28]	; (8010270 <_kill_r+0x20>)
 8010254:	2300      	movs	r3, #0
 8010256:	4604      	mov	r4, r0
 8010258:	4608      	mov	r0, r1
 801025a:	4611      	mov	r1, r2
 801025c:	602b      	str	r3, [r5, #0]
 801025e:	f7f4 fb55 	bl	800490c <_kill>
 8010262:	1c43      	adds	r3, r0, #1
 8010264:	d102      	bne.n	801026c <_kill_r+0x1c>
 8010266:	682b      	ldr	r3, [r5, #0]
 8010268:	b103      	cbz	r3, 801026c <_kill_r+0x1c>
 801026a:	6023      	str	r3, [r4, #0]
 801026c:	bd38      	pop	{r3, r4, r5, pc}
 801026e:	bf00      	nop
 8010270:	20009360 	.word	0x20009360

08010274 <_getpid_r>:
 8010274:	f7f4 bb42 	b.w	80048fc <_getpid>

08010278 <_malloc_usable_size_r>:
 8010278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801027c:	1f18      	subs	r0, r3, #4
 801027e:	2b00      	cmp	r3, #0
 8010280:	bfbc      	itt	lt
 8010282:	580b      	ldrlt	r3, [r1, r0]
 8010284:	18c0      	addlt	r0, r0, r3
 8010286:	4770      	bx	lr

08010288 <__swhatbuf_r>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	460c      	mov	r4, r1
 801028c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010290:	2900      	cmp	r1, #0
 8010292:	b096      	sub	sp, #88	; 0x58
 8010294:	4615      	mov	r5, r2
 8010296:	461e      	mov	r6, r3
 8010298:	da0d      	bge.n	80102b6 <__swhatbuf_r+0x2e>
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80102a0:	f04f 0100 	mov.w	r1, #0
 80102a4:	bf0c      	ite	eq
 80102a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80102aa:	2340      	movne	r3, #64	; 0x40
 80102ac:	2000      	movs	r0, #0
 80102ae:	6031      	str	r1, [r6, #0]
 80102b0:	602b      	str	r3, [r5, #0]
 80102b2:	b016      	add	sp, #88	; 0x58
 80102b4:	bd70      	pop	{r4, r5, r6, pc}
 80102b6:	466a      	mov	r2, sp
 80102b8:	f000 f848 	bl	801034c <_fstat_r>
 80102bc:	2800      	cmp	r0, #0
 80102be:	dbec      	blt.n	801029a <__swhatbuf_r+0x12>
 80102c0:	9901      	ldr	r1, [sp, #4]
 80102c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80102c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80102ca:	4259      	negs	r1, r3
 80102cc:	4159      	adcs	r1, r3
 80102ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102d2:	e7eb      	b.n	80102ac <__swhatbuf_r+0x24>

080102d4 <__smakebuf_r>:
 80102d4:	898b      	ldrh	r3, [r1, #12]
 80102d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102d8:	079d      	lsls	r5, r3, #30
 80102da:	4606      	mov	r6, r0
 80102dc:	460c      	mov	r4, r1
 80102de:	d507      	bpl.n	80102f0 <__smakebuf_r+0x1c>
 80102e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	6123      	str	r3, [r4, #16]
 80102e8:	2301      	movs	r3, #1
 80102ea:	6163      	str	r3, [r4, #20]
 80102ec:	b002      	add	sp, #8
 80102ee:	bd70      	pop	{r4, r5, r6, pc}
 80102f0:	ab01      	add	r3, sp, #4
 80102f2:	466a      	mov	r2, sp
 80102f4:	f7ff ffc8 	bl	8010288 <__swhatbuf_r>
 80102f8:	9900      	ldr	r1, [sp, #0]
 80102fa:	4605      	mov	r5, r0
 80102fc:	4630      	mov	r0, r6
 80102fe:	f7ff f909 	bl	800f514 <_malloc_r>
 8010302:	b948      	cbnz	r0, 8010318 <__smakebuf_r+0x44>
 8010304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010308:	059a      	lsls	r2, r3, #22
 801030a:	d4ef      	bmi.n	80102ec <__smakebuf_r+0x18>
 801030c:	f023 0303 	bic.w	r3, r3, #3
 8010310:	f043 0302 	orr.w	r3, r3, #2
 8010314:	81a3      	strh	r3, [r4, #12]
 8010316:	e7e3      	b.n	80102e0 <__smakebuf_r+0xc>
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	6020      	str	r0, [r4, #0]
 801031c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010320:	81a3      	strh	r3, [r4, #12]
 8010322:	9b00      	ldr	r3, [sp, #0]
 8010324:	6163      	str	r3, [r4, #20]
 8010326:	9b01      	ldr	r3, [sp, #4]
 8010328:	6120      	str	r0, [r4, #16]
 801032a:	b15b      	cbz	r3, 8010344 <__smakebuf_r+0x70>
 801032c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010330:	4630      	mov	r0, r6
 8010332:	f000 f81d 	bl	8010370 <_isatty_r>
 8010336:	b128      	cbz	r0, 8010344 <__smakebuf_r+0x70>
 8010338:	89a3      	ldrh	r3, [r4, #12]
 801033a:	f023 0303 	bic.w	r3, r3, #3
 801033e:	f043 0301 	orr.w	r3, r3, #1
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	431d      	orrs	r5, r3
 8010348:	81a5      	strh	r5, [r4, #12]
 801034a:	e7cf      	b.n	80102ec <__smakebuf_r+0x18>

0801034c <_fstat_r>:
 801034c:	b538      	push	{r3, r4, r5, lr}
 801034e:	4d07      	ldr	r5, [pc, #28]	; (801036c <_fstat_r+0x20>)
 8010350:	2300      	movs	r3, #0
 8010352:	4604      	mov	r4, r0
 8010354:	4608      	mov	r0, r1
 8010356:	4611      	mov	r1, r2
 8010358:	602b      	str	r3, [r5, #0]
 801035a:	f7f4 fb36 	bl	80049ca <_fstat>
 801035e:	1c43      	adds	r3, r0, #1
 8010360:	d102      	bne.n	8010368 <_fstat_r+0x1c>
 8010362:	682b      	ldr	r3, [r5, #0]
 8010364:	b103      	cbz	r3, 8010368 <_fstat_r+0x1c>
 8010366:	6023      	str	r3, [r4, #0]
 8010368:	bd38      	pop	{r3, r4, r5, pc}
 801036a:	bf00      	nop
 801036c:	20009360 	.word	0x20009360

08010370 <_isatty_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4d06      	ldr	r5, [pc, #24]	; (801038c <_isatty_r+0x1c>)
 8010374:	2300      	movs	r3, #0
 8010376:	4604      	mov	r4, r0
 8010378:	4608      	mov	r0, r1
 801037a:	602b      	str	r3, [r5, #0]
 801037c:	f7f4 fb35 	bl	80049ea <_isatty>
 8010380:	1c43      	adds	r3, r0, #1
 8010382:	d102      	bne.n	801038a <_isatty_r+0x1a>
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	b103      	cbz	r3, 801038a <_isatty_r+0x1a>
 8010388:	6023      	str	r3, [r4, #0]
 801038a:	bd38      	pop	{r3, r4, r5, pc}
 801038c:	20009360 	.word	0x20009360

08010390 <sqrt>:
 8010390:	b508      	push	{r3, lr}
 8010392:	ed2d 8b04 	vpush	{d8-d9}
 8010396:	eeb0 8b40 	vmov.f64	d8, d0
 801039a:	f000 fa9d 	bl	80108d8 <__ieee754_sqrt>
 801039e:	eeb4 8b48 	vcmp.f64	d8, d8
 80103a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a6:	d60c      	bvs.n	80103c2 <sqrt+0x32>
 80103a8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80103c8 <sqrt+0x38>
 80103ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	d505      	bpl.n	80103c2 <sqrt+0x32>
 80103b6:	f7fe ffdf 	bl	800f378 <__errno>
 80103ba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80103be:	2321      	movs	r3, #33	; 0x21
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	ecbd 8b04 	vpop	{d8-d9}
 80103c6:	bd08      	pop	{r3, pc}
	...

080103d0 <checkint>:
 80103d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80103d4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80103d8:	429a      	cmp	r2, r3
 80103da:	b570      	push	{r4, r5, r6, lr}
 80103dc:	dd2a      	ble.n	8010434 <checkint+0x64>
 80103de:	f240 4333 	movw	r3, #1075	; 0x433
 80103e2:	429a      	cmp	r2, r3
 80103e4:	dc24      	bgt.n	8010430 <checkint+0x60>
 80103e6:	1a9b      	subs	r3, r3, r2
 80103e8:	f1a3 0620 	sub.w	r6, r3, #32
 80103ec:	f04f 32ff 	mov.w	r2, #4294967295
 80103f0:	fa02 f403 	lsl.w	r4, r2, r3
 80103f4:	fa02 f606 	lsl.w	r6, r2, r6
 80103f8:	f1c3 0520 	rsb	r5, r3, #32
 80103fc:	fa22 f505 	lsr.w	r5, r2, r5
 8010400:	4334      	orrs	r4, r6
 8010402:	432c      	orrs	r4, r5
 8010404:	409a      	lsls	r2, r3
 8010406:	ea20 0202 	bic.w	r2, r0, r2
 801040a:	ea21 0404 	bic.w	r4, r1, r4
 801040e:	4322      	orrs	r2, r4
 8010410:	f1a3 0420 	sub.w	r4, r3, #32
 8010414:	f1c3 0220 	rsb	r2, r3, #32
 8010418:	d10c      	bne.n	8010434 <checkint+0x64>
 801041a:	40d8      	lsrs	r0, r3
 801041c:	fa01 f302 	lsl.w	r3, r1, r2
 8010420:	4318      	orrs	r0, r3
 8010422:	40e1      	lsrs	r1, r4
 8010424:	4308      	orrs	r0, r1
 8010426:	f000 0001 	and.w	r0, r0, #1
 801042a:	f1d0 0002 	rsbs	r0, r0, #2
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	2002      	movs	r0, #2
 8010432:	e7fc      	b.n	801042e <checkint+0x5e>
 8010434:	2000      	movs	r0, #0
 8010436:	e7fa      	b.n	801042e <checkint+0x5e>

08010438 <pow>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	ee10 4a90 	vmov	r4, s1
 8010440:	ed2d 8b0a 	vpush	{d8-d12}
 8010444:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8010448:	ee11 aa90 	vmov	sl, s3
 801044c:	f108 32ff 	add.w	r2, r8, #4294967295
 8010450:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010454:	429a      	cmp	r2, r3
 8010456:	ee10 5a10 	vmov	r5, s0
 801045a:	ee11 0a10 	vmov	r0, s2
 801045e:	b087      	sub	sp, #28
 8010460:	46c4      	mov	ip, r8
 8010462:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8010466:	d806      	bhi.n	8010476 <pow+0x3e>
 8010468:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801046c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010470:	2b7f      	cmp	r3, #127	; 0x7f
 8010472:	f240 8156 	bls.w	8010722 <pow+0x2ea>
 8010476:	1802      	adds	r2, r0, r0
 8010478:	eb4a 010a 	adc.w	r1, sl, sl
 801047c:	f06f 0b01 	mvn.w	fp, #1
 8010480:	1e57      	subs	r7, r2, #1
 8010482:	f141 33ff 	adc.w	r3, r1, #4294967295
 8010486:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 801048a:	45bb      	cmp	fp, r7
 801048c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010490:	d242      	bcs.n	8010518 <pow+0xe0>
 8010492:	ea52 0301 	orrs.w	r3, r2, r1
 8010496:	f04f 0300 	mov.w	r3, #0
 801049a:	d10c      	bne.n	80104b6 <pow+0x7e>
 801049c:	196d      	adds	r5, r5, r5
 801049e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80104a2:	4164      	adcs	r4, r4
 80104a4:	42ab      	cmp	r3, r5
 80104a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80104aa:	41a3      	sbcs	r3, r4
 80104ac:	f0c0 808f 	bcc.w	80105ce <pow+0x196>
 80104b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80104b4:	e02b      	b.n	801050e <pow+0xd6>
 80104b6:	4ed4      	ldr	r6, [pc, #848]	; (8010808 <pow+0x3d0>)
 80104b8:	42b4      	cmp	r4, r6
 80104ba:	bf08      	it	eq
 80104bc:	429d      	cmpeq	r5, r3
 80104be:	d109      	bne.n	80104d4 <pow+0x9c>
 80104c0:	1800      	adds	r0, r0, r0
 80104c2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80104c6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80104ca:	4283      	cmp	r3, r0
 80104cc:	4bcf      	ldr	r3, [pc, #828]	; (801080c <pow+0x3d4>)
 80104ce:	eb73 030a 	sbcs.w	r3, r3, sl
 80104d2:	e7eb      	b.n	80104ac <pow+0x74>
 80104d4:	196d      	adds	r5, r5, r5
 80104d6:	48ce      	ldr	r0, [pc, #824]	; (8010810 <pow+0x3d8>)
 80104d8:	4164      	adcs	r4, r4
 80104da:	42ab      	cmp	r3, r5
 80104dc:	eb70 0604 	sbcs.w	r6, r0, r4
 80104e0:	d375      	bcc.n	80105ce <pow+0x196>
 80104e2:	4281      	cmp	r1, r0
 80104e4:	bf08      	it	eq
 80104e6:	429a      	cmpeq	r2, r3
 80104e8:	d171      	bne.n	80105ce <pow+0x196>
 80104ea:	4aca      	ldr	r2, [pc, #808]	; (8010814 <pow+0x3dc>)
 80104ec:	4294      	cmp	r4, r2
 80104ee:	bf08      	it	eq
 80104f0:	429d      	cmpeq	r5, r3
 80104f2:	d0dd      	beq.n	80104b0 <pow+0x78>
 80104f4:	4294      	cmp	r4, r2
 80104f6:	ea6f 0a0a 	mvn.w	sl, sl
 80104fa:	bf34      	ite	cc
 80104fc:	2400      	movcc	r4, #0
 80104fe:	2401      	movcs	r4, #1
 8010500:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8010504:	4554      	cmp	r4, sl
 8010506:	f040 81dc 	bne.w	80108c2 <pow+0x48a>
 801050a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801050e:	b007      	add	sp, #28
 8010510:	ecbd 8b0a 	vpop	{d8-d12}
 8010514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010518:	196f      	adds	r7, r5, r5
 801051a:	eb44 0904 	adc.w	r9, r4, r4
 801051e:	1e7a      	subs	r2, r7, #1
 8010520:	f169 0300 	sbc.w	r3, r9, #0
 8010524:	4593      	cmp	fp, r2
 8010526:	eb7e 0303 	sbcs.w	r3, lr, r3
 801052a:	d225      	bcs.n	8010578 <pow+0x140>
 801052c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010530:	2c00      	cmp	r4, #0
 8010532:	da13      	bge.n	801055c <pow+0x124>
 8010534:	4651      	mov	r1, sl
 8010536:	f7ff ff4b 	bl	80103d0 <checkint>
 801053a:	2801      	cmp	r0, #1
 801053c:	d10e      	bne.n	801055c <pow+0x124>
 801053e:	eeb1 0b40 	vneg.f64	d0, d0
 8010542:	ea57 0909 	orrs.w	r9, r7, r9
 8010546:	d10b      	bne.n	8010560 <pow+0x128>
 8010548:	f1ba 0f00 	cmp.w	sl, #0
 801054c:	dadf      	bge.n	801050e <pow+0xd6>
 801054e:	b007      	add	sp, #28
 8010550:	ecbd 8b0a 	vpop	{d8-d12}
 8010554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	f000 b9ee 	b.w	8010938 <__math_divzero>
 801055c:	2000      	movs	r0, #0
 801055e:	e7f0      	b.n	8010542 <pow+0x10a>
 8010560:	f1ba 0f00 	cmp.w	sl, #0
 8010564:	dad3      	bge.n	801050e <pow+0xd6>
 8010566:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801056a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801056e:	ed8d 7b00 	vstr	d7, [sp]
 8010572:	ed9d 0b00 	vldr	d0, [sp]
 8010576:	e7ca      	b.n	801050e <pow+0xd6>
 8010578:	2c00      	cmp	r4, #0
 801057a:	da2b      	bge.n	80105d4 <pow+0x19c>
 801057c:	4651      	mov	r1, sl
 801057e:	f7ff ff27 	bl	80103d0 <checkint>
 8010582:	b930      	cbnz	r0, 8010592 <pow+0x15a>
 8010584:	b007      	add	sp, #28
 8010586:	ecbd 8b0a 	vpop	{d8-d12}
 801058a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058e:	f000 b9eb 	b.w	8010968 <__math_invalid>
 8010592:	1e41      	subs	r1, r0, #1
 8010594:	4248      	negs	r0, r1
 8010596:	4148      	adcs	r0, r1
 8010598:	0480      	lsls	r0, r0, #18
 801059a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801059e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80105a2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80105a6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80105aa:	2b7f      	cmp	r3, #127	; 0x7f
 80105ac:	d92d      	bls.n	801060a <pow+0x1d2>
 80105ae:	4b96      	ldr	r3, [pc, #600]	; (8010808 <pow+0x3d0>)
 80105b0:	2000      	movs	r0, #0
 80105b2:	429c      	cmp	r4, r3
 80105b4:	bf08      	it	eq
 80105b6:	4285      	cmpeq	r5, r0
 80105b8:	f43f af7a 	beq.w	80104b0 <pow+0x78>
 80105bc:	f240 31bd 	movw	r1, #957	; 0x3bd
 80105c0:	428a      	cmp	r2, r1
 80105c2:	d80c      	bhi.n	80105de <pow+0x1a6>
 80105c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80105c8:	42a8      	cmp	r0, r5
 80105ca:	41a3      	sbcs	r3, r4
 80105cc:	d204      	bcs.n	80105d8 <pow+0x1a0>
 80105ce:	ee31 0b00 	vadd.f64	d0, d1, d0
 80105d2:	e79c      	b.n	801050e <pow+0xd6>
 80105d4:	2000      	movs	r0, #0
 80105d6:	e7e4      	b.n	80105a2 <pow+0x16a>
 80105d8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80105dc:	e797      	b.n	801050e <pow+0xd6>
 80105de:	2d01      	cmp	r5, #1
 80105e0:	eb74 0303 	sbcs.w	r3, r4, r3
 80105e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80105e8:	bf34      	ite	cc
 80105ea:	2301      	movcc	r3, #1
 80105ec:	2300      	movcs	r3, #0
 80105ee:	4296      	cmp	r6, r2
 80105f0:	bf8c      	ite	hi
 80105f2:	2600      	movhi	r6, #0
 80105f4:	2601      	movls	r6, #1
 80105f6:	42b3      	cmp	r3, r6
 80105f8:	f000 809b 	beq.w	8010732 <pow+0x2fa>
 80105fc:	b007      	add	sp, #28
 80105fe:	ecbd 8b0a 	vpop	{d8-d12}
 8010602:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010606:	f000 b98f 	b.w	8010928 <__math_oflow>
 801060a:	f1bc 0f00 	cmp.w	ip, #0
 801060e:	d10b      	bne.n	8010628 <pow+0x1f0>
 8010610:	ed9f 7b79 	vldr	d7, [pc, #484]	; 80107f8 <pow+0x3c0>
 8010614:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010618:	ec53 2b17 	vmov	r2, r3, d7
 801061c:	ee17 5a10 	vmov	r5, s14
 8010620:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010624:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010628:	4b7b      	ldr	r3, [pc, #492]	; (8010818 <pow+0x3e0>)
 801062a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801062e:	4423      	add	r3, r4
 8010630:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010634:	1519      	asrs	r1, r3, #20
 8010636:	0d1b      	lsrs	r3, r3, #20
 8010638:	051b      	lsls	r3, r3, #20
 801063a:	1ae7      	subs	r7, r4, r3
 801063c:	4b77      	ldr	r3, [pc, #476]	; (801081c <pow+0x3e4>)
 801063e:	ee03 1a10 	vmov	s6, r1
 8010642:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010646:	1e2e      	subs	r6, r5, #0
 8010648:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801064c:	ec47 6b15 	vmov	d5, r6, r7
 8010650:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010654:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010658:	ed93 7b00 	vldr	d7, [r3]
 801065c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010660:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010664:	eea3 2b07 	vfma.f64	d2, d3, d7
 8010668:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801066c:	ee36 4b02 	vadd.f64	d4, d6, d2
 8010670:	ee32 2b44 	vsub.f64	d2, d2, d4
 8010674:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010678:	ed93 5b04 	vldr	d5, [r3, #16]
 801067c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010680:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010684:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010688:	ee26 0b05 	vmul.f64	d0, d6, d5
 801068c:	ee34 8b00 	vadd.f64	d8, d4, d0
 8010690:	eeb0 9b40 	vmov.f64	d9, d0
 8010694:	ee34 4b48 	vsub.f64	d4, d4, d8
 8010698:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801069c:	ee34 ab00 	vadd.f64	d10, d4, d0
 80106a0:	ed93 5b06 	vldr	d5, [r3, #24]
 80106a4:	ee26 bb00 	vmul.f64	d11, d6, d0
 80106a8:	ee37 7b09 	vadd.f64	d7, d7, d9
 80106ac:	ed93 4b08 	vldr	d4, [r3, #32]
 80106b0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80106b4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80106b8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80106bc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80106c0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80106c4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80106c8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80106cc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80106d0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80106d4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80106d8:	eeab 7b05 	vfma.f64	d7, d11, d5
 80106dc:	ee38 4b07 	vadd.f64	d4, d8, d7
 80106e0:	ee21 6b04 	vmul.f64	d6, d1, d4
 80106e4:	ee16 3a90 	vmov	r3, s13
 80106e8:	eeb0 5b46 	vmov.f64	d5, d6
 80106ec:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80106f0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80106f4:	18b2      	adds	r2, r6, r2
 80106f6:	2a3e      	cmp	r2, #62	; 0x3e
 80106f8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80106fc:	ee38 8b44 	vsub.f64	d8, d8, d4
 8010700:	ee38 8b07 	vadd.f64	d8, d8, d7
 8010704:	eea1 5b08 	vfma.f64	d5, d1, d8
 8010708:	d91b      	bls.n	8010742 <pow+0x30a>
 801070a:	2a00      	cmp	r2, #0
 801070c:	da0b      	bge.n	8010726 <pow+0x2ee>
 801070e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010712:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010716:	2800      	cmp	r0, #0
 8010718:	f43f aef9 	beq.w	801050e <pow+0xd6>
 801071c:	eeb1 0b40 	vneg.f64	d0, d0
 8010720:	e6f5      	b.n	801050e <pow+0xd6>
 8010722:	2000      	movs	r0, #0
 8010724:	e780      	b.n	8010628 <pow+0x1f0>
 8010726:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801072a:	d909      	bls.n	8010740 <pow+0x308>
 801072c:	2b00      	cmp	r3, #0
 801072e:	f6bf af65 	bge.w	80105fc <pow+0x1c4>
 8010732:	b007      	add	sp, #28
 8010734:	ecbd 8b0a 	vpop	{d8-d12}
 8010738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	f000 b8ec 	b.w	8010918 <__math_uflow>
 8010740:	2600      	movs	r6, #0
 8010742:	4937      	ldr	r1, [pc, #220]	; (8010820 <pow+0x3e8>)
 8010744:	ed91 4b02 	vldr	d4, [r1, #8]
 8010748:	ed91 3b00 	vldr	d3, [r1]
 801074c:	eeb0 7b44 	vmov.f64	d7, d4
 8010750:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010754:	ee17 5a10 	vmov	r5, s14
 8010758:	ee37 7b44 	vsub.f64	d7, d7, d4
 801075c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010760:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010764:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010768:	ed91 4b06 	vldr	d4, [r1, #24]
 801076c:	18dc      	adds	r4, r3, r3
 801076e:	f104 030f 	add.w	r3, r4, #15
 8010772:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010776:	eea7 6b04 	vfma.f64	d6, d7, d4
 801077a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801077e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010782:	ee25 6b05 	vmul.f64	d6, d5, d5
 8010786:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801078a:	ed91 4b08 	vldr	d4, [r1, #32]
 801078e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010792:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010796:	eea5 4b03 	vfma.f64	d4, d5, d3
 801079a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801079e:	eea6 7b04 	vfma.f64	d7, d6, d4
 80107a2:	ee26 6b06 	vmul.f64	d6, d6, d6
 80107a6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80107aa:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80107ae:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80107b2:	eea5 4b03 	vfma.f64	d4, d5, d3
 80107b6:	1940      	adds	r0, r0, r5
 80107b8:	2700      	movs	r7, #0
 80107ba:	eb17 020c 	adds.w	r2, r7, ip
 80107be:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80107c2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80107c6:	2e00      	cmp	r6, #0
 80107c8:	d176      	bne.n	80108b8 <pow+0x480>
 80107ca:	42bd      	cmp	r5, r7
 80107cc:	db2a      	blt.n	8010824 <pow+0x3ec>
 80107ce:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80107d2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80107d6:	4610      	mov	r0, r2
 80107d8:	ec41 0b10 	vmov	d0, r0, r1
 80107dc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80107e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010800 <pow+0x3c8>
 80107e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80107e8:	b007      	add	sp, #28
 80107ea:	ecbd 8b0a 	vpop	{d8-d12}
 80107ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f2:	f000 b8d1 	b.w	8010998 <__math_check_oflow>
 80107f6:	bf00      	nop
 80107f8:	00000000 	.word	0x00000000
 80107fc:	43300000 	.word	0x43300000
 8010800:	00000000 	.word	0x00000000
 8010804:	7f000000 	.word	0x7f000000
 8010808:	3ff00000 	.word	0x3ff00000
 801080c:	fff00000 	.word	0xfff00000
 8010810:	ffe00000 	.word	0xffe00000
 8010814:	7fe00000 	.word	0x7fe00000
 8010818:	c0196aab 	.word	0xc0196aab
 801081c:	08126130 	.word	0x08126130
 8010820:	08127178 	.word	0x08127178
 8010824:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010828:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801082c:	4610      	mov	r0, r2
 801082e:	ec41 0b15 	vmov	d5, r0, r1
 8010832:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8010836:	ee27 6b05 	vmul.f64	d6, d7, d5
 801083a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801083e:	eeb0 4bc7 	vabs.f64	d4, d7
 8010842:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8010846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80108c8 <pow+0x490>
 801084e:	d52a      	bpl.n	80108a6 <pow+0x46e>
 8010850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010854:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010860:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8010864:	bf58      	it	pl
 8010866:	eeb0 4b43 	vmovpl.f64	d4, d3
 801086a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801086e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8010872:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010876:	ee36 6b05 	vadd.f64	d6, d6, d5
 801087a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801087e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8010882:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	d104      	bne.n	8010896 <pow+0x45e>
 801088c:	4632      	mov	r2, r6
 801088e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010892:	ec43 2b17 	vmov	d7, r2, r3
 8010896:	ed8d 0b02 	vstr	d0, [sp, #8]
 801089a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801089e:	ee26 6b00 	vmul.f64	d6, d6, d0
 80108a2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80108a6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80108aa:	b007      	add	sp, #28
 80108ac:	ecbd 8b0a 	vpop	{d8-d12}
 80108b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b4:	f000 b867 	b.w	8010986 <__math_check_uflow>
 80108b8:	ec43 2b10 	vmov	d0, r2, r3
 80108bc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80108c0:	e625      	b.n	801050e <pow+0xd6>
 80108c2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80108d0 <pow+0x498>
 80108c6:	e622      	b.n	801050e <pow+0xd6>
 80108c8:	00000000 	.word	0x00000000
 80108cc:	00100000 	.word	0x00100000
	...

080108d8 <__ieee754_sqrt>:
 80108d8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80108dc:	4770      	bx	lr

080108de <with_errno>:
 80108de:	b513      	push	{r0, r1, r4, lr}
 80108e0:	4604      	mov	r4, r0
 80108e2:	ed8d 0b00 	vstr	d0, [sp]
 80108e6:	f7fe fd47 	bl	800f378 <__errno>
 80108ea:	ed9d 0b00 	vldr	d0, [sp]
 80108ee:	6004      	str	r4, [r0, #0]
 80108f0:	b002      	add	sp, #8
 80108f2:	bd10      	pop	{r4, pc}

080108f4 <xflow>:
 80108f4:	b082      	sub	sp, #8
 80108f6:	b158      	cbz	r0, 8010910 <xflow+0x1c>
 80108f8:	eeb1 7b40 	vneg.f64	d7, d0
 80108fc:	ed8d 7b00 	vstr	d7, [sp]
 8010900:	ed9d 7b00 	vldr	d7, [sp]
 8010904:	2022      	movs	r0, #34	; 0x22
 8010906:	ee20 0b07 	vmul.f64	d0, d0, d7
 801090a:	b002      	add	sp, #8
 801090c:	f7ff bfe7 	b.w	80108de <with_errno>
 8010910:	eeb0 7b40 	vmov.f64	d7, d0
 8010914:	e7f2      	b.n	80108fc <xflow+0x8>
	...

08010918 <__math_uflow>:
 8010918:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010920 <__math_uflow+0x8>
 801091c:	f7ff bfea 	b.w	80108f4 <xflow>
 8010920:	00000000 	.word	0x00000000
 8010924:	10000000 	.word	0x10000000

08010928 <__math_oflow>:
 8010928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010930 <__math_oflow+0x8>
 801092c:	f7ff bfe2 	b.w	80108f4 <xflow>
 8010930:	00000000 	.word	0x00000000
 8010934:	70000000 	.word	0x70000000

08010938 <__math_divzero>:
 8010938:	b082      	sub	sp, #8
 801093a:	2800      	cmp	r0, #0
 801093c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010940:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010944:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010948:	ed8d 7b00 	vstr	d7, [sp]
 801094c:	ed9d 0b00 	vldr	d0, [sp]
 8010950:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010960 <__math_divzero+0x28>
 8010954:	2022      	movs	r0, #34	; 0x22
 8010956:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801095a:	b002      	add	sp, #8
 801095c:	f7ff bfbf 	b.w	80108de <with_errno>
	...

08010968 <__math_invalid>:
 8010968:	eeb0 7b40 	vmov.f64	d7, d0
 801096c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010974:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010978:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801097c:	d602      	bvs.n	8010984 <__math_invalid+0x1c>
 801097e:	2021      	movs	r0, #33	; 0x21
 8010980:	f7ff bfad 	b.w	80108de <with_errno>
 8010984:	4770      	bx	lr

08010986 <__math_check_uflow>:
 8010986:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098e:	d102      	bne.n	8010996 <__math_check_uflow+0x10>
 8010990:	2022      	movs	r0, #34	; 0x22
 8010992:	f7ff bfa4 	b.w	80108de <with_errno>
 8010996:	4770      	bx	lr

08010998 <__math_check_oflow>:
 8010998:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80109b8 <__math_check_oflow+0x20>
 801099c:	eeb0 7bc0 	vabs.f64	d7, d0
 80109a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80109a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a8:	dd02      	ble.n	80109b0 <__math_check_oflow+0x18>
 80109aa:	2022      	movs	r0, #34	; 0x22
 80109ac:	f7ff bf97 	b.w	80108de <with_errno>
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	f3af 8000 	nop.w
 80109b8:	ffffffff 	.word	0xffffffff
 80109bc:	7fefffff 	.word	0x7fefffff

080109c0 <_sbrk>:
 80109c0:	4a04      	ldr	r2, [pc, #16]	; (80109d4 <_sbrk+0x14>)
 80109c2:	6811      	ldr	r1, [r2, #0]
 80109c4:	4603      	mov	r3, r0
 80109c6:	b909      	cbnz	r1, 80109cc <_sbrk+0xc>
 80109c8:	4903      	ldr	r1, [pc, #12]	; (80109d8 <_sbrk+0x18>)
 80109ca:	6011      	str	r1, [r2, #0]
 80109cc:	6810      	ldr	r0, [r2, #0]
 80109ce:	4403      	add	r3, r0
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	4770      	bx	lr
 80109d4:	20009370 	.word	0x20009370
 80109d8:	20009378 	.word	0x20009378

080109dc <_init>:
 80109dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109de:	bf00      	nop
 80109e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109e2:	bc08      	pop	{r3}
 80109e4:	469e      	mov	lr, r3
 80109e6:	4770      	bx	lr

080109e8 <_fini>:
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ea:	bf00      	nop
 80109ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ee:	bc08      	pop	{r3}
 80109f0:	469e      	mov	lr, r3
 80109f2:	4770      	bx	lr
