
fruit_ninja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010114  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e7e70  08010318  08010318  00020318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f8188  080f8188  001100a8  2**0
                  CONTENTS
  4 .ARM          00000008  080f8188  080f8188  00108188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f8190  080f8190  001100a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f8190  080f8190  00108190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f8194  080f8194  00108194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080f8198  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092ac  200000a8  080f8240  001100a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009354  080f8240  00119354  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001100a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  001100d6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fe51  00000000  00000000  00110119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006df9  00000000  00000000  0013ff6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b8  00000000  00000000  00146d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c47  00000000  00000000  00149220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380b8  00000000  00000000  0014ae67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003361f  00000000  00000000  00182f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001372af  00000000  00000000  001b653e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a440  00000000  00000000  002ed7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  002f7c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080102fc 	.word	0x080102fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	080102fc 	.word	0x080102fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f803 	bl	80005ec <BSP_LCD_InitEx>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80005f6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000604:	f000 f934 	bl	8000870 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000608:	f000 fd86 	bl	8001118 <LCD_IO_GetID>
 800060c:	4603      	mov	r3, r0
 800060e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000612:	2b11      	cmp	r3, #17
 8000614:	d001      	beq.n	800061a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000616:	2301      	movs	r3, #1
 8000618:	e111      	b.n	800083e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800061a:	f000 fd85 	bl	8001128 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000620:	4a8a      	ldr	r2, [pc, #552]	; (800084c <BSP_LCD_InitEx+0x260>)
 8000622:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000624:	4888      	ldr	r0, [pc, #544]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000626:	f005 fc09 	bl	8005e3c <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800062e:	2305      	movs	r3, #5
 8000630:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800063a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	4a82      	ldr	r2, [pc, #520]	; (8000850 <BSP_LCD_InitEx+0x264>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	0a9b      	lsrs	r3, r3, #10
 800064e:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000650:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800065a:	f005 fad3 	bl	8005c04 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800066a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800066e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800067c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 8000680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000684:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000692:	2301      	movs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000696:	230f      	movs	r3, #15
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800069a:	2310      	movs	r3, #16
 800069c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80006dc:	4a5f      	ldr	r2, [pc, #380]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e6:	fb03 f202 	mul.w	r2, r3, r2
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	441a      	add	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	441a      	add	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000716:	fb03 f202 	mul.w	r2, r3, r2
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800072a:	4a4c      	ldr	r2, [pc, #304]	; (800085c <BSP_LCD_InitEx+0x270>)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <BSP_LCD_InitEx+0x270>)
 800073e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000746:	2210      	movs	r2, #16
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BSP_LCD_InitEx+0x270>)
 800074c:	2200      	movs	r2, #0
 800074e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <BSP_LCD_InitEx+0x270>)
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <BSP_LCD_InitEx+0x270>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <BSP_LCD_InitEx+0x270>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000784:	f005 fcb2 	bl	80060ec <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800078e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	3b01      	subs	r3, #1
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800079a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <BSP_LCD_InitEx+0x268>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	441a      	add	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4413      	add	r3, r2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	441a      	add	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	441a      	add	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007d2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007f0:	f008 fa18 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <BSP_LCD_InitEx+0x27c>)
 8000816:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <BSP_LCD_InitEx+0x270>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800081c:	f007 fc8c 	bl	8008138 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000822:	f007 f9e1 	bl	8007be8 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000828:	f005 ffba 	bl	80067a0 <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <BSP_LCD_InitEx+0x280>)
 800082e:	f000 f94f 	bl	8000ad0 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f8e6 	bl	8001a08 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000230 	.word	0x20000230
 800084c:	40016c00 	.word	0x40016c00
 8000850:	43215e57 	.word	0x43215e57
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004
 800085c:	200000c4 	.word	0x200000c4
 8000860:	20000188 	.word	0x20000188
 8000864:	20000268 	.word	0x20000268
 8000868:	40016800 	.word	0x40016800
 800086c:	20000030 	.word	0x20000030

08000870 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <BSP_LCD_Reset+0x68>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008a6:	f006 f89f 	bl	80069e8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008b2:	f006 fb51 	bl	8006f58 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80008b6:	2014      	movs	r0, #20
 80008b8:	f004 fd0e 	bl	80052d8 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008c4:	f006 fb48 	bl	8006f58 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f004 fd05 	bl	80052d8 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40022400 	.word	0x40022400

080008e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <BSP_LCD_GetXSize+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <BSP_LCD_GetYSize+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004

08000910 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000920:	f7ff ffde 	bl	80008e0 <BSP_LCD_GetXSize>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800092c:	f7ff ffe4 	bl	80008f8 <BSP_LCD_GetYSize>
 8000930:	4603      	mov	r3, r0
 8000932:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000960:	f7ff ffbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000964:	4603      	mov	r3, r0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000968:	f7ff ffc6 	bl	80008f8 <BSP_LCD_GetYSize>
 800096c:	4603      	mov	r3, r0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800097a:	f007 fa05 	bl	8007d88 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3740      	adds	r7, #64	; 0x40
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000188 	.word	0x20000188
 80009c8:	20000250 	.word	0x20000250
 80009cc:	20000030 	.word	0x20000030

080009d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <BSP_LCD_SelectLayer+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000024c 	.word	0x2000024c

080009f0 <BSP_LCD_SetLayerVisible>:
  *          This parameter can be one of the following values:
  *            @arg  ENABLE
  *            @arg  DISABLE
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d112      	bne.n	8000a28 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&(hltdc_discovery), LayerIndex);
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	01db      	lsls	r3, r3, #7
 8000a0c:	4413      	add	r3, r2
 8000a0e:	3384      	adds	r3, #132	; 0x84
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	4611      	mov	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	01d2      	lsls	r2, r2, #7
 8000a1c:	440a      	add	r2, r1
 8000a1e:	3284      	adds	r2, #132	; 0x84
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e011      	b.n	8000a4c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&(hltdc_discovery), LayerIndex);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	4413      	add	r3, r2
 8000a34:	3384      	adds	r3, #132	; 0x84
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	01d2      	lsls	r2, r2, #7
 8000a42:	440a      	add	r2, r1
 8000a44:	3284      	adds	r2, #132	; 0x84
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&(hltdc_discovery));
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <BSP_LCD_SetLayerVisible+0x78>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	20000188 	.word	0x20000188

08000a6c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <BSP_LCD_SetTextColor+0x28>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <BSP_LCD_SetTextColor+0x2c>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	2000024c 	.word	0x2000024c
 8000a98:	20000250 	.word	0x20000250

08000a9c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <BSP_LCD_SetBackColor+0x2c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4908      	ldr	r1, [pc, #32]	; (8000acc <BSP_LCD_SetBackColor+0x30>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000024c 	.word	0x2000024c
 8000acc:	20000250 	.word	0x20000250

08000ad0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <BSP_LCD_SetFont+0x2c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4908      	ldr	r1, [pc, #32]	; (8000b00 <BSP_LCD_SetFont+0x30>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000024c 	.word	0x2000024c
 8000b00:	20000250 	.word	0x20000250

08000b04 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <BSP_LCD_GetFont+0x24>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <BSP_LCD_GetFont+0x28>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	440b      	add	r3, r1
 8000b18:	3308      	adds	r3, #8
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000024c 	.word	0x2000024c
 8000b2c:	20000250 	.word	0x20000250

08000b30 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <BSP_LCD_Clear+0x48>)
 8000b3a:	681c      	ldr	r4, [r3, #0]
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <BSP_LCD_Clear+0x48>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <BSP_LCD_Clear+0x4c>)
 8000b42:	2134      	movs	r1, #52	; 0x34
 8000b44:	fb01 f303 	mul.w	r3, r1, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	335c      	adds	r3, #92	; 0x5c
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461e      	mov	r6, r3
 8000b50:	f7ff fec6 	bl	80008e0 <BSP_LCD_GetXSize>
 8000b54:	4605      	mov	r5, r0
 8000b56:	f7ff fecf 	bl	80008f8 <BSP_LCD_GetYSize>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4613      	mov	r3, r2
 8000b66:	462a      	mov	r2, r5
 8000b68:	4631      	mov	r1, r6
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f000 fc24 	bl	80013b8 <LL_FillBuffer>
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b78:	2000024c 	.word	0x2000024c
 8000b7c:	20000188 	.word	0x20000188

08000b80 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <BSP_LCD_DisplayChar+0x80>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	491b      	ldr	r1, [pc, #108]	; (8000c04 <BSP_LCD_DisplayChar+0x84>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <BSP_LCD_DisplayChar+0x80>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4c14      	ldr	r4, [pc, #80]	; (8000c04 <BSP_LCD_DisplayChar+0x84>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4423      	add	r3, r4
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000bc4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <BSP_LCD_DisplayChar+0x80>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4c0d      	ldr	r4, [pc, #52]	; (8000c04 <BSP_LCD_DisplayChar+0x84>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4423      	add	r3, r4
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	3307      	adds	r3, #7
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	da00      	bge.n	8000be6 <BSP_LCD_DisplayChar+0x66>
 8000be4:	3307      	adds	r3, #7
 8000be6:	10db      	asrs	r3, r3, #3
 8000be8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000bec:	18ca      	adds	r2, r1, r3
 8000bee:	88b9      	ldrh	r1, [r7, #4]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fb28 	bl	8001248 <DrawChar>
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	2000024c 	.word	0x2000024c
 8000c04:	20000250 	.word	0x20000250

08000c08 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	81fb      	strh	r3, [r7, #14]
 8000c16:	460b      	mov	r3, r1
 8000c18:	81bb      	strh	r3, [r7, #12]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	83fb      	strh	r3, [r7, #30]
 8000c22:	2300      	movs	r3, #0
 8000c24:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000c32:	e002      	b.n	8000c3a <BSP_LCD_DisplayStringAt+0x32>
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	617a      	str	r2, [r7, #20]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f6      	bne.n	8000c34 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000c46:	f7ff fe4b 	bl	80008e0 <BSP_LCD_GetXSize>
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4850      	ldr	r0, [pc, #320]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	889b      	ldrh	r3, [r3, #4]
 8000c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c66:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d01c      	beq.n	8000ca8 <BSP_LCD_DisplayStringAt+0xa0>
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	dc33      	bgt.n	8000cda <BSP_LCD_DisplayStringAt+0xd2>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <BSP_LCD_DisplayStringAt+0x74>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d019      	beq.n	8000cae <BSP_LCD_DisplayStringAt+0xa6>
 8000c7a:	e02e      	b.n	8000cda <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	1ad1      	subs	r1, r2, r3
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4843      	ldr	r0, [pc, #268]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4403      	add	r3, r0
 8000c92:	3308      	adds	r3, #8
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	889b      	ldrh	r3, [r3, #4]
 8000c98:	fb01 f303 	mul.w	r3, r1, r3
 8000c9c:	085b      	lsrs	r3, r3, #1
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	83fb      	strh	r3, [r7, #30]
      break;
 8000ca6:	e01b      	b.n	8000ce0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	83fb      	strh	r3, [r7, #30]
      break;
 8000cac:	e018      	b.n	8000ce0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b299      	uxth	r1, r3
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4836      	ldr	r0, [pc, #216]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4403      	add	r3, r0
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	889b      	ldrh	r3, [r3, #4]
 8000ccc:	fb11 f303 	smulbb	r3, r1, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	83fb      	strh	r3, [r7, #30]
      break;
 8000cd8:	e002      	b.n	8000ce0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	83fb      	strh	r3, [r7, #30]
      break;
 8000cde:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000ce0:	8bfb      	ldrh	r3, [r7, #30]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <BSP_LCD_DisplayStringAt+0xe6>
 8000ce6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da1d      	bge.n	8000d2a <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000cf2:	e01a      	b.n	8000d2a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	89b9      	ldrh	r1, [r7, #12]
 8000cfa:	8bfb      	ldrh	r3, [r7, #30]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff3f 	bl	8000b80 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4923      	ldr	r1, [pc, #140]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	3308      	adds	r3, #8
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	889a      	ldrh	r2, [r3, #4]
 8000d18:	8bfb      	ldrh	r3, [r7, #30]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
    i++;
 8000d24:	8bbb      	ldrh	r3, [r7, #28]
 8000d26:	3301      	adds	r3, #1
 8000d28:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf14      	ite	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	2300      	moveq	r3, #0
 8000d36:	b2dc      	uxtb	r4, r3
 8000d38:	f7ff fdd2 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d3c:	8bb9      	ldrh	r1, [r7, #28]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4d14      	ldr	r5, [pc, #80]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	3308      	adds	r3, #8
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	fb01 f303 	mul.w	r3, r1, r3
 8000d58:	1ac3      	subs	r3, r0, r3
 8000d5a:	b299      	uxth	r1, r3
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <BSP_LCD_DisplayStringAt+0x188>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <BSP_LCD_DisplayStringAt+0x18c>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	4299      	cmp	r1, r3
 8000d74:	bf2c      	ite	cs
 8000d76:	2301      	movcs	r3, #1
 8000d78:	2300      	movcc	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4023      	ands	r3, r4
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1b7      	bne.n	8000cf4 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000024c 	.word	0x2000024c
 8000d94:	20000250 	.word	0x20000250

08000d98 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000da4:	f7ff feae 	bl	8000b04 <BSP_LCD_GetFont>
 8000da8:	4603      	mov	r3, r0
 8000daa:	88db      	ldrh	r3, [r3, #6]
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	fb12 f303 	smulbb	r3, r2, r3
 8000db2:	b299      	uxth	r1, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff ff25 	bl	8000c08 <BSP_LCD_DisplayStringAt>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <BSP_LCD_DrawLine>:
  * @param  y1: Point 1 Y position
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b08b      	sub	sp, #44	; 0x2c
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	80fb      	strh	r3, [r7, #6]
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	460b      	mov	r3, r1
 8000de0:	807b      	strh	r3, [r7, #2]
 8000de2:	4613      	mov	r3, r2
 8000de4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8000de6:	2300      	movs	r3, #0
 8000de8:	823b      	strh	r3, [r7, #16]
 8000dea:	2300      	movs	r3, #0
 8000dec:	81fb      	strh	r3, [r7, #14]
 8000dee:	2300      	movs	r3, #0
 8000df0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000df2:	2300      	movs	r3, #0
 8000df4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000df6:	2300      	movs	r3, #0
 8000df8:	847b      	strh	r3, [r7, #34]	; 0x22
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8000dfe:	2300      	movs	r3, #0
 8000e00:	83fb      	strh	r3, [r7, #30]
 8000e02:	2300      	movs	r3, #0
 8000e04:	83bb      	strh	r3, [r7, #28]
 8000e06:	2300      	movs	r3, #0
 8000e08:	837b      	strh	r3, [r7, #26]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	833b      	strh	r3, [r7, #24]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	82fb      	strh	r3, [r7, #22]
 8000e12:	2300      	movs	r3, #0
 8000e14:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	827b      	strh	r3, [r7, #18]

  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bfb8      	it	lt
 8000e24:	425b      	neglt	r3, r3
 8000e26:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8000e28:	883a      	ldrh	r2, [r7, #0]
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bfb8      	it	lt
 8000e32:	425b      	neglt	r3, r3
 8000e34:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (x2 >= x1)                 /* The x-values are increasing */
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d304      	bcc.n	8000e50 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	843b      	strh	r3, [r7, #32]
 8000e4e:	e005      	b.n	8000e5c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8000e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5a:	843b      	strh	r3, [r7, #32]
  }

  if (y2 >= y1)                 /* The y-values are increasing */
 8000e5c:	883a      	ldrh	r2, [r7, #0]
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d304      	bcc.n	8000e6e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	83bb      	strh	r3, [r7, #28]
 8000e6c:	e005      	b.n	8000e7a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8000e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e78:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8000e7a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	db11      	blt.n	8000eaa <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8000e86:	2300      	movs	r3, #0
 8000e88:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8000e8e:	8a3b      	ldrh	r3, [r7, #16]
 8000e90:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8000e92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da00      	bge.n	8000e9c <BSP_LCD_DrawLine+0xd4>
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	105b      	asrs	r3, r3, #1
 8000e9e:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8000ea4:	8a3b      	ldrh	r3, [r7, #16]
 8000ea6:	82bb      	strh	r3, [r7, #20]
 8000ea8:	e010      	b.n	8000ecc <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8000eaa:	2300      	movs	r3, #0
 8000eac:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8000eae:	2300      	movs	r3, #0
 8000eb0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8000eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da00      	bge.n	8000ec0 <BSP_LCD_DrawLine+0xf8>
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	105b      	asrs	r3, r3, #1
 8000ec2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8000ec4:	8a3b      	ldrh	r3, [r7, #16]
 8000ec6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	827b      	strh	r3, [r7, #18]
 8000ed0:	e037      	b.n	8000f42 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8000ed2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000ed4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <BSP_LCD_DrawLine+0x190>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4c20      	ldr	r4, [pc, #128]	; (8000f5c <BSP_LCD_DrawLine+0x194>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4423      	add	r3, r4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f000 f987 	bl	80011fc <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8000eee:	8b3a      	ldrh	r2, [r7, #24]
 8000ef0:	8afb      	ldrh	r3, [r7, #22]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8000ef8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000efc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	db0e      	blt.n	8000f22 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8000f04:	8b3a      	ldrh	r2, [r7, #24]
 8000f06:	8b7b      	ldrh	r3, [r7, #26]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8000f0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f12:	4413      	add	r3, r2
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8000f18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8000f22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f24:	8c3b      	ldrh	r3, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8000f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f2e:	8bbb      	ldrh	r3, [r7, #28]
 8000f30:	4413      	add	r3, r2
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8000f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	827b      	strh	r3, [r7, #18]
 8000f42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	ddc1      	ble.n	8000ed2 <BSP_LCD_DrawLine+0x10a>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	372c      	adds	r7, #44	; 0x2c
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	2000024c 	.word	0x2000024c
 8000f5c:	20000250 	.word	0x20000250

08000f60 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	330a      	adds	r3, #10
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	330b      	adds	r3, #11
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	441a      	add	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	330c      	adds	r3, #12
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	441a      	add	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	330d      	adds	r3, #13
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	061b      	lsls	r3, r3, #24
 8000fa4:	4413      	add	r3, r2
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3312      	adds	r3, #18
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3313      	adds	r3, #19
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	441a      	add	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3314      	adds	r3, #20
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	441a      	add	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3315      	adds	r3, #21
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	4413      	add	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3316      	adds	r3, #22
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3317      	adds	r3, #23
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	441a      	add	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	041b      	lsls	r3, r3, #16
 8000fea:	441a      	add	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3319      	adds	r3, #25
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	061b      	lsls	r3, r3, #24
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	331c      	adds	r3, #28
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	331d      	adds	r3, #29
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4413      	add	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_DrawBitmap+0x15c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <BSP_LCD_DrawBitmap+0x160>)
 8001012:	2134      	movs	r1, #52	; 0x34
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4413      	add	r3, r2
 800101a:	335c      	adds	r3, #92	; 0x5c
 800101c:	681c      	ldr	r4, [r3, #0]
 800101e:	f7ff fc5f 	bl	80008e0 <BSP_LCD_GetXSize>
 8001022:	4602      	mov	r2, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	fb03 f202 	mul.w	r2, r3, r2
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4423      	add	r3, r4
 8001032:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3b20      	subs	r3, #32
 8001038:	2b07      	cmp	r3, #7
 800103a:	d802      	bhi.n	8001042 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	e008      	b.n	8001054 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3b10      	subs	r3, #16
 8001046:	2b07      	cmp	r3, #7
 8001048:	d802      	bhi.n	8001050 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e001      	b.n	8001054 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3b01      	subs	r3, #1
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	08d2      	lsrs	r2, r2, #3
 8001062:	fb03 f202 	mul.w	r2, r3, r2
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	4413      	add	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	e018      	b.n	80010a8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9d3 	bl	8001428 <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8001082:	f7ff fc2d 	bl	80008e0 <BSP_LCD_GetXSize>
 8001086:	4603      	mov	r3, r0
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	6a3a      	ldr	r2, [r7, #32]
 800108c:	4413      	add	r3, r2
 800108e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	425b      	negs	r3, r3
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	3301      	adds	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
 80010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3e2      	bcc.n	8001076 <BSP_LCD_DrawBitmap+0x116>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	372c      	adds	r7, #44	; 0x2c
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	20000188 	.word	0x20000188

080010c4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d80d      	bhi.n	80010f0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	2215      	movs	r2, #21
 80010e6:	2100      	movs	r1, #0
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <DSI_IO_WriteCmd+0x50>)
 80010ea:	f005 fb95 	bl	8006818 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80010ee:	e00d      	b.n	800110c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2239      	movs	r2, #57	; 0x39
 8001104:	2100      	movs	r1, #0
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <DSI_IO_WriteCmd+0x50>)
 8001108:	f005 fba8 	bl	800685c <HAL_DSI_LongWrite>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000230 	.word	0x20000230

08001118 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 800111c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 800114c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800115c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001188:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800118c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 8001194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 80011ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011b0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <BSP_LCD_MspInit+0xd0>)
 80011b8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80011bc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2103      	movs	r1, #3
 80011c2:	2058      	movs	r0, #88	; 0x58
 80011c4:	f004 f964 	bl	8005490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011c8:	2058      	movs	r0, #88	; 0x58
 80011ca:	f004 f97d 	bl	80054c8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2103      	movs	r1, #3
 80011d2:	205a      	movs	r0, #90	; 0x5a
 80011d4:	f004 f95c 	bl	8005490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011d8:	205a      	movs	r0, #90	; 0x5a
 80011da:	f004 f975 	bl	80054c8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2103      	movs	r1, #3
 80011e2:	2062      	movs	r0, #98	; 0x62
 80011e4:	f004 f954 	bl	8005490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80011e8:	2062      	movs	r0, #98	; 0x62
 80011ea:	f004 f96d 	bl	80054c8 <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	460b      	mov	r3, r1
 800120a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <BSP_LCD_DrawPixel+0x44>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <BSP_LCD_DrawPixel+0x48>)
 8001212:	2134      	movs	r1, #52	; 0x34
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	335c      	adds	r3, #92	; 0x5c
 800121c:	681c      	ldr	r4, [r3, #0]
 800121e:	88bd      	ldrh	r5, [r7, #4]
 8001220:	f7ff fb5e 	bl	80008e0 <BSP_LCD_GetXSize>
 8001224:	4603      	mov	r3, r0
 8001226:	fb03 f205 	mul.w	r2, r3, r5
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4423      	add	r3, r4
 8001232:	461a      	mov	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	2000024c 	.word	0x2000024c
 8001244:	20000188 	.word	0x20000188

08001248 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	603a      	str	r2, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	460b      	mov	r3, r1
 8001256:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <DrawChar+0x168>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4953      	ldr	r1, [pc, #332]	; (80013b4 <DrawChar+0x16c>)
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	3308      	adds	r3, #8
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	88db      	ldrh	r3, [r3, #6]
 8001276:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <DrawChar+0x168>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	494d      	ldr	r1, [pc, #308]	; (80013b4 <DrawChar+0x16c>)
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	3308      	adds	r3, #8
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001290:	8a3b      	ldrh	r3, [r7, #16]
 8001292:	3307      	adds	r3, #7
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <DrawChar+0x52>
 8001298:	3307      	adds	r3, #7
 800129a:	10db      	asrs	r3, r3, #3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	8a3b      	ldrh	r3, [r7, #16]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e076      	b.n	800139e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80012b0:	8a3b      	ldrh	r3, [r7, #16]
 80012b2:	3307      	adds	r3, #7
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da00      	bge.n	80012ba <DrawChar+0x72>
 80012b8:	3307      	adds	r3, #7
 80012ba:	10db      	asrs	r3, r3, #3
 80012bc:	461a      	mov	r2, r3
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80012ca:	8a3b      	ldrh	r3, [r7, #16]
 80012cc:	3307      	adds	r3, #7
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da00      	bge.n	80012d4 <DrawChar+0x8c>
 80012d2:	3307      	adds	r3, #7
 80012d4:	10db      	asrs	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d002      	beq.n	80012e0 <DrawChar+0x98>
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d004      	beq.n	80012e8 <DrawChar+0xa0>
 80012de:	e00c      	b.n	80012fa <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	617b      	str	r3, [r7, #20]
      break;
 80012e6:	e016      	b.n	8001316 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	3201      	adds	r2, #1
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
      break;
 80012f8:	e00d      	b.n	8001316 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	4313      	orrs	r3, r2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	3202      	adds	r2, #2
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
      break;
 8001314:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e036      	b.n	800138a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 800131c:	8a3a      	ldrh	r2, [r7, #16]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad2      	subs	r2, r2, r3
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4413      	add	r3, r2
 8001326:	3b01      	subs	r3, #1
 8001328:	2201      	movs	r2, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	461a      	mov	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d012      	beq.n	800135e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	b29a      	uxth	r2, r3
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	b298      	uxth	r0, r3
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <DrawChar+0x168>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	491b      	ldr	r1, [pc, #108]	; (80013b4 <DrawChar+0x16c>)
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff ff50 	bl	80011fc <BSP_LCD_DrawPixel>
 800135c:	e012      	b.n	8001384 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	b29a      	uxth	r2, r3
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4413      	add	r3, r2
 8001366:	b298      	uxth	r0, r3
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <DrawChar+0x168>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4911      	ldr	r1, [pc, #68]	; (80013b4 <DrawChar+0x16c>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3304      	adds	r3, #4
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff ff3c 	bl	80011fc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3301      	adds	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	8a3b      	ldrh	r3, [r7, #16]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3c4      	bcc.n	800131c <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	3301      	adds	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	8a7b      	ldrh	r3, [r7, #18]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d384      	bcc.n	80012b0 <DrawChar+0x68>
  }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000024c 	.word	0x2000024c
 80013b4:	20000250 	.word	0x20000250

080013b8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <LL_FillBuffer+0x68>)
 80013c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013cc:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <LL_FillBuffer+0x68>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <LL_FillBuffer+0x68>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <LL_FillBuffer+0x68>)
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <LL_FillBuffer+0x6c>)
 80013de:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <LL_FillBuffer+0x68>)
 80013e2:	f004 f911 	bl	8005608 <HAL_DMA2D_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d115      	bne.n	8001418 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <LL_FillBuffer+0x68>)
 80013f0:	f004 fa78 	bl	80058e4 <HAL_DMA2D_ConfigLayer>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10e      	bne.n	8001418 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69f9      	ldr	r1, [r7, #28]
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <LL_FillBuffer+0x68>)
 8001406:	f004 f959 	bl	80056bc <HAL_DMA2D_Start>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001410:	210a      	movs	r1, #10
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <LL_FillBuffer+0x68>)
 8001414:	f004 f97d 	bl	8005712 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000130 	.word	0x20000130
 8001424:	4002b000 	.word	0x4002b000

08001428 <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800143c:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 800144c:	2200      	movs	r2, #0
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 800145e:	2200      	movs	r2, #0
 8001460:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <LL_ConvertLineToARGB8888+0x84>)
 8001466:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 800146a:	f004 f8cd 	bl	8005608 <HAL_DMA2D_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d115      	bne.n	80014a0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8001474:	2101      	movs	r1, #1
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 8001478:	f004 fa34 	bl	80058e4 <HAL_DMA2D_ConfigLayer>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10e      	bne.n	80014a0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	2301      	movs	r3, #1
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 800148e:	f004 f915 	bl	80056bc <HAL_DMA2D_Start>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001498:	210a      	movs	r1, #10
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <LL_ConvertLineToARGB8888+0x80>)
 800149c:	f004 f939 	bl	8005712 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000130 	.word	0x20000130
 80014ac:	4002b000 	.word	0x4002b000

080014b0 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	4613      	mov	r3, r2
 80014be:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <BSP_TS_Init+0xb0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <BSP_TS_Init+0xb4>)
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4610      	mov	r0, r2
 80014d4:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <BSP_TS_Init+0xb0>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2054      	movs	r0, #84	; 0x54
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	2b11      	cmp	r3, #17
 80014e6:	d009      	beq.n	80014fc <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <BSP_TS_Init+0xb0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2070      	movs	r0, #112	; 0x70
 80014ee:	4798      	blx	r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <BSP_TS_Init+0xb4>)
 80014f6:	2270      	movs	r2, #112	; 0x70
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e002      	b.n	8001502 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <BSP_TS_Init+0xb4>)
 80014fe:	2254      	movs	r2, #84	; 0x54
 8001500:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	2b11      	cmp	r3, #17
 8001506:	d002      	beq.n	800150e <BSP_TS_Init+0x5e>
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b11      	cmp	r3, #17
 800150c:	d121      	bne.n	8001552 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <BSP_TS_Init+0xb8>)
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <BSP_TS_Init+0xb0>)
 8001512:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	d203      	bcs.n	8001524 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <BSP_TS_Init+0xbc>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e002      	b.n	800152a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <BSP_TS_Init+0xbc>)
 8001526:	220c      	movs	r2, #12
 8001528:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d112      	bne.n	8001556 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <BSP_TS_Init+0xb8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <BSP_TS_Init+0xb4>)
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	b292      	uxth	r2, r2
 800153c:	4610      	mov	r0, r2
 800153e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <BSP_TS_Init+0xb8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <BSP_TS_Init+0xb4>)
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	b292      	uxth	r2, r2
 800154c:	4610      	mov	r0, r2
 800154e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8001550:	e001      	b.n	8001556 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8001552:	2303      	movs	r3, #3
 8001554:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000008 	.word	0x20000008
 8001564:	200002fd 	.word	0x200002fd
 8001568:	200002f8 	.word	0x200002f8
 800156c:	200002fc 	.word	0x200002fc

08001570 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800157c:	4b81      	ldr	r3, [pc, #516]	; (8001784 <BSP_TS_GetState+0x214>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4a81      	ldr	r2, [pc, #516]	; (8001788 <BSP_TS_GetState+0x218>)
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	b292      	uxth	r2, r2
 8001588:	4610      	mov	r0, r2
 800158a:	4798      	blx	r3
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ee 	beq.w	800177a <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e0e3      	b.n	800176c <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80015a4:	4b77      	ldr	r3, [pc, #476]	; (8001784 <BSP_TS_GetState+0x214>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a77      	ldr	r2, [pc, #476]	; (8001788 <BSP_TS_GetState+0x218>)
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	b290      	uxth	r0, r2
 80015b0:	f107 0110 	add.w	r1, r7, #16
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	188c      	adds	r4, r1, r2
 80015ba:	f107 010c 	add.w	r1, r7, #12
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	0052      	lsls	r2, r2, #1
 80015c2:	440a      	add	r2, r1
 80015c4:	4621      	mov	r1, r4
 80015c6:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80015c8:	4b70      	ldr	r3, [pc, #448]	; (800178c <BSP_TS_GetState+0x21c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d019      	beq.n	8001608 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3320      	adds	r3, #32
 80015da:	443b      	add	r3, r7
 80015dc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80015e0:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	3320      	adds	r3, #32
 80015e8:	443b      	add	r3, r7
 80015ea:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	3320      	adds	r3, #32
 80015f4:	443b      	add	r3, r7
 80015f6:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	3320      	adds	r3, #32
 8001600:	443b      	add	r3, r7
 8001602:	8b3a      	ldrh	r2, [r7, #24]
 8001604:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8001608:	4b60      	ldr	r3, [pc, #384]	; (800178c <BSP_TS_GetState+0x21c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00f      	beq.n	8001634 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	3320      	adds	r3, #32
 800161a:	443b      	add	r3, r7
 800161c:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8001620:	f240 331f 	movw	r3, #799	; 0x31f
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	b29a      	uxth	r2, r3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	3320      	adds	r3, #32
 800162e:	443b      	add	r3, r7
 8001630:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8001634:	4b55      	ldr	r3, [pc, #340]	; (800178c <BSP_TS_GetState+0x21c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00f      	beq.n	8001660 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	3320      	adds	r3, #32
 8001646:	443b      	add	r3, r7
 8001648:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800164c:	f240 13df 	movw	r3, #479	; 0x1df
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	3320      	adds	r3, #32
 800165a:	443b      	add	r3, r7
 800165c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	3320      	adds	r3, #32
 8001666:	443b      	add	r3, r7
 8001668:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800166c:	4619      	mov	r1, r3
 800166e:	4a48      	ldr	r2, [pc, #288]	; (8001790 <BSP_TS_GetState+0x220>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	4299      	cmp	r1, r3
 8001678:	d90d      	bls.n	8001696 <BSP_TS_GetState+0x126>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	3320      	adds	r3, #32
 8001680:	443b      	add	r3, r7
 8001682:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8001686:	4942      	ldr	r1, [pc, #264]	; (8001790 <BSP_TS_GetState+0x220>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800168e:	b29b      	uxth	r3, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	e00c      	b.n	80016b0 <BSP_TS_GetState+0x140>
 8001696:	4a3e      	ldr	r2, [pc, #248]	; (8001790 <BSP_TS_GetState+0x220>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	3320      	adds	r3, #32
 80016a6:	443b      	add	r3, r7
 80016a8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	3320      	adds	r3, #32
 80016b8:	443b      	add	r3, r7
 80016ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80016be:	4619      	mov	r1, r3
 80016c0:	4a34      	ldr	r2, [pc, #208]	; (8001794 <BSP_TS_GetState+0x224>)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	4299      	cmp	r1, r3
 80016ca:	d90d      	bls.n	80016e8 <BSP_TS_GetState+0x178>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	3320      	adds	r3, #32
 80016d2:	443b      	add	r3, r7
 80016d4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80016d8:	492e      	ldr	r1, [pc, #184]	; (8001794 <BSP_TS_GetState+0x224>)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	e00c      	b.n	8001702 <BSP_TS_GetState+0x192>
 80016e8:	4a2a      	ldr	r2, [pc, #168]	; (8001794 <BSP_TS_GetState+0x224>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	3320      	adds	r3, #32
 80016f8:	443b      	add	r3, r7
 80016fa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8001704:	8afa      	ldrh	r2, [r7, #22]
 8001706:	8abb      	ldrh	r3, [r7, #20]
 8001708:	4413      	add	r3, r2
 800170a:	2b05      	cmp	r3, #5
 800170c:	dd15      	ble.n	800173a <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3320      	adds	r3, #32
 8001714:	443b      	add	r3, r7
 8001716:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800171a:	4619      	mov	r1, r3
 800171c:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <BSP_TS_GetState+0x220>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	3320      	adds	r3, #32
 800172a:	443b      	add	r3, r7
 800172c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001730:	4619      	mov	r1, r3
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <BSP_TS_GetState+0x224>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <BSP_TS_GetState+0x220>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	b299      	uxth	r1, r3
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <BSP_TS_GetState+0x224>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	b299      	uxth	r1, r3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	460a      	mov	r2, r1
 8001764:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3301      	adds	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4293      	cmp	r3, r2
 8001776:	f4ff af15 	bcc.w	80015a4 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800177a:	7efb      	ldrb	r3, [r7, #27]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3724      	adds	r7, #36	; 0x24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	200002f8 	.word	0x200002f8
 8001788:	200002fd 	.word	0x200002fd
 800178c:	200002fc 	.word	0x200002fc
 8001790:	20000300 	.word	0x20000300
 8001794:	20000308 	.word	0x20000308

08001798 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f90d 	bl	80019c4 <ft6x06_GetInstance>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2bff      	cmp	r3, #255	; 0xff
 80017b2:	d10e      	bne.n	80017d2 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f905 	bl	80019c4 <ft6x06_GetInstance>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d806      	bhi.n	80017d2 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	b2d1      	uxtb	r1, r2
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <ft6x06_Init+0x44>)
 80017cc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80017ce:	f002 ff8d 	bl	80046ec <TS_IO_Init>
    }
  }
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000310 	.word	0x20000310

080017e0 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001800:	f002 ff74 	bl	80046ec <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	21a8      	movs	r1, #168	; 0xa8
 800180a:	4618      	mov	r0, r3
 800180c:	f002 ff92 	bl	8004734 <TS_IO_Read>
 8001810:	4603      	mov	r3, r0
 8001812:	b29b      	uxth	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f8bc 	bl	80019a6 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f88d 	bl	8001950 <ft6x06_TS_DisableIT>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2102      	movs	r1, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f002 ff6d 	bl	8004734 <TS_IO_Read>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	b2db      	uxtb	r3, r3
 8001868:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <ft6x06_TS_DetectTouch+0x50>)
 800187c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <ft6x06_TS_DetectTouch+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000314 	.word	0x20000314

08001894 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <ft6x06_TS_GetXY+0x90>)
 80018a8:	789a      	ldrb	r2, [r3, #2]
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <ft6x06_TS_GetXY+0x90>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d234      	bcs.n	800191c <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <ft6x06_TS_GetXY+0x90>)
 80018b4:	789b      	ldrb	r3, [r3, #2]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <ft6x06_TS_GetXY+0x2c>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d003      	beq.n	80018c6 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80018be:	e005      	b.n	80018cc <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80018c0:	2303      	movs	r3, #3
 80018c2:	75fb      	strb	r3, [r7, #23]
      break;
 80018c4:	e002      	b.n	80018cc <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80018c6:	2309      	movs	r3, #9
 80018c8:	75fb      	strb	r3, [r7, #23]
      break;
 80018ca:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	b2d8      	uxtb	r0, r3
 80018d0:	f107 0210 	add.w	r2, r7, #16
 80018d4:	7df9      	ldrb	r1, [r7, #23]
 80018d6:	2304      	movs	r3, #4
 80018d8:	f002 ff4a 	bl	8004770 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80018dc:	7c3b      	ldrb	r3, [r7, #16]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	7c7b      	ldrb	r3, [r7, #17]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80018f6:	7cbb      	ldrb	r3, [r7, #18]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001900:	b21a      	sxth	r2, r3
 8001902:	7cfb      	ldrb	r3, [r7, #19]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21b      	sxth	r3, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <ft6x06_TS_GetXY+0x90>)
 8001912:	789b      	ldrb	r3, [r3, #2]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <ft6x06_TS_GetXY+0x90>)
 800191a:	709a      	strb	r2, [r3, #2]
  }
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000314 	.word	0x20000314

08001928 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	21a4      	movs	r1, #164	; 0xa4
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fedc 	bl	8004700 <TS_IO_Write>
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	21a4      	movs	r1, #164	; 0xa4
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fec8 	bl	8004700 <TS_IO_Write>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e00b      	b.n	80019f0 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <ft6x06_GetInstance+0x40>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	88fa      	ldrh	r2, [r7, #6]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d101      	bne.n	80019ea <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	e006      	b.n	80019f8 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	3301      	adds	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d9f0      	bls.n	80019d8 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80019f6:	23ff      	movs	r3, #255	; 0xff
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20000310 	.word	0x20000310

08001a08 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a12:	49c1      	ldr	r1, [pc, #772]	; (8001d18 <OTM8009A_Init+0x310>)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fb55 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001a1a:	49c0      	ldr	r1, [pc, #768]	; (8001d1c <OTM8009A_Init+0x314>)
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f7ff fb51 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001a22:	49bf      	ldr	r1, [pc, #764]	; (8001d20 <OTM8009A_Init+0x318>)
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fb4d 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001a2a:	49be      	ldr	r1, [pc, #760]	; (8001d24 <OTM8009A_Init+0x31c>)
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff fb49 	bl	80010c4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001a32:	49bb      	ldr	r1, [pc, #748]	; (8001d20 <OTM8009A_Init+0x318>)
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fb45 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001a3a:	49bb      	ldr	r1, [pc, #748]	; (8001d28 <OTM8009A_Init+0x320>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fb41 	bl	80010c4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f003 fc48 	bl	80052d8 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001a48:	49b8      	ldr	r1, [pc, #736]	; (8001d2c <OTM8009A_Init+0x324>)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fb3a 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001a50:	49b7      	ldr	r1, [pc, #732]	; (8001d30 <OTM8009A_Init+0x328>)
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fb36 	bl	80010c4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f003 fc3d 	bl	80052d8 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001a5e:	49b5      	ldr	r1, [pc, #724]	; (8001d34 <OTM8009A_Init+0x32c>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fb2f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001a66:	49b4      	ldr	r1, [pc, #720]	; (8001d38 <OTM8009A_Init+0x330>)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fb2b 	bl	80010c4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001a6e:	49b3      	ldr	r1, [pc, #716]	; (8001d3c <OTM8009A_Init+0x334>)
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fb27 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001a76:	49b2      	ldr	r1, [pc, #712]	; (8001d40 <OTM8009A_Init+0x338>)
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fb23 	bl	80010c4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001a7e:	49b1      	ldr	r1, [pc, #708]	; (8001d44 <OTM8009A_Init+0x33c>)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fb1f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001a86:	49b0      	ldr	r1, [pc, #704]	; (8001d48 <OTM8009A_Init+0x340>)
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fb1b 	bl	80010c4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a8e:	49a2      	ldr	r1, [pc, #648]	; (8001d18 <OTM8009A_Init+0x310>)
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fb17 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001a96:	49ad      	ldr	r1, [pc, #692]	; (8001d4c <OTM8009A_Init+0x344>)
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fb13 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001a9e:	49ac      	ldr	r1, [pc, #688]	; (8001d50 <OTM8009A_Init+0x348>)
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fb0f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001aa6:	49ab      	ldr	r1, [pc, #684]	; (8001d54 <OTM8009A_Init+0x34c>)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fb0b 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001aae:	49aa      	ldr	r1, [pc, #680]	; (8001d58 <OTM8009A_Init+0x350>)
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fb07 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001ab6:	49a9      	ldr	r1, [pc, #676]	; (8001d5c <OTM8009A_Init+0x354>)
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fb03 	bl	80010c4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001abe:	49a8      	ldr	r1, [pc, #672]	; (8001d60 <OTM8009A_Init+0x358>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff faff 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001ac6:	49a7      	ldr	r1, [pc, #668]	; (8001d64 <OTM8009A_Init+0x35c>)
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fafb 	bl	80010c4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001ace:	49a6      	ldr	r1, [pc, #664]	; (8001d68 <OTM8009A_Init+0x360>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff faf7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001ad6:	499a      	ldr	r1, [pc, #616]	; (8001d40 <OTM8009A_Init+0x338>)
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff faf3 	bl	80010c4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ade:	498e      	ldr	r1, [pc, #568]	; (8001d18 <OTM8009A_Init+0x310>)
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff faef 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001ae6:	49a1      	ldr	r1, [pc, #644]	; (8001d6c <OTM8009A_Init+0x364>)
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7ff faeb 	bl	80010c4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001aee:	49a0      	ldr	r1, [pc, #640]	; (8001d70 <OTM8009A_Init+0x368>)
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fae7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001af6:	499f      	ldr	r1, [pc, #636]	; (8001d74 <OTM8009A_Init+0x36c>)
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fae3 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001afe:	499e      	ldr	r1, [pc, #632]	; (8001d78 <OTM8009A_Init+0x370>)
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fadf 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001b06:	499d      	ldr	r1, [pc, #628]	; (8001d7c <OTM8009A_Init+0x374>)
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fadb 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001b0e:	499c      	ldr	r1, [pc, #624]	; (8001d80 <OTM8009A_Init+0x378>)
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fad7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001b16:	499b      	ldr	r1, [pc, #620]	; (8001d84 <OTM8009A_Init+0x37c>)
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fad3 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001b1e:	498c      	ldr	r1, [pc, #560]	; (8001d50 <OTM8009A_Init+0x348>)
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff facf 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001b26:	4998      	ldr	r1, [pc, #608]	; (8001d88 <OTM8009A_Init+0x380>)
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff facb 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001b2e:	498a      	ldr	r1, [pc, #552]	; (8001d58 <OTM8009A_Init+0x350>)
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fac7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001b36:	4995      	ldr	r1, [pc, #596]	; (8001d8c <OTM8009A_Init+0x384>)
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fac3 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001b3e:	4994      	ldr	r1, [pc, #592]	; (8001d90 <OTM8009A_Init+0x388>)
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fabf 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001b46:	4993      	ldr	r1, [pc, #588]	; (8001d94 <OTM8009A_Init+0x38c>)
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7ff fabb 	bl	80010c4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001b4e:	4974      	ldr	r1, [pc, #464]	; (8001d20 <OTM8009A_Init+0x318>)
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fab7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001b56:	4990      	ldr	r1, [pc, #576]	; (8001d98 <OTM8009A_Init+0x390>)
 8001b58:	2006      	movs	r0, #6
 8001b5a:	f7ff fab3 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001b5e:	498f      	ldr	r1, [pc, #572]	; (8001d9c <OTM8009A_Init+0x394>)
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff faaf 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001b66:	498e      	ldr	r1, [pc, #568]	; (8001da0 <OTM8009A_Init+0x398>)
 8001b68:	200e      	movs	r0, #14
 8001b6a:	f7ff faab 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001b6e:	498d      	ldr	r1, [pc, #564]	; (8001da4 <OTM8009A_Init+0x39c>)
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff faa7 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001b76:	498c      	ldr	r1, [pc, #560]	; (8001da8 <OTM8009A_Init+0x3a0>)
 8001b78:	200e      	movs	r0, #14
 8001b7a:	f7ff faa3 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001b7e:	498b      	ldr	r1, [pc, #556]	; (8001dac <OTM8009A_Init+0x3a4>)
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fa9f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001b86:	498a      	ldr	r1, [pc, #552]	; (8001db0 <OTM8009A_Init+0x3a8>)
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff fa9b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001b8e:	4989      	ldr	r1, [pc, #548]	; (8001db4 <OTM8009A_Init+0x3ac>)
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fa97 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001b96:	4988      	ldr	r1, [pc, #544]	; (8001db8 <OTM8009A_Init+0x3b0>)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fa93 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001b9e:	4960      	ldr	r1, [pc, #384]	; (8001d20 <OTM8009A_Init+0x318>)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fa8f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001ba6:	4985      	ldr	r1, [pc, #532]	; (8001dbc <OTM8009A_Init+0x3b4>)
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f7ff fa8b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001bae:	4984      	ldr	r1, [pc, #528]	; (8001dc0 <OTM8009A_Init+0x3b8>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fa87 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001bb6:	4983      	ldr	r1, [pc, #524]	; (8001dc4 <OTM8009A_Init+0x3bc>)
 8001bb8:	200f      	movs	r0, #15
 8001bba:	f7ff fa83 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001bbe:	4977      	ldr	r1, [pc, #476]	; (8001d9c <OTM8009A_Init+0x394>)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fa7f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001bc6:	4980      	ldr	r1, [pc, #512]	; (8001dc8 <OTM8009A_Init+0x3c0>)
 8001bc8:	200f      	movs	r0, #15
 8001bca:	f7ff fa7b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001bce:	4975      	ldr	r1, [pc, #468]	; (8001da4 <OTM8009A_Init+0x39c>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fa77 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001bd6:	497d      	ldr	r1, [pc, #500]	; (8001dcc <OTM8009A_Init+0x3c4>)
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f7ff fa73 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001bde:	4973      	ldr	r1, [pc, #460]	; (8001dac <OTM8009A_Init+0x3a4>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fa6f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001be6:	497a      	ldr	r1, [pc, #488]	; (8001dd0 <OTM8009A_Init+0x3c8>)
 8001be8:	200f      	movs	r0, #15
 8001bea:	f7ff fa6b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001bee:	4971      	ldr	r1, [pc, #452]	; (8001db4 <OTM8009A_Init+0x3ac>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fa67 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001bf6:	4977      	ldr	r1, [pc, #476]	; (8001dd4 <OTM8009A_Init+0x3cc>)
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f7ff fa63 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001bfe:	4976      	ldr	r1, [pc, #472]	; (8001dd8 <OTM8009A_Init+0x3d0>)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fa5f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001c06:	4975      	ldr	r1, [pc, #468]	; (8001ddc <OTM8009A_Init+0x3d4>)
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f7ff fa5b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001c0e:	4974      	ldr	r1, [pc, #464]	; (8001de0 <OTM8009A_Init+0x3d8>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fa57 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001c16:	4973      	ldr	r1, [pc, #460]	; (8001de4 <OTM8009A_Init+0x3dc>)
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f7ff fa53 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001c1e:	4940      	ldr	r1, [pc, #256]	; (8001d20 <OTM8009A_Init+0x318>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fa4f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001c26:	4970      	ldr	r1, [pc, #448]	; (8001de8 <OTM8009A_Init+0x3e0>)
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f7ff fa4b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001c2e:	4964      	ldr	r1, [pc, #400]	; (8001dc0 <OTM8009A_Init+0x3b8>)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fa47 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001c36:	496d      	ldr	r1, [pc, #436]	; (8001dec <OTM8009A_Init+0x3e4>)
 8001c38:	200f      	movs	r0, #15
 8001c3a:	f7ff fa43 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001c3e:	4957      	ldr	r1, [pc, #348]	; (8001d9c <OTM8009A_Init+0x394>)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fa3f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001c46:	496a      	ldr	r1, [pc, #424]	; (8001df0 <OTM8009A_Init+0x3e8>)
 8001c48:	200f      	movs	r0, #15
 8001c4a:	f7ff fa3b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001c4e:	4955      	ldr	r1, [pc, #340]	; (8001da4 <OTM8009A_Init+0x39c>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fa37 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001c56:	4967      	ldr	r1, [pc, #412]	; (8001df4 <OTM8009A_Init+0x3ec>)
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f7ff fa33 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001c5e:	4953      	ldr	r1, [pc, #332]	; (8001dac <OTM8009A_Init+0x3a4>)
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fa2f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001c66:	4964      	ldr	r1, [pc, #400]	; (8001df8 <OTM8009A_Init+0x3f0>)
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f7ff fa2b 	bl	80010c4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001c6e:	4951      	ldr	r1, [pc, #324]	; (8001db4 <OTM8009A_Init+0x3ac>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fa27 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001c76:	4961      	ldr	r1, [pc, #388]	; (8001dfc <OTM8009A_Init+0x3f4>)
 8001c78:	200f      	movs	r0, #15
 8001c7a:	f7ff fa23 	bl	80010c4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001c7e:	4934      	ldr	r1, [pc, #208]	; (8001d50 <OTM8009A_Init+0x348>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fa1f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001c86:	495e      	ldr	r1, [pc, #376]	; (8001e00 <OTM8009A_Init+0x3f8>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fa1b 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001c8e:	495d      	ldr	r1, [pc, #372]	; (8001e04 <OTM8009A_Init+0x3fc>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fa17 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001c96:	495c      	ldr	r1, [pc, #368]	; (8001e08 <OTM8009A_Init+0x400>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa13 	bl	80010c4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001c9e:	495b      	ldr	r1, [pc, #364]	; (8001e0c <OTM8009A_Init+0x404>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fa0f 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001ca6:	495a      	ldr	r1, [pc, #360]	; (8001e10 <OTM8009A_Init+0x408>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fa0b 	bl	80010c4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cae:	491a      	ldr	r1, [pc, #104]	; (8001d18 <OTM8009A_Init+0x310>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fa07 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001cb6:	4957      	ldr	r1, [pc, #348]	; (8001e14 <OTM8009A_Init+0x40c>)
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f7ff fa03 	bl	80010c4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cbe:	4916      	ldr	r1, [pc, #88]	; (8001d18 <OTM8009A_Init+0x310>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff f9ff 	bl	80010c4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cc6:	4914      	ldr	r1, [pc, #80]	; (8001d18 <OTM8009A_Init+0x310>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff f9fb 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001cce:	4952      	ldr	r1, [pc, #328]	; (8001e18 <OTM8009A_Init+0x410>)
 8001cd0:	2010      	movs	r0, #16
 8001cd2:	f7ff f9f7 	bl	80010c4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cd6:	4910      	ldr	r1, [pc, #64]	; (8001d18 <OTM8009A_Init+0x310>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff f9f3 	bl	80010c4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001cde:	494f      	ldr	r1, [pc, #316]	; (8001e1c <OTM8009A_Init+0x414>)
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f7ff f9ef 	bl	80010c4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001ce6:	494e      	ldr	r1, [pc, #312]	; (8001e20 <OTM8009A_Init+0x418>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff f9eb 	bl	80010c4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 8001cee:	2078      	movs	r0, #120	; 0x78
 8001cf0:	f003 faf2 	bl	80052d8 <HAL_Delay>

  switch(ColorCoding)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <OTM8009A_Init+0x304>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	f040 8095 	bne.w	8001e2c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001d02:	4948      	ldr	r1, [pc, #288]	; (8001e24 <OTM8009A_Init+0x41c>)
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff f9dd 	bl	80010c4 <DSI_IO_WriteCmd>
    break;
 8001d0a:	e090      	b.n	8001e2e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001d0c:	4946      	ldr	r1, [pc, #280]	; (8001e28 <OTM8009A_Init+0x420>)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff f9d8 	bl	80010c4 <DSI_IO_WriteCmd>
    break;
 8001d14:	e08b      	b.n	8001e2e <OTM8009A_Init+0x426>
 8001d16:	bf00      	nop
 8001d18:	080104e0 	.word	0x080104e0
 8001d1c:	08010398 	.word	0x08010398
 8001d20:	080104e4 	.word	0x080104e4
 8001d24:	0801039c 	.word	0x0801039c
 8001d28:	080104e8 	.word	0x080104e8
 8001d2c:	080104ec 	.word	0x080104ec
 8001d30:	080104f0 	.word	0x080104f0
 8001d34:	080104f4 	.word	0x080104f4
 8001d38:	080104f8 	.word	0x080104f8
 8001d3c:	080104fc 	.word	0x080104fc
 8001d40:	08010500 	.word	0x08010500
 8001d44:	08010504 	.word	0x08010504
 8001d48:	08010508 	.word	0x08010508
 8001d4c:	0801050c 	.word	0x0801050c
 8001d50:	08010510 	.word	0x08010510
 8001d54:	08010514 	.word	0x08010514
 8001d58:	08010518 	.word	0x08010518
 8001d5c:	0801051c 	.word	0x0801051c
 8001d60:	08010520 	.word	0x08010520
 8001d64:	08010524 	.word	0x08010524
 8001d68:	08010528 	.word	0x08010528
 8001d6c:	080103c8 	.word	0x080103c8
 8001d70:	0801052c 	.word	0x0801052c
 8001d74:	08010530 	.word	0x08010530
 8001d78:	08010534 	.word	0x08010534
 8001d7c:	08010538 	.word	0x08010538
 8001d80:	0801053c 	.word	0x0801053c
 8001d84:	08010540 	.word	0x08010540
 8001d88:	08010544 	.word	0x08010544
 8001d8c:	08010548 	.word	0x08010548
 8001d90:	0801054c 	.word	0x0801054c
 8001d94:	080103cc 	.word	0x080103cc
 8001d98:	080103d0 	.word	0x080103d0
 8001d9c:	08010550 	.word	0x08010550
 8001da0:	080103d8 	.word	0x080103d8
 8001da4:	08010554 	.word	0x08010554
 8001da8:	080103e8 	.word	0x080103e8
 8001dac:	08010558 	.word	0x08010558
 8001db0:	080103f8 	.word	0x080103f8
 8001db4:	0801055c 	.word	0x0801055c
 8001db8:	08010594 	.word	0x08010594
 8001dbc:	08010404 	.word	0x08010404
 8001dc0:	08010560 	.word	0x08010560
 8001dc4:	08010410 	.word	0x08010410
 8001dc8:	08010420 	.word	0x08010420
 8001dcc:	08010430 	.word	0x08010430
 8001dd0:	0801043c 	.word	0x0801043c
 8001dd4:	0801044c 	.word	0x0801044c
 8001dd8:	08010564 	.word	0x08010564
 8001ddc:	0801045c 	.word	0x0801045c
 8001de0:	08010568 	.word	0x08010568
 8001de4:	08010468 	.word	0x08010468
 8001de8:	08010474 	.word	0x08010474
 8001dec:	08010480 	.word	0x08010480
 8001df0:	08010490 	.word	0x08010490
 8001df4:	080104a0 	.word	0x080104a0
 8001df8:	080104ac 	.word	0x080104ac
 8001dfc:	080104bc 	.word	0x080104bc
 8001e00:	08010598 	.word	0x08010598
 8001e04:	0801059c 	.word	0x0801059c
 8001e08:	080105a0 	.word	0x080105a0
 8001e0c:	080105a4 	.word	0x080105a4
 8001e10:	080105a8 	.word	0x080105a8
 8001e14:	080104cc 	.word	0x080104cc
 8001e18:	080103a0 	.word	0x080103a0
 8001e1c:	080103b4 	.word	0x080103b4
 8001e20:	0801056c 	.word	0x0801056c
 8001e24:	08010570 	.word	0x08010570
 8001e28:	08010574 	.word	0x08010574
  default :
    break;
 8001e2c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10b      	bne.n	8001e4c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001e34:	4916      	ldr	r1, [pc, #88]	; (8001e90 <OTM8009A_Init+0x488>)
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff f944 	bl	80010c4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001e3c:	4915      	ldr	r1, [pc, #84]	; (8001e94 <OTM8009A_Init+0x48c>)
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f7ff f940 	bl	80010c4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001e44:	4914      	ldr	r1, [pc, #80]	; (8001e98 <OTM8009A_Init+0x490>)
 8001e46:	2004      	movs	r0, #4
 8001e48:	f7ff f93c 	bl	80010c4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001e4c:	4913      	ldr	r1, [pc, #76]	; (8001e9c <OTM8009A_Init+0x494>)
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff f938 	bl	80010c4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001e54:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <OTM8009A_Init+0x498>)
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff f934 	bl	80010c4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001e5c:	4911      	ldr	r1, [pc, #68]	; (8001ea4 <OTM8009A_Init+0x49c>)
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff f930 	bl	80010c4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001e64:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <OTM8009A_Init+0x4a0>)
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff f92c 	bl	80010c4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001e6c:	490f      	ldr	r1, [pc, #60]	; (8001eac <OTM8009A_Init+0x4a4>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff f928 	bl	80010c4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <OTM8009A_Init+0x4a8>)
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff f924 	bl	80010c4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001e7c:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <OTM8009A_Init+0x4ac>)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f920 	bl	80010c4 <DSI_IO_WriteCmd>

  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08010578 	.word	0x08010578
 8001e94:	080104d0 	.word	0x080104d0
 8001e98:	080104d8 	.word	0x080104d8
 8001e9c:	0801057c 	.word	0x0801057c
 8001ea0:	08010580 	.word	0x08010580
 8001ea4:	08010584 	.word	0x08010584
 8001ea8:	08010588 	.word	0x08010588
 8001eac:	0801058c 	.word	0x0801058c
 8001eb0:	080104e0 	.word	0x080104e0
 8001eb4:	08010590 	.word	0x08010590

08001eb8 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8001ec0:	f7fe fe20 	bl	8000b04 <BSP_LCD_GetFont>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8001ec6:	4b60      	ldr	r3, [pc, #384]	; (8002048 <__io_putchar+0x190>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 80b6 	bne.w	800203c <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	; (800204c <__io_putchar+0x194>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d110      	bne.n	8001efa <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001ed8:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <__io_putchar+0x198>)
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <__io_putchar+0x19c>)
 8001ede:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001ee0:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <__io_putchar+0x1a0>)
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <__io_putchar+0x1a4>)
 8001ee6:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8001ee8:	4b58      	ldr	r3, [pc, #352]	; (800204c <__io_putchar+0x194>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <__io_putchar+0x1a8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <__io_putchar+0x1ac>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <__io_putchar+0x1b0>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461c      	mov	r4, r3
 8001f00:	f7fe fcee 	bl	80008e0 <BSP_LCD_GetXSize>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	889b      	ldrh	r3, [r3, #4]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	d218      	bcs.n	8001f44 <__io_putchar+0x8c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0a      	cmp	r3, #10
 8001f16:	d015      	beq.n	8001f44 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001f18:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <__io_putchar+0x19c>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4b52      	ldr	r3, [pc, #328]	; (8002068 <__io_putchar+0x1b0>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	b290      	uxth	r0, r2
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <__io_putchar+0x1b0>)
 8001f28:	8010      	strh	r0, [r2, #0]
 8001f2a:	461c      	mov	r4, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	b2d8      	uxtb	r0, r3
 8001f30:	4a4e      	ldr	r2, [pc, #312]	; (800206c <__io_putchar+0x1b4>)
 8001f32:	460b      	mov	r3, r1
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	440b      	add	r3, r1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4423      	add	r3, r4
 8001f3e:	4602      	mov	r2, r0
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e07b      	b.n	800203c <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <__io_putchar+0x1a4>)
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <__io_putchar+0x19c>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d314      	bcc.n	8001f7a <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <__io_putchar+0x1b8>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8001f58:	4b40      	ldr	r3, [pc, #256]	; (800205c <__io_putchar+0x1a4>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <__io_putchar+0x1a4>)
 8001f62:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001f64:	4b3d      	ldr	r3, [pc, #244]	; (800205c <__io_putchar+0x1a4>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	2b7c      	cmp	r3, #124	; 0x7c
 8001f6a:	d106      	bne.n	8001f7a <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <__io_putchar+0x1a4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	e002      	b.n	8001f7a <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001f74:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <__io_putchar+0x1b8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <__io_putchar+0x1b0>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e015      	b.n	8001fae <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <__io_putchar+0x19c>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <__io_putchar+0x1b0>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	b290      	uxth	r0, r2
 8001f90:	4a35      	ldr	r2, [pc, #212]	; (8002068 <__io_putchar+0x1b0>)
 8001f92:	8010      	strh	r0, [r2, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	4a35      	ldr	r2, [pc, #212]	; (800206c <__io_putchar+0x1b4>)
 8001f98:	460b      	mov	r3, r1
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	440b      	add	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4403      	add	r3, r0
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	f7fe fc97 	bl	80008e0 <BSP_LCD_GetXSize>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3df      	bcc.n	8001f82 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <__io_putchar+0x19c>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <__io_putchar+0x1bc>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4927      	ldr	r1, [pc, #156]	; (800206c <__io_putchar+0x1b4>)
 8001fce:	4603      	mov	r3, r0
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	4403      	add	r3, r0
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3380      	adds	r3, #128	; 0x80
 8001fda:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <__io_putchar+0x1b0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8001fe2:	f000 f849 	bl	8002078 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <__io_putchar+0x19c>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <__io_putchar+0x19c>)
 8001ff0:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <__io_putchar+0x19c>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2b7c      	cmp	r3, #124	; 0x7c
 8001ff8:	d108      	bne.n	800200c <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <__io_putchar+0x19c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <__io_putchar+0x1a4>)
 8002002:	2201      	movs	r2, #1
 8002004:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <__io_putchar+0x1b8>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b0a      	cmp	r3, #10
 8002010:	d014      	beq.n	800203c <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <__io_putchar+0x19c>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <__io_putchar+0x1b0>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	b290      	uxth	r0, r2
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <__io_putchar+0x1b0>)
 8002022:	8010      	strh	r0, [r2, #0]
 8002024:	461c      	mov	r4, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <__io_putchar+0x1b4>)
 800202c:	460b      	mov	r3, r1
 800202e:	015b      	lsls	r3, r3, #5
 8002030:	440b      	add	r3, r1
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	4423      	add	r3, r4
 8002038:	4602      	mov	r2, r0
 800203a:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 800203c:	687b      	ldr	r3, [r7, #4]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	20004318 	.word	0x20004318
 800204c:	20004317 	.word	0x20004317
 8002050:	20004314 	.word	0x20004314
 8002054:	20004310 	.word	0x20004310
 8002058:	20004312 	.word	0x20004312
 800205c:	2000430e 	.word	0x2000430e
 8002060:	20004319 	.word	0x20004319
 8002064:	2000431a 	.word	0x2000431a
 8002068:	2000430c 	.word	0x2000430c
 800206c:	20000318 	.word	0x20000318
 8002070:	20004316 	.word	0x20004316
 8002074:	20004308 	.word	0x20004308

08002078 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 800207e:	2300      	movs	r3, #0
 8002080:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8002082:	2300      	movs	r3, #0
 8002084:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	807b      	strh	r3, [r7, #2]
 800208a:	2300      	movs	r3, #0
 800208c:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2b16      	cmp	r3, #22
 8002094:	d826      	bhi.n	80020e4 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	4b38      	ldr	r3, [pc, #224]	; (800217c <LCD_LOG_UpdateDisplay+0x104>)
 800209c:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800209e:	429a      	cmp	r2, r3
 80020a0:	d320      	bcc.n	80020e4 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	441a      	add	r2, r3
 80020aa:	4935      	ldr	r1, [pc, #212]	; (8002180 <LCD_LOG_UpdateDisplay+0x108>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3380      	adds	r3, #128	; 0x80
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fcd6 	bl	8000a6c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	3304      	adds	r3, #4
 80020c6:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	441a      	add	r2, r3
 80020d0:	4613      	mov	r3, r2
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4a29      	ldr	r2, [pc, #164]	; (8002180 <LCD_LOG_UpdateDisplay+0x108>)
 80020da:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fe5b 	bl	8000d98 <BSP_LCD_DisplayStringAtLine>
 80020e2:	e045      	b.n	8002170 <LCD_LOG_UpdateDisplay+0xf8>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <LCD_LOG_UpdateDisplay+0x104>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d204      	bcs.n	80020fa <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	337c      	adds	r3, #124	; 0x7c
 80020f6:	80bb      	strh	r3, [r7, #4]
 80020f8:	e002      	b.n	8002100 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <LCD_LOG_UpdateDisplay+0x100>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8002100:	88bb      	ldrh	r3, [r7, #4]
 8002102:	3b17      	subs	r3, #23
 8002104:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8002106:	2300      	movs	r3, #0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e02d      	b.n	8002168 <LCD_LOG_UpdateDisplay+0xf0>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	441a      	add	r2, r3
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <LCD_LOG_UpdateDisplay+0x10c>)
 8002114:	fb83 1302 	smull	r1, r3, r3, r2
 8002118:	4413      	add	r3, r2
 800211a:	1199      	asrs	r1, r3, #6
 800211c:	17d3      	asrs	r3, r2, #31
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	460b      	mov	r3, r1
 8002122:	015b      	lsls	r3, r3, #5
 8002124:	1a5b      	subs	r3, r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	1ad1      	subs	r1, r2, r3
 800212a:	460b      	mov	r3, r1
 800212c:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800212e:	883a      	ldrh	r2, [r7, #0]
 8002130:	4913      	ldr	r1, [pc, #76]	; (8002180 <LCD_LOG_UpdateDisplay+0x108>)
 8002132:	4613      	mov	r3, r2
 8002134:	015b      	lsls	r3, r3, #5
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3380      	adds	r3, #128	; 0x80
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fc93 	bl	8000a6c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b29b      	uxth	r3, r3
 800214a:	3304      	adds	r3, #4
 800214c:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 800214e:	883a      	ldrh	r2, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4a09      	ldr	r2, [pc, #36]	; (8002180 <LCD_LOG_UpdateDisplay+0x108>)
 800215a:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fe1b 	bl	8000d98 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	3301      	adds	r3, #1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b17      	cmp	r3, #23
 800216c:	d9ce      	bls.n	800210c <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20004310 	.word	0x20004310
 800217c:	2000430e 	.word	0x2000430e
 8002180:	20000318 	.word	0x20000318
 8002184:	84210843 	.word	0x84210843

08002188 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_DMA2D_Init+0x34>)
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <MX_DMA2D_Init+0x38>)
 8002190:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_DMA2D_Init+0x34>)
 8002194:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002198:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_DMA2D_Init+0x34>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_DMA2D_Init+0x34>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_DMA2D_Init+0x34>)
 80021a8:	f003 fa2e 	bl	8005608 <HAL_DMA2D_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80021b2:	f002 fb15 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000431c 	.word	0x2000431c
 80021c0:	4002b000 	.word	0x4002b000

080021c4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_DMA2D_MspInit+0x38>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10b      	bne.n	80021ee <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_DMA2D_MspInit+0x3c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_DMA2D_MspInit+0x3c>)
 80021dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_DMA2D_MspInit+0x3c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	4002b000 	.word	0x4002b000
 8002200:	40023800 	.word	0x40023800

08002204 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0ae      	sub	sp, #184	; 0xb8
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800220a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002216:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800221a:	2224      	movs	r2, #36	; 0x24
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f00c fe3d 	bl	800ee9e <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002224:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	226c      	movs	r2, #108	; 0x6c
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00c fe2e 	bl	800ee9e <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002244:	4a65      	ldr	r2, [pc, #404]	; (80023dc <MX_DSIHOST_DSI_Init+0x1d8>)
 8002246:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002248:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002250:	2204      	movs	r2, #4
 8002252:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002254:	4b60      	ldr	r3, [pc, #384]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800225a:	2314      	movs	r3, #20
 800225c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002260:	2301      	movs	r3, #1
 8002262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800226c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002270:	4619      	mov	r1, r3
 8002272:	4859      	ldr	r0, [pc, #356]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002274:	f003 fcc6 	bl	8005c04 <HAL_DSI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800227e:	f002 faaf 	bl	80047e0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80022b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022bc:	4619      	mov	r1, r3
 80022be:	4846      	ldr	r0, [pc, #280]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80022c0:	f004 f9a6 	bl	8006610 <HAL_DSI_ConfigHostTimeouts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80022ca:	f002 fa89 	bl	80047e0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80022ce:	231c      	movs	r3, #28
 80022d0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 80022d2:	2321      	movs	r3, #33	; 0x21
 80022d4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 80022d6:	230f      	movs	r3, #15
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 80022da:	2319      	movs	r3, #25
 80022dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80022ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022ee:	4619      	mov	r1, r3
 80022f0:	4839      	ldr	r0, [pc, #228]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80022f2:	f004 f923 	bl	800653c <HAL_DSI_ConfigPhyTimer>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80022fc:	f002 fa70 	bl	80047e0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8002300:	2104      	movs	r1, #4
 8002302:	4835      	ldr	r0, [pc, #212]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002304:	f004 f8f2 	bl	80064ec <HAL_DSI_ConfigFlowControl>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 800230e:	f002 fa67 	bl	80047e0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8002312:	f242 7110 	movw	r1, #10000	; 0x2710
 8002316:	4830      	ldr	r0, [pc, #192]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8002318:	f004 fb38 	bl	800698c <HAL_DSI_SetLowPowerRXFilter>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8002322:	f002 fa5d 	bl	80047e0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002326:	2100      	movs	r1, #0
 8002328:	482b      	ldr	r0, [pc, #172]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 800232a:	f003 fdfb 	bl	8005f24 <HAL_DSI_ConfigErrorMonitor>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 8002334:	f002 fa54 	bl	80047e0 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 800233c:	2305      	movs	r3, #5
 800233e:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 800234c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002350:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8002356:	2304      	movs	r3, #4
 8002358:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800235a:	2302      	movs	r3, #2
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 8002362:	2312      	movs	r3, #18
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 8002366:	2310      	movs	r3, #16
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 800236a:	f240 53e2 	movw	r3, #1506	; 0x5e2
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 8002370:	2304      	movs	r3, #4
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 8002374:	2302      	movs	r3, #2
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 8002378:	2302      	movs	r3, #2
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 800237c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002380:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	480a      	ldr	r0, [pc, #40]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80023b0:	f003 fe9c 	bl	80060ec <HAL_DSI_ConfigVideoMode>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 80023ba:	f002 fa11 	bl	80047e0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80023be:	2100      	movs	r1, #0
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80023c2:	f003 fe6b 	bl	800609c <HAL_DSI_SetGenericVCID>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 80023cc:	f002 fa08 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	37b8      	adds	r7, #184	; 0xb8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20004374 	.word	0x20004374
 80023dc:	40016c00 	.word	0x40016c00

080023e0 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_DSI_MspInit+0x38>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_DSI_MspInit+0x3c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_DSI_MspInit+0x3c>)
 80023f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_DSI_MspInit+0x3c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40016c00 	.word	0x40016c00
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_DSI_MspDeInit+0x2c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d105      	bne.n	800243e <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_DSI_MspDeInit+0x30>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_DSI_MspDeInit+0x30>)
 8002438:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40016c00 	.word	0x40016c00
 8002450:	40023800 	.word	0x40023800

08002454 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	615a      	str	r2, [r3, #20]
 800246a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <MX_FMC_Init+0x98>)
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <MX_FMC_Init+0x9c>)
 8002470:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_FMC_Init+0x98>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_FMC_Init+0x98>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_FMC_Init+0x98>)
 8002480:	2204      	movs	r2, #4
 8002482:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_FMC_Init+0x98>)
 8002486:	2220      	movs	r2, #32
 8002488:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_FMC_Init+0x98>)
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_FMC_Init+0x98>)
 8002492:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002496:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_FMC_Init+0x98>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_FMC_Init+0x98>)
 80024a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_FMC_Init+0x98>)
 80024a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_FMC_Init+0x98>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80024b8:	2307      	movs	r3, #7
 80024ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80024bc:	2304      	movs	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80024c0:	2307      	movs	r3, #7
 80024c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80024c4:	2303      	movs	r3, #3
 80024c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_FMC_Init+0x98>)
 80024d6:	f006 ffcd 	bl	8009474 <HAL_SDRAM_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80024e0:	f002 f97e 	bl	80047e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80024e4:	bf00      	nop
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20004390 	.word	0x20004390
 80024f0:	a0000140 	.word	0xa0000140

080024f4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002508:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_FMC_MspInit+0x104>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d16f      	bne.n	80025f0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_FMC_MspInit+0x104>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_FMC_MspInit+0x108>)
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4a38      	ldr	r2, [pc, #224]	; (80025fc <HAL_FMC_MspInit+0x108>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6393      	str	r3, [r2, #56]	; 0x38
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_FMC_MspInit+0x108>)
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800252e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002532:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002540:	230c      	movs	r3, #12
 8002542:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	4619      	mov	r1, r3
 8002548:	482d      	ldr	r0, [pc, #180]	; (8002600 <HAL_FMC_MspInit+0x10c>)
 800254a:	f004 fa4d 	bl	80069e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800254e:	f248 1337 	movw	r3, #33079	; 0x8137
 8002552:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002560:	230c      	movs	r3, #12
 8002562:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4826      	ldr	r0, [pc, #152]	; (8002604 <HAL_FMC_MspInit+0x110>)
 800256a:	f004 fa3d 	bl	80069e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800256e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002572:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002580:	230c      	movs	r3, #12
 8002582:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	481f      	ldr	r0, [pc, #124]	; (8002608 <HAL_FMC_MspInit+0x114>)
 800258a:	f004 fa2d 	bl	80069e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800258e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002592:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025a0:	230c      	movs	r3, #12
 80025a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4818      	ldr	r0, [pc, #96]	; (800260c <HAL_FMC_MspInit+0x118>)
 80025aa:	f004 fa1d 	bl	80069e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80025ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025b2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025c0:	230c      	movs	r3, #12
 80025c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <HAL_FMC_MspInit+0x11c>)
 80025ca:	f004 fa0d 	bl	80069e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 80025ce:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80025d2:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e0:	230c      	movs	r3, #12
 80025e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	480a      	ldr	r0, [pc, #40]	; (8002614 <HAL_FMC_MspInit+0x120>)
 80025ea:	f004 f9fd 	bl	80069e8 <HAL_GPIO_Init>
 80025ee:	e000      	b.n	80025f2 <HAL_FMC_MspInit+0xfe>
    return;
 80025f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200043c4 	.word	0x200043c4
 80025fc:	40023800 	.word	0x40023800
 8002600:	40021000 	.word	0x40021000
 8002604:	40021800 	.word	0x40021800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021c00 	.word	0x40021c00

08002618 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002620:	f7ff ff68 	bl	80024f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <MX_FREERTOS_Init+0x18>)
 8002632:	2100      	movs	r1, #0
 8002634:	4804      	ldr	r0, [pc, #16]	; (8002648 <MX_FREERTOS_Init+0x1c>)
 8002636:	f009 f9cf 	bl	800b9d8 <osThreadNew>
 800263a:	4603      	mov	r3, r0
 800263c:	4a03      	ldr	r2, [pc, #12]	; (800264c <MX_FREERTOS_Init+0x20>)
 800263e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	08012064 	.word	0x08012064
 8002648:	08002651 	.word	0x08002651
 800264c:	200043c8 	.word	0x200043c8

08002650 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f009 fa63 	bl	800bb24 <osDelay>
 800265e:	e7fb      	b.n	8002658 <StartDefaultTask+0x8>

08002660 <fruit_launch>:
		slice4_1, slice4_2, slice5_1, slice5_2;

/* Functions definition ------------------------------------------------------*/

//main function that launches fruits randomly
void fruit_launch() {
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	//generate new random launch sequence
	int n = (rand() % 5) + 1;
 8002666:	f00c fad7 	bl	800ec18 <rand>
 800266a:	4601      	mov	r1, r0
 800266c:	4b56      	ldr	r3, [pc, #344]	; (80027c8 <fruit_launch+0x168>)
 800266e:	fb83 2301 	smull	r2, r3, r3, r1
 8002672:	105a      	asrs	r2, r3, #1
 8002674:	17cb      	asrs	r3, r1, #31
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	1aca      	subs	r2, r1, r3
 8002680:	1c53      	adds	r3, r2, #1
 8002682:	607b      	str	r3, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 200));
 8002684:	f00c fac8 	bl	800ec18 <rand>
 8002688:	4602      	mov	r2, r0
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <fruit_launch+0x16c>)
 800268c:	fb83 1302 	smull	r1, r3, r3, r2
 8002690:	1199      	asrs	r1, r3, #6
 8002692:	17d3      	asrs	r3, r2, #31
 8002694:	1acb      	subs	r3, r1, r3
 8002696:	21c8      	movs	r1, #200	; 0xc8
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	33c8      	adds	r3, #200	; 0xc8
 80026a0:	461a      	mov	r2, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a49      	ldr	r2, [pc, #292]	; (80027d0 <fruit_launch+0x170>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00a fc1a 	bl	800ceec <vTaskDelay>
	launch_fruit_random(&fruit1);
 80026b8:	4846      	ldr	r0, [pc, #280]	; (80027d4 <fruit_launch+0x174>)
 80026ba:	f000 f921 	bl	8002900 <launch_fruit_random>
	if (n > 1) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	dd1c      	ble.n	80026fe <fruit_launch+0x9e>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 100));
 80026c4:	f00c faa8 	bl	800ec18 <rand>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b40      	ldr	r3, [pc, #256]	; (80027cc <fruit_launch+0x16c>)
 80026cc:	fb83 1302 	smull	r1, r3, r3, r2
 80026d0:	1199      	asrs	r1, r3, #6
 80026d2:	17d3      	asrs	r3, r2, #31
 80026d4:	1acb      	subs	r3, r1, r3
 80026d6:	21c8      	movs	r1, #200	; 0xc8
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	3364      	adds	r3, #100	; 0x64
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	4a39      	ldr	r2, [pc, #228]	; (80027d0 <fruit_launch+0x170>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00a fbfa 	bl	800ceec <vTaskDelay>
		launch_fruit_random(&fruit2);
 80026f8:	4837      	ldr	r0, [pc, #220]	; (80027d8 <fruit_launch+0x178>)
 80026fa:	f000 f901 	bl	8002900 <launch_fruit_random>
	}
	if (n > 2) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	dd1c      	ble.n	800273e <fruit_launch+0xde>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 100));
 8002704:	f00c fa88 	bl	800ec18 <rand>
 8002708:	4602      	mov	r2, r0
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <fruit_launch+0x16c>)
 800270c:	fb83 1302 	smull	r1, r3, r3, r2
 8002710:	1199      	asrs	r1, r3, #6
 8002712:	17d3      	asrs	r3, r2, #31
 8002714:	1acb      	subs	r3, r1, r3
 8002716:	21c8      	movs	r1, #200	; 0xc8
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	3364      	adds	r3, #100	; 0x64
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <fruit_launch+0x170>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fbda 	bl	800ceec <vTaskDelay>
		launch_fruit_random(&fruit3);
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <fruit_launch+0x17c>)
 800273a:	f000 f8e1 	bl	8002900 <launch_fruit_random>
	}
	if (n > 3) {
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b03      	cmp	r3, #3
 8002742:	dd1c      	ble.n	800277e <fruit_launch+0x11e>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 100));
 8002744:	f00c fa68 	bl	800ec18 <rand>
 8002748:	4602      	mov	r2, r0
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <fruit_launch+0x16c>)
 800274c:	fb83 1302 	smull	r1, r3, r3, r2
 8002750:	1199      	asrs	r1, r3, #6
 8002752:	17d3      	asrs	r3, r2, #31
 8002754:	1acb      	subs	r3, r1, r3
 8002756:	21c8      	movs	r1, #200	; 0xc8
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	3364      	adds	r3, #100	; 0x64
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <fruit_launch+0x170>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4618      	mov	r0, r3
 8002774:	f00a fbba 	bl	800ceec <vTaskDelay>
		launch_fruit_random(&fruit4);
 8002778:	4819      	ldr	r0, [pc, #100]	; (80027e0 <fruit_launch+0x180>)
 800277a:	f000 f8c1 	bl	8002900 <launch_fruit_random>
	}
	if (n > 4) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b04      	cmp	r3, #4
 8002782:	dd1c      	ble.n	80027be <fruit_launch+0x15e>
		vTaskDelay(pdMS_TO_TICKS((rand() % 200) + 100));
 8002784:	f00c fa48 	bl	800ec18 <rand>
 8002788:	4602      	mov	r2, r0
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <fruit_launch+0x16c>)
 800278c:	fb83 1302 	smull	r1, r3, r3, r2
 8002790:	1199      	asrs	r1, r3, #6
 8002792:	17d3      	asrs	r3, r2, #31
 8002794:	1acb      	subs	r3, r1, r3
 8002796:	21c8      	movs	r1, #200	; 0xc8
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	3364      	adds	r3, #100	; 0x64
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <fruit_launch+0x170>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	4618      	mov	r0, r3
 80027b4:	f00a fb9a 	bl	800ceec <vTaskDelay>
		launch_fruit_random(&fruit5);
 80027b8:	480a      	ldr	r0, [pc, #40]	; (80027e4 <fruit_launch+0x184>)
 80027ba:	f000 f8a1 	bl	8002900 <launch_fruit_random>
	}
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	66666667 	.word	0x66666667
 80027cc:	51eb851f 	.word	0x51eb851f
 80027d0:	10624dd3 	.word	0x10624dd3
 80027d4:	200043cc 	.word	0x200043cc
 80027d8:	200043e4 	.word	0x200043e4
 80027dc:	200043fc 	.word	0x200043fc
 80027e0:	20004414 	.word	0x20004414
 80027e4:	2000442c 	.word	0x2000442c

080027e8 <fruit_control>:

//main function that controls all fruit flight paths
void fruit_control() {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	//update position
	if (fruit1.type != off)
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <fruit_control+0xdc>)
 80027ee:	7d1b      	ldrb	r3, [r3, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <fruit_control+0x12>
		launch_fruit_physics_update(&fruit1);
 80027f4:	4833      	ldr	r0, [pc, #204]	; (80028c4 <fruit_control+0xdc>)
 80027f6:	f000 f8df 	bl	80029b8 <launch_fruit_physics_update>
	if (fruit2.type != off)
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <fruit_control+0xe0>)
 80027fc:	7d1b      	ldrb	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <fruit_control+0x20>
		launch_fruit_physics_update(&fruit2);
 8002802:	4831      	ldr	r0, [pc, #196]	; (80028c8 <fruit_control+0xe0>)
 8002804:	f000 f8d8 	bl	80029b8 <launch_fruit_physics_update>
	if (fruit3.type != off)
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <fruit_control+0xe4>)
 800280a:	7d1b      	ldrb	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <fruit_control+0x2e>
		launch_fruit_physics_update(&fruit3);
 8002810:	482e      	ldr	r0, [pc, #184]	; (80028cc <fruit_control+0xe4>)
 8002812:	f000 f8d1 	bl	80029b8 <launch_fruit_physics_update>
	if (fruit4.type != off)
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <fruit_control+0xe8>)
 8002818:	7d1b      	ldrb	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <fruit_control+0x3c>
		launch_fruit_physics_update(&fruit4);
 800281e:	482c      	ldr	r0, [pc, #176]	; (80028d0 <fruit_control+0xe8>)
 8002820:	f000 f8ca 	bl	80029b8 <launch_fruit_physics_update>
	if (fruit5.type != off)
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <fruit_control+0xec>)
 8002826:	7d1b      	ldrb	r3, [r3, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <fruit_control+0x4a>
		launch_fruit_physics_update(&fruit5);
 800282c:	4829      	ldr	r0, [pc, #164]	; (80028d4 <fruit_control+0xec>)
 800282e:	f000 f8c3 	bl	80029b8 <launch_fruit_physics_update>

	if (slice1_1.type != off)
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <fruit_control+0xf0>)
 8002834:	7e1b      	ldrb	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <fruit_control+0x58>
	    slice_physics_update(&slice1_1);
 800283a:	4827      	ldr	r0, [pc, #156]	; (80028d8 <fruit_control+0xf0>)
 800283c:	f000 fca8 	bl	8003190 <slice_physics_update>
	if (slice1_2.type != off)
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <fruit_control+0xf4>)
 8002842:	7e1b      	ldrb	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <fruit_control+0x66>
	    slice_physics_update(&slice1_2);
 8002848:	4824      	ldr	r0, [pc, #144]	; (80028dc <fruit_control+0xf4>)
 800284a:	f000 fca1 	bl	8003190 <slice_physics_update>
	if (slice2_1.type != off)
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <fruit_control+0xf8>)
 8002850:	7e1b      	ldrb	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <fruit_control+0x74>
	    slice_physics_update(&slice2_1);
 8002856:	4822      	ldr	r0, [pc, #136]	; (80028e0 <fruit_control+0xf8>)
 8002858:	f000 fc9a 	bl	8003190 <slice_physics_update>
	if (slice2_2.type != off)
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <fruit_control+0xfc>)
 800285e:	7e1b      	ldrb	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <fruit_control+0x82>
	    slice_physics_update(&slice2_2);
 8002864:	481f      	ldr	r0, [pc, #124]	; (80028e4 <fruit_control+0xfc>)
 8002866:	f000 fc93 	bl	8003190 <slice_physics_update>
	if (slice3_1.type != off)
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <fruit_control+0x100>)
 800286c:	7e1b      	ldrb	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <fruit_control+0x90>
	    slice_physics_update(&slice3_1);
 8002872:	481d      	ldr	r0, [pc, #116]	; (80028e8 <fruit_control+0x100>)
 8002874:	f000 fc8c 	bl	8003190 <slice_physics_update>
	if (slice3_2.type != off)
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <fruit_control+0x104>)
 800287a:	7e1b      	ldrb	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <fruit_control+0x9e>
	    slice_physics_update(&slice3_2);
 8002880:	481a      	ldr	r0, [pc, #104]	; (80028ec <fruit_control+0x104>)
 8002882:	f000 fc85 	bl	8003190 <slice_physics_update>
	if (slice4_1.type != off)
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <fruit_control+0x108>)
 8002888:	7e1b      	ldrb	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <fruit_control+0xac>
	    slice_physics_update(&slice4_1);
 800288e:	4818      	ldr	r0, [pc, #96]	; (80028f0 <fruit_control+0x108>)
 8002890:	f000 fc7e 	bl	8003190 <slice_physics_update>
	if (slice4_2.type != off)
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <fruit_control+0x10c>)
 8002896:	7e1b      	ldrb	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <fruit_control+0xba>
	    slice_physics_update(&slice4_2);
 800289c:	4815      	ldr	r0, [pc, #84]	; (80028f4 <fruit_control+0x10c>)
 800289e:	f000 fc77 	bl	8003190 <slice_physics_update>
	if (slice5_1.type != off)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <fruit_control+0x110>)
 80028a4:	7e1b      	ldrb	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <fruit_control+0xc8>
	    slice_physics_update(&slice5_1);
 80028aa:	4813      	ldr	r0, [pc, #76]	; (80028f8 <fruit_control+0x110>)
 80028ac:	f000 fc70 	bl	8003190 <slice_physics_update>
	if (slice5_2.type != off)
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <fruit_control+0x114>)
 80028b2:	7e1b      	ldrb	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <fruit_control+0xd6>
	    slice_physics_update(&slice5_2);
 80028b8:	4810      	ldr	r0, [pc, #64]	; (80028fc <fruit_control+0x114>)
 80028ba:	f000 fc69 	bl	8003190 <slice_physics_update>

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200043cc 	.word	0x200043cc
 80028c8:	200043e4 	.word	0x200043e4
 80028cc:	200043fc 	.word	0x200043fc
 80028d0:	20004414 	.word	0x20004414
 80028d4:	2000442c 	.word	0x2000442c
 80028d8:	20004444 	.word	0x20004444
 80028dc:	20004460 	.word	0x20004460
 80028e0:	2000447c 	.word	0x2000447c
 80028e4:	20004498 	.word	0x20004498
 80028e8:	200044b4 	.word	0x200044b4
 80028ec:	200044d0 	.word	0x200044d0
 80028f0:	200044ec 	.word	0x200044ec
 80028f4:	20004508 	.word	0x20004508
 80028f8:	20004524 	.word	0x20004524
 80028fc:	20004540 	.word	0x20004540

08002900 <launch_fruit_random>:

//function to launch a fruit in a random way
void launch_fruit_random(struct Fruit *fruit) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	fruit->x = ((float) rand() / RAND_MAX) * (400) + 600;
 8002908:	f00c f986 	bl	800ec18 <rand>
 800290c:	ee07 0a90 	vmov	s15, r0
 8002910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002914:	eddf 6a22 	vldr	s13, [pc, #136]	; 80029a0 <launch_fruit_random+0xa0>
 8002918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80029a4 <launch_fruit_random+0xa4>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80029a8 <launch_fruit_random+0xa8>
 8002928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	edc3 7a00 	vstr	s15, [r3]
	fruit->y = 0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
	fruit->t = 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
	fruit->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 8002942:	f00c f969 	bl	800ec18 <rand>
 8002946:	ee07 0a90 	vmov	s15, r0
 800294a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80029a0 <launch_fruit_random+0xa0>
 8002952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002956:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80029ac <launch_fruit_random+0xac>
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80029a4 <launch_fruit_random+0xa4>
 8002962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	edc3 7a02 	vstr	s15, [r3, #8]
	fruit->speed_y = 1400.0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <launch_fruit_random+0xb0>)
 8002970:	60da      	str	r2, [r3, #12]
	fruit->type = (rand() % 5) + 1;
 8002972:	f00c f951 	bl	800ec18 <rand>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <launch_fruit_random+0xb4>)
 800297a:	fb83 1302 	smull	r1, r3, r3, r2
 800297e:	1059      	asrs	r1, r3, #1
 8002980:	17d3      	asrs	r3, r2, #31
 8002982:	1ac9      	subs	r1, r1, r3
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	1ad1      	subs	r1, r2, r3
 800298c:	b2cb      	uxtb	r3, r1
 800298e:	3301      	adds	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	751a      	strb	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	4f000000 	.word	0x4f000000
 80029a4:	43c80000 	.word	0x43c80000
 80029a8:	44160000 	.word	0x44160000
 80029ac:	44480000 	.word	0x44480000
 80029b0:	44af0000 	.word	0x44af0000
 80029b4:	66666667 	.word	0x66666667

080029b8 <launch_fruit_physics_update>:

//function to update the flight path
void launch_fruit_physics_update(struct Fruit *fruit) {
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	const float acc_y = -1500; //mm/s^2 lower than earths gravity
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <launch_fruit_physics_update+0xe0>)
 80029c2:	60fb      	str	r3, [r7, #12]
	const float t = fruit->t + 0.01; //10ms
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ce:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002a90 <launch_fruit_physics_update+0xd8>
 80029d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029da:	edc7 7a02 	vstr	s15, [r7, #8]
	//calcola spostamento in x
	fruit->x = fruit->speed_x * 0.01 + fruit->x; //MRU
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029e8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002a90 <launch_fruit_physics_update+0xd8>
 80029ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	edc3 7a00 	vstr	s15, [r3]

	//calcola spostamento in y
	fruit->y = 0.5 * acc_y * t * t + fruit->speed_y * t; //MRUA
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002a14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edc3 7a01 	vstr	s15, [r3, #4]

	//update t
	fruit->t = fruit->t + 0.01;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a5a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002a90 <launch_fruit_physics_update+0xd8>
 8002a5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edc3 7a04 	vstr	s15, [r3, #16]

	//control if "landed"
	if ((int) fruit->y < 0) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a76:	ee17 3a90 	vmov	r3, s15
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da02      	bge.n	8002a84 <launch_fruit_physics_update+0xcc>
		fruit->type = off;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	751a      	strb	r2, [r3, #20]
	}

}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	47ae147b 	.word	0x47ae147b
 8002a94:	3f847ae1 	.word	0x3f847ae1
 8002a98:	c4bb8000 	.word	0xc4bb8000

08002a9c <fruit_slice_control>:

//function to detect fruits slices
void fruit_slice_control() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
	if (touch_points_x[0] != 0 && touch_points_y[0] != 0
 8002aa2:	4bd0      	ldr	r3, [pc, #832]	; (8002de4 <fruit_slice_control+0x348>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8209 	beq.w	8002ebe <fruit_slice_control+0x422>
 8002aac:	4bce      	ldr	r3, [pc, #824]	; (8002de8 <fruit_slice_control+0x34c>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8204 	beq.w	8002ebe <fruit_slice_control+0x422>
			&& touch_points_x[1] != 0 && touch_points_y[1] != 0
 8002ab6:	4bcb      	ldr	r3, [pc, #812]	; (8002de4 <fruit_slice_control+0x348>)
 8002ab8:	885b      	ldrh	r3, [r3, #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 81ff 	beq.w	8002ebe <fruit_slice_control+0x422>
 8002ac0:	4bc9      	ldr	r3, [pc, #804]	; (8002de8 <fruit_slice_control+0x34c>)
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 81fa 	beq.w	8002ebe <fruit_slice_control+0x422>
			&& touch_points_x[2] != 0 && touch_points_y[2] != 0) {
 8002aca:	4bc6      	ldr	r3, [pc, #792]	; (8002de4 <fruit_slice_control+0x348>)
 8002acc:	889b      	ldrh	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 81f5 	beq.w	8002ebe <fruit_slice_control+0x422>
 8002ad4:	4bc4      	ldr	r3, [pc, #784]	; (8002de8 <fruit_slice_control+0x34c>)
 8002ad6:	889b      	ldrh	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 81f0 	beq.w	8002ebe <fruit_slice_control+0x422>

		//convert screen point to game points
		float x1 = touch_points_x[0] * 2;
 8002ade:	4bc1      	ldr	r3, [pc, #772]	; (8002de4 <fruit_slice_control+0x348>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aec:	edc7 7a05 	vstr	s15, [r7, #20]
		float y1 = (Yresolution - touch_points_y[0]) * 2;
 8002af0:	4bbd      	ldr	r3, [pc, #756]	; (8002de8 <fruit_slice_control+0x34c>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	f5c3 73ec 	rsb	r3, r3, #472	; 0x1d8
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b02:	edc7 7a04 	vstr	s15, [r7, #16]
		float x2 = touch_points_x[1] * 2;
 8002b06:	4bb7      	ldr	r3, [pc, #732]	; (8002de4 <fruit_slice_control+0x348>)
 8002b08:	885b      	ldrh	r3, [r3, #2]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	edc7 7a03 	vstr	s15, [r7, #12]
		float y2 = (Yresolution - touch_points_y[1]) * 2;
 8002b18:	4bb3      	ldr	r3, [pc, #716]	; (8002de8 <fruit_slice_control+0x34c>)
 8002b1a:	885b      	ldrh	r3, [r3, #2]
 8002b1c:	f5c3 73ec 	rsb	r3, r3, #472	; 0x1d8
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2a:	edc7 7a02 	vstr	s15, [r7, #8]
		float x3 = touch_points_x[2] * 2;
 8002b2e:	4bad      	ldr	r3, [pc, #692]	; (8002de4 <fruit_slice_control+0x348>)
 8002b30:	889b      	ldrh	r3, [r3, #4]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	edc7 7a01 	vstr	s15, [r7, #4]
		float y3 = (Yresolution - touch_points_y[2]) * 2;
 8002b40:	4ba9      	ldr	r3, [pc, #676]	; (8002de8 <fruit_slice_control+0x34c>)
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	f5c3 73ec 	rsb	r3, r3, #472	; 0x1d8
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b52:	edc7 7a00 	vstr	s15, [r7]

		if (fruit1.type != off) {
 8002b56:	4ba5      	ldr	r3, [pc, #660]	; (8002dec <fruit_slice_control+0x350>)
 8002b58:	7d1b      	ldrb	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d052      	beq.n	8002c04 <fruit_slice_control+0x168>
			if (doesIntersect(x1, x2, y1, y2, fruit1.x, fruit1.y)
 8002b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b66:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b6a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002b6e:	edd7 5a04 	vldr	s11, [r7, #16]
 8002b72:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002b76:	edd7 5a02 	vldr	s11, [r7, #8]
 8002b7a:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002b7e:	4b9b      	ldr	r3, [pc, #620]	; (8002dec <fruit_slice_control+0x350>)
 8002b80:	edd3 5a00 	vldr	s11, [r3]
 8002b84:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002b88:	4b98      	ldr	r3, [pc, #608]	; (8002dec <fruit_slice_control+0x350>)
 8002b8a:	edd3 5a01 	vldr	s11, [r3, #4]
 8002b8e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002b92:	eeb0 1b46 	vmov.f64	d1, d6
 8002b96:	eeb0 0b47 	vmov.f64	d0, d7
 8002b9a:	f000 f99d 	bl	8002ed8 <doesIntersect>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12a      	bne.n	8002bfa <fruit_slice_control+0x15e>
					|| doesIntersect(x2, x3, y2, y3, fruit1.x + 50,
 8002ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8002bb0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002bb4:	edd7 5a02 	vldr	s11, [r7, #8]
 8002bb8:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002bbc:	edd7 5a00 	vldr	s11, [r7]
 8002bc0:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002bc4:	4b89      	ldr	r3, [pc, #548]	; (8002dec <fruit_slice_control+0x350>)
 8002bc6:	edd3 5a00 	vldr	s11, [r3]
 8002bca:	ed9f 5a89 	vldr	s10, [pc, #548]	; 8002df0 <fruit_slice_control+0x354>
 8002bce:	ee75 5a85 	vadd.f32	s11, s11, s10
 8002bd2:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
							fruit1.y + 50))
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <fruit_slice_control+0x350>)
 8002bd8:	edd3 5a01 	vldr	s11, [r3, #4]
 8002bdc:	ed9f 5a84 	vldr	s10, [pc, #528]	; 8002df0 <fruit_slice_control+0x354>
 8002be0:	ee75 5a85 	vadd.f32	s11, s11, s10
					|| doesIntersect(x2, x3, y2, y3, fruit1.x + 50,
 8002be4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002be8:	eeb0 1b46 	vmov.f64	d1, d6
 8002bec:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf0:	f000 f972 	bl	8002ed8 <doesIntersect>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <fruit_slice_control+0x168>
				slice_fruit(&fruit1, &slice1_1, &slice1_2);
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <fruit_slice_control+0x358>)
 8002bfc:	497e      	ldr	r1, [pc, #504]	; (8002df8 <fruit_slice_control+0x35c>)
 8002bfe:	487b      	ldr	r0, [pc, #492]	; (8002dec <fruit_slice_control+0x350>)
 8002c00:	f000 fa50 	bl	80030a4 <slice_fruit>
		}
		if (fruit2.type != off) {
 8002c04:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <fruit_slice_control+0x360>)
 8002c06:	7d1b      	ldrb	r3, [r3, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d04a      	beq.n	8002ca2 <fruit_slice_control+0x206>
			if (doesIntersect(x1, x2, y1, y2, fruit2.x, fruit2.y)
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c14:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c18:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c1c:	edd7 5a04 	vldr	s11, [r7, #16]
 8002c20:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002c24:	edd7 5a02 	vldr	s11, [r7, #8]
 8002c28:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002c2c:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <fruit_slice_control+0x360>)
 8002c2e:	edd3 5a00 	vldr	s11, [r3]
 8002c32:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <fruit_slice_control+0x360>)
 8002c38:	edd3 5a01 	vldr	s11, [r3, #4]
 8002c3c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002c40:	eeb0 1b46 	vmov.f64	d1, d6
 8002c44:	eeb0 0b47 	vmov.f64	d0, d7
 8002c48:	f000 f946 	bl	8002ed8 <doesIntersect>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d122      	bne.n	8002c98 <fruit_slice_control+0x1fc>
					|| doesIntersect(x2, x3, y2, y3, fruit2.x, fruit2.y))
 8002c52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c5a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c5e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002c62:	edd7 5a02 	vldr	s11, [r7, #8]
 8002c66:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002c6a:	edd7 5a00 	vldr	s11, [r7]
 8002c6e:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <fruit_slice_control+0x360>)
 8002c74:	edd3 5a00 	vldr	s11, [r3]
 8002c78:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002c7c:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <fruit_slice_control+0x360>)
 8002c7e:	edd3 5a01 	vldr	s11, [r3, #4]
 8002c82:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002c86:	eeb0 1b46 	vmov.f64	d1, d6
 8002c8a:	eeb0 0b47 	vmov.f64	d0, d7
 8002c8e:	f000 f923 	bl	8002ed8 <doesIntersect>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <fruit_slice_control+0x206>
				slice_fruit(&fruit2, &slice2_1, &slice2_2);
 8002c98:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <fruit_slice_control+0x364>)
 8002c9a:	495a      	ldr	r1, [pc, #360]	; (8002e04 <fruit_slice_control+0x368>)
 8002c9c:	4857      	ldr	r0, [pc, #348]	; (8002dfc <fruit_slice_control+0x360>)
 8002c9e:	f000 fa01 	bl	80030a4 <slice_fruit>
		}
		if (fruit3.type != off) {
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <fruit_slice_control+0x36c>)
 8002ca4:	7d1b      	ldrb	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04a      	beq.n	8002d40 <fruit_slice_control+0x2a4>
			if (doesIntersect(x1, x2, y1, y2, fruit3.x, fruit3.y)
 8002caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cb2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cb6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002cba:	edd7 5a04 	vldr	s11, [r7, #16]
 8002cbe:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002cc2:	edd7 5a02 	vldr	s11, [r7, #8]
 8002cc6:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002cca:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <fruit_slice_control+0x36c>)
 8002ccc:	edd3 5a00 	vldr	s11, [r3]
 8002cd0:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <fruit_slice_control+0x36c>)
 8002cd6:	edd3 5a01 	vldr	s11, [r3, #4]
 8002cda:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002cde:	eeb0 1b46 	vmov.f64	d1, d6
 8002ce2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ce6:	f000 f8f7 	bl	8002ed8 <doesIntersect>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d122      	bne.n	8002d36 <fruit_slice_control+0x29a>
					|| doesIntersect(x2, x3, y2, y3, fruit2.x, fruit2.y))
 8002cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf8:	edd7 6a01 	vldr	s13, [r7, #4]
 8002cfc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d00:	edd7 5a02 	vldr	s11, [r7, #8]
 8002d04:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002d08:	edd7 5a00 	vldr	s11, [r7]
 8002d0c:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002d10:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <fruit_slice_control+0x360>)
 8002d12:	edd3 5a00 	vldr	s11, [r3]
 8002d16:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002d1a:	4b38      	ldr	r3, [pc, #224]	; (8002dfc <fruit_slice_control+0x360>)
 8002d1c:	edd3 5a01 	vldr	s11, [r3, #4]
 8002d20:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002d24:	eeb0 1b46 	vmov.f64	d1, d6
 8002d28:	eeb0 0b47 	vmov.f64	d0, d7
 8002d2c:	f000 f8d4 	bl	8002ed8 <doesIntersect>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <fruit_slice_control+0x2a4>
				slice_fruit(&fruit3, &slice3_1, &slice3_2);
 8002d36:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <fruit_slice_control+0x370>)
 8002d38:	4935      	ldr	r1, [pc, #212]	; (8002e10 <fruit_slice_control+0x374>)
 8002d3a:	4833      	ldr	r0, [pc, #204]	; (8002e08 <fruit_slice_control+0x36c>)
 8002d3c:	f000 f9b2 	bl	80030a4 <slice_fruit>
		}
		if (fruit4.type != off) {
 8002d40:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <fruit_slice_control+0x378>)
 8002d42:	7d1b      	ldrb	r3, [r3, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d04a      	beq.n	8002dde <fruit_slice_control+0x342>
			if (doesIntersect(x1, x2, y1, y2, fruit4.x, fruit4.y)
 8002d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d50:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d54:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d58:	edd7 5a04 	vldr	s11, [r7, #16]
 8002d5c:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002d60:	edd7 5a02 	vldr	s11, [r7, #8]
 8002d64:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <fruit_slice_control+0x378>)
 8002d6a:	edd3 5a00 	vldr	s11, [r3]
 8002d6e:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <fruit_slice_control+0x378>)
 8002d74:	edd3 5a01 	vldr	s11, [r3, #4]
 8002d78:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002d7c:	eeb0 1b46 	vmov.f64	d1, d6
 8002d80:	eeb0 0b47 	vmov.f64	d0, d7
 8002d84:	f000 f8a8 	bl	8002ed8 <doesIntersect>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d122      	bne.n	8002dd4 <fruit_slice_control+0x338>
					|| doesIntersect(x2, x3, y2, y3, fruit2.x, fruit2.y))
 8002d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d96:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d9a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002d9e:	edd7 5a02 	vldr	s11, [r7, #8]
 8002da2:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002da6:	edd7 5a00 	vldr	s11, [r7]
 8002daa:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <fruit_slice_control+0x360>)
 8002db0:	edd3 5a00 	vldr	s11, [r3]
 8002db4:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <fruit_slice_control+0x360>)
 8002dba:	edd3 5a01 	vldr	s11, [r3, #4]
 8002dbe:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002dc2:	eeb0 1b46 	vmov.f64	d1, d6
 8002dc6:	eeb0 0b47 	vmov.f64	d0, d7
 8002dca:	f000 f885 	bl	8002ed8 <doesIntersect>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <fruit_slice_control+0x342>
				slice_fruit(&fruit4, &slice4_1, &slice4_2);
 8002dd4:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <fruit_slice_control+0x37c>)
 8002dd6:	4911      	ldr	r1, [pc, #68]	; (8002e1c <fruit_slice_control+0x380>)
 8002dd8:	480e      	ldr	r0, [pc, #56]	; (8002e14 <fruit_slice_control+0x378>)
 8002dda:	f000 f963 	bl	80030a4 <slice_fruit>
		}
		if (fruit5.type != off) {
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <fruit_slice_control+0x384>)
 8002de0:	7d1b      	ldrb	r3, [r3, #20]
 8002de2:	e01f      	b.n	8002e24 <fruit_slice_control+0x388>
 8002de4:	200047d4 	.word	0x200047d4
 8002de8:	200047e8 	.word	0x200047e8
 8002dec:	200043cc 	.word	0x200043cc
 8002df0:	42480000 	.word	0x42480000
 8002df4:	20004460 	.word	0x20004460
 8002df8:	20004444 	.word	0x20004444
 8002dfc:	200043e4 	.word	0x200043e4
 8002e00:	20004498 	.word	0x20004498
 8002e04:	2000447c 	.word	0x2000447c
 8002e08:	200043fc 	.word	0x200043fc
 8002e0c:	200044d0 	.word	0x200044d0
 8002e10:	200044b4 	.word	0x200044b4
 8002e14:	20004414 	.word	0x20004414
 8002e18:	20004508 	.word	0x20004508
 8002e1c:	200044ec 	.word	0x200044ec
 8002e20:	2000442c 	.word	0x2000442c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d04a      	beq.n	8002ebe <fruit_slice_control+0x422>
			if (doesIntersect(x1, x2, y1, y2, fruit5.x, fruit5.y)
 8002e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e30:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e34:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e38:	edd7 5a04 	vldr	s11, [r7, #16]
 8002e3c:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002e40:	edd7 5a02 	vldr	s11, [r7, #8]
 8002e44:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <fruit_slice_control+0x42c>)
 8002e4a:	edd3 5a00 	vldr	s11, [r3]
 8002e4e:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002e52:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <fruit_slice_control+0x42c>)
 8002e54:	edd3 5a01 	vldr	s11, [r3, #4]
 8002e58:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002e5c:	eeb0 1b46 	vmov.f64	d1, d6
 8002e60:	eeb0 0b47 	vmov.f64	d0, d7
 8002e64:	f000 f838 	bl	8002ed8 <doesIntersect>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d122      	bne.n	8002eb4 <fruit_slice_control+0x418>
					|| doesIntersect(x2, x3, y2, y3, fruit2.x, fruit2.y))
 8002e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e76:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e7a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e7e:	edd7 5a02 	vldr	s11, [r7, #8]
 8002e82:	eeb7 2ae5 	vcvt.f64.f32	d2, s11
 8002e86:	edd7 5a00 	vldr	s11, [r7]
 8002e8a:	eeb7 3ae5 	vcvt.f64.f32	d3, s11
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <fruit_slice_control+0x430>)
 8002e90:	edd3 5a00 	vldr	s11, [r3]
 8002e94:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <fruit_slice_control+0x430>)
 8002e9a:	edd3 5a01 	vldr	s11, [r3, #4]
 8002e9e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002ea2:	eeb0 1b46 	vmov.f64	d1, d6
 8002ea6:	eeb0 0b47 	vmov.f64	d0, d7
 8002eaa:	f000 f815 	bl	8002ed8 <doesIntersect>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <fruit_slice_control+0x422>
				slice_fruit(&fruit5, &slice5_1, &slice5_2);
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <fruit_slice_control+0x434>)
 8002eb6:	4907      	ldr	r1, [pc, #28]	; (8002ed4 <fruit_slice_control+0x438>)
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <fruit_slice_control+0x42c>)
 8002eba:	f000 f8f3 	bl	80030a4 <slice_fruit>
		}

	}

}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	2000442c 	.word	0x2000442c
 8002ecc:	200043e4 	.word	0x200043e4
 8002ed0:	20004540 	.word	0x20004540
 8002ed4:	20004524 	.word	0x20004524

08002ed8 <doesIntersect>:

//intersection control
uint8_t doesIntersect(double x1, double x2, double y1, double y2,
		double centerX, double centerY) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	ed2d 8b04 	vpush	{d8-d9}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002ee6:	ed87 1b08 	vstr	d1, [r7, #32]
 8002eea:	ed87 2b06 	vstr	d2, [r7, #24]
 8002eee:	ed87 3b04 	vstr	d3, [r7, #16]
 8002ef2:	ed87 4b02 	vstr	d4, [r7, #8]
 8002ef6:	ed87 5b00 	vstr	d5, [r7]
	// Calculate the squared distance between the circle center (fruit) and the line (touch sword)
	float d = fabs(
			(y2 - y1) * centerX - (x2 - x1) * centerY + x2 * y1 - y2 * x1)
 8002efa:	ed97 6b04 	vldr	d6, [r7, #16]
 8002efe:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f02:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002f06:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f0e:	ed97 5b08 	vldr	d5, [r7, #32]
 8002f12:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002f16:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002f1a:	ed97 7b00 	vldr	d7, [r7]
 8002f1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002f22:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002f26:	ed97 5b08 	vldr	d5, [r7, #32]
 8002f2a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002f32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f36:	ed97 5b04 	vldr	d5, [r7, #16]
 8002f3a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002f3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002f42:	ee36 7b47 	vsub.f64	d7, d6, d7
	float d = fabs(
 8002f46:	eeb0 8bc7 	vabs.f64	d8, d7
			/ sqrt(pow(y2 - y1, 2) + pow(x2 - x1, 2));
 8002f4a:	ed97 6b04 	vldr	d6, [r7, #16]
 8002f4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002f56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002f5a:	eeb0 0b47 	vmov.f64	d0, d7
 8002f5e:	f00c fefb 	bl	800fd58 <pow>
 8002f62:	eeb0 9b40 	vmov.f64	d9, d0
 8002f66:	ed97 6b08 	vldr	d6, [r7, #32]
 8002f6a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002f6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002f72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002f76:	eeb0 0b47 	vmov.f64	d0, d7
 8002f7a:	f00c feed 	bl	800fd58 <pow>
 8002f7e:	eeb0 7b40 	vmov.f64	d7, d0
 8002f82:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002f86:	eeb0 0b47 	vmov.f64	d0, d7
 8002f8a:	f00c fe91 	bl	800fcb0 <sqrt>
 8002f8e:	eeb0 6b40 	vmov.f64	d6, d0
 8002f92:	ee88 7b06 	vdiv.f64	d7, d8, d6
	float d = fabs(
 8002f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f9a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Check if the distance is less than or equal to the circle radius
	if (d <= FRUIT_RADIUS) {
 8002f9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fa2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80030a0 <doesIntersect+0x1c8>
 8002fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	d869      	bhi.n	8003084 <doesIntersect+0x1ac>
		// Check if the circle is between the two x points
		if ((centerX + FRUIT_RADIUS >= x1 && centerX - FRUIT_RADIUS <= x2)
 8002fb0:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fb4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8003098 <doesIntersect+0x1c0>
 8002fb8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fbc:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002fc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc8:	d80c      	bhi.n	8002fe4 <doesIntersect+0x10c>
 8002fca:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fce:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003098 <doesIntersect+0x1c0>
 8002fd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fd6:	ed97 6b08 	vldr	d6, [r7, #32]
 8002fda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	da19      	bge.n	8003018 <doesIntersect+0x140>
				|| (centerX - FRUIT_RADIUS <= x1 && centerX + FRUIT_RADIUS >= x2)) {
 8002fe4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fe8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8003098 <doesIntersect+0x1c0>
 8002fec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ff0:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	db42      	blt.n	8003084 <doesIntersect+0x1ac>
 8002ffe:	ed97 7b02 	vldr	d7, [r7, #8]
 8003002:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003098 <doesIntersect+0x1c0>
 8003006:	ee37 7b06 	vadd.f64	d7, d7, d6
 800300a:	ed97 6b08 	vldr	d6, [r7, #32]
 800300e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d835      	bhi.n	8003084 <doesIntersect+0x1ac>
			// Check if the circle is between the two y points
			if ((centerY + FRUIT_RADIUS >= y1 && centerY - FRUIT_RADIUS <= y2)
 8003018:	ed97 7b00 	vldr	d7, [r7]
 800301c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8003098 <doesIntersect+0x1c0>
 8003020:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003024:	ed97 6b06 	vldr	d6, [r7, #24]
 8003028:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	d80c      	bhi.n	800304c <doesIntersect+0x174>
 8003032:	ed97 7b00 	vldr	d7, [r7]
 8003036:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8003098 <doesIntersect+0x1c0>
 800303a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800303e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003042:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	da19      	bge.n	8003080 <doesIntersect+0x1a8>
					|| (centerY - FRUIT_RADIUS <= y1
 800304c:	ed97 7b00 	vldr	d7, [r7]
 8003050:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8003098 <doesIntersect+0x1c0>
 8003054:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003058:	ed97 6b06 	vldr	d6, [r7, #24]
 800305c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	db0e      	blt.n	8003084 <doesIntersect+0x1ac>
							&& centerY + FRUIT_RADIUS >= y2)) {
 8003066:	ed97 7b00 	vldr	d7, [r7]
 800306a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003098 <doesIntersect+0x1c0>
 800306e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003072:	ed97 6b04 	vldr	d6, [r7, #16]
 8003076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	d801      	bhi.n	8003084 <doesIntersect+0x1ac>
				return 1; // Intersection
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <doesIntersect+0x1ae>
			}
		}
	}

	return 0; // No intersection
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3738      	adds	r7, #56	; 0x38
 800308a:	46bd      	mov	sp, r7
 800308c:	ecbd 8b04 	vpop	{d8-d9}
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	f3af 8000 	nop.w
 8003098:	00000000 	.word	0x00000000
 800309c:	40468000 	.word	0x40468000
 80030a0:	42340000 	.word	0x42340000

080030a4 <slice_fruit>:

// Slice a Fruit
void slice_fruit(struct Fruit *fruit, struct Slice *slice1,
		struct Slice *slice2){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
	slice1->type = fruit->type;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7d1a      	ldrb	r2, [r3, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	761a      	strb	r2, [r3, #24]
	slice2->type = fruit->type;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	7d1a      	ldrb	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	761a      	strb	r2, [r3, #24]
	fruit->type = off;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	751a      	strb	r2, [r3, #20]

	slice1->x = fruit->x;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	601a      	str	r2, [r3, #0]
	slice2->x = fruit->x;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]

	const float offset = 70;
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <slice_fruit+0xd8>)
 80030d8:	617b      	str	r3, [r7, #20]
	slice1->y0 = fruit->y + offset;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80030e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	edc3 7a02 	vstr	s15, [r3, #8]
	slice2->y0 = fruit->y - offset;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	edc3 7a02 	vstr	s15, [r3, #8]
	slice1->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 8003102:	f00b fd89 	bl	800ec18 <rand>
 8003106:	ee07 0a90 	vmov	s15, r0
 800310a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800310e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003180 <slice_fruit+0xdc>
 8003112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003116:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003184 <slice_fruit+0xe0>
 800311a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003188 <slice_fruit+0xe4>
 8003122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	edc3 7a03 	vstr	s15, [r3, #12]
	slice2->speed_x = ((float) rand() / RAND_MAX) * (400 + 400) - 400;
 800312c:	f00b fd74 	bl	800ec18 <rand>
 8003130:	ee07 0a90 	vmov	s15, r0
 8003134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003138:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003180 <slice_fruit+0xdc>
 800313c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003140:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003184 <slice_fruit+0xe0>
 8003144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003148:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003188 <slice_fruit+0xe4>
 800314c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edc3 7a03 	vstr	s15, [r3, #12]

	slice1->speed_y = 400.0;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <slice_fruit+0xe8>)
 800315a:	611a      	str	r2, [r3, #16]
	slice2->speed_y = 400.0;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0b      	ldr	r2, [pc, #44]	; (800318c <slice_fruit+0xe8>)
 8003160:	611a      	str	r2, [r3, #16]

	slice1->t = 0;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
	slice2->t = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	428c0000 	.word	0x428c0000
 8003180:	4f000000 	.word	0x4f000000
 8003184:	44480000 	.word	0x44480000
 8003188:	43c80000 	.word	0x43c80000
 800318c:	43c80000 	.word	0x43c80000

08003190 <slice_physics_update>:

void slice_physics_update(struct Slice *slice){
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	const float acc_y = -1500; //mm/s^2 lower than earths gravity
 8003198:	4b39      	ldr	r3, [pc, #228]	; (8003280 <slice_physics_update+0xf0>)
 800319a:	60fb      	str	r3, [r7, #12]
	const float t = slice->t + 0.01; //10ms
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	edd3 7a05 	vldr	s15, [r3, #20]
 80031a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031a6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8003278 <slice_physics_update+0xe8>
 80031aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031b2:	edc7 7a02 	vstr	s15, [r7, #8]
	//calcola spostamento in x
	slice->x = slice->speed_x * 0.01 + slice->x; //MRU
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80031bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031c0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8003278 <slice_physics_update+0xe8>
 80031c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	edc3 7a00 	vstr	s15, [r3]

	//calcola spostamento in y
	slice->y = 0.5 * acc_y * t * t + slice->speed_y * t + slice->y0; //MRUA
 80031e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80031ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003204:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	ed93 7a04 	vldr	s14, [r3, #16]
 800320e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800321a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	edd3 7a02 	vldr	s15, [r3, #8]
 8003224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003228:	ee36 7b07 	vadd.f64	d7, d6, d7
 800322c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edc3 7a01 	vstr	s15, [r3, #4]

	//update t
	slice->t = slice->t + 0.01;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edd3 7a05 	vldr	s15, [r3, #20]
 800323c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003240:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003278 <slice_physics_update+0xe8>
 8003244:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003248:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	edc3 7a05 	vstr	s15, [r3, #20]

	//control if "landed"
	if ((int) slice->y < 0) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edd3 7a01 	vldr	s15, [r3, #4]
 8003258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	2b00      	cmp	r3, #0
 8003262:	da02      	bge.n	800326a <slice_physics_update+0xda>
		slice->type = off;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	761a      	strb	r2, [r3, #24]
	}
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	47ae147b 	.word	0x47ae147b
 800327c:	3f847ae1 	.word	0x3f847ae1
 8003280:	c4bb8000 	.word	0xc4bb8000

08003284 <update_screen_game>:
void Print_Touch();
void drawBitmap(uint16_t Xpos, uint16_t Ypos, const uint32_t *bitmap, int rotation);
uint32_t convertToARGB8888(uint32_t originalPixelValue);

/* Functions definition ------------------------------------------------------*/
void update_screen_game() {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
	static uint8_t layer = LTDC_ACTIVE_LAYER_FOREGROUND;
	uint8_t prev_layer = layer;
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <update_screen_game+0x178>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	71fb      	strb	r3, [r7, #7]

	if (layer == LTDC_ACTIVE_LAYER_FOREGROUND)
 8003290:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <update_screen_game+0x178>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d103      	bne.n	80032a0 <update_screen_game+0x1c>
		layer = LTDC_ACTIVE_LAYER_BACKGROUND;
 8003298:	4b58      	ldr	r3, [pc, #352]	; (80033fc <update_screen_game+0x178>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e002      	b.n	80032a6 <update_screen_game+0x22>
	else
		layer = LTDC_ACTIVE_LAYER_FOREGROUND;
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <update_screen_game+0x178>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]

	BSP_LCD_SelectLayer(layer);
 80032a6:	4b55      	ldr	r3, [pc, #340]	; (80033fc <update_screen_game+0x178>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fb90 	bl	80009d0 <BSP_LCD_SelectLayer>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80032b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80032b4:	f7fd fc3c 	bl	8000b30 <BSP_LCD_Clear>
	BSP_LCD_DrawBitmap(0, 0, bg_bmp);
 80032b8:	4a51      	ldr	r2, [pc, #324]	; (8003400 <update_screen_game+0x17c>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fe4f 	bl	8000f60 <BSP_LCD_DrawBitmap>

	//wait DMA finishes transfering data
	while (HAL_DMA2D_GetState(&hdma2d_discovery) == HAL_DMA2D_STATE_BUSY)
 80032c2:	e002      	b.n	80032ca <update_screen_game+0x46>
		vTaskDelay(pdMS_TO_TICKS(1));
 80032c4:	2001      	movs	r0, #1
 80032c6:	f009 fe11 	bl	800ceec <vTaskDelay>
	while (HAL_DMA2D_GetState(&hdma2d_discovery) == HAL_DMA2D_STATE_BUSY)
 80032ca:	484e      	ldr	r0, [pc, #312]	; (8003404 <update_screen_game+0x180>)
 80032cc:	f002 fba8 	bl	8005a20 <HAL_DMA2D_GetState>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d0f6      	beq.n	80032c4 <update_screen_game+0x40>

	if (slice1_1.type != off)
 80032d6:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <update_screen_game+0x184>)
 80032d8:	7e1b      	ldrb	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <update_screen_game+0x62>
		Draw_Slice(&slice1_1, 0);
 80032de:	2100      	movs	r1, #0
 80032e0:	4849      	ldr	r0, [pc, #292]	; (8003408 <update_screen_game+0x184>)
 80032e2:	f000 f985 	bl	80035f0 <Draw_Slice>
	if (slice1_2.type != off)
 80032e6:	4b49      	ldr	r3, [pc, #292]	; (800340c <update_screen_game+0x188>)
 80032e8:	7e1b      	ldrb	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <update_screen_game+0x72>
		Draw_Slice(&slice1_2, 180);
 80032ee:	21b4      	movs	r1, #180	; 0xb4
 80032f0:	4846      	ldr	r0, [pc, #280]	; (800340c <update_screen_game+0x188>)
 80032f2:	f000 f97d 	bl	80035f0 <Draw_Slice>
	if (slice2_1.type != off)
 80032f6:	4b46      	ldr	r3, [pc, #280]	; (8003410 <update_screen_game+0x18c>)
 80032f8:	7e1b      	ldrb	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <update_screen_game+0x82>
		Draw_Slice(&slice2_1, 0);
 80032fe:	2100      	movs	r1, #0
 8003300:	4843      	ldr	r0, [pc, #268]	; (8003410 <update_screen_game+0x18c>)
 8003302:	f000 f975 	bl	80035f0 <Draw_Slice>
	if (slice2_2.type != off)
 8003306:	4b43      	ldr	r3, [pc, #268]	; (8003414 <update_screen_game+0x190>)
 8003308:	7e1b      	ldrb	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <update_screen_game+0x92>
		Draw_Slice(&slice2_2, 180);
 800330e:	21b4      	movs	r1, #180	; 0xb4
 8003310:	4840      	ldr	r0, [pc, #256]	; (8003414 <update_screen_game+0x190>)
 8003312:	f000 f96d 	bl	80035f0 <Draw_Slice>
	if (slice3_1.type != off)
 8003316:	4b40      	ldr	r3, [pc, #256]	; (8003418 <update_screen_game+0x194>)
 8003318:	7e1b      	ldrb	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <update_screen_game+0xa2>
		Draw_Slice(&slice3_1, 0);
 800331e:	2100      	movs	r1, #0
 8003320:	483d      	ldr	r0, [pc, #244]	; (8003418 <update_screen_game+0x194>)
 8003322:	f000 f965 	bl	80035f0 <Draw_Slice>
	if (slice3_2.type != off)
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <update_screen_game+0x198>)
 8003328:	7e1b      	ldrb	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <update_screen_game+0xb2>
		Draw_Slice(&slice3_2, 180);
 800332e:	21b4      	movs	r1, #180	; 0xb4
 8003330:	483a      	ldr	r0, [pc, #232]	; (800341c <update_screen_game+0x198>)
 8003332:	f000 f95d 	bl	80035f0 <Draw_Slice>
	if (slice4_1.type != off)
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <update_screen_game+0x19c>)
 8003338:	7e1b      	ldrb	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <update_screen_game+0xc2>
		Draw_Slice(&slice4_1, 0);
 800333e:	2100      	movs	r1, #0
 8003340:	4837      	ldr	r0, [pc, #220]	; (8003420 <update_screen_game+0x19c>)
 8003342:	f000 f955 	bl	80035f0 <Draw_Slice>
	if (slice4_2.type != off)
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <update_screen_game+0x1a0>)
 8003348:	7e1b      	ldrb	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <update_screen_game+0xd2>
		Draw_Slice(&slice4_2, 180);
 800334e:	21b4      	movs	r1, #180	; 0xb4
 8003350:	4834      	ldr	r0, [pc, #208]	; (8003424 <update_screen_game+0x1a0>)
 8003352:	f000 f94d 	bl	80035f0 <Draw_Slice>
	if (slice5_1.type != off)
 8003356:	4b34      	ldr	r3, [pc, #208]	; (8003428 <update_screen_game+0x1a4>)
 8003358:	7e1b      	ldrb	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <update_screen_game+0xe2>
		Draw_Slice(&slice5_1, 0);
 800335e:	2100      	movs	r1, #0
 8003360:	4831      	ldr	r0, [pc, #196]	; (8003428 <update_screen_game+0x1a4>)
 8003362:	f000 f945 	bl	80035f0 <Draw_Slice>
	if (slice5_2.type != off)
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <update_screen_game+0x1a8>)
 8003368:	7e1b      	ldrb	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <update_screen_game+0xf2>
		Draw_Slice(&slice5_2, 180);
 800336e:	21b4      	movs	r1, #180	; 0xb4
 8003370:	482e      	ldr	r0, [pc, #184]	; (800342c <update_screen_game+0x1a8>)
 8003372:	f000 f93d 	bl	80035f0 <Draw_Slice>

	if (fruit1.type != off)
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <update_screen_game+0x1ac>)
 8003378:	7d1b      	ldrb	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <update_screen_game+0x100>
		Draw_Fruit(&fruit1);
 800337e:	482c      	ldr	r0, [pc, #176]	; (8003430 <update_screen_game+0x1ac>)
 8003380:	f000 f862 	bl	8003448 <Draw_Fruit>
	if (fruit2.type != off)
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <update_screen_game+0x1b0>)
 8003386:	7d1b      	ldrb	r3, [r3, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <update_screen_game+0x10e>
		Draw_Fruit(&fruit2);
 800338c:	4829      	ldr	r0, [pc, #164]	; (8003434 <update_screen_game+0x1b0>)
 800338e:	f000 f85b 	bl	8003448 <Draw_Fruit>
	if (fruit3.type != off)
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <update_screen_game+0x1b4>)
 8003394:	7d1b      	ldrb	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <update_screen_game+0x11c>
		Draw_Fruit(&fruit3);
 800339a:	4827      	ldr	r0, [pc, #156]	; (8003438 <update_screen_game+0x1b4>)
 800339c:	f000 f854 	bl	8003448 <Draw_Fruit>
	if (fruit4.type != off)
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <update_screen_game+0x1b8>)
 80033a2:	7d1b      	ldrb	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <update_screen_game+0x12a>
		Draw_Fruit(&fruit4);
 80033a8:	4824      	ldr	r0, [pc, #144]	; (800343c <update_screen_game+0x1b8>)
 80033aa:	f000 f84d 	bl	8003448 <Draw_Fruit>
	if (fruit5.type != off)
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <update_screen_game+0x1bc>)
 80033b0:	7d1b      	ldrb	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <update_screen_game+0x138>
		Draw_Fruit(&fruit5);
 80033b6:	4822      	ldr	r0, [pc, #136]	; (8003440 <update_screen_game+0x1bc>)
 80033b8:	f000 f846 	bl	8003448 <Draw_Fruit>

	Print_Touch();
 80033bc:	f000 f8ce 	bl	800355c <Print_Touch>

	while (HAL_DMA2D_GetState(&hdma2d_discovery) == HAL_DMA2D_STATE_BUSY)
 80033c0:	e002      	b.n	80033c8 <update_screen_game+0x144>
		vTaskDelay(pdMS_TO_TICKS(1));
 80033c2:	2001      	movs	r0, #1
 80033c4:	f009 fd92 	bl	800ceec <vTaskDelay>
	while (HAL_DMA2D_GetState(&hdma2d_discovery) == HAL_DMA2D_STATE_BUSY)
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <update_screen_game+0x180>)
 80033ca:	f002 fb29 	bl	8005a20 <HAL_DMA2D_GetState>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d0f6      	beq.n	80033c2 <update_screen_game+0x13e>

	vTaskSuspendAll();
 80033d4:	f009 fe34 	bl	800d040 <vTaskSuspendAll>
	BSP_LCD_SetLayerVisible(prev_layer, DISABLE);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fb07 	bl	80009f0 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(layer, ENABLE);
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <update_screen_game+0x178>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fb01 	bl	80009f0 <BSP_LCD_SetLayerVisible>
	xTaskResumeAll();
 80033ee:	f009 fe35 	bl	800d05c <xTaskResumeAll>

}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000038 	.word	0x20000038
 8003400:	0803e1a0 	.word	0x0803e1a0
 8003404:	20000130 	.word	0x20000130
 8003408:	20004444 	.word	0x20004444
 800340c:	20004460 	.word	0x20004460
 8003410:	2000447c 	.word	0x2000447c
 8003414:	20004498 	.word	0x20004498
 8003418:	200044b4 	.word	0x200044b4
 800341c:	200044d0 	.word	0x200044d0
 8003420:	200044ec 	.word	0x200044ec
 8003424:	20004508 	.word	0x20004508
 8003428:	20004524 	.word	0x20004524
 800342c:	20004540 	.word	0x20004540
 8003430:	200043cc 	.word	0x200043cc
 8003434:	200043e4 	.word	0x200043e4
 8003438:	200043fc 	.word	0x200043fc
 800343c:	20004414 	.word	0x20004414
 8003440:	2000442c 	.word	0x2000442c
 8003444:	00000000 	.word	0x00000000

08003448 <Draw_Fruit>:

void Draw_Fruit(struct Fruit *fruit) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	//convert game coordinates to pixel
	uint32_t x = fruit->x / 2.0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800345a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800345e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003462:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003466:	ee17 3a90 	vmov	r3, s15
 800346a:	60fb      	str	r3, [r7, #12]
	uint32_t y = Yresolution - (fruit->y / 2.0);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003472:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003476:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800347a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800347e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8003540 <Draw_Fruit+0xf8>
 8003482:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800348a:	ee17 3a90 	vmov	r3, s15
 800348e:	60bb      	str	r3, [r7, #8]

	//BSP_LCD_DrawBitmap(x - 50, y - 50, watermelon_bmp);
	switch (fruit->type) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7d1b      	ldrb	r3, [r3, #20]
 8003494:	3b01      	subs	r3, #1
 8003496:	2b04      	cmp	r3, #4
 8003498:	d84d      	bhi.n	8003536 <Draw_Fruit+0xee>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <Draw_Fruit+0x58>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034cf 	.word	0x080034cf
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	08003503 	.word	0x08003503
 80034b0:	0800351d 	.word	0x0800351d
	case bomb:
		drawBitmap(x - 50, y - 50, (uint32_t*) bomb_bmp, 180);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b32      	subs	r3, #50	; 0x32
 80034ba:	b298      	uxth	r0, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b32      	subs	r3, #50	; 0x32
 80034c2:	b299      	uxth	r1, r3
 80034c4:	23b4      	movs	r3, #180	; 0xb4
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <Draw_Fruit+0x100>)
 80034c8:	f000 f90e 	bl	80036e8 <drawBitmap>
		break;
 80034cc:	e033      	b.n	8003536 <Draw_Fruit+0xee>
	case apple:
		drawBitmap(x - 50, y - 50, (uint32_t*) apple_bmp, 180);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b32      	subs	r3, #50	; 0x32
 80034d4:	b298      	uxth	r0, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b32      	subs	r3, #50	; 0x32
 80034dc:	b299      	uxth	r1, r3
 80034de:	23b4      	movs	r3, #180	; 0xb4
 80034e0:	4a1a      	ldr	r2, [pc, #104]	; (800354c <Draw_Fruit+0x104>)
 80034e2:	f000 f901 	bl	80036e8 <drawBitmap>
		break;
 80034e6:	e026      	b.n	8003536 <Draw_Fruit+0xee>
	case coconut:
		drawBitmap(x - 50, y - 50, (uint32_t*) coconut_bmp, 180);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b32      	subs	r3, #50	; 0x32
 80034ee:	b298      	uxth	r0, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b32      	subs	r3, #50	; 0x32
 80034f6:	b299      	uxth	r1, r3
 80034f8:	23b4      	movs	r3, #180	; 0xb4
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <Draw_Fruit+0x108>)
 80034fc:	f000 f8f4 	bl	80036e8 <drawBitmap>
		break;
 8003500:	e019      	b.n	8003536 <Draw_Fruit+0xee>
	case watermelon:
		drawBitmap(x - 50, y - 50, (uint32_t*) watermelon_bmp, 180);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b32      	subs	r3, #50	; 0x32
 8003508:	b298      	uxth	r0, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b32      	subs	r3, #50	; 0x32
 8003510:	b299      	uxth	r1, r3
 8003512:	23b4      	movs	r3, #180	; 0xb4
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <Draw_Fruit+0x10c>)
 8003516:	f000 f8e7 	bl	80036e8 <drawBitmap>
		break;
 800351a:	e00c      	b.n	8003536 <Draw_Fruit+0xee>
	case orange:
		drawBitmap(x - 50, y - 50, (uint32_t*) orange_bmp, 180);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b32      	subs	r3, #50	; 0x32
 8003522:	b298      	uxth	r0, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b32      	subs	r3, #50	; 0x32
 800352a:	b299      	uxth	r1, r3
 800352c:	23b4      	movs	r3, #180	; 0xb4
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <Draw_Fruit+0x110>)
 8003530:	f000 f8da 	bl	80036e8 <drawBitmap>
		break;
 8003534:	bf00      	nop
	}
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00000000 	.word	0x00000000
 8003544:	407d8000 	.word	0x407d8000
 8003548:	08039348 	.word	0x08039348
 800354c:	0801bd38 	.word	0x0801bd38
 8003550:	08020b90 	.word	0x08020b90
 8003554:	08012088 	.word	0x08012088
 8003558:	08016ee0 	.word	0x08016ee0

0800355c <Print_Touch>:

void Print_Touch() {
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_GRAY);	//Set border color
 8003562:	481f      	ldr	r0, [pc, #124]	; (80035e0 <Print_Touch+0x84>)
 8003564:	f7fd fa82 	bl	8000a6c <BSP_LCD_SetTextColor>
	for (uint16_t i = 0; i < TOUCH_CIRCBUFFER_SIZE - 1; i++) {
 8003568:	2300      	movs	r3, #0
 800356a:	80fb      	strh	r3, [r7, #6]
 800356c:	e030      	b.n	80035d0 <Print_Touch+0x74>
		if (touch_points_x[i] != 0 && touch_points_y[i] != 0
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <Print_Touch+0x88>)
 8003572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d027      	beq.n	80035ca <Print_Touch+0x6e>
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <Print_Touch+0x8c>)
 800357e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d021      	beq.n	80035ca <Print_Touch+0x6e>
				&& touch_points_x[i + 1] != 0 && touch_points_y[i + 1] != 0) {
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	3301      	adds	r3, #1
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <Print_Touch+0x88>)
 800358c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <Print_Touch+0x6e>
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	3301      	adds	r3, #1
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <Print_Touch+0x8c>)
 800359a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d013      	beq.n	80035ca <Print_Touch+0x6e>
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <Print_Touch+0x88>)
 80035a6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <Print_Touch+0x8c>)
 80035ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
					touch_points_x[i + 1], touch_points_y[i + 1]);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	3301      	adds	r3, #1
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <Print_Touch+0x88>)
 80035b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
					touch_points_x[i + 1], touch_points_y[i + 1]);
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	3301      	adds	r3, #1
			BSP_LCD_DrawLine(touch_points_x[i], touch_points_y[i],
 80035c0:	4c09      	ldr	r4, [pc, #36]	; (80035e8 <Print_Touch+0x8c>)
 80035c2:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80035c6:	f7fd fbff 	bl	8000dc8 <BSP_LCD_DrawLine>
	for (uint16_t i = 0; i < TOUCH_CIRCBUFFER_SIZE - 1; i++) {
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	3301      	adds	r3, #1
 80035ce:	80fb      	strh	r3, [r7, #6]
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d9cb      	bls.n	800356e <Print_Touch+0x12>
		}

	}
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	ff808080 	.word	0xff808080
 80035e4:	200047d4 	.word	0x200047d4
 80035e8:	200047e8 	.word	0x200047e8
 80035ec:	00000000 	.word	0x00000000

080035f0 <Draw_Slice>:

void Draw_Slice(struct Slice *slice, int rotation) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	//convert game coordinates to pixel
	uint32_t x = slice->x / 2.0;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003604:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003608:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800360c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003610:	ee17 3a90 	vmov	r3, s15
 8003614:	60fb      	str	r3, [r7, #12]
	uint32_t y = Yresolution - (slice->y / 2.0);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edd3 7a01 	vldr	s15, [r3, #4]
 800361c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003620:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003624:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003628:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80036d0 <Draw_Slice+0xe0>
 800362c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003630:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003634:	ee17 3a90 	vmov	r3, s15
 8003638:	60bb      	str	r3, [r7, #8]

	switch (slice->type) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7e1b      	ldrb	r3, [r3, #24]
 800363e:	3b02      	subs	r3, #2
 8003640:	2b03      	cmp	r3, #3
 8003642:	d83f      	bhi.n	80036c4 <Draw_Slice+0xd4>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <Draw_Slice+0x5c>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003677 	.word	0x08003677
 8003654:	08003691 	.word	0x08003691
 8003658:	080036ab 	.word	0x080036ab
	case apple:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_apple_bmp, rotation);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b32      	subs	r3, #50	; 0x32
 8003662:	b298      	uxth	r0, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b32      	subs	r3, #50	; 0x32
 800366a:	b299      	uxth	r1, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <Draw_Slice+0xe8>)
 8003670:	f000 f83a 	bl	80036e8 <drawBitmap>
		break;
 8003674:	e026      	b.n	80036c4 <Draw_Slice+0xd4>
	case coconut:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_coconut_bmp, rotation);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b32      	subs	r3, #50	; 0x32
 800367c:	b298      	uxth	r0, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b32      	subs	r3, #50	; 0x32
 8003684:	b299      	uxth	r1, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <Draw_Slice+0xec>)
 800368a:	f000 f82d 	bl	80036e8 <drawBitmap>
		break;
 800368e:	e019      	b.n	80036c4 <Draw_Slice+0xd4>
	case watermelon:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_watermelon_bmp, rotation);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b32      	subs	r3, #50	; 0x32
 8003696:	b298      	uxth	r0, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b32      	subs	r3, #50	; 0x32
 800369e:	b299      	uxth	r1, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <Draw_Slice+0xf0>)
 80036a4:	f000 f820 	bl	80036e8 <drawBitmap>
		break;
 80036a8:	e00c      	b.n	80036c4 <Draw_Slice+0xd4>
	case orange:
		drawBitmap(x - 50, y - 50, (uint32_t*) sliced_orange_bmp, rotation);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b32      	subs	r3, #50	; 0x32
 80036b0:	b298      	uxth	r0, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b32      	subs	r3, #50	; 0x32
 80036b8:	b299      	uxth	r1, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <Draw_Slice+0xf4>)
 80036be:	f000 f813 	bl	80036e8 <drawBitmap>
		break;
 80036c2:	bf00      	nop
	}
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	f3af 8000 	nop.w
 80036d0:	00000000 	.word	0x00000000
 80036d4:	407d8000 	.word	0x407d8000
 80036d8:	0802a840 	.word	0x0802a840
 80036dc:	080344f0 	.word	0x080344f0
 80036e0:	0802f698 	.word	0x0802f698
 80036e4:	080259e8 	.word	0x080259e8

080036e8 <drawBitmap>:

void drawBitmap(uint16_t Xpos, uint16_t Ypos, const uint32_t *bitmap, int rotation) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60ba      	str	r2, [r7, #8]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	4603      	mov	r3, r0
 80036f4:	81fb      	strh	r3, [r7, #14]
 80036f6:	460b      	mov	r3, r1
 80036f8:	81bb      	strh	r3, [r7, #12]
    uint16_t x, y;
    for (y = 0; y < 100; y++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	83bb      	strh	r3, [r7, #28]
 80036fe:	e054      	b.n	80037aa <drawBitmap+0xc2>
        for (x = 0; x < 100; x++) {
 8003700:	2300      	movs	r3, #0
 8003702:	83fb      	strh	r3, [r7, #30]
 8003704:	e04b      	b.n	800379e <drawBitmap+0xb6>
            uint16_t rotatedX, rotatedY;

            if (rotation == 180) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2bb4      	cmp	r3, #180	; 0xb4
 800370a:	d108      	bne.n	800371e <drawBitmap+0x36>
                rotatedX = 99 - x;
 800370c:	8bfb      	ldrh	r3, [r7, #30]
 800370e:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8003712:	837b      	strh	r3, [r7, #26]
                rotatedY = 99 - y;
 8003714:	8bbb      	ldrh	r3, [r7, #28]
 8003716:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 800371a:	833b      	strh	r3, [r7, #24]
 800371c:	e003      	b.n	8003726 <drawBitmap+0x3e>
            } else {
                rotatedX = x;
 800371e:	8bfb      	ldrh	r3, [r7, #30]
 8003720:	837b      	strh	r3, [r7, #26]
                rotatedY = y;
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	833b      	strh	r3, [r7, #24]
            }
            uint32_t pixelValue = bitmap[(rotatedY * 50 + rotatedX / 2) + 13];
 8003726:	8b3b      	ldrh	r3, [r7, #24]
 8003728:	2232      	movs	r2, #50	; 0x32
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	8b7a      	ldrh	r2, [r7, #26]
 8003730:	0852      	lsrs	r2, r2, #1
 8003732:	b292      	uxth	r2, r2
 8003734:	4413      	add	r3, r2
 8003736:	330d      	adds	r3, #13
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]
            if ((pixelValue & 0xFF000000) != 0) {
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d025      	beq.n	8003798 <drawBitmap+0xb0>
                pixelValue = convertToARGB8888(pixelValue);
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	f000 f834 	bl	80037ba <convertToARGB8888>
 8003752:	6178      	str	r0, [r7, #20]
                if (Xpos + x > 0 && Ypos + y > 0 && Xpos + x < Xresolution && Ypos + y < Yresolution)
 8003754:	89fa      	ldrh	r2, [r7, #14]
 8003756:	8bfb      	ldrh	r3, [r7, #30]
 8003758:	4413      	add	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	dd1c      	ble.n	8003798 <drawBitmap+0xb0>
 800375e:	89ba      	ldrh	r2, [r7, #12]
 8003760:	8bbb      	ldrh	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	dd17      	ble.n	8003798 <drawBitmap+0xb0>
 8003768:	89fa      	ldrh	r2, [r7, #14]
 800376a:	8bfb      	ldrh	r3, [r7, #30]
 800376c:	4413      	add	r3, r2
 800376e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003772:	da11      	bge.n	8003798 <drawBitmap+0xb0>
 8003774:	89ba      	ldrh	r2, [r7, #12]
 8003776:	8bbb      	ldrh	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800377e:	da0b      	bge.n	8003798 <drawBitmap+0xb0>
                    BSP_LCD_DrawPixel(Xpos + x, Ypos + y, pixelValue);
 8003780:	89fa      	ldrh	r2, [r7, #14]
 8003782:	8bfb      	ldrh	r3, [r7, #30]
 8003784:	4413      	add	r3, r2
 8003786:	b298      	uxth	r0, r3
 8003788:	89ba      	ldrh	r2, [r7, #12]
 800378a:	8bbb      	ldrh	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd fd32 	bl	80011fc <BSP_LCD_DrawPixel>
        for (x = 0; x < 100; x++) {
 8003798:	8bfb      	ldrh	r3, [r7, #30]
 800379a:	3301      	adds	r3, #1
 800379c:	83fb      	strh	r3, [r7, #30]
 800379e:	8bfb      	ldrh	r3, [r7, #30]
 80037a0:	2b63      	cmp	r3, #99	; 0x63
 80037a2:	d9b0      	bls.n	8003706 <drawBitmap+0x1e>
    for (y = 0; y < 100; y++) {
 80037a4:	8bbb      	ldrh	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	83bb      	strh	r3, [r7, #28]
 80037aa:	8bbb      	ldrh	r3, [r7, #28]
 80037ac:	2b63      	cmp	r3, #99	; 0x63
 80037ae:	d9a7      	bls.n	8003700 <drawBitmap+0x18>
            }
        }
    }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <convertToARGB8888>:


uint32_t convertToARGB8888(uint32_t originalPixelValue) {
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
	// Extract RGB components from RGB565
	uint8_t red = ((originalPixelValue >> 8) & 0xF8)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 13) & 0x07);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0b5b      	lsrs	r3, r3, #13
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b2db      	uxtb	r3, r3
	uint8_t red = ((originalPixelValue >> 8) & 0xF8)
 80037da:	4313      	orrs	r3, r2
 80037dc:	73fb      	strb	r3, [r7, #15]
	uint8_t green = ((originalPixelValue >> 3) & 0xFC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	08db      	lsrs	r3, r3, #3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 9) & 0x03);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0a5b      	lsrs	r3, r3, #9
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	b2db      	uxtb	r3, r3
	uint8_t green = ((originalPixelValue >> 3) & 0xFC)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = ((originalPixelValue << 3) & 0xF8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	b2da      	uxtb	r2, r3
			| ((originalPixelValue >> 2) & 0x07);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2db      	uxtb	r3, r3
	uint8_t blue = ((originalPixelValue << 3) & 0xF8)
 800380e:	4313      	orrs	r3, r2
 8003810:	737b      	strb	r3, [r7, #13]

	// Alpha value (assuming fully opaque)
	uint8_t alpha = 0xFF;
 8003812:	23ff      	movs	r3, #255	; 0xff
 8003814:	733b      	strb	r3, [r7, #12]

	// Pack into ARGB8888 format
	uint32_t argb8888Value = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8003816:	7b3b      	ldrb	r3, [r7, #12]
 8003818:	061a      	lsls	r2, r3, #24
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	431a      	orrs	r2, r3
 8003826:	7b7b      	ldrb	r3, [r7, #13]
 8003828:	4313      	orrs	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]

	return argb8888Value;
 800382c:	68bb      	ldr	r3, [r7, #8]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b090      	sub	sp, #64	; 0x40
 8003840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003852:	4bac      	ldr	r3, [pc, #688]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4aab      	ldr	r2, [pc, #684]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4ba9      	ldr	r3, [pc, #676]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800386a:	4ba6      	ldr	r3, [pc, #664]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4aa5      	ldr	r2, [pc, #660]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4ba3      	ldr	r3, [pc, #652]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4ba0      	ldr	r3, [pc, #640]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a9f      	ldr	r2, [pc, #636]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b9d      	ldr	r3, [pc, #628]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800389a:	4b9a      	ldr	r3, [pc, #616]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a99      	ldr	r2, [pc, #612]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b97      	ldr	r3, [pc, #604]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b2:	4b94      	ldr	r3, [pc, #592]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a93      	ldr	r2, [pc, #588]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b91      	ldr	r3, [pc, #580]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ca:	4b8e      	ldr	r3, [pc, #568]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a8d      	ldr	r2, [pc, #564]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b8b      	ldr	r3, [pc, #556]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80038e2:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a87      	ldr	r2, [pc, #540]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80038fa:	4b82      	ldr	r3, [pc, #520]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a81      	ldr	r2, [pc, #516]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003912:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b79      	ldr	r3, [pc, #484]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800392a:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003930:	f043 0320 	orr.w	r3, r3, #32
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003942:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <MX_GPIO_Init+0x2c8>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800395a:	2378      	movs	r3, #120	; 0x78
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395e:	2302      	movs	r3, #2
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800396a:	2306      	movs	r3, #6
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800396e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003972:	4619      	mov	r1, r3
 8003974:	4864      	ldr	r0, [pc, #400]	; (8003b08 <MX_GPIO_Init+0x2cc>)
 8003976:	f003 f837 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800397a:	2304      	movs	r3, #4
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800398a:	2309      	movs	r3, #9
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800398e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	485c      	ldr	r0, [pc, #368]	; (8003b08 <MX_GPIO_Init+0x2cc>)
 8003996:	f003 f827 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800399a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039ac:	230b      	movs	r3, #11
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b4:	4619      	mov	r1, r3
 80039b6:	4855      	ldr	r0, [pc, #340]	; (8003b0c <MX_GPIO_Init+0x2d0>)
 80039b8:	f003 f816 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80039bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c2:	2312      	movs	r3, #18
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ca:	2300      	movs	r3, #0
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039ce:	2304      	movs	r3, #4
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d6:	4619      	mov	r1, r3
 80039d8:	484d      	ldr	r0, [pc, #308]	; (8003b10 <MX_GPIO_Init+0x2d4>)
 80039da:	f003 f805 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80039de:	f643 4323 	movw	r3, #15395	; 0x3c23
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039f0:	230a      	movs	r3, #10
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f8:	4619      	mov	r1, r3
 80039fa:	4845      	ldr	r0, [pc, #276]	; (8003b10 <MX_GPIO_Init+0x2d4>)
 80039fc:	f002 fff4 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 8003a00:	2310      	movs	r3, #16
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003a10:	230a      	movs	r3, #10
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 8003a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a18:	4619      	mov	r1, r3
 8003a1a:	483d      	ldr	r0, [pc, #244]	; (8003b10 <MX_GPIO_Init+0x2d4>)
 8003a1c:	f002 ffe4 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8003a20:	23c0      	movs	r3, #192	; 0xc0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003a30:	230b      	movs	r3, #11
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4836      	ldr	r0, [pc, #216]	; (8003b14 <MX_GPIO_Init+0x2d8>)
 8003a3c:	f002 ffd4 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8003a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a52:	2308      	movs	r3, #8
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8003a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	482e      	ldr	r0, [pc, #184]	; (8003b18 <MX_GPIO_Init+0x2dc>)
 8003a5e:	f002 ffc3 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a72:	230a      	movs	r3, #10
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4824      	ldr	r0, [pc, #144]	; (8003b10 <MX_GPIO_Init+0x2d4>)
 8003a7e:	f002 ffb3 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8003a82:	f247 033b 	movw	r3, #28731	; 0x703b
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a94:	4619      	mov	r1, r3
 8003a96:	4821      	ldr	r0, [pc, #132]	; (8003b1c <MX_GPIO_Init+0x2e0>)
 8003a98:	f002 ffa6 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8003a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8003ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4817      	ldr	r0, [pc, #92]	; (8003b18 <MX_GPIO_Init+0x2dc>)
 8003aba:	f002 ff95 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8003abe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003acc:	2303      	movs	r3, #3
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ad0:	2309      	movs	r3, #9
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad8:	4619      	mov	r1, r3
 8003ada:	480f      	ldr	r0, [pc, #60]	; (8003b18 <MX_GPIO_Init+0x2dc>)
 8003adc:	f002 ff84 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8003ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003af2:	2305      	movs	r3, #5
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8003af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afa:	4619      	mov	r1, r3
 8003afc:	4808      	ldr	r0, [pc, #32]	; (8003b20 <MX_GPIO_Init+0x2e4>)
 8003afe:	f002 ff73 	bl	80069e8 <HAL_GPIO_Init>
 8003b02:	e00f      	b.n	8003b24 <MX_GPIO_Init+0x2e8>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021800 	.word	0x40021800
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020c00 	.word	0x40020c00
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40022400 	.word	0x40022400
 8003b20:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8003b24:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b36:	4619      	mov	r1, r3
 8003b38:	48ba      	ldr	r0, [pc, #744]	; (8003e24 <MX_GPIO_Init+0x5e8>)
 8003b3a:	f002 ff55 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8003b3e:	23f8      	movs	r3, #248	; 0xf8
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b42:	2300      	movs	r3, #0
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	48b5      	ldr	r0, [pc, #724]	; (8003e28 <MX_GPIO_Init+0x5ec>)
 8003b52:	f002 ff49 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8003b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8003b68:	2307      	movs	r3, #7
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8003b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b70:	4619      	mov	r1, r3
 8003b72:	48ae      	ldr	r0, [pc, #696]	; (8003e2c <MX_GPIO_Init+0x5f0>)
 8003b74:	f002 ff38 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8003b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003b8a:	230b      	movs	r3, #11
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b92:	4619      	mov	r1, r3
 8003b94:	48a5      	ldr	r0, [pc, #660]	; (8003e2c <MX_GPIO_Init+0x5f0>)
 8003b96:	f002 ff27 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8003b9a:	2330      	movs	r3, #48	; 0x30
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	48a0      	ldr	r0, [pc, #640]	; (8003e30 <MX_GPIO_Init+0x5f4>)
 8003bae:	f002 ff1b 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4898      	ldr	r0, [pc, #608]	; (8003e30 <MX_GPIO_Init+0x5f4>)
 8003bce:	f002 ff0b 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8003bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003be4:	2305      	movs	r3, #5
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8003be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bec:	4619      	mov	r1, r3
 8003bee:	4891      	ldr	r0, [pc, #580]	; (8003e34 <MX_GPIO_Init+0x5f8>)
 8003bf0:	f002 fefa 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c04:	2308      	movs	r3, #8
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8003c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4888      	ldr	r0, [pc, #544]	; (8003e30 <MX_GPIO_Init+0x5f4>)
 8003c10:	f002 feea 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8003c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c22:	2303      	movs	r3, #3
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003c26:	230a      	movs	r3, #10
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8003c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c2e:	4619      	mov	r1, r3
 8003c30:	487c      	ldr	r0, [pc, #496]	; (8003e24 <MX_GPIO_Init+0x5e8>)
 8003c32:	f002 fed9 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8003c36:	23c0      	movs	r3, #192	; 0xc0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c42:	2303      	movs	r3, #3
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c46:	2308      	movs	r3, #8
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4879      	ldr	r0, [pc, #484]	; (8003e38 <MX_GPIO_Init+0x5fc>)
 8003c52:	f002 fec9 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003c56:	2310      	movs	r3, #16
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003c66:	230a      	movs	r3, #10
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4872      	ldr	r0, [pc, #456]	; (8003e3c <MX_GPIO_Init+0x600>)
 8003c72:	f002 feb9 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003c86:	2306      	movs	r3, #6
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4866      	ldr	r0, [pc, #408]	; (8003e2c <MX_GPIO_Init+0x5f0>)
 8003c92:	f002 fea9 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8003c96:	2348      	movs	r3, #72	; 0x48
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4860      	ldr	r0, [pc, #384]	; (8003e2c <MX_GPIO_Init+0x5f0>)
 8003caa:	f002 fe9d 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8003cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	485d      	ldr	r0, [pc, #372]	; (8003e40 <MX_GPIO_Init+0x604>)
 8003cca:	f002 fe8d 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8003cce:	2340      	movs	r3, #64	; 0x40
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4855      	ldr	r0, [pc, #340]	; (8003e40 <MX_GPIO_Init+0x604>)
 8003cea:	f002 fe7d 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003cee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d00:	4619      	mov	r1, r3
 8003d02:	484f      	ldr	r0, [pc, #316]	; (8003e40 <MX_GPIO_Init+0x604>)
 8003d04:	f002 fe70 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d14:	2303      	movs	r3, #3
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003d18:	230a      	movs	r3, #10
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8003d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d20:	4619      	mov	r1, r3
 8003d22:	4845      	ldr	r0, [pc, #276]	; (8003e38 <MX_GPIO_Init+0x5fc>)
 8003d24:	f002 fe60 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d28:	2332      	movs	r3, #50	; 0x32
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d34:	2303      	movs	r3, #3
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d38:	230b      	movs	r3, #11
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d40:	4619      	mov	r1, r3
 8003d42:	483d      	ldr	r0, [pc, #244]	; (8003e38 <MX_GPIO_Init+0x5fc>)
 8003d44:	f002 fe50 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8003d48:	2304      	movs	r3, #4
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8003d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4837      	ldr	r0, [pc, #220]	; (8003e38 <MX_GPIO_Init+0x5fc>)
 8003d5c:	f002 fe44 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8003d60:	2304      	movs	r3, #4
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003d70:	2309      	movs	r3, #9
 8003d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4832      	ldr	r0, [pc, #200]	; (8003e44 <MX_GPIO_Init+0x608>)
 8003d7c:	f002 fe34 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8003d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003d92:	2309      	movs	r3, #9
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4824      	ldr	r0, [pc, #144]	; (8003e30 <MX_GPIO_Init+0x5f4>)
 8003d9e:	f002 fe23 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003da2:	2386      	movs	r3, #134	; 0x86
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dae:	2303      	movs	r3, #3
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003db2:	230b      	movs	r3, #11
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	481d      	ldr	r0, [pc, #116]	; (8003e34 <MX_GPIO_Init+0x5f8>)
 8003dbe:	f002 fe13 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8003dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4817      	ldr	r0, [pc, #92]	; (8003e34 <MX_GPIO_Init+0x5f8>)
 8003dd8:	f002 fe06 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8003ddc:	2350      	movs	r3, #80	; 0x50
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003de0:	2303      	movs	r3, #3
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dec:	4619      	mov	r1, r3
 8003dee:	4811      	ldr	r0, [pc, #68]	; (8003e34 <MX_GPIO_Init+0x5f8>)
 8003df0:	f002 fdfa 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e06:	230a      	movs	r3, #10
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8003e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4807      	ldr	r0, [pc, #28]	; (8003e30 <MX_GPIO_Init+0x5f4>)
 8003e12:	f002 fde9 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	e011      	b.n	8003e48 <MX_GPIO_Init+0x60c>
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022800 	.word	0x40022800
 8003e2c:	40021800 	.word	0x40021800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40020000 	.word	0x40020000
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40021c00 	.word	0x40021c00
 8003e40:	40021400 	.word	0x40021400
 8003e44:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	481c      	ldr	r0, [pc, #112]	; (8003ec0 <MX_GPIO_Init+0x684>)
 8003e50:	f002 fdca 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003e54:	2328      	movs	r3, #40	; 0x28
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003e64:	230a      	movs	r3, #10
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4815      	ldr	r0, [pc, #84]	; (8003ec4 <MX_GPIO_Init+0x688>)
 8003e70:	f002 fdba 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003e74:	2340      	movs	r3, #64	; 0x40
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e84:	2309      	movs	r3, #9
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <MX_GPIO_Init+0x684>)
 8003e90:	f002 fdaa 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003e94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <MX_GPIO_Init+0x68c>)
 8003eb2:	f002 fd99 	bl	80069e8 <HAL_GPIO_Init>

}
 8003eb6:	bf00      	nop
 8003eb8:	3740      	adds	r7, #64	; 0x40
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021c00 	.word	0x40021c00
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	40020400 	.word	0x40020400

08003ecc <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <MX_I2C4_Init+0x78>)
 8003ed4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <MX_I2C4_Init+0x7c>)
 8003eda:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003edc:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003f06:	480e      	ldr	r0, [pc, #56]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003f08:	f003 f840 	bl	8006f8c <HAL_I2C_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003f12:	f000 fc65 	bl	80047e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f16:	2100      	movs	r1, #0
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003f1a:	f003 fdcd 	bl	8007ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003f24:	f000 fc5c 	bl	80047e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4805      	ldr	r0, [pc, #20]	; (8003f40 <MX_I2C4_Init+0x74>)
 8003f2c:	f003 fe0f 	bl	8007b4e <HAL_I2CEx_ConfigDigitalFilter>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003f36:	f000 fc53 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000455c 	.word	0x2000455c
 8003f44:	40006000 	.word	0x40006000
 8003f48:	00c0eaff 	.word	0x00c0eaff

08003f4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0ae      	sub	sp, #184	; 0xb8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2290      	movs	r2, #144	; 0x90
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f00a ff96 	bl	800ee9e <memset>
  if(i2cHandle->Instance==I2C4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a33      	ldr	r2, [pc, #204]	; (8004044 <HAL_I2C_MspInit+0xf8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d15e      	bne.n	800403a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 fe49 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003f98:	f000 fc22 	bl	80047e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	4a29      	ldr	r2, [pc, #164]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003fba:	f043 0308 	orr.w	r3, r3, #8
 8003fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003fe4:	230b      	movs	r3, #11
 8003fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8003fea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <HAL_I2C_MspInit+0x100>)
 8003ff2:	f002 fcf9 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8003ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffe:	2312      	movs	r3, #18
 8004000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004004:	2301      	movs	r3, #1
 8004006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004010:	2304      	movs	r3, #4
 8004012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8004016:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800401a:	4619      	mov	r1, r3
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <HAL_I2C_MspInit+0x104>)
 800401e:	f002 fce3 	bl	80069e8 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8004028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402c:	6413      	str	r3, [r2, #64]	; 0x40
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_I2C_MspInit+0xfc>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800403a:	bf00      	nop
 800403c:	37b8      	adds	r7, #184	; 0xb8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40006000 	.word	0x40006000
 8004048:	40023800 	.word	0x40023800
 800404c:	40020400 	.word	0x40020400
 8004050:	40020c00 	.word	0x40020c00

08004054 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C4)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <HAL_I2C_MspDeInit+0x38>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10e      	bne.n	8004084 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_I2C_MspDeInit+0x3c>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a09      	ldr	r2, [pc, #36]	; (8004090 <HAL_I2C_MspDeInit+0x3c>)
 800406c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <HAL_I2C_MspDeInit+0x40>)
 8004076:	f002 fe63 	bl	8006d40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 800407a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <HAL_I2C_MspDeInit+0x44>)
 8004080:	f002 fe5e 	bl	8006d40 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40006000 	.word	0x40006000
 8004090:	40023800 	.word	0x40023800
 8004094:	40020400 	.word	0x40020400
 8004098:	40020c00 	.word	0x40020c00

0800409c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b09a      	sub	sp, #104	; 0x68
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80040a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040a6:	2234      	movs	r2, #52	; 0x34
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f00a fef7 	bl	800ee9e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80040b0:	463b      	mov	r3, r7
 80040b2:	2234      	movs	r2, #52	; 0x34
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f00a fef1 	bl	800ee9e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80040bc:	4b4e      	ldr	r3, [pc, #312]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040be:	4a4f      	ldr	r2, [pc, #316]	; (80041fc <MX_LTDC_Init+0x160>)
 80040c0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040c2:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040d4:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040dc:	2207      	movs	r2, #7
 80040de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80040e0:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040e2:	2203      	movs	r2, #3
 80040e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040e8:	220e      	movs	r2, #14
 80040ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80040ec:	4b42      	ldr	r3, [pc, #264]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040ee:	2205      	movs	r2, #5
 80040f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040f4:	f240 228e 	movw	r2, #654	; 0x28e
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80040fa:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80040fc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8004100:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <MX_LTDC_Init+0x15c>)
 8004104:	f44f 7225 	mov.w	r2, #660	; 0x294
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <MX_LTDC_Init+0x15c>)
 800410c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <MX_LTDC_Init+0x15c>)
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <MX_LTDC_Init+0x15c>)
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004122:	4b35      	ldr	r3, [pc, #212]	; (80041f8 <MX_LTDC_Init+0x15c>)
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800412a:	4833      	ldr	r0, [pc, #204]	; (80041f8 <MX_LTDC_Init+0x15c>)
 800412c:	f003 fd5c 	bl	8007be8 <HAL_LTDC_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8004136:	f000 fb53 	bl	80047e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800414a:	2300      	movs	r3, #0
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8004156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800415c:	2305      	movs	r3, #5
 800415e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800417e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004182:	2200      	movs	r2, #0
 8004184:	4619      	mov	r1, r3
 8004186:	481c      	ldr	r0, [pc, #112]	; (80041f8 <MX_LTDC_Init+0x15c>)
 8004188:	f003 fdfe 	bl	8007d88 <HAL_LTDC_ConfigLayer>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8004192:	f000 fb25 	bl	80047e0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80041b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80041b8:	2305      	movs	r3, #5
 80041ba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80041da:	463b      	mov	r3, r7
 80041dc:	2201      	movs	r2, #1
 80041de:	4619      	mov	r1, r3
 80041e0:	4805      	ldr	r0, [pc, #20]	; (80041f8 <MX_LTDC_Init+0x15c>)
 80041e2:	f003 fdd1 	bl	8007d88 <HAL_LTDC_ConfigLayer>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80041ec:	f000 faf8 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80041f0:	bf00      	nop
 80041f2:	3768      	adds	r7, #104	; 0x68
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200045b0 	.word	0x200045b0
 80041fc:	40016800 	.word	0x40016800

08004200 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0a8      	sub	sp, #160	; 0xa0
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2290      	movs	r2, #144	; 0x90
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f00a fe44 	bl	800ee9e <memset>
  if(ltdcHandle->Instance==LTDC)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_LTDC_MspInit+0x74>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d124      	bne.n	800426a <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004220:	2308      	movs	r3, #8
 8004222:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004224:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800422a:	2307      	movs	r3, #7
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800422e:	2303      	movs	r3, #3
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8004232:	2300      	movs	r3, #0
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800423a:	2300      	movs	r3, #0
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800423e:	f107 0310 	add.w	r3, r7, #16
 8004242:	4618      	mov	r0, r3
 8004244:	f004 fcee 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 800424e:	f000 fac7 	bl	80047e0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_LTDC_MspInit+0x78>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <HAL_LTDC_MspInit+0x78>)
 8004258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_LTDC_MspInit+0x78>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800426a:	bf00      	nop
 800426c:	37a0      	adds	r7, #160	; 0xa0
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40016800 	.word	0x40016800
 8004278:	40023800 	.word	0x40023800

0800427c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004280:	f3bf 8f4f 	dsb	sy
}
 8004284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004286:	f3bf 8f6f 	isb	sy
}
 800428a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <SCB_EnableICache+0x48>)
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004294:	f3bf 8f4f 	dsb	sy
}
 8004298:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800429a:	f3bf 8f6f 	isb	sy
}
 800429e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <SCB_EnableICache+0x48>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <SCB_EnableICache+0x48>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80042ac:	f3bf 8f4f 	dsb	sy
}
 80042b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042b2:	f3bf 8f6f 	isb	sy
}
 80042b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80042ce:	4b1f      	ldr	r3, [pc, #124]	; (800434c <SCB_EnableDCache+0x84>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80042d6:	f3bf 8f4f 	dsb	sy
}
 80042da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <SCB_EnableDCache+0x84>)
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0b5b      	lsrs	r3, r3, #13
 80042e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80042ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004300:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004306:	4911      	ldr	r1, [pc, #68]	; (800434c <SCB_EnableDCache+0x84>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	60ba      	str	r2, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ef      	bne.n	80042f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	60fa      	str	r2, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e5      	bne.n	80042ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8004322:	f3bf 8f4f 	dsb	sy
}
 8004326:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <SCB_EnableDCache+0x84>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <SCB_EnableDCache+0x84>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004334:	f3bf 8f4f 	dsb	sy
}
 8004338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800433a:	f3bf 8f6f 	isb	sy
}
 800433e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ts_status = TS_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800435a:	f7ff ff8f 	bl	800427c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800435e:	f7ff ffb3 	bl	80042c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004362:	f000 ff83 	bl	800526c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004366:	f000 f853 	bl	8004410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800436a:	f7ff fa67 	bl	800383c <MX_GPIO_Init>
  MX_FMC_Init();
 800436e:	f7fe f871 	bl	8002454 <MX_FMC_Init>
  MX_I2C4_Init();
 8004372:	f7ff fdab 	bl	8003ecc <MX_I2C4_Init>
  MX_TIM3_Init();
 8004376:	f000 fbdb 	bl	8004b30 <MX_TIM3_Init>
  MX_DMA2D_Init();
 800437a:	f7fd ff05 	bl	8002188 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800437e:	f7fd ff41 	bl	8002204 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8004382:	f7ff fe8b 	bl	800409c <MX_LTDC_Init>
  MX_TIM4_Init();
 8004386:	f000 fc2d 	bl	8004be4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800438a:	f000 fcf7 	bl	8004d7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 800438e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004392:	f000 f8b3 	bl	80044fc <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 8004396:	f7fc f921 	bl	80005dc <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800439a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800439e:	2001      	movs	r0, #1
 80043a0:	f7fc fab6 	bl	8000910 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS+(800*472*4));
 80043a4:	4917      	ldr	r1, [pc, #92]	; (8004404 <main+0xb4>)
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7fc fab2 	bl	8000910 <BSP_LCD_LayerDefaultInit>


  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80043ac:	2001      	movs	r0, #1
 80043ae:	f7fc fb0f 	bl	80009d0 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80043b2:	4815      	ldr	r0, [pc, #84]	; (8004408 <main+0xb8>)
 80043b4:	f7fc fb8c 	bl	8000ad0 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_WHITE);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	f7fc fbb8 	bl	8000b30 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	f7fc fb6a 	bl	8000a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80043c8:	4810      	ldr	r0, [pc, #64]	; (800440c <main+0xbc>)
 80043ca:	f7fc fb4f 	bl	8000a6c <BSP_LCD_SetTextColor>

  // Init Touch screen
  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80043ce:	f7fc fa87 	bl	80008e0 <BSP_LCD_GetXSize>
 80043d2:	4603      	mov	r3, r0
 80043d4:	b29c      	uxth	r4, r3
 80043d6:	f7fc fa8f 	bl	80008f8 <BSP_LCD_GetYSize>
 80043da:	4603      	mov	r3, r0
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7fd f865 	bl	80014b0 <BSP_TS_Init>
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
  if(ts_status != TS_OK){
	  //Error
  }

  freeRTOS_user_init();	//should by placed after kernel initialization!
 80043ea:	f000 fd73 	bl	8004ed4 <freeRTOS_user_init>
  srand(1);
 80043ee:	2001      	movs	r0, #1
 80043f0:	f00a fbe4 	bl	800ebbc <srand>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80043f4:	f007 fa86 	bl	800b904 <osKernelInitialize>
  MX_FREERTOS_Init();
 80043f8:	f7fe f918 	bl	800262c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80043fc:	f007 fab6 	bl	800b96c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004400:	e7fe      	b.n	8004400 <main+0xb0>
 8004402:	bf00      	nop
 8004404:	c0170c00 	.word	0xc0170c00
 8004408:	20000030 	.word	0x20000030
 800440c:	ffff0000 	.word	0xffff0000

08004410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b094      	sub	sp, #80	; 0x50
 8004414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	2234      	movs	r2, #52	; 0x34
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f00a fd3d 	bl	800ee9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004434:	f003 fed0 	bl	80081d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <SystemClock_Config+0xe4>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a2d      	ldr	r2, [pc, #180]	; (80044f4 <SystemClock_Config+0xe4>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <SystemClock_Config+0xe4>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <SystemClock_Config+0xe8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a28      	ldr	r2, [pc, #160]	; (80044f8 <SystemClock_Config+0xe8>)
 8004456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <SystemClock_Config+0xe8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004468:	2303      	movs	r3, #3
 800446a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800446c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004470:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004472:	2301      	movs	r3, #1
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004476:	2310      	movs	r3, #16
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800447a:	2302      	movs	r3, #2
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800447e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004484:	2319      	movs	r3, #25
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004488:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800448e:	2302      	movs	r3, #2
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004492:	2304      	movs	r3, #4
 8004494:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 8004496:	2307      	movs	r3, #7
 8004498:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800449a:	f107 031c 	add.w	r3, r7, #28
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 fefa 	bl	8008298 <HAL_RCC_OscConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80044aa:	f000 f999 	bl	80047e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80044ae:	f003 fea3 	bl	80081f8 <HAL_PWREx_EnableOverDrive>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80044b8:	f000 f992 	bl	80047e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044bc:	230f      	movs	r3, #15
 80044be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c0:	2302      	movs	r3, #2
 80044c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80044cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80044d4:	f107 0308 	add.w	r3, r7, #8
 80044d8:	2106      	movs	r1, #6
 80044da:	4618      	mov	r0, r3
 80044dc:	f004 f98a 	bl	80087f4 <HAL_RCC_ClockConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80044e6:	f000 f97b 	bl	80047e0 <Error_Handler>
  }
}
 80044ea:	bf00      	nop
 80044ec:	3750      	adds	r7, #80	; 0x50
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000

080044fc <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800450e:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004510:	2210      	movs	r2, #16
 8004512:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004514:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004516:	2201      	movs	r2, #1
 8004518:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800451c:	2200      	movs	r2, #0
 800451e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004524:	4923      	ldr	r1, [pc, #140]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004526:	4824      	ldr	r0, [pc, #144]	; (80045b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004528:	f004 ffd8 	bl	80094dc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800452c:	2001      	movs	r0, #1
 800452e:	f000 fed3 	bl	80052d8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004534:	2202      	movs	r2, #2
 8004536:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800453a:	2210      	movs	r2, #16
 800453c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004540:	2201      	movs	r2, #1
 8004542:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800454a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454e:	4919      	ldr	r1, [pc, #100]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004550:	4819      	ldr	r0, [pc, #100]	; (80045b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004552:	f004 ffc3 	bl	80094dc <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004558:	2203      	movs	r2, #3
 800455a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800455e:	2210      	movs	r2, #16
 8004560:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004564:	2208      	movs	r2, #8
 8004566:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004568:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800456e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004572:	4910      	ldr	r1, [pc, #64]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004574:	4810      	ldr	r0, [pc, #64]	; (80045b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004576:	f004 ffb1 	bl	80094dc <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800457a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800457e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004582:	2204      	movs	r2, #4
 8004584:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004588:	2210      	movs	r2, #16
 800458a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800458e:	2201      	movs	r2, #1
 8004590:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004596:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800459c:	4905      	ldr	r1, [pc, #20]	; (80045b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800459e:	4806      	ldr	r0, [pc, #24]	; (80045b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80045a0:	f004 ff9c 	bl	80094dc <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4804      	ldr	r0, [pc, #16]	; (80045b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80045a8:	f004 ffcd 	bl	8009546 <HAL_SDRAM_ProgramRefreshRate>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20004658 	.word	0x20004658
 80045b8:	20004390 	.word	0x20004390

080045bc <I2Cx_Init>:
#endif /* DISCOVERY_I2Cx_TIMING */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr);


static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f002 ffcf 	bl	8007568 <HAL_I2C_GetState>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11a      	bne.n	8004606 <I2Cx_Init+0x4a>
  {

    i2c_handler->Instance              = DISCOVERY_I2Cx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <I2Cx_Init+0x54>)
 80045d4:	601a      	str	r2, [r3, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <I2Cx_Init+0x58>)
 80045da:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    //I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f002 fcc3 	bl	8006f8c <HAL_I2C_Init>
  }
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40006000 	.word	0x40006000
 8004614:	40912732 	.word	0x40912732

08004618 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af04      	add	r7, sp, #16
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4603      	mov	r3, r0
 8004628:	72fb      	strb	r3, [r7, #11]
 800462a:	460b      	mov	r3, r1
 800462c:	813b      	strh	r3, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	b299      	uxth	r1, r3
 800463a:	88f8      	ldrh	r0, [r7, #6]
 800463c:	893a      	ldrh	r2, [r7, #8]
 800463e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004642:	9302      	str	r3, [sp, #8]
 8004644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4603      	mov	r3, r0
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f002 fe70 	bl	8007334 <HAL_I2C_Mem_Read>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f832 	bl	80046cc <I2Cx_Error>
  }
  return status;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b08a      	sub	sp, #40	; 0x28
 8004676:	af04      	add	r7, sp, #16
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	4608      	mov	r0, r1
 800467c:	4611      	mov	r1, r2
 800467e:	461a      	mov	r2, r3
 8004680:	4603      	mov	r3, r0
 8004682:	72fb      	strb	r3, [r7, #11]
 8004684:	460b      	mov	r3, r1
 8004686:	813b      	strh	r3, [r7, #8]
 8004688:	4613      	mov	r3, r2
 800468a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	b299      	uxth	r1, r3
 8004694:	88f8      	ldrh	r0, [r7, #6]
 8004696:	893a      	ldrh	r2, [r7, #8]
 8004698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4603      	mov	r3, r0
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f002 fd2f 	bl	800710c <HAL_I2C_Mem_Write>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80046b8:	7afb      	ldrb	r3, [r7, #11]
 80046ba:	4619      	mov	r1, r3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f805 	bl	80046cc <I2Cx_Error>
  }
  return status;
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2Cx_Error>:
  * @param  Addr: I2C Address
  * @retval None
  */

static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f002 fce7 	bl	80070ac <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff6c 	bl	80045bc <I2Cx_Init>
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hi2c4);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <TS_IO_Init+0x10>)
 80046f2:	f7ff ff63 	bl	80045bc <I2Cx_Init>
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	2000455c 	.word	0x2000455c

08004700 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af02      	add	r7, sp, #8
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
 800470a:	460b      	mov	r3, r1
 800470c:	71bb      	strb	r3, [r7, #6]
 800470e:	4613      	mov	r3, r2
 8004710:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004712:	79bb      	ldrb	r3, [r7, #6]
 8004714:	b29a      	uxth	r2, r3
 8004716:	79f9      	ldrb	r1, [r7, #7]
 8004718:	2301      	movs	r3, #1
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	1d7b      	adds	r3, r7, #5
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	2301      	movs	r3, #1
 8004722:	4803      	ldr	r0, [pc, #12]	; (8004730 <TS_IO_Write+0x30>)
 8004724:	f7ff ffa5 	bl	8004672 <I2Cx_WriteMultiple>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	2000455c 	.word	0x2000455c

08004734 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	4603      	mov	r3, r0
 800473c:	460a      	mov	r2, r1
 800473e:	71fb      	strb	r3, [r7, #7]
 8004740:	4613      	mov	r3, r2
 8004742:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004748:	79bb      	ldrb	r3, [r7, #6]
 800474a:	b29a      	uxth	r2, r3
 800474c:	79f9      	ldrb	r1, [r7, #7]
 800474e:	2301      	movs	r3, #1
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	f107 030f 	add.w	r3, r7, #15
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2301      	movs	r3, #1
 800475a:	4804      	ldr	r0, [pc, #16]	; (800476c <TS_IO_Read+0x38>)
 800475c:	f7ff ff5c 	bl	8004618 <I2Cx_ReadMultiple>

  return read_value;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	2000455c 	.word	0x2000455c

08004770 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af02      	add	r7, sp, #8
 8004776:	603a      	str	r2, [r7, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
 800477e:	460b      	mov	r3, r1
 8004780:	71bb      	strb	r3, [r7, #6]
 8004782:	4613      	mov	r3, r2
 8004784:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004786:	79bb      	ldrb	r3, [r7, #6]
 8004788:	b29a      	uxth	r2, r3
 800478a:	79f9      	ldrb	r1, [r7, #7]
 800478c:	88bb      	ldrh	r3, [r7, #4]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	4804      	ldr	r0, [pc, #16]	; (80047a8 <TS_IO_ReadMultiple+0x38>)
 8004798:	f7ff ff3e 	bl	8004618 <I2Cx_ReadMultiple>
 800479c:	4603      	mov	r3, r0
 800479e:	b29b      	uxth	r3, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000455c 	.word	0x2000455c

080047ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80047be:	f000 fd6b 	bl	8005298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_PeriodElapsedCallback+0x24>
	 tim4_cb();
 80047cc:	f000 fd00 	bl	80051d0 <tim4_cb>
  }

  /* USER CODE END Callback 1 */
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40001000 	.word	0x40001000
 80047dc:	40000800 	.word	0x40000800

080047e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_MspInit+0x4c>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a10      	ldr	r2, [pc, #64]	; (800483c <HAL_MspInit+0x4c>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_MspInit+0x4c>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_MspInit+0x4c>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_MspInit+0x4c>)
 8004814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004818:	6453      	str	r3, [r2, #68]	; 0x44
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_MspInit+0x4c>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	210f      	movs	r1, #15
 800482a:	f06f 0001 	mvn.w	r0, #1
 800482e:	f000 fe2f 	bl	8005490 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800

08004840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08e      	sub	sp, #56	; 0x38
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004850:	4b33      	ldr	r3, [pc, #204]	; (8004920 <HAL_InitTick+0xe0>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_InitTick+0xe0>)
 8004856:	f043 0310 	orr.w	r3, r3, #16
 800485a:	6413      	str	r3, [r2, #64]	; 0x40
 800485c:	4b30      	ldr	r3, [pc, #192]	; (8004920 <HAL_InitTick+0xe0>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004868:	f107 0210 	add.w	r2, r7, #16
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f004 f9a4 	bl	8008bc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004882:	f004 f975 	bl	8008b70 <HAL_RCC_GetPCLK1Freq>
 8004886:	6378      	str	r0, [r7, #52]	; 0x34
 8004888:	e004      	b.n	8004894 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800488a:	f004 f971 	bl	8008b70 <HAL_RCC_GetPCLK1Freq>
 800488e:	4603      	mov	r3, r0
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	4a23      	ldr	r2, [pc, #140]	; (8004924 <HAL_InitTick+0xe4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3b01      	subs	r3, #1
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_InitTick+0xe8>)
 80048a4:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_InitTick+0xec>)
 80048a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80048a8:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <HAL_InitTick+0xe8>)
 80048aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_InitTick+0xe8>)
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_InitTick+0xe8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <HAL_InitTick+0xe8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_InitTick+0xe8>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80048c8:	4817      	ldr	r0, [pc, #92]	; (8004928 <HAL_InitTick+0xe8>)
 80048ca:	f004 fe64 	bl	8009596 <HAL_TIM_Base_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80048d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11b      	bne.n	8004914 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80048dc:	4812      	ldr	r0, [pc, #72]	; (8004928 <HAL_InitTick+0xe8>)
 80048de:	f004 feb1 	bl	8009644 <HAL_TIM_Base_Start_IT>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80048e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d111      	bne.n	8004914 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048f0:	2036      	movs	r0, #54	; 0x36
 80048f2:	f000 fde9 	bl	80054c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d808      	bhi.n	800490e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	2036      	movs	r0, #54	; 0x36
 8004902:	f000 fdc5 	bl	8005490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004906:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_InitTick+0xf0>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e002      	b.n	8004914 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	431bde83 	.word	0x431bde83
 8004928:	20004668 	.word	0x20004668
 800492c:	40001000 	.word	0x40001000
 8004930:	20000040 	.word	0x20000040

08004934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004946:	e7fe      	b.n	8004946 <HardFault_Handler+0x4>

08004948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800494c:	e7fe      	b.n	800494c <MemManage_Handler+0x4>

0800494e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004952:	e7fe      	b.n	8004952 <BusFault_Handler+0x4>

08004954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004958:	e7fe      	b.n	8004958 <UsageFault_Handler+0x4>

0800495a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800495a:	b480      	push	{r7}
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <TIM4_IRQHandler+0x10>)
 800496e:	f004 ff38 	bl	80097e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20004700 	.word	0x20004700

0800497c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <USART1_IRQHandler+0x10>)
 8004982:	f005 fee5 	bl	800a750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000474c 	.word	0x2000474c

08004990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <TIM6_DAC_IRQHandler+0x10>)
 8004996:	f004 ff24 	bl	80097e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20004668 	.word	0x20004668

080049a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
	return 1;
 80049a8:	2301      	movs	r3, #1
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <_kill>:

int _kill(int pid, int sig)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049be:	f00a fb13 	bl	800efe8 <__errno>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2216      	movs	r2, #22
 80049c6:	601a      	str	r2, [r3, #0]
	return -1;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <_exit>:

void _exit (int status)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049dc:	f04f 31ff 	mov.w	r1, #4294967295
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ffe7 	bl	80049b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80049e6:	e7fe      	b.n	80049e6 <_exit+0x12>

080049e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e00a      	b.n	8004a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049fa:	f3af 8000 	nop.w
 80049fe:	4601      	mov	r1, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	60ba      	str	r2, [r7, #8]
 8004a06:	b2ca      	uxtb	r2, r1
 8004a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	dbf0      	blt.n	80049fa <_read+0x12>
	}

return len;
 8004a18:	687b      	ldr	r3, [r7, #4]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e009      	b.n	8004a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	60ba      	str	r2, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd fa3b 	bl	8001eb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	dbf1      	blt.n	8004a34 <_write+0x12>
	}
	return len;
 8004a50:	687b      	ldr	r3, [r7, #4]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_close>:

int _close(int file)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
	return -1;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a82:	605a      	str	r2, [r3, #4]
	return 0;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <_isatty>:

int _isatty(int file)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
	return 1;
 8004a9a:	2301      	movs	r3, #1
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <SystemInit+0x5c>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <SystemInit+0x5c>)
 8004ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <SystemInit+0x60>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <SystemInit+0x60>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <SystemInit+0x60>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <SystemInit+0x60>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	490d      	ldr	r1, [pc, #52]	; (8004b24 <SystemInit+0x60>)
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <SystemInit+0x64>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <SystemInit+0x60>)
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <SystemInit+0x68>)
 8004afa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <SystemInit+0x60>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <SystemInit+0x60>)
 8004b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <SystemInit+0x60>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <SystemInit+0x5c>)
 8004b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b14:	609a      	str	r2, [r3, #8]
#endif
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00
 8004b24:	40023800 	.word	0x40023800
 8004b28:	fef6ffff 	.word	0xfef6ffff
 8004b2c:	24003010 	.word	0x24003010

08004b30 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b42:	463b      	mov	r3, r7
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	615a      	str	r2, [r3, #20]
 8004b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <MX_TIM3_Init+0xb0>)
 8004b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b7a:	4818      	ldr	r0, [pc, #96]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b7c:	f004 fdda 	bl	8009734 <HAL_TIM_PWM_Init>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004b86:	f7ff fe2b 	bl	80047e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b92:	f107 031c 	add.w	r3, r7, #28
 8004b96:	4619      	mov	r1, r3
 8004b98:	4810      	ldr	r0, [pc, #64]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004b9a:	f005 fcdf 	bl	800a55c <HAL_TIMEx_MasterConfigSynchronization>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004ba4:	f7ff fe1c 	bl	80047e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ba8:	2360      	movs	r3, #96	; 0x60
 8004baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004bb8:	463b      	mov	r3, r7
 8004bba:	2208      	movs	r2, #8
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4807      	ldr	r0, [pc, #28]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004bc0:	f004 ff2e 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004bca:	f7ff fe09 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004bce:	4803      	ldr	r0, [pc, #12]	; (8004bdc <MX_TIM3_Init+0xac>)
 8004bd0:	f000 f89c 	bl	8004d0c <HAL_TIM_MspPostInit>

}
 8004bd4:	bf00      	nop
 8004bd6:	3728      	adds	r7, #40	; 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200046b4 	.word	0x200046b4
 8004be0:	40000400 	.word	0x40000400

08004be4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bea:	f107 0310 	add.w	r3, r7, #16
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <MX_TIM4_Init+0x98>)
 8004c06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c0a:	2263      	movs	r2, #99	; 0x63
 8004c0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c16:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c1c:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004c28:	4813      	ldr	r0, [pc, #76]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c2a:	f004 fcb4 	bl	8009596 <HAL_TIM_Base_Init>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004c34:	f7ff fdd4 	bl	80047e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4619      	mov	r1, r3
 8004c44:	480c      	ldr	r0, [pc, #48]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c46:	f004 ffff 	bl	8009c48 <HAL_TIM_ConfigClockSource>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004c50:	f7ff fdc6 	bl	80047e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c54:	2320      	movs	r3, #32
 8004c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4805      	ldr	r0, [pc, #20]	; (8004c78 <MX_TIM4_Init+0x94>)
 8004c62:	f005 fc7b 	bl	800a55c <HAL_TIMEx_MasterConfigSynchronization>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004c6c:	f7ff fdb8 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20004700 	.word	0x20004700
 8004c7c:	40000800 	.word	0x40000800

08004c80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_TIM_PWM_MspInit+0x38>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10b      	bne.n	8004caa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_TIM_PWM_MspInit+0x3c>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40023800 	.word	0x40023800

08004cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <HAL_TIM_Base_MspInit+0x44>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d113      	bne.n	8004cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_TIM_Base_MspInit+0x48>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <HAL_TIM_Base_MspInit+0x48>)
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <HAL_TIM_Base_MspInit+0x48>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004cea:	2200      	movs	r2, #0
 8004cec:	2105      	movs	r1, #5
 8004cee:	201e      	movs	r0, #30
 8004cf0:	f000 fbce 	bl	8005490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cf4:	201e      	movs	r0, #30
 8004cf6:	f000 fbe7 	bl	80054c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40023800 	.word	0x40023800

08004d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	60da      	str	r2, [r3, #12]
 8004d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <HAL_TIM_MspPostInit+0x64>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d11c      	bne.n	8004d68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_TIM_MspPostInit+0x68>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_TIM_MspPostInit+0x68>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_TIM_MspPostInit+0x68>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8004d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8004d5c:	f107 030c 	add.w	r3, r7, #12
 8004d60:	4619      	mov	r1, r3
 8004d62:	4805      	ldr	r0, [pc, #20]	; (8004d78 <HAL_TIM_MspPostInit+0x6c>)
 8004d64:	f001 fe40 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020800 	.word	0x40020800

08004d7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <MX_USART1_UART_Init+0x5c>)
 8004d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004da2:	220c      	movs	r2, #12
 8004da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dbe:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <MX_USART1_UART_Init+0x58>)
 8004dc0:	f005 fc78 	bl	800a6b4 <HAL_UART_Init>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004dca:	f7ff fd09 	bl	80047e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000474c 	.word	0x2000474c
 8004dd8:	40011000 	.word	0x40011000

08004ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0ae      	sub	sp, #184	; 0xb8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	609a      	str	r2, [r3, #8]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004df4:	f107 0314 	add.w	r3, r7, #20
 8004df8:	2290      	movs	r2, #144	; 0x90
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f00a f84e 	bl	800ee9e <memset>
  if(uartHandle->Instance==USART1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <HAL_UART_MspInit+0xec>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d159      	bne.n	8004ec0 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004e0c:	2340      	movs	r3, #64	; 0x40
 8004e0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8004e10:	2302      	movs	r3, #2
 8004e12:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f003 ff03 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004e24:	f7ff fcdc 	bl	80047e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e2e:	f043 0310 	orr.w	r3, r3, #16
 8004e32:	6453      	str	r3, [r2, #68]	; 0x44
 8004e34:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <HAL_UART_MspInit+0xf0>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e60:	2302      	movs	r3, #2
 8004e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e72:	2307      	movs	r3, #7
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4814      	ldr	r0, [pc, #80]	; (8004ed0 <HAL_UART_MspInit+0xf4>)
 8004e80:	f001 fdb2 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e9e:	2307      	movs	r3, #7
 8004ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <HAL_UART_MspInit+0xf4>)
 8004eac:	f001 fd9c 	bl	80069e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2105      	movs	r1, #5
 8004eb4:	2025      	movs	r0, #37	; 0x25
 8004eb6:	f000 faeb 	bl	8005490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004eba:	2025      	movs	r0, #37	; 0x25
 8004ebc:	f000 fb04 	bl	80054c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	37b8      	adds	r7, #184	; 0xb8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40020000 	.word	0x40020000

08004ed4 <freeRTOS_user_init>:
/* Functions definition ------------------------------------------------------*/
/**
 * @brief Create the FreeRTOS objects and tasks.
 * @return true if the tasks are created, false otherwise.
 */
void freeRTOS_user_init(void) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af02      	add	r7, sp, #8
	bool retval = true;
 8004eda:	2301      	movs	r3, #1
 8004edc:	71fb      	strb	r3, [r7, #7]

	sem_fruit_control = xSemaphoreCreateBinary();
 8004ede:	2203      	movs	r2, #3
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f007 f820 	bl	800bf28 <xQueueGenericCreate>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4a45      	ldr	r2, [pc, #276]	; (8005000 <freeRTOS_user_init+0x12c>)
 8004eec:	6013      	str	r3, [r2, #0]
	if (sem_fruit_control == NULL)
 8004eee:	4b44      	ldr	r3, [pc, #272]	; (8005000 <freeRTOS_user_init+0x12c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <freeRTOS_user_init+0x26>
		retval = false;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	71fb      	strb	r3, [r7, #7]

	sem_touch = xSemaphoreCreateBinary();
 8004efa:	2203      	movs	r2, #3
 8004efc:	2100      	movs	r1, #0
 8004efe:	2001      	movs	r0, #1
 8004f00:	f007 f812 	bl	800bf28 <xQueueGenericCreate>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a3f      	ldr	r2, [pc, #252]	; (8005004 <freeRTOS_user_init+0x130>)
 8004f08:	6013      	str	r3, [r2, #0]
	if (sem_touch == NULL)
 8004f0a:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <freeRTOS_user_init+0x130>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <freeRTOS_user_init+0x42>
		retval = false;
 8004f12:	2300      	movs	r3, #0
 8004f14:	71fb      	strb	r3, [r7, #7]

	sem_disp = xSemaphoreCreateBinary();
 8004f16:	2203      	movs	r2, #3
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f007 f804 	bl	800bf28 <xQueueGenericCreate>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a39      	ldr	r2, [pc, #228]	; (8005008 <freeRTOS_user_init+0x134>)
 8004f24:	6013      	str	r3, [r2, #0]
		if (sem_touch == NULL)
 8004f26:	4b37      	ldr	r3, [pc, #220]	; (8005004 <freeRTOS_user_init+0x130>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <freeRTOS_user_init+0x5e>
		retval = false;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate(task_fruit_launch,		//Task function
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <freeRTOS_user_init+0x138>)
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2301      	movs	r3, #1
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f40:	4933      	ldr	r1, [pc, #204]	; (8005010 <freeRTOS_user_init+0x13c>)
 8004f42:	4834      	ldr	r0, [pc, #208]	; (8005014 <freeRTOS_user_init+0x140>)
 8004f44:	f007 fe75 	bl	800cc32 <xTaskCreate>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			1,								//Task priority
			&task_fruit_launch_handle);			//Task handle

	retval &= xTaskCreate(task_fruit_control,		//Task function
 8004f58:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <freeRTOS_user_init+0x144>)
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f66:	492d      	ldr	r1, [pc, #180]	; (800501c <freeRTOS_user_init+0x148>)
 8004f68:	482d      	ldr	r0, [pc, #180]	; (8005020 <freeRTOS_user_init+0x14c>)
 8004f6a:	f007 fe62 	bl	800cc32 <xTaskCreate>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			2,								//Task priority
			&task_fruit_control_handle);			//Task handle

	retval &= xTaskCreate(task_display_game,		//Task function
 8004f7e:	4b29      	ldr	r3, [pc, #164]	; (8005024 <freeRTOS_user_init+0x150>)
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2302      	movs	r3, #2
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	2300      	movs	r3, #0
 8004f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f8c:	4926      	ldr	r1, [pc, #152]	; (8005028 <freeRTOS_user_init+0x154>)
 8004f8e:	4827      	ldr	r0, [pc, #156]	; (800502c <freeRTOS_user_init+0x158>)
 8004f90:	f007 fe4f 	bl	800cc32 <xTaskCreate>
 8004f94:	4602      	mov	r2, r0
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			2,								//Task priority
			&task_display_game_handle);			//Task handle

	retval &= xTaskCreate(task_touch_fct,		//Task function
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <freeRTOS_user_init+0x15c>)
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2303      	movs	r3, #3
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb2:	4920      	ldr	r1, [pc, #128]	; (8005034 <freeRTOS_user_init+0x160>)
 8004fb4:	4820      	ldr	r0, [pc, #128]	; (8005038 <freeRTOS_user_init+0x164>)
 8004fb6:	f007 fe3c 	bl	800cc32 <xTaskCreate>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	71fb      	strb	r3, [r7, #7]
			256,							//Task stack dimension (1kB)
			NULL,							//Task parameter
			3,								//Task priority
			&task_touch_handle);			//Task handle

	sw_tim_touch_handle = xTimerCreate("Timer touch", //Timer description
 8004fca:	4b1c      	ldr	r3, [pc, #112]	; (800503c <freeRTOS_user_init+0x168>)
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2114      	movs	r1, #20
 8004fd4:	481a      	ldr	r0, [pc, #104]	; (8005040 <freeRTOS_user_init+0x16c>)
 8004fd6:	f008 fe61 	bl	800dc9c <xTimerCreate>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <freeRTOS_user_init+0x170>)
 8004fde:	6013      	str	r3, [r2, #0]
			pdMS_TO_TICKS(20), //Timer period
			pdTRUE, //Timer is periodic
			NULL, //Timer ID
			sw_tim_touch_cb); //Timer callback fct.

	sw_tim_disp_handle = xTimerCreate("Timer display", //Timer description
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <freeRTOS_user_init+0x174>)
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	2121      	movs	r1, #33	; 0x21
 8004fea:	4818      	ldr	r0, [pc, #96]	; (800504c <freeRTOS_user_init+0x178>)
 8004fec:	f008 fe56 	bl	800dc9c <xTimerCreate>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <freeRTOS_user_init+0x17c>)
 8004ff4:	6013      	str	r3, [r2, #0]
			pdMS_TO_TICKS(33), //Timer period
			pdTRUE, //Timer is periodic
			NULL, //Timer ID
			sw_tim_disp_cb); //Timer callback fct.
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20004814 	.word	0x20004814
 8005004:	20004818 	.word	0x20004818
 8005008:	2000481c 	.word	0x2000481c
 800500c:	200047fc 	.word	0x200047fc
 8005010:	08010324 	.word	0x08010324
 8005014:	08005055 	.word	0x08005055
 8005018:	20004800 	.word	0x20004800
 800501c:	08010334 	.word	0x08010334
 8005020:	080050a5 	.word	0x080050a5
 8005024:	20004804 	.word	0x20004804
 8005028:	08010344 	.word	0x08010344
 800502c:	080050d9 	.word	0x080050d9
 8005030:	20004808 	.word	0x20004808
 8005034:	08010354 	.word	0x08010354
 8005038:	08005121 	.word	0x08005121
 800503c:	080051e9 	.word	0x080051e9
 8005040:	08010364 	.word	0x08010364
 8005044:	2000480c 	.word	0x2000480c
 8005048:	08005201 	.word	0x08005201
 800504c:	08010370 	.word	0x08010370
 8005050:	20004810 	.word	0x20004810

08005054 <task_fruit_launch>:

static void task_fruit_launch(void *pvParameters) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	while (1) {
		if (fruit1.type == off && fruit2.type == off && fruit3.type == off
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <task_fruit_launch+0x3c>)
 800505e:	7d1b      	ldrb	r3, [r3, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <task_fruit_launch+0x34>
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <task_fruit_launch+0x40>)
 8005066:	7d1b      	ldrb	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10d      	bne.n	8005088 <task_fruit_launch+0x34>
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <task_fruit_launch+0x44>)
 800506e:	7d1b      	ldrb	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <task_fruit_launch+0x34>
				&& fruit4.type == off && fruit5.type == off)
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <task_fruit_launch+0x48>)
 8005076:	7d1b      	ldrb	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <task_fruit_launch+0x34>
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <task_fruit_launch+0x4c>)
 800507e:	7d1b      	ldrb	r3, [r3, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <task_fruit_launch+0x34>
			fruit_launch();
 8005084:	f7fd faec 	bl	8002660 <fruit_launch>
		vTaskDelay(pdMS_TO_TICKS(10));
 8005088:	200a      	movs	r0, #10
 800508a:	f007 ff2f 	bl	800ceec <vTaskDelay>
		if (fruit1.type == off && fruit2.type == off && fruit3.type == off
 800508e:	e7e5      	b.n	800505c <task_fruit_launch+0x8>
 8005090:	200043cc 	.word	0x200043cc
 8005094:	200043e4 	.word	0x200043e4
 8005098:	200043fc 	.word	0x200043fc
 800509c:	20004414 	.word	0x20004414
 80050a0:	2000442c 	.word	0x2000442c

080050a4 <task_fruit_control>:
	}
}
static void task_fruit_control(void *pvParameters) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 80050ac:	4808      	ldr	r0, [pc, #32]	; (80050d0 <task_fruit_control+0x2c>)
 80050ae:	f004 fac9 	bl	8009644 <HAL_TIM_Base_Start_IT>
	BaseType_t retval;
	while (1) {
		//Wait for the semaphore indefinitely
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <task_fruit_control+0x30>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f04f 31ff 	mov.w	r1, #4294967295
 80050ba:	4618      	mov	r0, r3
 80050bc:	f007 fabc 	bl	800c638 <xQueueSemaphoreTake>
 80050c0:	60f8      	str	r0, [r7, #12]
		if (retval == pdTRUE) {
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d1f4      	bne.n	80050b2 <task_fruit_control+0xe>
			fruit_control();
 80050c8:	f7fd fb8e 	bl	80027e8 <fruit_control>
		retval = xSemaphoreTake(sem_fruit_control, portMAX_DELAY);
 80050cc:	e7f1      	b.n	80050b2 <task_fruit_control+0xe>
 80050ce:	bf00      	nop
 80050d0:	20004700 	.word	0x20004700
 80050d4:	20004814 	.word	0x20004814

080050d8 <task_display_game>:
		}

	}
}
static void task_display_game(void *pvParameters) {
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	af02      	add	r7, sp, #8
 80050de:	6078      	str	r0, [r7, #4]
	xTimerStart(sw_tim_disp_handle, portMAX_DELAY);
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <task_display_game+0x40>)
 80050e2:	681c      	ldr	r4, [r3, #0]
 80050e4:	f008 f85a 	bl	800d19c <xTaskGetTickCount>
 80050e8:	4602      	mov	r2, r0
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	2101      	movs	r1, #1
 80050f4:	4620      	mov	r0, r4
 80050f6:	f008 fe2f 	bl	800dd58 <xTimerGenericCommand>
	BaseType_t retval;
	while (1) {
		//Wait for the semaphore indefinitely
		retval = xSemaphoreTake(sem_disp, portMAX_DELAY);
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <task_display_game+0x44>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005102:	4618      	mov	r0, r3
 8005104:	f007 fa98 	bl	800c638 <xQueueSemaphoreTake>
 8005108:	60f8      	str	r0, [r7, #12]
		if (retval == pdTRUE) {
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d1f4      	bne.n	80050fa <task_display_game+0x22>
			//max 30Hz
			update_screen_game();
 8005110:	f7fe f8b8 	bl	8003284 <update_screen_game>
		retval = xSemaphoreTake(sem_disp, portMAX_DELAY);
 8005114:	e7f1      	b.n	80050fa <task_display_game+0x22>
 8005116:	bf00      	nop
 8005118:	20004810 	.word	0x20004810
 800511c:	2000481c 	.word	0x2000481c

08005120 <task_touch_fct>:
		}

	}
}

static void task_touch_fct(void *pvParameters) {
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b08b      	sub	sp, #44	; 0x2c
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
	TS_StateTypeDef TS_State;
	BaseType_t retval;

	xTimerStart(sw_tim_touch_handle, portMAX_DELAY);
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <task_touch_fct+0xa0>)
 800512a:	681c      	ldr	r4, [r3, #0]
 800512c:	f008 f836 	bl	800d19c <xTaskGetTickCount>
 8005130:	4602      	mov	r2, r0
 8005132:	f04f 33ff 	mov.w	r3, #4294967295
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	2101      	movs	r1, #1
 800513c:	4620      	mov	r0, r4
 800513e:	f008 fe0b 	bl	800dd58 <xTimerGenericCommand>
	while (1) {
		retval = xSemaphoreTake(sem_touch, portMAX_DELAY);
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <task_touch_fct+0xa4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f04f 31ff 	mov.w	r1, #4294967295
 800514a:	4618      	mov	r0, r3
 800514c:	f007 fa74 	bl	800c638 <xQueueSemaphoreTake>
 8005150:	61b8      	str	r0, [r7, #24]

		if (retval == pdTRUE) {
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d1f4      	bne.n	8005142 <task_touch_fct+0x22>
			//100ms
			BSP_TS_GetState(&TS_State);
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f7fc fa07 	bl	8001570 <BSP_TS_GetState>

			//shift buffer to make place for new value
			for (int i = TOUCH_CIRCBUFFER_SIZE - 1; i > 0; i--) {
 8005162:	2309      	movs	r3, #9
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e014      	b.n	8005192 <task_touch_fct+0x72>
				touch_points_x[i] = touch_points_x[i - 1];
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3b01      	subs	r3, #1
 800516c:	4a16      	ldr	r2, [pc, #88]	; (80051c8 <task_touch_fct+0xa8>)
 800516e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <task_touch_fct+0xa8>)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				touch_points_y[i] = touch_points_y[i - 1];
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3b01      	subs	r3, #1
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <task_touch_fct+0xac>)
 8005180:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <task_touch_fct+0xac>)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = TOUCH_CIRCBUFFER_SIZE - 1; i > 0; i--) {
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3b01      	subs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dce7      	bgt.n	8005168 <task_touch_fct+0x48>
			}

			//If at least one finger is on the touch creates the string to be wrote
			if (TS_State.touchDetected) {
 8005198:	7b3b      	ldrb	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <task_touch_fct+0x8c>
				//save the new poin in the array
				touch_points_x[0] = TS_State.touchX[0];
 800519e:	89fa      	ldrh	r2, [r7, #14]
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <task_touch_fct+0xa8>)
 80051a2:	801a      	strh	r2, [r3, #0]
				touch_points_y[0] = TS_State.touchY[0];
 80051a4:	8a7a      	ldrh	r2, [r7, #18]
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <task_touch_fct+0xac>)
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e005      	b.n	80051b8 <task_touch_fct+0x98>

			} else {
				//interpreted as no touch
				touch_points_x[0] = 0;
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <task_touch_fct+0xa8>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	801a      	strh	r2, [r3, #0]
				touch_points_y[0] = 0;
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <task_touch_fct+0xac>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	801a      	strh	r2, [r3, #0]
			}
			fruit_slice_control();
 80051b8:	f7fd fc70 	bl	8002a9c <fruit_slice_control>
		retval = xSemaphoreTake(sem_touch, portMAX_DELAY);
 80051bc:	e7c1      	b.n	8005142 <task_touch_fct+0x22>
 80051be:	bf00      	nop
 80051c0:	2000480c 	.word	0x2000480c
 80051c4:	20004818 	.word	0x20004818
 80051c8:	200047d4 	.word	0x200047d4
 80051cc:	200047e8 	.word	0x200047e8

080051d0 <tim4_cb>:
		}
	}
}

//Interrupt callbacks
void tim4_cb() {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
	//10ms
	xSemaphoreGiveFromISR(sem_fruit_control, NULL);
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <tim4_cb+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f007 f8b0 	bl	800c340 <xQueueGiveFromISR>
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20004814 	.word	0x20004814

080051e8 <sw_tim_touch_cb>:
static void sw_tim_touch_cb() {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(sem_touch, NULL);
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <sw_tim_touch_cb+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f007 f8a4 	bl	800c340 <xQueueGiveFromISR>
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20004818 	.word	0x20004818

08005200 <sw_tim_disp_cb>:


static void sw_tim_disp_cb(){
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(sem_disp, NULL);
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <sw_tim_disp_cb+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f007 f898 	bl	800c340 <xQueueGiveFromISR>
}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}
 8005214:	2000481c 	.word	0x2000481c

08005218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800521c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800521e:	e003      	b.n	8005228 <LoopCopyDataInit>

08005220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005226:	3104      	adds	r1, #4

08005228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005228:	480b      	ldr	r0, [pc, #44]	; (8005258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800522c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800522e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005230:	d3f6      	bcc.n	8005220 <CopyDataInit>
  ldr  r2, =_sbss
 8005232:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005234:	e002      	b.n	800523c <LoopFillZerobss>

08005236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005238:	f842 3b04 	str.w	r3, [r2], #4

0800523c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800523e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005240:	d3f9      	bcc.n	8005236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005242:	f7ff fc3f 	bl	8004ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005246:	f009 fed5 	bl	800eff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800524a:	f7ff f881 	bl	8004350 <main>
  bx  lr    
 800524e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005250:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005254:	080f8198 	.word	0x080f8198
  ldr  r0, =_sdata
 8005258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800525c:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8005260:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8005264:	20009354 	.word	0x20009354

08005268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005268:	e7fe      	b.n	8005268 <ADC_IRQHandler>
	...

0800526c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_Init+0x28>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a07      	ldr	r2, [pc, #28]	; (8005294 <HAL_Init+0x28>)
 8005276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800527c:	2003      	movs	r0, #3
 800527e:	f000 f8fc 	bl	800547a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005282:	200f      	movs	r0, #15
 8005284:	f7ff fadc 	bl	8004840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005288:	f7ff fab2 	bl	80047f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023c00 	.word	0x40023c00

08005298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_IncTick+0x20>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_IncTick+0x24>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4413      	add	r3, r2
 80052a8:	4a04      	ldr	r2, [pc, #16]	; (80052bc <HAL_IncTick+0x24>)
 80052aa:	6013      	str	r3, [r2, #0]
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000044 	.word	0x20000044
 80052bc:	20004820 	.word	0x20004820

080052c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return uwTick;
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_GetTick+0x14>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20004820 	.word	0x20004820

080052d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052e0:	f7ff ffee 	bl	80052c0 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d005      	beq.n	80052fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_Delay+0x44>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052fe:	bf00      	nop
 8005300:	f7ff ffde 	bl	80052c0 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	429a      	cmp	r2, r3
 800530e:	d8f7      	bhi.n	8005300 <HAL_Delay+0x28>
  {
  }
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000044 	.word	0x20000044

08005320 <__NVIC_SetPriorityGrouping>:
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <__NVIC_SetPriorityGrouping+0x40>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <__NVIC_SetPriorityGrouping+0x44>)
 800534a:	4313      	orrs	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534e:	4a04      	ldr	r2, [pc, #16]	; (8005360 <__NVIC_SetPriorityGrouping+0x40>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	05fa0000 	.word	0x05fa0000

08005368 <__NVIC_GetPriorityGrouping>:
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <__NVIC_GetPriorityGrouping+0x18>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	f003 0307 	and.w	r3, r3, #7
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <__NVIC_EnableIRQ>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	db0b      	blt.n	80053ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	4907      	ldr	r1, [pc, #28]	; (80053bc <__NVIC_EnableIRQ+0x38>)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2001      	movs	r0, #1
 80053a6:	fa00 f202 	lsl.w	r2, r0, r2
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000e100 	.word	0xe000e100

080053c0 <__NVIC_SetPriority>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	db0a      	blt.n	80053ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	490c      	ldr	r1, [pc, #48]	; (800540c <__NVIC_SetPriority+0x4c>)
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	440b      	add	r3, r1
 80053e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053e8:	e00a      	b.n	8005400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <__NVIC_SetPriority+0x50>)
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	3b04      	subs	r3, #4
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	440b      	add	r3, r1
 80053fe:	761a      	strb	r2, [r3, #24]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000e100 	.word	0xe000e100
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <NVIC_EncodePriority>:
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	2b04      	cmp	r3, #4
 8005430:	bf28      	it	cs
 8005432:	2304      	movcs	r3, #4
 8005434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3304      	adds	r3, #4
 800543a:	2b06      	cmp	r3, #6
 800543c:	d902      	bls.n	8005444 <NVIC_EncodePriority+0x30>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3b03      	subs	r3, #3
 8005442:	e000      	b.n	8005446 <NVIC_EncodePriority+0x32>
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43da      	mvns	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	401a      	ands	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800545c:	f04f 31ff 	mov.w	r1, #4294967295
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	43d9      	mvns	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800546c:	4313      	orrs	r3, r2
}
 800546e:	4618      	mov	r0, r3
 8005470:	3724      	adds	r7, #36	; 0x24
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff ff4c 	bl	8005320 <__NVIC_SetPriorityGrouping>
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054a2:	f7ff ff61 	bl	8005368 <__NVIC_GetPriorityGrouping>
 80054a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6978      	ldr	r0, [r7, #20]
 80054ae:	f7ff ffb1 	bl	8005414 <NVIC_EncodePriority>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ff80 	bl	80053c0 <__NVIC_SetPriority>
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ff54 	bl	8005384 <__NVIC_EnableIRQ>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054f2:	f7ff fee5 	bl	80052c0 <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d008      	beq.n	8005516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2280      	movs	r2, #128	; 0x80
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e052      	b.n	80055bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0216 	bic.w	r2, r2, #22
 8005524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_DMA_Abort+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0208 	bic.w	r2, r2, #8
 8005554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005566:	e013      	b.n	8005590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005568:	f7ff feaa 	bl	80052c0 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b05      	cmp	r3, #5
 8005574:	d90c      	bls.n	8005590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2203      	movs	r2, #3
 8005580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e015      	b.n	80055bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e4      	bne.n	8005568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	223f      	movs	r2, #63	; 0x3f
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e00c      	b.n	80055fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2205      	movs	r2, #5
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e049      	b.n	80056ae <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fdc8 	bl	80021c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	f023 0107 	bic.w	r1, r3, #7
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_DMA2D_Init+0xb0>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68d1      	ldr	r1, [r2, #12]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	430b      	orrs	r3, r1
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	051a      	lsls	r2, r3, #20
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	055b      	lsls	r3, r3, #21
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	ffffc000 	.word	0xffffc000

080056bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_DMA2D_Start+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e018      	b.n	800570a <HAL_DMA2D_Start+0x4e>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f9a2 	bl	8005a3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d056      	beq.n	80057dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800572e:	f7ff fdc7 	bl	80052c0 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005734:	e04b      	b.n	80057ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005744:	2b00      	cmp	r3, #0
 8005746:	d023      	beq.n	8005790 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0202 	orr.w	r2, r3, #2
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2221      	movs	r2, #33	; 0x21
 800577a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0a5      	b.n	80058dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d01a      	beq.n	80057ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005798:	f7ff fd92 	bl	80052c0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <HAL_DMA2D_PollForTransfer+0x9c>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e086      	b.n	80058dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ac      	beq.n	8005736 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d061      	beq.n	80058c2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80057fe:	f7ff fd5f 	bl	80052c0 <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005804:	e056      	b.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02e      	beq.n	8005876 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f043 0204 	orr.w	r2, r3, #4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	f043 0202 	orr.w	r2, r3, #2
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f043 0201 	orr.w	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2229      	movs	r2, #41	; 0x29
 8005860:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2204      	movs	r2, #4
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e032      	b.n	80058dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d01a      	beq.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7ff fd1f 	bl	80052c0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <HAL_DMA2D_PollForTransfer+0x182>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10f      	bne.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2203      	movs	r2, #3
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e013      	b.n	80058dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0a1      	beq.n	8005806 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2212      	movs	r2, #18
 80058c8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_DMA2D_ConfigLayer+0x20>
 8005900:	2302      	movs	r3, #2
 8005902:	e084      	b.n	8005a0e <HAL_DMA2D_ConfigLayer+0x12a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	3320      	adds	r3, #32
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005938:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005944:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <HAL_DMA2D_ConfigLayer+0x138>)
 8005946:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b0a      	cmp	r3, #10
 800594e:	d003      	beq.n	8005958 <HAL_DMA2D_ConfigLayer+0x74>
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b09      	cmp	r3, #9
 8005956:	d107      	bne.n	8005968 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e005      	b.n	8005974 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d120      	bne.n	80059bc <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	43db      	mvns	r3, r3
 8005984:	ea02 0103 	and.w	r1, r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	430a      	orrs	r2, r1
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b0a      	cmp	r3, #10
 80059a2:	d003      	beq.n	80059ac <HAL_DMA2D_ConfigLayer+0xc8>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d127      	bne.n	80059fc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28
 80059ba:	e01f      	b.n	80059fc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	ea02 0103 	and.w	r1, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b0a      	cmp	r3, #10
 80059e4:	d003      	beq.n	80059ee <HAL_DMA2D_ConfigLayer+0x10a>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d106      	bne.n	80059fc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059fa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	ff33000f 	.word	0xff33000f

08005a20 <HAL_DMA2D_GetState>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL state
  */
HAL_DMA2D_StateTypeDef HAL_DMA2D_GetState(DMA2D_HandleTypeDef *hdma2d)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  return hdma2d->State;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2e:	b2db      	uxtb	r3, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08b      	sub	sp, #44	; 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	041a      	lsls	r2, r3, #16
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a74:	d174      	bne.n	8005b60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005aac:	e053      	b.n	8005b56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d106      	bne.n	8005ac4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	e048      	b.n	8005b56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d111      	bne.n	8005af0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	0cdb      	lsrs	r3, r3, #19
 8005ad0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	0a9b      	lsrs	r3, r3, #10
 8005ad6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	02db      	lsls	r3, r3, #11
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	e032      	b.n	8005b56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d117      	bne.n	8005b28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	0fdb      	lsrs	r3, r3, #31
 8005afc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	0cdb      	lsrs	r3, r3, #19
 8005b02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	0adb      	lsrs	r3, r3, #11
 8005b08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	029b      	lsls	r3, r3, #10
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	03db      	lsls	r3, r3, #15
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	e016      	b.n	8005b56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	0f1b      	lsrs	r3, r3, #28
 8005b2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	0b1b      	lsrs	r3, r3, #12
 8005b38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	011a      	lsls	r2, r3, #4
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	031b      	lsls	r3, r3, #12
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b5e:	e003      	b.n	8005b68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	60da      	str	r2, [r3, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	372c      	adds	r7, #44	; 0x2c
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	019a      	lsls	r2, r3, #6
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb4:	f7ff fb84 	bl	80052c0 <HAL_GetTick>
 8005bb8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005bba:	e009      	b.n	8005bd0 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005bbc:	f7ff fb80 	bl	80052c0 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bca:	d901      	bls.n	8005bd0 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e015      	b.n	8005bfc <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0ee      	beq.n	8005bbc <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	019a      	lsls	r2, r3, #6
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	ea42 0103 	orr.w	r1, r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	041a      	lsls	r2, r3, #16
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e109      	b.n	8005e2c <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7c5b      	ldrb	r3, [r3, #17]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fc fbdc 	bl	80023e0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005c42:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c56:	f7ff fb33 	bl	80052c0 <HAL_GetTick>
 8005c5a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005c5c:	e009      	b.n	8005c72 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005c5e:	f7ff fb2f 	bl	80052c0 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c6c:	d901      	bls.n	8005c72 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0dc      	b.n	8005e2c <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ed      	beq.n	8005c5e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b69      	ldr	r3, [pc, #420]	; (8005e34 <HAL_DSI_Init+0x230>)
 8005c90:	400b      	ands	r3, r1
 8005c92:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005caa:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005cb2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	f7ff faf6 	bl	80052d8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cec:	f7ff fae8 	bl	80052c0 <HAL_GetTick>
 8005cf0:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005cf2:	e009      	b.n	8005d08 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005cf4:	f7ff fae4 	bl	80052c0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d02:	d901      	bls.n	8005d08 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e091      	b.n	8005e2c <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ed      	beq.n	8005cf4 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0206 	orr.w	r2, r2, #6
 8005d28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0203 	bic.w	r2, r2, #3
 8005d3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0203 	bic.w	r2, r2, #3
 8005d6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_DSI_Init+0x1b0>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	e000      	b.n	8005db6 <HAL_DSI_Init+0x1b2>
 8005db4:	2301      	movs	r3, #1
 8005db6:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_DSI_Init+0x234>)
 8005dbc:	fb03 f202 	mul.w	r2, r3, r2
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005dec:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	fffc8603 	.word	0xfffc8603
 8005e38:	003d0900 	.word	0x003d0900

08005e3c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e066      	b.n	8005f1c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2203      	movs	r2, #3
 8005e52:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0208 	bic.w	r2, r2, #8
 8005e68:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0206 	bic.w	r2, r2, #6
 8005eae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005eee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc fa8c 	bl	8002420 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7c1b      	ldrb	r3, [r3, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_DSI_ConfigErrorMonitor+0x16>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e0aa      	b.n	8006090 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f74:	430b      	orrs	r3, r1
 8005f76:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8005f94:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0202 	orr.w	r2, r2, #2
 8005fd0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 020c 	orr.w	r2, r2, #12
 8005fee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0210 	orr.w	r2, r2, #16
 800600c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0220 	orr.w	r2, r2, #32
 800602a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006048:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006066:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006084:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c1b      	ldrb	r3, [r3, #16]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_DSI_SetGenericVCID+0x16>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e016      	b.n	80060e0 <HAL_DSI_SetGenericVCID+0x44>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0203 	bic.w	r2, r2, #3
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7c1b      	ldrb	r3, [r3, #16]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_DSI_ConfigVideoMode+0x16>
 80060fe:	2302      	movs	r3, #2
 8006100:	e1ee      	b.n	80064e0 <HAL_DSI_ConfigVideoMode+0x3f4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0203 	bic.w	r2, r2, #3
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b8b      	ldr	r3, [pc, #556]	; (8006388 <HAL_DSI_ConfigVideoMode+0x29c>)
 800615a:	400b      	ands	r3, r1
 800615c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b84      	ldr	r3, [pc, #528]	; (800638c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800617c:	400b      	ands	r3, r1
 800617e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b7b      	ldr	r3, [pc, #492]	; (800638c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800619e:	400b      	ands	r3, r1
 80061a0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0203 	bic.w	r2, r2, #3
 80061c2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68d9      	ldr	r1, [r3, #12]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0207 	bic.w	r2, r2, #7
 80061e4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6959      	ldr	r1, [r3, #20]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 020f 	bic.w	r2, r2, #15
 8006212:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6919      	ldr	r1, [r3, #16]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 020e 	bic.w	r2, r2, #14
 8006236:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	005a      	lsls	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d110      	bne.n	800627c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006268:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6919      	ldr	r1, [r3, #16]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b42      	ldr	r3, [pc, #264]	; (8006390 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8006288:	400b      	ands	r3, r1
 800628a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80062aa:	400b      	ands	r3, r1
 80062ac:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b32      	ldr	r3, [pc, #200]	; (8006394 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80062cc:	400b      	ands	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b2a      	ldr	r3, [pc, #168]	; (8006398 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80062ee:	400b      	ands	r3, r1
 80062f0:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b22      	ldr	r3, [pc, #136]	; (8006398 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006310:	400b      	ands	r3, r1
 8006312:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8006332:	400b      	ands	r3, r1
 8006334:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <HAL_DSI_ConfigVideoMode+0x29c>)
 8006354:	400b      	ands	r3, r1
 8006356:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006384:	e00a      	b.n	800639c <HAL_DSI_ConfigVideoMode+0x2b0>
 8006386:	bf00      	nop
 8006388:	ffffc000 	.word	0xffffc000
 800638c:	ffffe000 	.word	0xffffe000
 8006390:	fffff000 	.word	0xfffff000
 8006394:	ffff8000 	.word	0xffff8000
 8006398:	fffffc00 	.word	0xfffffc00
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80063b2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6999      	ldr	r1, [r3, #24]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	041a      	lsls	r2, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063d6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7c1b      	ldrb	r3, [r3, #16]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_DSI_ConfigFlowControl+0x16>
 80064fe:	2302      	movs	r3, #2
 8006500:	e016      	b.n	8006530 <HAL_DSI_ConfigFlowControl+0x44>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 021f 	bic.w	r2, r2, #31
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7c1b      	ldrb	r3, [r3, #16]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_DSI_ConfigPhyTimer+0x16>
 800654e:	2302      	movs	r3, #2
 8006550:	e058      	b.n	8006604 <HAL_DSI_ConfigPhyTimer+0xc8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4293      	cmp	r3, r2
 8006562:	bf38      	it	cc
 8006564:	4613      	movcc	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8006578:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	041a      	lsls	r2, r3, #16
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80065a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80065e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	021a      	lsls	r2, r3, #8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_DSI_ConfigHostTimeouts+0x16>
 8006622:	2302      	movs	r3, #2
 8006624:	e0b4      	b.n	8006790 <HAL_DSI_ConfigHostTimeouts+0x180>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800663a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	b292      	uxth	r2, r2
 800665c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	041a      	lsls	r2, r3, #16
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b47      	ldr	r3, [pc, #284]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800667e:	400b      	ands	r3, r1
 8006680:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b3f      	ldr	r3, [pc, #252]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80066a0:	400b      	ands	r3, r1
 80066a2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b36      	ldr	r3, [pc, #216]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80066c4:	400b      	ands	r3, r1
 80066c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b2b      	ldr	r3, [pc, #172]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	695a      	ldr	r2, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800671a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8006742:	400b      	ands	r3, r1
 8006744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800676c:	400b      	ands	r3, r1
 800676e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	ffff0000 	.word	0xffff0000

080067a0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7c1b      	ldrb	r3, [r3, #16]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_DSI_Start+0x14>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e02b      	b.n	800680c <HAL_DSI_Start+0x6c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0201 	orr.w	r2, r2, #1
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0208 	orr.w	r2, r2, #8
 80067f0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7c1b      	ldrb	r3, [r3, #16]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_DSI_ShortWrite+0x1a>
 800682e:	2302      	movs	r3, #2
 8006830:	e010      	b.n	8006854 <HAL_DSI_ShortWrite+0x3c>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff f9af 	bl	8005ba6 <DSI_ShortWrite>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	741a      	strb	r2, [r3, #16]

  return status;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	; 0x30
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	7c1b      	ldrb	r3, [r3, #16]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_DSI_LongWrite+0x1e>
 8006876:	2302      	movs	r3, #2
 8006878:	e084      	b.n	8006984 <HAL_DSI_LongWrite+0x128>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7fe fd1e 	bl	80052c0 <HAL_GetTick>
 8006884:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006886:	e00c      	b.n	80068a2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006888:	f7fe fd1a 	bl	80052c0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006896:	d904      	bls.n	80068a2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e070      	b.n	8006984 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0eb      	beq.n	8006888 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	bf28      	it	cs
 80068ba:	2303      	movcs	r3, #3
 80068bc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80068be:	2300      	movs	r3, #0
 80068c0:	623b      	str	r3, [r7, #32]
 80068c2:	e00f      	b.n	80068e4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	3301      	adds	r3, #1
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	4313      	orrs	r3, r2
 80068dc:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	3301      	adds	r3, #1
 80068e2:	623b      	str	r3, [r7, #32]
 80068e4:	6a3a      	ldr	r2, [r7, #32]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d3eb      	bcc.n	80068c4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4413      	add	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006904:	e028      	b.n	8006958 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	2b04      	cmp	r3, #4
 800690a:	bf28      	it	cs
 800690c:	2304      	movcs	r3, #4
 800690e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8006914:	2300      	movs	r3, #0
 8006916:	623b      	str	r3, [r7, #32]
 8006918:	e00e      	b.n	8006938 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	4313      	orrs	r3, r2
 8006930:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	3301      	adds	r3, #1
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	429a      	cmp	r2, r3
 800693e:	d3ec      	bcc.n	800691a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1d3      	bne.n	8006906 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006966:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800696e:	b2db      	uxtb	r3, r3
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	f7ff f8fc 	bl	8005b74 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3728      	adds	r7, #40	; 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7c1b      	ldrb	r3, [r3, #16]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800699e:	2302      	movs	r3, #2
 80069a0:	e01b      	b.n	80069da <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80069b8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	065a      	lsls	r2, r3, #25
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	e175      	b.n	8006cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a08:	2201      	movs	r2, #1
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f040 8164 	bne.w	8006cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d005      	beq.n	8006a3e <HAL_GPIO_Init+0x56>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d130      	bne.n	8006aa0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	4013      	ands	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a74:	2201      	movs	r2, #1
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	4013      	ands	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 0201 	and.w	r2, r3, #1
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d017      	beq.n	8006adc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d123      	bne.n	8006b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	08da      	lsrs	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3208      	adds	r2, #8
 8006af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	220f      	movs	r2, #15
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	08da      	lsrs	r2, r3, #3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3208      	adds	r2, #8
 8006b2a:	69b9      	ldr	r1, [r7, #24]
 8006b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4013      	ands	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 0203 	and.w	r2, r3, #3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	fa02 f303 	lsl.w	r3, r2, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80be 	beq.w	8006cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b72:	4b66      	ldr	r3, [pc, #408]	; (8006d0c <HAL_GPIO_Init+0x324>)
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	4a65      	ldr	r2, [pc, #404]	; (8006d0c <HAL_GPIO_Init+0x324>)
 8006b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b7e:	4b63      	ldr	r3, [pc, #396]	; (8006d0c <HAL_GPIO_Init+0x324>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b8a:	4a61      	ldr	r2, [pc, #388]	; (8006d10 <HAL_GPIO_Init+0x328>)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	3302      	adds	r3, #2
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	220f      	movs	r2, #15
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4013      	ands	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a58      	ldr	r2, [pc, #352]	; (8006d14 <HAL_GPIO_Init+0x32c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d037      	beq.n	8006c26 <HAL_GPIO_Init+0x23e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a57      	ldr	r2, [pc, #348]	; (8006d18 <HAL_GPIO_Init+0x330>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d031      	beq.n	8006c22 <HAL_GPIO_Init+0x23a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a56      	ldr	r2, [pc, #344]	; (8006d1c <HAL_GPIO_Init+0x334>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02b      	beq.n	8006c1e <HAL_GPIO_Init+0x236>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a55      	ldr	r2, [pc, #340]	; (8006d20 <HAL_GPIO_Init+0x338>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d025      	beq.n	8006c1a <HAL_GPIO_Init+0x232>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a54      	ldr	r2, [pc, #336]	; (8006d24 <HAL_GPIO_Init+0x33c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <HAL_GPIO_Init+0x22e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a53      	ldr	r2, [pc, #332]	; (8006d28 <HAL_GPIO_Init+0x340>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d019      	beq.n	8006c12 <HAL_GPIO_Init+0x22a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a52      	ldr	r2, [pc, #328]	; (8006d2c <HAL_GPIO_Init+0x344>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_GPIO_Init+0x226>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a51      	ldr	r2, [pc, #324]	; (8006d30 <HAL_GPIO_Init+0x348>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00d      	beq.n	8006c0a <HAL_GPIO_Init+0x222>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a50      	ldr	r2, [pc, #320]	; (8006d34 <HAL_GPIO_Init+0x34c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <HAL_GPIO_Init+0x21e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a4f      	ldr	r2, [pc, #316]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <HAL_GPIO_Init+0x21a>
 8006bfe:	2309      	movs	r3, #9
 8006c00:	e012      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c02:	230a      	movs	r3, #10
 8006c04:	e010      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c06:	2308      	movs	r3, #8
 8006c08:	e00e      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c0a:	2307      	movs	r3, #7
 8006c0c:	e00c      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c0e:	2306      	movs	r3, #6
 8006c10:	e00a      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c12:	2305      	movs	r3, #5
 8006c14:	e008      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c16:	2304      	movs	r3, #4
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e004      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e002      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c26:	2300      	movs	r3, #0
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	f002 0203 	and.w	r2, r2, #3
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	4093      	lsls	r3, r2
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c38:	4935      	ldr	r1, [pc, #212]	; (8006d10 <HAL_GPIO_Init+0x328>)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	3302      	adds	r3, #2
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c46:	4b3d      	ldr	r3, [pc, #244]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4013      	ands	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c6a:	4a34      	ldr	r2, [pc, #208]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c70:	4b32      	ldr	r3, [pc, #200]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c94:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ce8:	4a14      	ldr	r2, [pc, #80]	; (8006d3c <HAL_GPIO_Init+0x354>)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	f67f ae86 	bls.w	8006a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	3724      	adds	r7, #36	; 0x24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	40013800 	.word	0x40013800
 8006d14:	40020000 	.word	0x40020000
 8006d18:	40020400 	.word	0x40020400
 8006d1c:	40020800 	.word	0x40020800
 8006d20:	40020c00 	.word	0x40020c00
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40021400 	.word	0x40021400
 8006d2c:	40021800 	.word	0x40021800
 8006d30:	40021c00 	.word	0x40021c00
 8006d34:	40022000 	.word	0x40022000
 8006d38:	40022400 	.word	0x40022400
 8006d3c:	40013c00 	.word	0x40013c00

08006d40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e0d9      	b.n	8006f10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	f040 80c9 	bne.w	8006f0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006d78:	4a6b      	ldr	r2, [pc, #428]	; (8006f28 <HAL_GPIO_DeInit+0x1e8>)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	089b      	lsrs	r3, r3, #2
 8006d7e:	3302      	adds	r3, #2
 8006d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d84:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	220f      	movs	r2, #15
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	4013      	ands	r3, r2
 8006d98:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a63      	ldr	r2, [pc, #396]	; (8006f2c <HAL_GPIO_DeInit+0x1ec>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d037      	beq.n	8006e12 <HAL_GPIO_DeInit+0xd2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a62      	ldr	r2, [pc, #392]	; (8006f30 <HAL_GPIO_DeInit+0x1f0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d031      	beq.n	8006e0e <HAL_GPIO_DeInit+0xce>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a61      	ldr	r2, [pc, #388]	; (8006f34 <HAL_GPIO_DeInit+0x1f4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d02b      	beq.n	8006e0a <HAL_GPIO_DeInit+0xca>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a60      	ldr	r2, [pc, #384]	; (8006f38 <HAL_GPIO_DeInit+0x1f8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d025      	beq.n	8006e06 <HAL_GPIO_DeInit+0xc6>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a5f      	ldr	r2, [pc, #380]	; (8006f3c <HAL_GPIO_DeInit+0x1fc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01f      	beq.n	8006e02 <HAL_GPIO_DeInit+0xc2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_GPIO_DeInit+0x200>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d019      	beq.n	8006dfe <HAL_GPIO_DeInit+0xbe>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a5d      	ldr	r2, [pc, #372]	; (8006f44 <HAL_GPIO_DeInit+0x204>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_GPIO_DeInit+0xba>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a5c      	ldr	r2, [pc, #368]	; (8006f48 <HAL_GPIO_DeInit+0x208>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00d      	beq.n	8006df6 <HAL_GPIO_DeInit+0xb6>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a5b      	ldr	r2, [pc, #364]	; (8006f4c <HAL_GPIO_DeInit+0x20c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d007      	beq.n	8006df2 <HAL_GPIO_DeInit+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a5a      	ldr	r2, [pc, #360]	; (8006f50 <HAL_GPIO_DeInit+0x210>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d101      	bne.n	8006dee <HAL_GPIO_DeInit+0xae>
 8006dea:	2309      	movs	r3, #9
 8006dec:	e012      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006dee:	230a      	movs	r3, #10
 8006df0:	e010      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006df2:	2308      	movs	r3, #8
 8006df4:	e00e      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006df6:	2307      	movs	r3, #7
 8006df8:	e00c      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006dfa:	2306      	movs	r3, #6
 8006dfc:	e00a      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006dfe:	2305      	movs	r3, #5
 8006e00:	e008      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006e02:	2304      	movs	r3, #4
 8006e04:	e006      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006e06:	2303      	movs	r3, #3
 8006e08:	e004      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e002      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <HAL_GPIO_DeInit+0xd4>
 8006e12:	2300      	movs	r3, #0
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	f002 0203 	and.w	r2, r2, #3
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	4093      	lsls	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d132      	bne.n	8006e8a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006e24:	4b4b      	ldr	r3, [pc, #300]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	4949      	ldr	r1, [pc, #292]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006e32:	4b48      	ldr	r3, [pc, #288]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	4946      	ldr	r1, [pc, #280]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e40:	4b44      	ldr	r3, [pc, #272]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	43db      	mvns	r3, r3
 8006e48:	4942      	ldr	r1, [pc, #264]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	493f      	ldr	r1, [pc, #252]	; (8006f54 <HAL_GPIO_DeInit+0x214>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	220f      	movs	r2, #15
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006e6c:	4a2e      	ldr	r2, [pc, #184]	; (8006f28 <HAL_GPIO_DeInit+0x1e8>)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	089b      	lsrs	r3, r3, #2
 8006e72:	3302      	adds	r3, #2
 8006e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	43da      	mvns	r2, r3
 8006e7c:	482a      	ldr	r0, [pc, #168]	; (8006f28 <HAL_GPIO_DeInit+0x1e8>)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	400a      	ands	r2, r1
 8006e84:	3302      	adds	r3, #2
 8006e86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	2103      	movs	r1, #3
 8006e94:	fa01 f303 	lsl.w	r3, r1, r3
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	08da      	lsrs	r2, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3208      	adds	r2, #8
 8006ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	220f      	movs	r2, #15
 8006eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	08d2      	lsrs	r2, r2, #3
 8006ec0:	4019      	ands	r1, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3208      	adds	r2, #8
 8006ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	2103      	movs	r1, #3
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	401a      	ands	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	401a      	ands	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	2103      	movs	r1, #3
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	401a      	ands	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	f67f af22 	bls.w	8006d5c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40013800 	.word	0x40013800
 8006f2c:	40020000 	.word	0x40020000
 8006f30:	40020400 	.word	0x40020400
 8006f34:	40020800 	.word	0x40020800
 8006f38:	40020c00 	.word	0x40020c00
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40021400 	.word	0x40021400
 8006f44:	40021800 	.word	0x40021800
 8006f48:	40021c00 	.word	0x40021c00
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	40022400 	.word	0x40022400
 8006f54:	40013c00 	.word	0x40013c00

08006f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
 8006f64:	4613      	mov	r3, r2
 8006f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f68:	787b      	ldrb	r3, [r7, #1]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f6e:	887a      	ldrh	r2, [r7, #2]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006f74:	e003      	b.n	8006f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006f76:	887b      	ldrh	r3, [r7, #2]
 8006f78:	041a      	lsls	r2, r3, #16
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	619a      	str	r2, [r3, #24]
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e07f      	b.n	800709e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc ffca 	bl	8003f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	; 0x24
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007002:	609a      	str	r2, [r3, #8]
 8007004:	e006      	b.n	8007014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d104      	bne.n	8007026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6859      	ldr	r1, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <HAL_I2C_Init+0x11c>)
 8007032:	430b      	orrs	r3, r1
 8007034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	02008000 	.word	0x02008000

080070ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e021      	b.n	8007102 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2224      	movs	r2, #36	; 0x24
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fc ffbc 	bl	8004054 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	461a      	mov	r2, r3
 800711a:	4603      	mov	r3, r0
 800711c:	817b      	strh	r3, [r7, #10]
 800711e:	460b      	mov	r3, r1
 8007120:	813b      	strh	r3, [r7, #8]
 8007122:	4613      	mov	r3, r2
 8007124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b20      	cmp	r3, #32
 8007130:	f040 80f9 	bne.w	8007326 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_I2C_Mem_Write+0x34>
 800713a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0ed      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_I2C_Mem_Write+0x4e>
 8007156:	2302      	movs	r3, #2
 8007158:	e0e6      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007162:	f7fe f8ad 	bl	80052c0 <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2319      	movs	r3, #25
 800716e:	2201      	movs	r2, #1
 8007170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fad1 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0d1      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2221      	movs	r2, #33	; 0x21
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2240      	movs	r2, #64	; 0x40
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071ac:	88f8      	ldrh	r0, [r7, #6]
 80071ae:	893a      	ldrh	r2, [r7, #8]
 80071b0:	8979      	ldrh	r1, [r7, #10]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	4603      	mov	r3, r0
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f9e1 	bl	8007584 <I2C_RequestMemoryWrite>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0a9      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2bff      	cmp	r3, #255	; 0xff
 80071dc:	d90e      	bls.n	80071fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	22ff      	movs	r2, #255	; 0xff
 80071e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	8979      	ldrh	r1, [r7, #10]
 80071ec:	2300      	movs	r3, #0
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fc2d 	bl	8007a54 <I2C_TransferConfig>
 80071fa:	e00f      	b.n	800721c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720a:	b2da      	uxtb	r2, r3
 800720c:	8979      	ldrh	r1, [r7, #10]
 800720e:	2300      	movs	r3, #0
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fc1c 	bl	8007a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fabb 	bl	800779c <I2C_WaitOnTXISFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e07b      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d034      	beq.n	80072d4 <HAL_I2C_Mem_Write+0x1c8>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726e:	2b00      	cmp	r3, #0
 8007270:	d130      	bne.n	80072d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	2200      	movs	r2, #0
 800727a:	2180      	movs	r1, #128	; 0x80
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fa4d 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e04d      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d90e      	bls.n	80072b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	22ff      	movs	r2, #255	; 0xff
 800729a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	8979      	ldrh	r1, [r7, #10]
 80072a4:	2300      	movs	r3, #0
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fbd1 	bl	8007a54 <I2C_TransferConfig>
 80072b2:	e00f      	b.n	80072d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	8979      	ldrh	r1, [r7, #10]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fbc0 	bl	8007a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d19e      	bne.n	800721c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa9a 	bl	800781c <I2C_WaitOnSTOPFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e01a      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2220      	movs	r2, #32
 80072f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6859      	ldr	r1, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <HAL_I2C_Mem_Write+0x224>)
 8007306:	400b      	ands	r3, r1
 8007308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	fe00e800 	.word	0xfe00e800

08007334 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	817b      	strh	r3, [r7, #10]
 8007346:	460b      	mov	r3, r1
 8007348:	813b      	strh	r3, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	f040 80fd 	bne.w	8007556 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_I2C_Mem_Read+0x34>
 8007362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0f1      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_I2C_Mem_Read+0x4e>
 800737e:	2302      	movs	r3, #2
 8007380:	e0ea      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800738a:	f7fd ff99 	bl	80052c0 <HAL_GetTick>
 800738e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2319      	movs	r3, #25
 8007396:	2201      	movs	r2, #1
 8007398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f9bd 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0d5      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2222      	movs	r2, #34	; 0x22
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2240      	movs	r2, #64	; 0x40
 80073b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a3a      	ldr	r2, [r7, #32]
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073d4:	88f8      	ldrh	r0, [r7, #6]
 80073d6:	893a      	ldrh	r2, [r7, #8]
 80073d8:	8979      	ldrh	r1, [r7, #10]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4603      	mov	r3, r0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f921 	bl	800762c <I2C_RequestMemoryRead>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0ad      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29b      	uxth	r3, r3
 8007402:	2bff      	cmp	r3, #255	; 0xff
 8007404:	d90e      	bls.n	8007424 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007410:	b2da      	uxtb	r2, r3
 8007412:	8979      	ldrh	r1, [r7, #10]
 8007414:	4b52      	ldr	r3, [pc, #328]	; (8007560 <HAL_I2C_Mem_Read+0x22c>)
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fb19 	bl	8007a54 <I2C_TransferConfig>
 8007422:	e00f      	b.n	8007444 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007432:	b2da      	uxtb	r2, r3
 8007434:	8979      	ldrh	r1, [r7, #10]
 8007436:	4b4a      	ldr	r3, [pc, #296]	; (8007560 <HAL_I2C_Mem_Read+0x22c>)
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fb08 	bl	8007a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2200      	movs	r2, #0
 800744c:	2104      	movs	r1, #4
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f964 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e07c      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d034      	beq.n	8007504 <HAL_I2C_Mem_Read+0x1d0>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d130      	bne.n	8007504 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2200      	movs	r2, #0
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f935 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e04d      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2bff      	cmp	r3, #255	; 0xff
 80074c4:	d90e      	bls.n	80074e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	8979      	ldrh	r1, [r7, #10]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 fab9 	bl	8007a54 <I2C_TransferConfig>
 80074e2:	e00f      	b.n	8007504 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	8979      	ldrh	r1, [r7, #10]
 80074f6:	2300      	movs	r3, #0
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 faa8 	bl	8007a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d19a      	bne.n	8007444 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f982 	bl	800781c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e01a      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2220      	movs	r2, #32
 8007528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <HAL_I2C_Mem_Read+0x230>)
 8007536:	400b      	ands	r3, r1
 8007538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	80002400 	.word	0x80002400
 8007564:	fe00e800 	.word	0xfe00e800

08007568 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007576:	b2db      	uxtb	r3, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	4608      	mov	r0, r1
 800758e:	4611      	mov	r1, r2
 8007590:	461a      	mov	r2, r3
 8007592:	4603      	mov	r3, r0
 8007594:	817b      	strh	r3, [r7, #10]
 8007596:	460b      	mov	r3, r1
 8007598:	813b      	strh	r3, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	8979      	ldrh	r1, [r7, #10]
 80075a4:	4b20      	ldr	r3, [pc, #128]	; (8007628 <I2C_RequestMemoryWrite+0xa4>)
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fa51 	bl	8007a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	69b9      	ldr	r1, [r7, #24]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f8f0 	bl	800779c <I2C_WaitOnTXISFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e02c      	b.n	8007620 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d105      	bne.n	80075d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075cc:	893b      	ldrh	r3, [r7, #8]
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	629a      	str	r2, [r3, #40]	; 0x28
 80075d6:	e015      	b.n	8007604 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075d8:	893b      	ldrh	r3, [r7, #8]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	69b9      	ldr	r1, [r7, #24]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f8d6 	bl	800779c <I2C_WaitOnTXISFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e012      	b.n	8007620 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075fa:	893b      	ldrh	r3, [r7, #8]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2200      	movs	r2, #0
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f884 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	80002000 	.word	0x80002000

0800762c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	4603      	mov	r3, r0
 800763c:	817b      	strh	r3, [r7, #10]
 800763e:	460b      	mov	r3, r1
 8007640:	813b      	strh	r3, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	8979      	ldrh	r1, [r7, #10]
 800764c:	4b20      	ldr	r3, [pc, #128]	; (80076d0 <I2C_RequestMemoryRead+0xa4>)
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	2300      	movs	r3, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f9fe 	bl	8007a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	69b9      	ldr	r1, [r7, #24]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f89d 	bl	800779c <I2C_WaitOnTXISFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e02c      	b.n	80076c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d105      	bne.n	800767e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007672:	893b      	ldrh	r3, [r7, #8]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	629a      	str	r2, [r3, #40]	; 0x28
 800767c:	e015      	b.n	80076aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	b2da      	uxtb	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	69b9      	ldr	r1, [r7, #24]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f883 	bl	800779c <I2C_WaitOnTXISFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e012      	b.n	80076c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076a0:	893b      	ldrh	r3, [r7, #8]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2140      	movs	r1, #64	; 0x40
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f831 	bl	800771c <I2C_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	80002000 	.word	0x80002000

080076d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d103      	bne.n	80076f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d007      	beq.n	8007710 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	619a      	str	r2, [r3, #24]
  }
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800772c:	e022      	b.n	8007774 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007734:	d01e      	beq.n	8007774 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007736:	f7fd fdc3 	bl	80052c0 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d302      	bcc.n	800774c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d113      	bne.n	8007774 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007750:	f043 0220 	orr.w	r2, r3, #32
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e00f      	b.n	8007794 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4013      	ands	r3, r2
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	429a      	cmp	r2, r3
 8007790:	d0cd      	beq.n	800772e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077a8:	e02c      	b.n	8007804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f870 	bl	8007894 <I2C_IsErrorOccurred>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e02a      	b.n	8007814 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d01e      	beq.n	8007804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7fd fd7b 	bl	80052c0 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d113      	bne.n	8007804 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e007      	b.n	8007814 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d1cb      	bne.n	80077aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007828:	e028      	b.n	800787c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f830 	bl	8007894 <I2C_IsErrorOccurred>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e026      	b.n	800788c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783e:	f7fd fd3f 	bl	80052c0 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	429a      	cmp	r2, r3
 800784c:	d302      	bcc.n	8007854 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d113      	bne.n	800787c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007858:	f043 0220 	orr.w	r2, r3, #32
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e007      	b.n	800788c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b20      	cmp	r3, #32
 8007888:	d1cf      	bne.n	800782a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d068      	beq.n	8007992 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2210      	movs	r2, #16
 80078c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078c8:	e049      	b.n	800795e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d045      	beq.n	800795e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078d2:	f7fd fcf5 	bl	80052c0 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <I2C_IsErrorOccurred+0x54>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d13a      	bne.n	800795e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800790a:	d121      	bne.n	8007950 <I2C_IsErrorOccurred+0xbc>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007912:	d01d      	beq.n	8007950 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007914:	7cfb      	ldrb	r3, [r7, #19]
 8007916:	2b20      	cmp	r3, #32
 8007918:	d01a      	beq.n	8007950 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800792a:	f7fd fcc9 	bl	80052c0 <HAL_GetTick>
 800792e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007930:	e00e      	b.n	8007950 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007932:	f7fd fcc5 	bl	80052c0 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b19      	cmp	r3, #25
 800793e:	d907      	bls.n	8007950 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f043 0320 	orr.w	r3, r3, #32
 8007946:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800794e:	e006      	b.n	800795e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b20      	cmp	r3, #32
 800795c:	d1e9      	bne.n	8007932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b20      	cmp	r3, #32
 800796a:	d003      	beq.n	8007974 <I2C_IsErrorOccurred+0xe0>
 800796c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0aa      	beq.n	80078ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2220      	movs	r2, #32
 8007982:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	f043 0304 	orr.w	r3, r3, #4
 800798a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00b      	beq.n	80079de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f043 0308 	orr.w	r3, r3, #8
 80079cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	f043 0302 	orr.w	r3, r3, #2
 80079ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01c      	beq.n	8007a42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff fe63 	bl	80076d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <I2C_IsErrorOccurred+0x1bc>)
 8007a1a:	400b      	ands	r3, r1
 8007a1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	fe00e800 	.word	0xfe00e800

08007a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	817b      	strh	r3, [r7, #10]
 8007a62:	4613      	mov	r3, r2
 8007a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a6c:	7a7b      	ldrb	r3, [r7, #9]
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	0d5b      	lsrs	r3, r3, #21
 8007a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <I2C_TransferConfig+0x60>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	43db      	mvns	r3, r3
 8007a98:	ea02 0103 	and.w	r1, r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	03ff63ff 	.word	0x03ff63ff

08007ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d138      	bne.n	8007b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e032      	b.n	8007b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2224      	movs	r2, #36	; 0x24
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d139      	bne.n	8007bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e033      	b.n	8007bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2224      	movs	r2, #36	; 0x24
 8007b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0201 	bic.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e000      	b.n	8007bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e0bf      	b.n	8007d7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fc faf6 	bl	8004200 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007c2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6899      	ldr	r1, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b4a      	ldr	r3, [pc, #296]	; (8007d84 <HAL_LTDC_Init+0x19c>)
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6899      	ldr	r1, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68d9      	ldr	r1, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4b3e      	ldr	r3, [pc, #248]	; (8007d84 <HAL_LTDC_Init+0x19c>)
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	041b      	lsls	r3, r3, #16
 8007c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68d9      	ldr	r1, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6919      	ldr	r1, [r3, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b33      	ldr	r3, [pc, #204]	; (8007d84 <HAL_LTDC_Init+0x19c>)
 8007cb8:	400b      	ands	r3, r1
 8007cba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6919      	ldr	r1, [r3, #16]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6959      	ldr	r1, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <HAL_LTDC_Init+0x19c>)
 8007ce6:	400b      	ands	r3, r1
 8007ce8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0206 	orr.w	r2, r2, #6
 8007d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	f000f800 	.word	0xf000f800

08007d88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d88:	b5b0      	push	{r4, r5, r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_LTDC_ConfigLayer+0x1a>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e02c      	b.n	8007dfc <HAL_LTDC_ConfigLayer+0x74>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2134      	movs	r1, #52	; 0x34
 8007db8:	fb01 f303 	mul.w	r3, r1, r3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f811 	bl	8007e04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2201      	movs	r2, #1
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bdb0      	pop	{r4, r5, r7, pc}

08007e04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b089      	sub	sp, #36	; 0x24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e20:	4413      	add	r3, r2
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	01db      	lsls	r3, r3, #7
 8007e30:	4413      	add	r3, r2
 8007e32:	3384      	adds	r3, #132	; 0x84
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	01d2      	lsls	r2, r2, #7
 8007e40:	440a      	add	r2, r1
 8007e42:	3284      	adds	r2, #132	; 0x84
 8007e44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	0c1b      	lsrs	r3, r3, #16
 8007e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e5a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e5c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	01db      	lsls	r3, r3, #7
 8007e68:	440b      	add	r3, r1
 8007e6a:	3384      	adds	r3, #132	; 0x84
 8007e6c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e82:	4413      	add	r3, r2
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	01db      	lsls	r3, r3, #7
 8007e92:	4413      	add	r3, r2
 8007e94:	3384      	adds	r3, #132	; 0x84
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	01d2      	lsls	r2, r2, #7
 8007ea2:	440a      	add	r2, r1
 8007ea4:	3284      	adds	r2, #132	; 0x84
 8007ea6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007eaa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eba:	4413      	add	r3, r2
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	01db      	lsls	r3, r3, #7
 8007ec8:	440b      	add	r3, r1
 8007eca:	3384      	adds	r3, #132	; 0x84
 8007ecc:	4619      	mov	r1, r3
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	01db      	lsls	r3, r3, #7
 8007ede:	4413      	add	r3, r2
 8007ee0:	3384      	adds	r3, #132	; 0x84
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	01d2      	lsls	r2, r2, #7
 8007eee:	440a      	add	r2, r1
 8007ef0:	3284      	adds	r2, #132	; 0x84
 8007ef2:	f023 0307 	bic.w	r3, r3, #7
 8007ef6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	01db      	lsls	r3, r3, #7
 8007f02:	4413      	add	r3, r2
 8007f04:	3384      	adds	r3, #132	; 0x84
 8007f06:	461a      	mov	r2, r3
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f1e:	041b      	lsls	r3, r3, #16
 8007f20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	061b      	lsls	r3, r3, #24
 8007f28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	01db      	lsls	r3, r3, #7
 8007f34:	4413      	add	r3, r2
 8007f36:	3384      	adds	r3, #132	; 0x84
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	01db      	lsls	r3, r3, #7
 8007f44:	4413      	add	r3, r2
 8007f46:	3384      	adds	r3, #132	; 0x84
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f54:	461a      	mov	r2, r3
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	01db      	lsls	r3, r3, #7
 8007f68:	440b      	add	r3, r1
 8007f6a:	3384      	adds	r3, #132	; 0x84
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	01db      	lsls	r3, r3, #7
 8007f7e:	4413      	add	r3, r2
 8007f80:	3384      	adds	r3, #132	; 0x84
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	01d2      	lsls	r2, r2, #7
 8007f8e:	440a      	add	r2, r1
 8007f90:	3284      	adds	r2, #132	; 0x84
 8007f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	01db      	lsls	r3, r3, #7
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3384      	adds	r3, #132	; 0x84
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	01db      	lsls	r3, r3, #7
 8007fb8:	4413      	add	r3, r2
 8007fba:	3384      	adds	r3, #132	; 0x84
 8007fbc:	69da      	ldr	r2, [r3, #28]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	01db      	lsls	r3, r3, #7
 8007fc8:	440b      	add	r3, r1
 8007fca:	3384      	adds	r3, #132	; 0x84
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4b58      	ldr	r3, [pc, #352]	; (8008130 <LTDC_SetConfig+0x32c>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	6809      	ldr	r1, [r1, #0]
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	01c9      	lsls	r1, r1, #7
 8007fe6:	4401      	add	r1, r0
 8007fe8:	3184      	adds	r1, #132	; 0x84
 8007fea:	4313      	orrs	r3, r2
 8007fec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	01db      	lsls	r3, r3, #7
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3384      	adds	r3, #132	; 0x84
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	01db      	lsls	r3, r3, #7
 8008008:	4413      	add	r3, r2
 800800a:	3384      	adds	r3, #132	; 0x84
 800800c:	461a      	mov	r2, r3
 800800e:	2300      	movs	r3, #0
 8008010:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	01db      	lsls	r3, r3, #7
 800801c:	4413      	add	r3, r2
 800801e:	3384      	adds	r3, #132	; 0x84
 8008020:	461a      	mov	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008030:	2304      	movs	r3, #4
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	e01b      	b.n	800806e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800803e:	2303      	movs	r3, #3
 8008040:	61fb      	str	r3, [r7, #28]
 8008042:	e014      	b.n	800806e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d00b      	beq.n	8008064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008050:	2b02      	cmp	r3, #2
 8008052:	d007      	beq.n	8008064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008058:	2b03      	cmp	r3, #3
 800805a:	d003      	beq.n	8008064 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008060:	2b07      	cmp	r3, #7
 8008062:	d102      	bne.n	800806a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008064:	2302      	movs	r3, #2
 8008066:	61fb      	str	r3, [r7, #28]
 8008068:	e001      	b.n	800806e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	01db      	lsls	r3, r3, #7
 8008078:	4413      	add	r3, r2
 800807a:	3384      	adds	r3, #132	; 0x84
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	4611      	mov	r1, r2
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	01d2      	lsls	r2, r2, #7
 8008088:	440a      	add	r2, r1
 800808a:	3284      	adds	r2, #132	; 0x84
 800808c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	fb02 f303 	mul.w	r3, r2, r3
 800809c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6859      	ldr	r1, [r3, #4]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	1acb      	subs	r3, r1, r3
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80080b0:	68f9      	ldr	r1, [r7, #12]
 80080b2:	6809      	ldr	r1, [r1, #0]
 80080b4:	4608      	mov	r0, r1
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	01c9      	lsls	r1, r1, #7
 80080ba:	4401      	add	r1, r0
 80080bc:	3184      	adds	r1, #132	; 0x84
 80080be:	4313      	orrs	r3, r2
 80080c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	4413      	add	r3, r2
 80080ce:	3384      	adds	r3, #132	; 0x84
 80080d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	01db      	lsls	r3, r3, #7
 80080dc:	440b      	add	r3, r1
 80080de:	3384      	adds	r3, #132	; 0x84
 80080e0:	4619      	mov	r1, r3
 80080e2:	4b14      	ldr	r3, [pc, #80]	; (8008134 <LTDC_SetConfig+0x330>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	01db      	lsls	r3, r3, #7
 80080f2:	4413      	add	r3, r2
 80080f4:	3384      	adds	r3, #132	; 0x84
 80080f6:	461a      	mov	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	01db      	lsls	r3, r3, #7
 8008108:	4413      	add	r3, r2
 800810a:	3384      	adds	r3, #132	; 0x84
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	4611      	mov	r1, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	01d2      	lsls	r2, r2, #7
 8008118:	440a      	add	r2, r1
 800811a:	3284      	adds	r2, #132	; 0x84
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	6013      	str	r3, [r2, #0]
}
 8008122:	bf00      	nop
 8008124:	3724      	adds	r7, #36	; 0x24
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	fffff8f8 	.word	0xfffff8f8
 8008134:	fffff800 	.word	0xfffff800

08008138 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800814a:	2200      	movs	r2, #0
 800814c:	e001      	b.n	8008152 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800814e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800815e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008162:	e000      	b.n	8008166 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8008164:	2200      	movs	r2, #0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8008172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008176:	e000      	b.n	800817a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8008178:	2200      	movs	r2, #0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	4413      	add	r3, r2
 8008192:	1e5a      	subs	r2, r3, #1
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80081a6:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 80081a8:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80081bc:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	4413      	add	r3, r2
 80081c4:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a04      	ldr	r2, [pc, #16]	; (80081f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e6:	6013      	str	r3, [r2, #0]
}
 80081e8:	bf00      	nop
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40007000 	.word	0x40007000

080081f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008202:	4b23      	ldr	r3, [pc, #140]	; (8008290 <HAL_PWREx_EnableOverDrive+0x98>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	4a22      	ldr	r2, [pc, #136]	; (8008290 <HAL_PWREx_EnableOverDrive+0x98>)
 8008208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820c:	6413      	str	r3, [r2, #64]	; 0x40
 800820e:	4b20      	ldr	r3, [pc, #128]	; (8008290 <HAL_PWREx_EnableOverDrive+0x98>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800821a:	4b1e      	ldr	r3, [pc, #120]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008226:	f7fd f84b 	bl	80052c0 <HAL_GetTick>
 800822a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800822c:	e009      	b.n	8008242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800822e:	f7fd f847 	bl	80052c0 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800823c:	d901      	bls.n	8008242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e022      	b.n	8008288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008242:	4b14      	ldr	r3, [pc, #80]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824e:	d1ee      	bne.n	800822e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0f      	ldr	r2, [pc, #60]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800825a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800825c:	f7fd f830 	bl	80052c0 <HAL_GetTick>
 8008260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008262:	e009      	b.n	8008278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008264:	f7fd f82c 	bl	80052c0 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008272:	d901      	bls.n	8008278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e007      	b.n	8008288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008284:	d1ee      	bne.n	8008264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40023800 	.word	0x40023800
 8008294:	40007000 	.word	0x40007000

08008298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80082a0:	2300      	movs	r3, #0
 80082a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e29b      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8087 	beq.w	80083ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082bc:	4b96      	ldr	r3, [pc, #600]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f003 030c 	and.w	r3, r3, #12
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d00c      	beq.n	80082e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082c8:	4b93      	ldr	r3, [pc, #588]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 030c 	and.w	r3, r3, #12
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d112      	bne.n	80082fa <HAL_RCC_OscConfig+0x62>
 80082d4:	4b90      	ldr	r3, [pc, #576]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082e0:	d10b      	bne.n	80082fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e2:	4b8d      	ldr	r3, [pc, #564]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d06c      	beq.n	80083c8 <HAL_RCC_OscConfig+0x130>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d168      	bne.n	80083c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e275      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008302:	d106      	bne.n	8008312 <HAL_RCC_OscConfig+0x7a>
 8008304:	4b84      	ldr	r3, [pc, #528]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a83      	ldr	r2, [pc, #524]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800830a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	e02e      	b.n	8008370 <HAL_RCC_OscConfig+0xd8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10c      	bne.n	8008334 <HAL_RCC_OscConfig+0x9c>
 800831a:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a7e      	ldr	r2, [pc, #504]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	4b7c      	ldr	r3, [pc, #496]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a7b      	ldr	r2, [pc, #492]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800832c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	e01d      	b.n	8008370 <HAL_RCC_OscConfig+0xd8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800833c:	d10c      	bne.n	8008358 <HAL_RCC_OscConfig+0xc0>
 800833e:	4b76      	ldr	r3, [pc, #472]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a75      	ldr	r2, [pc, #468]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	4b73      	ldr	r3, [pc, #460]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a72      	ldr	r2, [pc, #456]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	e00b      	b.n	8008370 <HAL_RCC_OscConfig+0xd8>
 8008358:	4b6f      	ldr	r3, [pc, #444]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a6e      	ldr	r2, [pc, #440]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800835e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	4b6c      	ldr	r3, [pc, #432]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a6b      	ldr	r2, [pc, #428]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800836a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800836e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d013      	beq.n	80083a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008378:	f7fc ffa2 	bl	80052c0 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008380:	f7fc ff9e 	bl	80052c0 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b64      	cmp	r3, #100	; 0x64
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e229      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008392:	4b61      	ldr	r3, [pc, #388]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f0      	beq.n	8008380 <HAL_RCC_OscConfig+0xe8>
 800839e:	e014      	b.n	80083ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a0:	f7fc ff8e 	bl	80052c0 <HAL_GetTick>
 80083a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083a6:	e008      	b.n	80083ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a8:	f7fc ff8a 	bl	80052c0 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b64      	cmp	r3, #100	; 0x64
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e215      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ba:	4b57      	ldr	r3, [pc, #348]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f0      	bne.n	80083a8 <HAL_RCC_OscConfig+0x110>
 80083c6:	e000      	b.n	80083ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d069      	beq.n	80084aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083d6:	4b50      	ldr	r3, [pc, #320]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 030c 	and.w	r3, r3, #12
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083e2:	4b4d      	ldr	r3, [pc, #308]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d11c      	bne.n	8008428 <HAL_RCC_OscConfig+0x190>
 80083ee:	4b4a      	ldr	r3, [pc, #296]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d116      	bne.n	8008428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083fa:	4b47      	ldr	r3, [pc, #284]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_RCC_OscConfig+0x17a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d001      	beq.n	8008412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e1e9      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008412:	4b41      	ldr	r3, [pc, #260]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	493d      	ldr	r1, [pc, #244]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008422:	4313      	orrs	r3, r2
 8008424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008426:	e040      	b.n	80084aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d023      	beq.n	8008478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008430:	4b39      	ldr	r3, [pc, #228]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a38      	ldr	r2, [pc, #224]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843c:	f7fc ff40 	bl	80052c0 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008444:	f7fc ff3c 	bl	80052c0 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e1c7      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008456:	4b30      	ldr	r3, [pc, #192]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008462:	4b2d      	ldr	r3, [pc, #180]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4929      	ldr	r1, [pc, #164]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 8008472:	4313      	orrs	r3, r2
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	e018      	b.n	80084aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008478:	4b27      	ldr	r3, [pc, #156]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a26      	ldr	r2, [pc, #152]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008484:	f7fc ff1c 	bl	80052c0 <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800848c:	f7fc ff18 	bl	80052c0 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e1a3      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800849e:	4b1e      	ldr	r3, [pc, #120]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d038      	beq.n	8008528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d019      	beq.n	80084f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c2:	4a15      	ldr	r2, [pc, #84]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084c4:	f043 0301 	orr.w	r3, r3, #1
 80084c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fc fef9 	bl	80052c0 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d2:	f7fc fef5 	bl	80052c0 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e180      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0f0      	beq.n	80084d2 <HAL_RCC_OscConfig+0x23a>
 80084f0:	e01a      	b.n	8008528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f6:	4a08      	ldr	r2, [pc, #32]	; (8008518 <HAL_RCC_OscConfig+0x280>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fe:	f7fc fedf 	bl	80052c0 <HAL_GetTick>
 8008502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008504:	e00a      	b.n	800851c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008506:	f7fc fedb 	bl	80052c0 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d903      	bls.n	800851c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e166      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
 8008518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800851c:	4b92      	ldr	r3, [pc, #584]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 800851e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ee      	bne.n	8008506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80a4 	beq.w	800867e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008536:	4b8c      	ldr	r3, [pc, #560]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10d      	bne.n	800855e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008542:	4b89      	ldr	r3, [pc, #548]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	4a88      	ldr	r2, [pc, #544]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854c:	6413      	str	r3, [r2, #64]	; 0x40
 800854e:	4b86      	ldr	r3, [pc, #536]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008556:	60bb      	str	r3, [r7, #8]
 8008558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800855e:	4b83      	ldr	r3, [pc, #524]	; (800876c <HAL_RCC_OscConfig+0x4d4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	2b00      	cmp	r3, #0
 8008568:	d118      	bne.n	800859c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800856a:	4b80      	ldr	r3, [pc, #512]	; (800876c <HAL_RCC_OscConfig+0x4d4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a7f      	ldr	r2, [pc, #508]	; (800876c <HAL_RCC_OscConfig+0x4d4>)
 8008570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008576:	f7fc fea3 	bl	80052c0 <HAL_GetTick>
 800857a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800857e:	f7fc fe9f 	bl	80052c0 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b64      	cmp	r3, #100	; 0x64
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e12a      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008590:	4b76      	ldr	r3, [pc, #472]	; (800876c <HAL_RCC_OscConfig+0x4d4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d106      	bne.n	80085b2 <HAL_RCC_OscConfig+0x31a>
 80085a4:	4b70      	ldr	r3, [pc, #448]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	4a6f      	ldr	r2, [pc, #444]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	6713      	str	r3, [r2, #112]	; 0x70
 80085b0:	e02d      	b.n	800860e <HAL_RCC_OscConfig+0x376>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10c      	bne.n	80085d4 <HAL_RCC_OscConfig+0x33c>
 80085ba:	4b6b      	ldr	r3, [pc, #428]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085be:	4a6a      	ldr	r2, [pc, #424]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	6713      	str	r3, [r2, #112]	; 0x70
 80085c6:	4b68      	ldr	r3, [pc, #416]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ca:	4a67      	ldr	r2, [pc, #412]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085cc:	f023 0304 	bic.w	r3, r3, #4
 80085d0:	6713      	str	r3, [r2, #112]	; 0x70
 80085d2:	e01c      	b.n	800860e <HAL_RCC_OscConfig+0x376>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b05      	cmp	r3, #5
 80085da:	d10c      	bne.n	80085f6 <HAL_RCC_OscConfig+0x35e>
 80085dc:	4b62      	ldr	r3, [pc, #392]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	4a61      	ldr	r2, [pc, #388]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085e2:	f043 0304 	orr.w	r3, r3, #4
 80085e6:	6713      	str	r3, [r2, #112]	; 0x70
 80085e8:	4b5f      	ldr	r3, [pc, #380]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	4a5e      	ldr	r2, [pc, #376]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	6713      	str	r3, [r2, #112]	; 0x70
 80085f4:	e00b      	b.n	800860e <HAL_RCC_OscConfig+0x376>
 80085f6:	4b5c      	ldr	r3, [pc, #368]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	4a5b      	ldr	r2, [pc, #364]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	6713      	str	r3, [r2, #112]	; 0x70
 8008602:	4b59      	ldr	r3, [pc, #356]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	4a58      	ldr	r2, [pc, #352]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008608:	f023 0304 	bic.w	r3, r3, #4
 800860c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d015      	beq.n	8008642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008616:	f7fc fe53 	bl	80052c0 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861c:	e00a      	b.n	8008634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800861e:	f7fc fe4f 	bl	80052c0 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	f241 3288 	movw	r2, #5000	; 0x1388
 800862c:	4293      	cmp	r3, r2
 800862e:	d901      	bls.n	8008634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e0d8      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008634:	4b4c      	ldr	r3, [pc, #304]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0ee      	beq.n	800861e <HAL_RCC_OscConfig+0x386>
 8008640:	e014      	b.n	800866c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008642:	f7fc fe3d 	bl	80052c0 <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008648:	e00a      	b.n	8008660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800864a:	f7fc fe39 	bl	80052c0 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f241 3288 	movw	r2, #5000	; 0x1388
 8008658:	4293      	cmp	r3, r2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e0c2      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008660:	4b41      	ldr	r3, [pc, #260]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1ee      	bne.n	800864a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d105      	bne.n	800867e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008672:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80ae 	beq.w	80087e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008688:	4b37      	ldr	r3, [pc, #220]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 030c 	and.w	r3, r3, #12
 8008690:	2b08      	cmp	r3, #8
 8008692:	d06d      	beq.n	8008770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d14b      	bne.n	8008734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800869c:	4b32      	ldr	r3, [pc, #200]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a31      	ldr	r2, [pc, #196]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80086a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a8:	f7fc fe0a 	bl	80052c0 <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b0:	f7fc fe06 	bl	80052c0 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e091      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f0      	bne.n	80086b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69da      	ldr	r2, [r3, #28]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	019b      	lsls	r3, r3, #6
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	3b01      	subs	r3, #1
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	071b      	lsls	r3, r3, #28
 80086fa:	491b      	ldr	r1, [pc, #108]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800870a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fc fdd8 	bl	80052c0 <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008714:	f7fc fdd4 	bl	80052c0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e05f      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f0      	beq.n	8008714 <HAL_RCC_OscConfig+0x47c>
 8008732:	e057      	b.n	80087e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 800873a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800873e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008740:	f7fc fdbe 	bl	80052c0 <HAL_GetTick>
 8008744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008746:	e008      	b.n	800875a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008748:	f7fc fdba 	bl	80052c0 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e045      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <HAL_RCC_OscConfig+0x4d0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f0      	bne.n	8008748 <HAL_RCC_OscConfig+0x4b0>
 8008766:	e03d      	b.n	80087e4 <HAL_RCC_OscConfig+0x54c>
 8008768:	40023800 	.word	0x40023800
 800876c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008770:	4b1f      	ldr	r3, [pc, #124]	; (80087f0 <HAL_RCC_OscConfig+0x558>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d030      	beq.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008788:	429a      	cmp	r2, r3
 800878a:	d129      	bne.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008796:	429a      	cmp	r2, r3
 8008798:	d122      	bne.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087a0:	4013      	ands	r3, r2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d119      	bne.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087bc:	429a      	cmp	r2, r3
 80087be:	d10f      	bne.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d107      	bne.n	80087e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087dc:	429a      	cmp	r2, r3
 80087de:	d001      	beq.n	80087e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800

080087f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0d0      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800880c:	4b6a      	ldr	r3, [pc, #424]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d910      	bls.n	800883c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800881a:	4b67      	ldr	r3, [pc, #412]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f023 020f 	bic.w	r2, r3, #15
 8008822:	4965      	ldr	r1, [pc, #404]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	4313      	orrs	r3, r2
 8008828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800882a:	4b63      	ldr	r3, [pc, #396]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d001      	beq.n	800883c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e0b8      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d020      	beq.n	800888a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008854:	4b59      	ldr	r3, [pc, #356]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4a58      	ldr	r2, [pc, #352]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 800885a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800885e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800886c:	4b53      	ldr	r3, [pc, #332]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4a52      	ldr	r2, [pc, #328]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008878:	4b50      	ldr	r3, [pc, #320]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	494d      	ldr	r1, [pc, #308]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008886:	4313      	orrs	r3, r2
 8008888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d040      	beq.n	8008918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d107      	bne.n	80088ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889e:	4b47      	ldr	r3, [pc, #284]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d115      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e07f      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d107      	bne.n	80088c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088b6:	4b41      	ldr	r3, [pc, #260]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e073      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c6:	4b3d      	ldr	r3, [pc, #244]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e06b      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088d6:	4b39      	ldr	r3, [pc, #228]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 0203 	bic.w	r2, r3, #3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4936      	ldr	r1, [pc, #216]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e8:	f7fc fcea 	bl	80052c0 <HAL_GetTick>
 80088ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ee:	e00a      	b.n	8008906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f0:	f7fc fce6 	bl	80052c0 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fe:	4293      	cmp	r3, r2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e053      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008906:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 020c 	and.w	r2, r3, #12
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	429a      	cmp	r2, r3
 8008916:	d1eb      	bne.n	80088f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008918:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d210      	bcs.n	8008948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f023 020f 	bic.w	r2, r3, #15
 800892e:	4922      	ldr	r1, [pc, #136]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	4313      	orrs	r3, r2
 8008934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008936:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d001      	beq.n	8008948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e032      	b.n	80089ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d008      	beq.n	8008966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4916      	ldr	r1, [pc, #88]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008962:	4313      	orrs	r3, r2
 8008964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	490e      	ldr	r1, [pc, #56]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 8008982:	4313      	orrs	r3, r2
 8008984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008986:	f000 f821 	bl	80089cc <HAL_RCC_GetSysClockFreq>
 800898a:	4602      	mov	r2, r0
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <HAL_RCC_ClockConfig+0x1c8>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	490a      	ldr	r1, [pc, #40]	; (80089c0 <HAL_RCC_ClockConfig+0x1cc>)
 8008998:	5ccb      	ldrb	r3, [r1, r3]
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	4a09      	ldr	r2, [pc, #36]	; (80089c4 <HAL_RCC_ClockConfig+0x1d0>)
 80089a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <HAL_RCC_ClockConfig+0x1d4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fb ff4a 	bl	8004840 <HAL_InitTick>

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023c00 	.word	0x40023c00
 80089bc:	40023800 	.word	0x40023800
 80089c0:	080f67d8 	.word	0x080f67d8
 80089c4:	2000003c 	.word	0x2000003c
 80089c8:	20000040 	.word	0x20000040

080089cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d0:	b090      	sub	sp, #64	; 0x40
 80089d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	637b      	str	r3, [r7, #52]	; 0x34
 80089d8:	2300      	movs	r3, #0
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089dc:	2300      	movs	r3, #0
 80089de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089e4:	4b59      	ldr	r3, [pc, #356]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 030c 	and.w	r3, r3, #12
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d00d      	beq.n	8008a0c <HAL_RCC_GetSysClockFreq+0x40>
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	f200 80a1 	bhi.w	8008b38 <HAL_RCC_GetSysClockFreq+0x16c>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_RCC_GetSysClockFreq+0x34>
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d003      	beq.n	8008a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80089fe:	e09b      	b.n	8008b38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a00:	4b53      	ldr	r3, [pc, #332]	; (8008b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a04:	e09b      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a06:	4b53      	ldr	r3, [pc, #332]	; (8008b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a0a:	e098      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a0c:	4b4f      	ldr	r3, [pc, #316]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008a16:	4b4d      	ldr	r3, [pc, #308]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d028      	beq.n	8008a74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a22:	4b4a      	ldr	r3, [pc, #296]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	099b      	lsrs	r3, r3, #6
 8008a28:	2200      	movs	r2, #0
 8008a2a:	623b      	str	r3, [r7, #32]
 8008a2c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a34:	2100      	movs	r1, #0
 8008a36:	4b47      	ldr	r3, [pc, #284]	; (8008b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a38:	fb03 f201 	mul.w	r2, r3, r1
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	fb00 f303 	mul.w	r3, r0, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	4a43      	ldr	r2, [pc, #268]	; (8008b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a46:	fba0 1202 	umull	r1, r2, r0, r2
 8008a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a4c:	460a      	mov	r2, r1
 8008a4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a52:	4413      	add	r3, r2
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	2200      	movs	r2, #0
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	61fa      	str	r2, [r7, #28]
 8008a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008a66:	f7f7 fc3b 	bl	80002e0 <__aeabi_uldivmod>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4613      	mov	r3, r2
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a72:	e053      	b.n	8008b1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a74:	4b35      	ldr	r3, [pc, #212]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	099b      	lsrs	r3, r3, #6
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	617a      	str	r2, [r7, #20]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a86:	f04f 0b00 	mov.w	fp, #0
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	465b      	mov	r3, fp
 8008a8e:	f04f 0000 	mov.w	r0, #0
 8008a92:	f04f 0100 	mov.w	r1, #0
 8008a96:	0159      	lsls	r1, r3, #5
 8008a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a9c:	0150      	lsls	r0, r2, #5
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	ebb2 080a 	subs.w	r8, r2, sl
 8008aa6:	eb63 090b 	sbc.w	r9, r3, fp
 8008aaa:	f04f 0200 	mov.w	r2, #0
 8008aae:	f04f 0300 	mov.w	r3, #0
 8008ab2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ab6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008aba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008abe:	ebb2 0408 	subs.w	r4, r2, r8
 8008ac2:	eb63 0509 	sbc.w	r5, r3, r9
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	00eb      	lsls	r3, r5, #3
 8008ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ad4:	00e2      	lsls	r2, r4, #3
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461d      	mov	r5, r3
 8008ada:	eb14 030a 	adds.w	r3, r4, sl
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	eb45 030b 	adc.w	r3, r5, fp
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008af2:	4629      	mov	r1, r5
 8008af4:	028b      	lsls	r3, r1, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008afc:	4621      	mov	r1, r4
 8008afe:	028a      	lsls	r2, r1, #10
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b06:	2200      	movs	r2, #0
 8008b08:	60bb      	str	r3, [r7, #8]
 8008b0a:	60fa      	str	r2, [r7, #12]
 8008b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b10:	f7f7 fbe6 	bl	80002e0 <__aeabi_uldivmod>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4613      	mov	r3, r2
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	3301      	adds	r3, #1
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b36:	e002      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3740      	adds	r7, #64	; 0x40
 8008b44:	46bd      	mov	sp, r7
 8008b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40023800 	.word	0x40023800
 8008b50:	00f42400 	.word	0x00f42400
 8008b54:	017d7840 	.word	0x017d7840

08008b58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b5c:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	2000003c 	.word	0x2000003c

08008b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b74:	f7ff fff0 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	0a9b      	lsrs	r3, r3, #10
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	4903      	ldr	r1, [pc, #12]	; (8008b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b86:	5ccb      	ldrb	r3, [r1, r3]
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	40023800 	.word	0x40023800
 8008b94:	080f67e8 	.word	0x080f67e8

08008b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b9c:	f7ff ffdc 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	0b5b      	lsrs	r3, r3, #13
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	4903      	ldr	r1, [pc, #12]	; (8008bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bae:	5ccb      	ldrb	r3, [r1, r3]
 8008bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	080f67e8 	.word	0x080f67e8

08008bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	220f      	movs	r2, #15
 8008bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008bd0:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_RCC_GetClockConfig+0x5c>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f003 0203 	and.w	r2, r3, #3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <HAL_RCC_GetClockConfig+0x5c>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <HAL_RCC_GetClockConfig+0x5c>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <HAL_RCC_GetClockConfig+0x5c>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c02:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <HAL_RCC_GetClockConfig+0x60>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	601a      	str	r2, [r3, #0]
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40023c00 	.word	0x40023c00

08008c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d012      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c4c:	4b69      	ldr	r3, [pc, #420]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	4a68      	ldr	r2, [pc, #416]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c56:	6093      	str	r3, [r2, #8]
 8008c58:	4b66      	ldr	r3, [pc, #408]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c60:	4964      	ldr	r1, [pc, #400]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d017      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c7e:	4b5d      	ldr	r3, [pc, #372]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	4959      	ldr	r1, [pc, #356]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c9c:	d101      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008caa:	2301      	movs	r3, #1
 8008cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d017      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008cba:	4b4e      	ldr	r3, [pc, #312]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	494a      	ldr	r1, [pc, #296]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd8:	d101      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 808b 	beq.w	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d08:	4b3a      	ldr	r3, [pc, #232]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	4a39      	ldr	r2, [pc, #228]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d12:	6413      	str	r3, [r2, #64]	; 0x40
 8008d14:	4b37      	ldr	r3, [pc, #220]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d20:	4b35      	ldr	r3, [pc, #212]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a34      	ldr	r2, [pc, #208]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d2c:	f7fc fac8 	bl	80052c0 <HAL_GetTick>
 8008d30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d32:	e008      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d34:	f7fc fac4 	bl	80052c0 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b64      	cmp	r3, #100	; 0x64
 8008d40:	d901      	bls.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e38f      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d46:	4b2c      	ldr	r3, [pc, #176]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0f0      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d52:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d035      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d02e      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d70:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7e:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d86:	4b1b      	ldr	r3, [pc, #108]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008d92:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d98:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d114      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fc fa8c 	bl	80052c0 <HAL_GetTick>
 8008da8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008daa:	e00a      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dac:	f7fc fa88 	bl	80052c0 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e351      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0ee      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dda:	d111      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008de8:	4b04      	ldr	r3, [pc, #16]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008dea:	400b      	ands	r3, r1
 8008dec:	4901      	ldr	r1, [pc, #4]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	608b      	str	r3, [r1, #8]
 8008df2:	e00b      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008df4:	40023800 	.word	0x40023800
 8008df8:	40007000 	.word	0x40007000
 8008dfc:	0ffffcff 	.word	0x0ffffcff
 8008e00:	4bac      	ldr	r3, [pc, #688]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4aab      	ldr	r2, [pc, #684]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e0a:	6093      	str	r3, [r2, #8]
 8008e0c:	4ba9      	ldr	r3, [pc, #676]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e18:	49a6      	ldr	r1, [pc, #664]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d010      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e2a:	4ba2      	ldr	r3, [pc, #648]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e30:	4aa0      	ldr	r2, [pc, #640]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008e3a:	4b9e      	ldr	r3, [pc, #632]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	499b      	ldr	r1, [pc, #620]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00a      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e58:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e66:	4993      	ldr	r1, [pc, #588]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e7a:	4b8e      	ldr	r3, [pc, #568]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e88:	498a      	ldr	r1, [pc, #552]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e9c:	4b85      	ldr	r3, [pc, #532]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eaa:	4982      	ldr	r1, [pc, #520]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ebe:	4b7d      	ldr	r3, [pc, #500]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ecc:	4979      	ldr	r1, [pc, #484]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ee0:	4b74      	ldr	r3, [pc, #464]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee6:	f023 0203 	bic.w	r2, r3, #3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eee:	4971      	ldr	r1, [pc, #452]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f02:	4b6c      	ldr	r3, [pc, #432]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	f023 020c 	bic.w	r2, r3, #12
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f10:	4968      	ldr	r1, [pc, #416]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f24:	4b63      	ldr	r3, [pc, #396]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f32:	4960      	ldr	r1, [pc, #384]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f46:	4b5b      	ldr	r3, [pc, #364]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	4957      	ldr	r1, [pc, #348]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f68:	4b52      	ldr	r3, [pc, #328]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f76:	494f      	ldr	r1, [pc, #316]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008f8a:	4b4a      	ldr	r3, [pc, #296]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f98:	4946      	ldr	r1, [pc, #280]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008fac:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fba:	493e      	ldr	r1, [pc, #248]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008fce:	4b39      	ldr	r3, [pc, #228]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fdc:	4935      	ldr	r1, [pc, #212]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ff0:	4b30      	ldr	r3, [pc, #192]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ffe:	492d      	ldr	r1, [pc, #180]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d011      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009012:	4b28      	ldr	r3, [pc, #160]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009018:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009020:	4924      	ldr	r1, [pc, #144]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800902c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009030:	d101      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009032:	2301      	movs	r3, #1
 8009034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009058:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009060:	4914      	ldr	r1, [pc, #80]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009084:	490b      	ldr	r1, [pc, #44]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009086:	4313      	orrs	r3, r2
 8009088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00f      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800909a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a8:	4902      	ldr	r1, [pc, #8]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80090b0:	e002      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80090b2:	bf00      	nop
 80090b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090c4:	4b8a      	ldr	r3, [pc, #552]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d4:	4986      	ldr	r1, [pc, #536]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80090e8:	4b81      	ldr	r3, [pc, #516]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f8:	497d      	ldr	r1, [pc, #500]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d006      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80d6 	beq.w	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009114:	4b76      	ldr	r3, [pc, #472]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a75      	ldr	r2, [pc, #468]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800911a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800911e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009120:	f7fc f8ce 	bl	80052c0 <HAL_GetTick>
 8009124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009126:	e008      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009128:	f7fc f8ca 	bl	80052c0 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b64      	cmp	r3, #100	; 0x64
 8009134:	d901      	bls.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e195      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800913a:	4b6d      	ldr	r3, [pc, #436]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f0      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d021      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	2b00      	cmp	r3, #0
 8009158:	d11d      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800915a:	4b65      	ldr	r3, [pc, #404]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800915c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009160:	0c1b      	lsrs	r3, r3, #16
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009168:	4b61      	ldr	r3, [pc, #388]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800916a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916e:	0e1b      	lsrs	r3, r3, #24
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	019a      	lsls	r2, r3, #6
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	431a      	orrs	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	061b      	lsls	r3, r3, #24
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	071b      	lsls	r3, r3, #28
 800918e:	4958      	ldr	r1, [pc, #352]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009190:	4313      	orrs	r3, r2
 8009192:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091aa:	d00a      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02e      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091c0:	d129      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091c2:	4b4b      	ldr	r3, [pc, #300]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c8:	0c1b      	lsrs	r3, r3, #16
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091d0:	4b47      	ldr	r3, [pc, #284]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d6:	0f1b      	lsrs	r3, r3, #28
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	019a      	lsls	r2, r3, #6
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	061b      	lsls	r3, r3, #24
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	071b      	lsls	r3, r3, #28
 80091f6:	493e      	ldr	r1, [pc, #248]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80091fe:	4b3c      	ldr	r3, [pc, #240]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009204:	f023 021f 	bic.w	r2, r3, #31
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	3b01      	subs	r3, #1
 800920e:	4938      	ldr	r1, [pc, #224]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009210:	4313      	orrs	r3, r2
 8009212:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01d      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009222:	4b33      	ldr	r3, [pc, #204]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009228:	0e1b      	lsrs	r3, r3, #24
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009236:	0f1b      	lsrs	r3, r3, #28
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	019a      	lsls	r2, r3, #6
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	431a      	orrs	r2, r3
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	061b      	lsls	r3, r3, #24
 8009250:	431a      	orrs	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	071b      	lsls	r3, r3, #28
 8009256:	4926      	ldr	r1, [pc, #152]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009258:	4313      	orrs	r3, r2
 800925a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d011      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	019a      	lsls	r2, r3, #6
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	041b      	lsls	r3, r3, #16
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	071b      	lsls	r3, r3, #28
 8009286:	491a      	ldr	r1, [pc, #104]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009288:	4313      	orrs	r3, r2
 800928a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800928e:	4b18      	ldr	r3, [pc, #96]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800929a:	f7fc f811 	bl	80052c0 <HAL_GetTick>
 800929e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092a0:	e008      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092a2:	f7fc f80d 	bl	80052c0 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b64      	cmp	r3, #100	; 0x64
 80092ae:	d901      	bls.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e0d8      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092b4:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0f0      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	f040 80ce 	bne.w	8009464 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d4:	f7fb fff4 	bl	80052c0 <HAL_GetTick>
 80092d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092da:	e00b      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092dc:	f7fb fff0 	bl	80052c0 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b64      	cmp	r3, #100	; 0x64
 80092e8:	d904      	bls.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e0bb      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80092ee:	bf00      	nop
 80092f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092f4:	4b5e      	ldr	r3, [pc, #376]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009300:	d0ec      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800931e:	2b00      	cmp	r3, #0
 8009320:	d02e      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d12a      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800932a:	4b51      	ldr	r3, [pc, #324]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009338:	4b4d      	ldr	r3, [pc, #308]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	0f1b      	lsrs	r3, r3, #28
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	019a      	lsls	r2, r3, #6
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	061b      	lsls	r3, r3, #24
 8009358:	431a      	orrs	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	071b      	lsls	r3, r3, #28
 800935e:	4944      	ldr	r1, [pc, #272]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009360:	4313      	orrs	r3, r2
 8009362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009366:	4b42      	ldr	r3, [pc, #264]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	493d      	ldr	r1, [pc, #244]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d022      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009394:	d11d      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009396:	4b36      	ldr	r3, [pc, #216]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939c:	0e1b      	lsrs	r3, r3, #24
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093a4:	4b32      	ldr	r3, [pc, #200]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093aa:	0f1b      	lsrs	r3, r3, #28
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	019a      	lsls	r2, r3, #6
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	041b      	lsls	r3, r3, #16
 80093be:	431a      	orrs	r2, r3
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	061b      	lsls	r3, r3, #24
 80093c4:	431a      	orrs	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	071b      	lsls	r3, r3, #28
 80093ca:	4929      	ldr	r1, [pc, #164]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0308 	and.w	r3, r3, #8
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d028      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093de:	4b24      	ldr	r3, [pc, #144]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e4:	0e1b      	lsrs	r3, r3, #24
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093ec:	4b20      	ldr	r3, [pc, #128]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80093ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f2:	0c1b      	lsrs	r3, r3, #16
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	019a      	lsls	r2, r3, #6
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	041b      	lsls	r3, r3, #16
 8009404:	431a      	orrs	r2, r3
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	061b      	lsls	r3, r3, #24
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	071b      	lsls	r3, r3, #28
 8009412:	4917      	ldr	r1, [pc, #92]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009414:	4313      	orrs	r3, r2
 8009416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800941a:	4b15      	ldr	r3, [pc, #84]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800941c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	4911      	ldr	r1, [pc, #68]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a0e      	ldr	r2, [pc, #56]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800943c:	f7fb ff40 	bl	80052c0 <HAL_GetTick>
 8009440:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009442:	e008      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009444:	f7fb ff3c 	bl	80052c0 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b64      	cmp	r3, #100	; 0x64
 8009450:	d901      	bls.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e007      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800945e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009462:	d1ef      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40023800 	.word	0x40023800

08009474 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e025      	b.n	80094d4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7f9 f8bb 	bl	8002618 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3304      	adds	r3, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f002 f91b 	bl	800b6f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	f002 f96f 	bl	800b7a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d101      	bne.n	80094fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80094f6:	2302      	movs	r3, #2
 80094f8:	e021      	b.n	800953e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d002      	beq.n	8009506 <HAL_SDRAM_SendCommand+0x2a>
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	2b05      	cmp	r3, #5
 8009504:	d118      	bne.n	8009538 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2202      	movs	r2, #2
 800950a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	4618      	mov	r0, r3
 8009518:	f002 f9b0 	bl	800b87c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d104      	bne.n	800952e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2205      	movs	r2, #5
 8009528:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800952c:	e006      	b.n	800953c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009536:	e001      	b.n	800953c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d101      	bne.n	8009560 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800955c:	2302      	movs	r3, #2
 800955e:	e016      	b.n	800958e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d10f      	bne.n	800958c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f002 f9a2 	bl	800b8c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e049      	b.n	800963c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fb fb7f 	bl	8004cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f000 fc29 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b01      	cmp	r3, #1
 8009656:	d001      	beq.n	800965c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e054      	b.n	8009706 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a26      	ldr	r2, [pc, #152]	; (8009714 <HAL_TIM_Base_Start_IT+0xd0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d022      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009686:	d01d      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a22      	ldr	r2, [pc, #136]	; (8009718 <HAL_TIM_Base_Start_IT+0xd4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d018      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a21      	ldr	r2, [pc, #132]	; (800971c <HAL_TIM_Base_Start_IT+0xd8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d013      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <HAL_TIM_Base_Start_IT+0xdc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00e      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a1e      	ldr	r2, [pc, #120]	; (8009724 <HAL_TIM_Base_Start_IT+0xe0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d009      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a1c      	ldr	r2, [pc, #112]	; (8009728 <HAL_TIM_Base_Start_IT+0xe4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d004      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0x80>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a1b      	ldr	r2, [pc, #108]	; (800972c <HAL_TIM_Base_Start_IT+0xe8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d115      	bne.n	80096f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	4b19      	ldr	r3, [pc, #100]	; (8009730 <HAL_TIM_Base_Start_IT+0xec>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b06      	cmp	r3, #6
 80096d4:	d015      	beq.n	8009702 <HAL_TIM_Base_Start_IT+0xbe>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096dc:	d011      	beq.n	8009702 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0201 	orr.w	r2, r2, #1
 80096ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ee:	e008      	b.n	8009702 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0201 	orr.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e000      	b.n	8009704 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	40010000 	.word	0x40010000
 8009718:	40000400 	.word	0x40000400
 800971c:	40000800 	.word	0x40000800
 8009720:	40000c00 	.word	0x40000c00
 8009724:	40010400 	.word	0x40010400
 8009728:	40014000 	.word	0x40014000
 800972c:	40001800 	.word	0x40001800
 8009730:	00010007 	.word	0x00010007

08009734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e049      	b.n	80097da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7fb fa90 	bl	8004c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f000 fb5a 	bl	8009e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d122      	bne.n	800983e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d11b      	bne.n	800983e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f06f 0202 	mvn.w	r2, #2
 800980e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fae3 	bl	8009df0 <HAL_TIM_IC_CaptureCallback>
 800982a:	e005      	b.n	8009838 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fad5 	bl	8009ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fae6 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b04      	cmp	r3, #4
 800984a:	d122      	bne.n	8009892 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b04      	cmp	r3, #4
 8009858:	d11b      	bne.n	8009892 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f06f 0204 	mvn.w	r2, #4
 8009862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fab9 	bl	8009df0 <HAL_TIM_IC_CaptureCallback>
 800987e:	e005      	b.n	800988c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 faab 	bl	8009ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fabc 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f003 0308 	and.w	r3, r3, #8
 800989c:	2b08      	cmp	r3, #8
 800989e:	d122      	bne.n	80098e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d11b      	bne.n	80098e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f06f 0208 	mvn.w	r2, #8
 80098b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2204      	movs	r2, #4
 80098bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa8f 	bl	8009df0 <HAL_TIM_IC_CaptureCallback>
 80098d2:	e005      	b.n	80098e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fa81 	bl	8009ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa92 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f003 0310 	and.w	r3, r3, #16
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d122      	bne.n	800993a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f003 0310 	and.w	r3, r3, #16
 80098fe:	2b10      	cmp	r3, #16
 8009900:	d11b      	bne.n	800993a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f06f 0210 	mvn.w	r2, #16
 800990a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2208      	movs	r2, #8
 8009910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fa65 	bl	8009df0 <HAL_TIM_IC_CaptureCallback>
 8009926:	e005      	b.n	8009934 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fa57 	bl	8009ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa68 	bl	8009e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b01      	cmp	r3, #1
 8009946:	d10e      	bne.n	8009966 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b01      	cmp	r3, #1
 8009954:	d107      	bne.n	8009966 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f06f 0201 	mvn.w	r2, #1
 800995e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7fa ff23 	bl	80047ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009970:	2b80      	cmp	r3, #128	; 0x80
 8009972:	d10e      	bne.n	8009992 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997e:	2b80      	cmp	r3, #128	; 0x80
 8009980:	d107      	bne.n	8009992 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800998a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fe7d 	bl	800a68c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800999c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a0:	d10e      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ac:	2b80      	cmp	r3, #128	; 0x80
 80099ae:	d107      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fe70 	bl	800a6a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d10e      	bne.n	80099ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	d107      	bne.n	80099ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa16 	bl	8009e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f003 0320 	and.w	r3, r3, #32
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d10e      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d107      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0220 	mvn.w	r2, #32
 8009a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fe30 	bl	800a678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e0ff      	b.n	8009c3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b14      	cmp	r3, #20
 8009a4a:	f200 80f0 	bhi.w	8009c2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009aa9 	.word	0x08009aa9
 8009a58:	08009c2f 	.word	0x08009c2f
 8009a5c:	08009c2f 	.word	0x08009c2f
 8009a60:	08009c2f 	.word	0x08009c2f
 8009a64:	08009ae9 	.word	0x08009ae9
 8009a68:	08009c2f 	.word	0x08009c2f
 8009a6c:	08009c2f 	.word	0x08009c2f
 8009a70:	08009c2f 	.word	0x08009c2f
 8009a74:	08009b2b 	.word	0x08009b2b
 8009a78:	08009c2f 	.word	0x08009c2f
 8009a7c:	08009c2f 	.word	0x08009c2f
 8009a80:	08009c2f 	.word	0x08009c2f
 8009a84:	08009b6b 	.word	0x08009b6b
 8009a88:	08009c2f 	.word	0x08009c2f
 8009a8c:	08009c2f 	.word	0x08009c2f
 8009a90:	08009c2f 	.word	0x08009c2f
 8009a94:	08009bad 	.word	0x08009bad
 8009a98:	08009c2f 	.word	0x08009c2f
 8009a9c:	08009c2f 	.word	0x08009c2f
 8009aa0:	08009c2f 	.word	0x08009c2f
 8009aa4:	08009bed 	.word	0x08009bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fa5c 	bl	8009f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699a      	ldr	r2, [r3, #24]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0208 	orr.w	r2, r2, #8
 8009ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0204 	bic.w	r2, r2, #4
 8009ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6999      	ldr	r1, [r3, #24]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	619a      	str	r2, [r3, #24]
      break;
 8009ae6:	e0a5      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 faae 	bl	800a050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	699a      	ldr	r2, [r3, #24]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6999      	ldr	r1, [r3, #24]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	021a      	lsls	r2, r3, #8
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	619a      	str	r2, [r3, #24]
      break;
 8009b28:	e084      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fb05 	bl	800a140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69da      	ldr	r2, [r3, #28]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f042 0208 	orr.w	r2, r2, #8
 8009b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0204 	bic.w	r2, r2, #4
 8009b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69d9      	ldr	r1, [r3, #28]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	61da      	str	r2, [r3, #28]
      break;
 8009b68:	e064      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68b9      	ldr	r1, [r7, #8]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fb5b 	bl	800a22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	69da      	ldr	r2, [r3, #28]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69d9      	ldr	r1, [r3, #28]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	021a      	lsls	r2, r3, #8
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	61da      	str	r2, [r3, #28]
      break;
 8009baa:	e043      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fb92 	bl	800a2dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0208 	orr.w	r2, r2, #8
 8009bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0204 	bic.w	r2, r2, #4
 8009bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bea:	e023      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fbc4 	bl	800a380 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	021a      	lsls	r2, r3, #8
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c2c:	e002      	b.n	8009c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]
      break;
 8009c32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop

08009c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_TIM_ConfigClockSource+0x1c>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e0b4      	b.n	8009dce <HAL_TIM_ConfigClockSource+0x186>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	4b56      	ldr	r3, [pc, #344]	; (8009dd8 <HAL_TIM_ConfigClockSource+0x190>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9c:	d03e      	beq.n	8009d1c <HAL_TIM_ConfigClockSource+0xd4>
 8009c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca2:	f200 8087 	bhi.w	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009caa:	f000 8086 	beq.w	8009dba <HAL_TIM_ConfigClockSource+0x172>
 8009cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb2:	d87f      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cb4:	2b70      	cmp	r3, #112	; 0x70
 8009cb6:	d01a      	beq.n	8009cee <HAL_TIM_ConfigClockSource+0xa6>
 8009cb8:	2b70      	cmp	r3, #112	; 0x70
 8009cba:	d87b      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cbc:	2b60      	cmp	r3, #96	; 0x60
 8009cbe:	d050      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x11a>
 8009cc0:	2b60      	cmp	r3, #96	; 0x60
 8009cc2:	d877      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc4:	2b50      	cmp	r3, #80	; 0x50
 8009cc6:	d03c      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0xfa>
 8009cc8:	2b50      	cmp	r3, #80	; 0x50
 8009cca:	d873      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d058      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x13a>
 8009cd0:	2b40      	cmp	r3, #64	; 0x40
 8009cd2:	d86f      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd4:	2b30      	cmp	r3, #48	; 0x30
 8009cd6:	d064      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d86b      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cdc:	2b20      	cmp	r3, #32
 8009cde:	d060      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d867      	bhi.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d05c      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce8:	2b10      	cmp	r3, #16
 8009cea:	d05a      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cec:	e062      	b.n	8009db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cfe:	f000 fc0d 	bl	800a51c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	609a      	str	r2, [r3, #8]
      break;
 8009d1a:	e04f      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d2c:	f000 fbf6 	bl	800a51c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d3e:	609a      	str	r2, [r3, #8]
      break;
 8009d40:	e03c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f000 fb6a 	bl	800a428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2150      	movs	r1, #80	; 0x50
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fbc3 	bl	800a4e6 <TIM_ITRx_SetConfig>
      break;
 8009d60:	e02c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f000 fb89 	bl	800a486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2160      	movs	r1, #96	; 0x60
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fbb3 	bl	800a4e6 <TIM_ITRx_SetConfig>
      break;
 8009d80:	e01c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f000 fb4a 	bl	800a428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2140      	movs	r1, #64	; 0x40
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fba3 	bl	800a4e6 <TIM_ITRx_SetConfig>
      break;
 8009da0:	e00c      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f000 fb9a 	bl	800a4e6 <TIM_ITRx_SetConfig>
      break;
 8009db2:	e003      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	73fb      	strb	r3, [r7, #15]
      break;
 8009db8:	e000      	b.n	8009dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	fffeff88 	.word	0xfffeff88

08009ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a40      	ldr	r2, [pc, #256]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d013      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e4a:	d00f      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a3d      	ldr	r2, [pc, #244]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00b      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a3c      	ldr	r2, [pc, #240]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d007      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a3b      	ldr	r2, [pc, #236]	; (8009f4c <TIM_Base_SetConfig+0x120>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a3a      	ldr	r2, [pc, #232]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d108      	bne.n	8009e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a2f      	ldr	r2, [pc, #188]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d02b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8c:	d027      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a2c      	ldr	r2, [pc, #176]	; (8009f44 <TIM_Base_SetConfig+0x118>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d023      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a2b      	ldr	r2, [pc, #172]	; (8009f48 <TIM_Base_SetConfig+0x11c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d01f      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <TIM_Base_SetConfig+0x120>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d01b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a29      	ldr	r2, [pc, #164]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d017      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a28      	ldr	r2, [pc, #160]	; (8009f54 <TIM_Base_SetConfig+0x128>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d013      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a27      	ldr	r2, [pc, #156]	; (8009f58 <TIM_Base_SetConfig+0x12c>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00f      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <TIM_Base_SetConfig+0x130>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d00b      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <TIM_Base_SetConfig+0x134>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d007      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a24      	ldr	r2, [pc, #144]	; (8009f64 <TIM_Base_SetConfig+0x138>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d003      	beq.n	8009ede <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a23      	ldr	r2, [pc, #140]	; (8009f68 <TIM_Base_SetConfig+0x13c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d108      	bne.n	8009ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <TIM_Base_SetConfig+0x114>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_Base_SetConfig+0xf8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <TIM_Base_SetConfig+0x124>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d103      	bne.n	8009f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	615a      	str	r2, [r3, #20]
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40000c00 	.word	0x40000c00
 8009f50:	40010400 	.word	0x40010400
 8009f54:	40014000 	.word	0x40014000
 8009f58:	40014400 	.word	0x40014400
 8009f5c:	40014800 	.word	0x40014800
 8009f60:	40001800 	.word	0x40001800
 8009f64:	40001c00 	.word	0x40001c00
 8009f68:	40002000 	.word	0x40002000

08009f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f023 0201 	bic.w	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4b2b      	ldr	r3, [pc, #172]	; (800a044 <TIM_OC1_SetConfig+0xd8>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f023 0302 	bic.w	r3, r3, #2
 8009fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a21      	ldr	r2, [pc, #132]	; (800a048 <TIM_OC1_SetConfig+0xdc>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d003      	beq.n	8009fd0 <TIM_OC1_SetConfig+0x64>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a20      	ldr	r2, [pc, #128]	; (800a04c <TIM_OC1_SetConfig+0xe0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10c      	bne.n	8009fea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f023 0308 	bic.w	r3, r3, #8
 8009fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f023 0304 	bic.w	r3, r3, #4
 8009fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a16      	ldr	r2, [pc, #88]	; (800a048 <TIM_OC1_SetConfig+0xdc>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC1_SetConfig+0x8e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a15      	ldr	r2, [pc, #84]	; (800a04c <TIM_OC1_SetConfig+0xe0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d111      	bne.n	800a01e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	621a      	str	r2, [r3, #32]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	fffeff8f 	.word	0xfffeff8f
 800a048:	40010000 	.word	0x40010000
 800a04c:	40010400 	.word	0x40010400

0800a050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f023 0210 	bic.w	r2, r3, #16
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4b2e      	ldr	r3, [pc, #184]	; (800a134 <TIM_OC2_SetConfig+0xe4>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f023 0320 	bic.w	r3, r3, #32
 800a09a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a23      	ldr	r2, [pc, #140]	; (800a138 <TIM_OC2_SetConfig+0xe8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d003      	beq.n	800a0b8 <TIM_OC2_SetConfig+0x68>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a22      	ldr	r2, [pc, #136]	; (800a13c <TIM_OC2_SetConfig+0xec>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d10d      	bne.n	800a0d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	011b      	lsls	r3, r3, #4
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a18      	ldr	r2, [pc, #96]	; (800a138 <TIM_OC2_SetConfig+0xe8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_OC2_SetConfig+0x94>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a17      	ldr	r2, [pc, #92]	; (800a13c <TIM_OC2_SetConfig+0xec>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d113      	bne.n	800a10c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4313      	orrs	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	621a      	str	r2, [r3, #32]
}
 800a126:	bf00      	nop
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	feff8fff 	.word	0xfeff8fff
 800a138:	40010000 	.word	0x40010000
 800a13c:	40010400 	.word	0x40010400

0800a140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4b2d      	ldr	r3, [pc, #180]	; (800a220 <TIM_OC3_SetConfig+0xe0>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a22      	ldr	r2, [pc, #136]	; (800a224 <TIM_OC3_SetConfig+0xe4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d003      	beq.n	800a1a6 <TIM_OC3_SetConfig+0x66>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	; (800a228 <TIM_OC3_SetConfig+0xe8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d10d      	bne.n	800a1c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a17      	ldr	r2, [pc, #92]	; (800a224 <TIM_OC3_SetConfig+0xe4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d003      	beq.n	800a1d2 <TIM_OC3_SetConfig+0x92>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a16      	ldr	r2, [pc, #88]	; (800a228 <TIM_OC3_SetConfig+0xe8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d113      	bne.n	800a1fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	011b      	lsls	r3, r3, #4
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	621a      	str	r2, [r3, #32]
}
 800a214:	bf00      	nop
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	fffeff8f 	.word	0xfffeff8f
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4b1e      	ldr	r3, [pc, #120]	; (800a2d0 <TIM_OC4_SetConfig+0xa4>)
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	031b      	lsls	r3, r3, #12
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	4313      	orrs	r3, r2
 800a282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a13      	ldr	r2, [pc, #76]	; (800a2d4 <TIM_OC4_SetConfig+0xa8>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d003      	beq.n	800a294 <TIM_OC4_SetConfig+0x68>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a12      	ldr	r2, [pc, #72]	; (800a2d8 <TIM_OC4_SetConfig+0xac>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d109      	bne.n	800a2a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a29a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	019b      	lsls	r3, r3, #6
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	feff8fff 	.word	0xfeff8fff
 800a2d4:	40010000 	.word	0x40010000
 800a2d8:	40010400 	.word	0x40010400

0800a2dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4b1b      	ldr	r3, [pc, #108]	; (800a374 <TIM_OC5_SetConfig+0x98>)
 800a308:	4013      	ands	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a31c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	041b      	lsls	r3, r3, #16
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a12      	ldr	r2, [pc, #72]	; (800a378 <TIM_OC5_SetConfig+0x9c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d003      	beq.n	800a33a <TIM_OC5_SetConfig+0x5e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a11      	ldr	r2, [pc, #68]	; (800a37c <TIM_OC5_SetConfig+0xa0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d109      	bne.n	800a34e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a340:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	621a      	str	r2, [r3, #32]
}
 800a368:	bf00      	nop
 800a36a:	371c      	adds	r7, #28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	fffeff8f 	.word	0xfffeff8f
 800a378:	40010000 	.word	0x40010000
 800a37c:	40010400 	.word	0x40010400

0800a380 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	4b1c      	ldr	r3, [pc, #112]	; (800a41c <TIM_OC6_SetConfig+0x9c>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	051b      	lsls	r3, r3, #20
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a13      	ldr	r2, [pc, #76]	; (800a420 <TIM_OC6_SetConfig+0xa0>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d003      	beq.n	800a3e0 <TIM_OC6_SetConfig+0x60>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a12      	ldr	r2, [pc, #72]	; (800a424 <TIM_OC6_SetConfig+0xa4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d109      	bne.n	800a3f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	621a      	str	r2, [r3, #32]
}
 800a40e:	bf00      	nop
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	feff8fff 	.word	0xfeff8fff
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400

0800a428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f023 0201 	bic.w	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f023 030a 	bic.w	r3, r3, #10
 800a464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	621a      	str	r2, [r3, #32]
}
 800a47a:	bf00      	nop
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a486:	b480      	push	{r7}
 800a488:	b087      	sub	sp, #28
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	f023 0210 	bic.w	r2, r3, #16
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	031b      	lsls	r3, r3, #12
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	011b      	lsls	r3, r3, #4
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	621a      	str	r2, [r3, #32]
}
 800a4da:	bf00      	nop
 800a4dc:	371c      	adds	r7, #28
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4313      	orrs	r3, r2
 800a504:	f043 0307 	orr.w	r3, r3, #7
 800a508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	609a      	str	r2, [r3, #8]
}
 800a510:	bf00      	nop
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	021a      	lsls	r2, r3, #8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	431a      	orrs	r2, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	4313      	orrs	r3, r2
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	609a      	str	r2, [r3, #8]
}
 800a550:	bf00      	nop
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a570:	2302      	movs	r3, #2
 800a572:	e06d      	b.n	800a650 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a30      	ldr	r2, [pc, #192]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d004      	beq.n	800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a2f      	ldr	r2, [pc, #188]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d108      	bne.n	800a5ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a20      	ldr	r2, [pc, #128]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d022      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e6:	d01d      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d018      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a1c      	ldr	r2, [pc, #112]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d013      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1a      	ldr	r2, [pc, #104]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d00e      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a15      	ldr	r2, [pc, #84]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d009      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a16      	ldr	r2, [pc, #88]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d004      	beq.n	800a624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a15      	ldr	r2, [pc, #84]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d10c      	bne.n	800a63e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a62a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	4313      	orrs	r3, r2
 800a634:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	40010000 	.word	0x40010000
 800a660:	40010400 	.word	0x40010400
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40014000 	.word	0x40014000
 800a674:	40001800 	.word	0x40001800

0800a678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e040      	b.n	800a748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7fa fb80 	bl	8004ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2224      	movs	r2, #36	; 0x24
 800a6e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0201 	bic.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb3e 	bl	800ad74 <UART_SetConfig>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e022      	b.n	800a748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fd96 	bl	800b23c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fe1d 	bl	800b380 <UART_CheckIdleState>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b0ba      	sub	sp, #232	; 0xe8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a77a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a77e:	4013      	ands	r3, r2
 800a780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d115      	bne.n	800a7b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a790:	f003 0320 	and.w	r3, r3, #32
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00f      	beq.n	800a7b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d009      	beq.n	800a7b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 82ac 	beq.w	800ad06 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
      }
      return;
 800a7b6:	e2a6      	b.n	800ad06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8117 	beq.w	800a9f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a7c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d106      	bne.n	800a7dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a7ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a7d2:	4b85      	ldr	r3, [pc, #532]	; (800a9e8 <HAL_UART_IRQHandler+0x298>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 810a 	beq.w	800a9f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d011      	beq.n	800a80c <HAL_UART_IRQHandler+0xbc>
 800a7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00b      	beq.n	800a80c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a802:	f043 0201 	orr.w	r2, r3, #1
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a810:	f003 0302 	and.w	r3, r3, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d011      	beq.n	800a83c <HAL_UART_IRQHandler+0xec>
 800a818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a81c:	f003 0301 	and.w	r3, r3, #1
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2202      	movs	r2, #2
 800a82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a832:	f043 0204 	orr.w	r2, r3, #4
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d011      	beq.n	800a86c <HAL_UART_IRQHandler+0x11c>
 800a848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2204      	movs	r2, #4
 800a85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a862:	f043 0202 	orr.w	r2, r3, #2
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a870:	f003 0308 	and.w	r3, r3, #8
 800a874:	2b00      	cmp	r3, #0
 800a876:	d017      	beq.n	800a8a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d105      	bne.n	800a890 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a888:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2208      	movs	r2, #8
 800a896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a89e:	f043 0208 	orr.w	r2, r3, #8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <HAL_UART_IRQHandler+0x18a>
 800a8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00c      	beq.n	800a8da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8d0:	f043 0220 	orr.w	r2, r3, #32
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 8212 	beq.w	800ad0a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d007      	beq.n	800a90e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a922:	2b40      	cmp	r3, #64	; 0x40
 800a924:	d005      	beq.n	800a932 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a92a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d04f      	beq.n	800a9d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fe37 	bl	800b5a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d141      	bne.n	800a9ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a95c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a97e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a982:	e841 2300 	strex	r3, r2, [r1]
 800a986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a98a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1d9      	bne.n	800a946 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a996:	2b00      	cmp	r3, #0
 800a998:	d013      	beq.n	800a9c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99e:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <HAL_UART_IRQHandler+0x29c>)
 800a9a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fa fe0c 	bl	80055c4 <HAL_DMA_Abort_IT>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d017      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c0:	e00f      	b.n	800a9e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f9b6 	bl	800ad34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c8:	e00b      	b.n	800a9e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f9b2 	bl	800ad34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9d0:	e007      	b.n	800a9e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f9ae 	bl	800ad34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a9e0:	e193      	b.n	800ad0a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9e2:	bf00      	nop
    return;
 800a9e4:	e191      	b.n	800ad0a <HAL_UART_IRQHandler+0x5ba>
 800a9e6:	bf00      	nop
 800a9e8:	04000120 	.word	0x04000120
 800a9ec:	0800b66f 	.word	0x0800b66f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	f040 814c 	bne.w	800ac92 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fe:	f003 0310 	and.w	r3, r3, #16
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8145 	beq.w	800ac92 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 813e 	beq.w	800ac92 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2210      	movs	r2, #16
 800aa1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa28:	2b40      	cmp	r3, #64	; 0x40
 800aa2a:	f040 80b6 	bne.w	800ab9a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8165 	beq.w	800ad0e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	f080 815d 	bcs.w	800ad0e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa68:	f000 8086 	beq.w	800ab78 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aaa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aaa6:	e841 2300 	strex	r3, r2, [r1]
 800aaaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aaae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1da      	bne.n	800aa6c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aac8:	f023 0301 	bic.w	r3, r3, #1
 800aacc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3308      	adds	r3, #8
 800aad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aaec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e1      	bne.n	800aab6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3308      	adds	r3, #8
 800aaf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e3      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab48:	f023 0310 	bic.w	r3, r3, #16
 800ab4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab62:	e841 2300 	strex	r3, r2, [r1]
 800ab66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e4      	bne.n	800ab38 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fa fcb6 	bl	80054e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f8d8 	bl	800ad48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab98:	e0b9      	b.n	800ad0e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80ab 	beq.w	800ad12 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800abbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80a6 	beq.w	800ad12 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abe8:	647b      	str	r3, [r7, #68]	; 0x44
 800abea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e4      	bne.n	800abc6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	623b      	str	r3, [r7, #32]
   return(result);
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	f023 0301 	bic.w	r3, r3, #1
 800ac12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac20:	633a      	str	r2, [r7, #48]	; 0x30
 800ac22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e3      	bne.n	800abfc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f023 0310 	bic.w	r3, r3, #16
 800ac5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	461a      	mov	r2, r3
 800ac66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac6a:	61fb      	str	r3, [r7, #28]
 800ac6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6e:	69b9      	ldr	r1, [r7, #24]
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	e841 2300 	strex	r3, r2, [r1]
 800ac76:	617b      	str	r3, [r7, #20]
   return(result);
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1e4      	bne.n	800ac48 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2202      	movs	r2, #2
 800ac82:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f85c 	bl	800ad48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac90:	e03f      	b.n	800ad12 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00e      	beq.n	800acbc <HAL_UART_IRQHandler+0x56c>
 800ac9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800acb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f853 	bl	800ad60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acba:	e02d      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800acbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800acc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800accc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d008      	beq.n	800ace6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01c      	beq.n	800ad16 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	4798      	blx	r3
    }
    return;
 800ace4:	e017      	b.n	800ad16 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ace6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d012      	beq.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
 800acf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00c      	beq.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fccb 	bl	800b69a <UART_EndTransmit_IT>
    return;
 800ad04:	e008      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ad06:	bf00      	nop
 800ad08:	e006      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ad0a:	bf00      	nop
 800ad0c:	e004      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ad0e:	bf00      	nop
 800ad10:	e002      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
      return;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <HAL_UART_IRQHandler+0x5c8>
    return;
 800ad16:	bf00      	nop
  }

}
 800ad18:	37e8      	adds	r7, #232	; 0xe8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop

0800ad20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	4ba6      	ldr	r3, [pc, #664]	; (800b038 <UART_SetConfig+0x2c4>)
 800ada0:	4013      	ands	r3, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6812      	ldr	r2, [r2, #0]
 800ada6:	6979      	ldr	r1, [r7, #20]
 800ada8:	430b      	orrs	r3, r1
 800adaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a94      	ldr	r2, [pc, #592]	; (800b03c <UART_SetConfig+0x2c8>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d120      	bne.n	800ae32 <UART_SetConfig+0xbe>
 800adf0:	4b93      	ldr	r3, [pc, #588]	; (800b040 <UART_SetConfig+0x2cc>)
 800adf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d816      	bhi.n	800ae2c <UART_SetConfig+0xb8>
 800adfe:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <UART_SetConfig+0x90>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae15 	.word	0x0800ae15
 800ae08:	0800ae21 	.word	0x0800ae21
 800ae0c:	0800ae1b 	.word	0x0800ae1b
 800ae10:	0800ae27 	.word	0x0800ae27
 800ae14:	2301      	movs	r3, #1
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	e150      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	77fb      	strb	r3, [r7, #31]
 800ae1e:	e14d      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae20:	2304      	movs	r3, #4
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e14a      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae26:	2308      	movs	r3, #8
 800ae28:	77fb      	strb	r3, [r7, #31]
 800ae2a:	e147      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae2c:	2310      	movs	r3, #16
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e144      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a83      	ldr	r2, [pc, #524]	; (800b044 <UART_SetConfig+0x2d0>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d132      	bne.n	800aea2 <UART_SetConfig+0x12e>
 800ae3c:	4b80      	ldr	r3, [pc, #512]	; (800b040 <UART_SetConfig+0x2cc>)
 800ae3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae42:	f003 030c 	and.w	r3, r3, #12
 800ae46:	2b0c      	cmp	r3, #12
 800ae48:	d828      	bhi.n	800ae9c <UART_SetConfig+0x128>
 800ae4a:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <UART_SetConfig+0xdc>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800ae85 	.word	0x0800ae85
 800ae54:	0800ae9d 	.word	0x0800ae9d
 800ae58:	0800ae9d 	.word	0x0800ae9d
 800ae5c:	0800ae9d 	.word	0x0800ae9d
 800ae60:	0800ae91 	.word	0x0800ae91
 800ae64:	0800ae9d 	.word	0x0800ae9d
 800ae68:	0800ae9d 	.word	0x0800ae9d
 800ae6c:	0800ae9d 	.word	0x0800ae9d
 800ae70:	0800ae8b 	.word	0x0800ae8b
 800ae74:	0800ae9d 	.word	0x0800ae9d
 800ae78:	0800ae9d 	.word	0x0800ae9d
 800ae7c:	0800ae9d 	.word	0x0800ae9d
 800ae80:	0800ae97 	.word	0x0800ae97
 800ae84:	2300      	movs	r3, #0
 800ae86:	77fb      	strb	r3, [r7, #31]
 800ae88:	e118      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	77fb      	strb	r3, [r7, #31]
 800ae8e:	e115      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae90:	2304      	movs	r3, #4
 800ae92:	77fb      	strb	r3, [r7, #31]
 800ae94:	e112      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae96:	2308      	movs	r3, #8
 800ae98:	77fb      	strb	r3, [r7, #31]
 800ae9a:	e10f      	b.n	800b0bc <UART_SetConfig+0x348>
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	77fb      	strb	r3, [r7, #31]
 800aea0:	e10c      	b.n	800b0bc <UART_SetConfig+0x348>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a68      	ldr	r2, [pc, #416]	; (800b048 <UART_SetConfig+0x2d4>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d120      	bne.n	800aeee <UART_SetConfig+0x17a>
 800aeac:	4b64      	ldr	r3, [pc, #400]	; (800b040 <UART_SetConfig+0x2cc>)
 800aeae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aeb6:	2b30      	cmp	r3, #48	; 0x30
 800aeb8:	d013      	beq.n	800aee2 <UART_SetConfig+0x16e>
 800aeba:	2b30      	cmp	r3, #48	; 0x30
 800aebc:	d814      	bhi.n	800aee8 <UART_SetConfig+0x174>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	d009      	beq.n	800aed6 <UART_SetConfig+0x162>
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	d810      	bhi.n	800aee8 <UART_SetConfig+0x174>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <UART_SetConfig+0x15c>
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d006      	beq.n	800aedc <UART_SetConfig+0x168>
 800aece:	e00b      	b.n	800aee8 <UART_SetConfig+0x174>
 800aed0:	2300      	movs	r3, #0
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e0f2      	b.n	800b0bc <UART_SetConfig+0x348>
 800aed6:	2302      	movs	r3, #2
 800aed8:	77fb      	strb	r3, [r7, #31]
 800aeda:	e0ef      	b.n	800b0bc <UART_SetConfig+0x348>
 800aedc:	2304      	movs	r3, #4
 800aede:	77fb      	strb	r3, [r7, #31]
 800aee0:	e0ec      	b.n	800b0bc <UART_SetConfig+0x348>
 800aee2:	2308      	movs	r3, #8
 800aee4:	77fb      	strb	r3, [r7, #31]
 800aee6:	e0e9      	b.n	800b0bc <UART_SetConfig+0x348>
 800aee8:	2310      	movs	r3, #16
 800aeea:	77fb      	strb	r3, [r7, #31]
 800aeec:	e0e6      	b.n	800b0bc <UART_SetConfig+0x348>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a56      	ldr	r2, [pc, #344]	; (800b04c <UART_SetConfig+0x2d8>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d120      	bne.n	800af3a <UART_SetConfig+0x1c6>
 800aef8:	4b51      	ldr	r3, [pc, #324]	; (800b040 <UART_SetConfig+0x2cc>)
 800aefa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af02:	2bc0      	cmp	r3, #192	; 0xc0
 800af04:	d013      	beq.n	800af2e <UART_SetConfig+0x1ba>
 800af06:	2bc0      	cmp	r3, #192	; 0xc0
 800af08:	d814      	bhi.n	800af34 <UART_SetConfig+0x1c0>
 800af0a:	2b80      	cmp	r3, #128	; 0x80
 800af0c:	d009      	beq.n	800af22 <UART_SetConfig+0x1ae>
 800af0e:	2b80      	cmp	r3, #128	; 0x80
 800af10:	d810      	bhi.n	800af34 <UART_SetConfig+0x1c0>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <UART_SetConfig+0x1a8>
 800af16:	2b40      	cmp	r3, #64	; 0x40
 800af18:	d006      	beq.n	800af28 <UART_SetConfig+0x1b4>
 800af1a:	e00b      	b.n	800af34 <UART_SetConfig+0x1c0>
 800af1c:	2300      	movs	r3, #0
 800af1e:	77fb      	strb	r3, [r7, #31]
 800af20:	e0cc      	b.n	800b0bc <UART_SetConfig+0x348>
 800af22:	2302      	movs	r3, #2
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e0c9      	b.n	800b0bc <UART_SetConfig+0x348>
 800af28:	2304      	movs	r3, #4
 800af2a:	77fb      	strb	r3, [r7, #31]
 800af2c:	e0c6      	b.n	800b0bc <UART_SetConfig+0x348>
 800af2e:	2308      	movs	r3, #8
 800af30:	77fb      	strb	r3, [r7, #31]
 800af32:	e0c3      	b.n	800b0bc <UART_SetConfig+0x348>
 800af34:	2310      	movs	r3, #16
 800af36:	77fb      	strb	r3, [r7, #31]
 800af38:	e0c0      	b.n	800b0bc <UART_SetConfig+0x348>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a44      	ldr	r2, [pc, #272]	; (800b050 <UART_SetConfig+0x2dc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d125      	bne.n	800af90 <UART_SetConfig+0x21c>
 800af44:	4b3e      	ldr	r3, [pc, #248]	; (800b040 <UART_SetConfig+0x2cc>)
 800af46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af52:	d017      	beq.n	800af84 <UART_SetConfig+0x210>
 800af54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af58:	d817      	bhi.n	800af8a <UART_SetConfig+0x216>
 800af5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af5e:	d00b      	beq.n	800af78 <UART_SetConfig+0x204>
 800af60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af64:	d811      	bhi.n	800af8a <UART_SetConfig+0x216>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <UART_SetConfig+0x1fe>
 800af6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af6e:	d006      	beq.n	800af7e <UART_SetConfig+0x20a>
 800af70:	e00b      	b.n	800af8a <UART_SetConfig+0x216>
 800af72:	2300      	movs	r3, #0
 800af74:	77fb      	strb	r3, [r7, #31]
 800af76:	e0a1      	b.n	800b0bc <UART_SetConfig+0x348>
 800af78:	2302      	movs	r3, #2
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e09e      	b.n	800b0bc <UART_SetConfig+0x348>
 800af7e:	2304      	movs	r3, #4
 800af80:	77fb      	strb	r3, [r7, #31]
 800af82:	e09b      	b.n	800b0bc <UART_SetConfig+0x348>
 800af84:	2308      	movs	r3, #8
 800af86:	77fb      	strb	r3, [r7, #31]
 800af88:	e098      	b.n	800b0bc <UART_SetConfig+0x348>
 800af8a:	2310      	movs	r3, #16
 800af8c:	77fb      	strb	r3, [r7, #31]
 800af8e:	e095      	b.n	800b0bc <UART_SetConfig+0x348>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a2f      	ldr	r2, [pc, #188]	; (800b054 <UART_SetConfig+0x2e0>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d125      	bne.n	800afe6 <UART_SetConfig+0x272>
 800af9a:	4b29      	ldr	r3, [pc, #164]	; (800b040 <UART_SetConfig+0x2cc>)
 800af9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afa8:	d017      	beq.n	800afda <UART_SetConfig+0x266>
 800afaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afae:	d817      	bhi.n	800afe0 <UART_SetConfig+0x26c>
 800afb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb4:	d00b      	beq.n	800afce <UART_SetConfig+0x25a>
 800afb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afba:	d811      	bhi.n	800afe0 <UART_SetConfig+0x26c>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <UART_SetConfig+0x254>
 800afc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afc4:	d006      	beq.n	800afd4 <UART_SetConfig+0x260>
 800afc6:	e00b      	b.n	800afe0 <UART_SetConfig+0x26c>
 800afc8:	2301      	movs	r3, #1
 800afca:	77fb      	strb	r3, [r7, #31]
 800afcc:	e076      	b.n	800b0bc <UART_SetConfig+0x348>
 800afce:	2302      	movs	r3, #2
 800afd0:	77fb      	strb	r3, [r7, #31]
 800afd2:	e073      	b.n	800b0bc <UART_SetConfig+0x348>
 800afd4:	2304      	movs	r3, #4
 800afd6:	77fb      	strb	r3, [r7, #31]
 800afd8:	e070      	b.n	800b0bc <UART_SetConfig+0x348>
 800afda:	2308      	movs	r3, #8
 800afdc:	77fb      	strb	r3, [r7, #31]
 800afde:	e06d      	b.n	800b0bc <UART_SetConfig+0x348>
 800afe0:	2310      	movs	r3, #16
 800afe2:	77fb      	strb	r3, [r7, #31]
 800afe4:	e06a      	b.n	800b0bc <UART_SetConfig+0x348>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a1b      	ldr	r2, [pc, #108]	; (800b058 <UART_SetConfig+0x2e4>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d138      	bne.n	800b062 <UART_SetConfig+0x2ee>
 800aff0:	4b13      	ldr	r3, [pc, #76]	; (800b040 <UART_SetConfig+0x2cc>)
 800aff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800affa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800affe:	d017      	beq.n	800b030 <UART_SetConfig+0x2bc>
 800b000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b004:	d82a      	bhi.n	800b05c <UART_SetConfig+0x2e8>
 800b006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00a:	d00b      	beq.n	800b024 <UART_SetConfig+0x2b0>
 800b00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b010:	d824      	bhi.n	800b05c <UART_SetConfig+0x2e8>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <UART_SetConfig+0x2aa>
 800b016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01a:	d006      	beq.n	800b02a <UART_SetConfig+0x2b6>
 800b01c:	e01e      	b.n	800b05c <UART_SetConfig+0x2e8>
 800b01e:	2300      	movs	r3, #0
 800b020:	77fb      	strb	r3, [r7, #31]
 800b022:	e04b      	b.n	800b0bc <UART_SetConfig+0x348>
 800b024:	2302      	movs	r3, #2
 800b026:	77fb      	strb	r3, [r7, #31]
 800b028:	e048      	b.n	800b0bc <UART_SetConfig+0x348>
 800b02a:	2304      	movs	r3, #4
 800b02c:	77fb      	strb	r3, [r7, #31]
 800b02e:	e045      	b.n	800b0bc <UART_SetConfig+0x348>
 800b030:	2308      	movs	r3, #8
 800b032:	77fb      	strb	r3, [r7, #31]
 800b034:	e042      	b.n	800b0bc <UART_SetConfig+0x348>
 800b036:	bf00      	nop
 800b038:	efff69f3 	.word	0xefff69f3
 800b03c:	40011000 	.word	0x40011000
 800b040:	40023800 	.word	0x40023800
 800b044:	40004400 	.word	0x40004400
 800b048:	40004800 	.word	0x40004800
 800b04c:	40004c00 	.word	0x40004c00
 800b050:	40005000 	.word	0x40005000
 800b054:	40011400 	.word	0x40011400
 800b058:	40007800 	.word	0x40007800
 800b05c:	2310      	movs	r3, #16
 800b05e:	77fb      	strb	r3, [r7, #31]
 800b060:	e02c      	b.n	800b0bc <UART_SetConfig+0x348>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a72      	ldr	r2, [pc, #456]	; (800b230 <UART_SetConfig+0x4bc>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d125      	bne.n	800b0b8 <UART_SetConfig+0x344>
 800b06c:	4b71      	ldr	r3, [pc, #452]	; (800b234 <UART_SetConfig+0x4c0>)
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b072:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b076:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b07a:	d017      	beq.n	800b0ac <UART_SetConfig+0x338>
 800b07c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b080:	d817      	bhi.n	800b0b2 <UART_SetConfig+0x33e>
 800b082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b086:	d00b      	beq.n	800b0a0 <UART_SetConfig+0x32c>
 800b088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b08c:	d811      	bhi.n	800b0b2 <UART_SetConfig+0x33e>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <UART_SetConfig+0x326>
 800b092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b096:	d006      	beq.n	800b0a6 <UART_SetConfig+0x332>
 800b098:	e00b      	b.n	800b0b2 <UART_SetConfig+0x33e>
 800b09a:	2300      	movs	r3, #0
 800b09c:	77fb      	strb	r3, [r7, #31]
 800b09e:	e00d      	b.n	800b0bc <UART_SetConfig+0x348>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	77fb      	strb	r3, [r7, #31]
 800b0a4:	e00a      	b.n	800b0bc <UART_SetConfig+0x348>
 800b0a6:	2304      	movs	r3, #4
 800b0a8:	77fb      	strb	r3, [r7, #31]
 800b0aa:	e007      	b.n	800b0bc <UART_SetConfig+0x348>
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	77fb      	strb	r3, [r7, #31]
 800b0b0:	e004      	b.n	800b0bc <UART_SetConfig+0x348>
 800b0b2:	2310      	movs	r3, #16
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e001      	b.n	800b0bc <UART_SetConfig+0x348>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0c4:	d15b      	bne.n	800b17e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b0c6:	7ffb      	ldrb	r3, [r7, #31]
 800b0c8:	2b08      	cmp	r3, #8
 800b0ca:	d828      	bhi.n	800b11e <UART_SetConfig+0x3aa>
 800b0cc:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <UART_SetConfig+0x360>)
 800b0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d2:	bf00      	nop
 800b0d4:	0800b0f9 	.word	0x0800b0f9
 800b0d8:	0800b101 	.word	0x0800b101
 800b0dc:	0800b109 	.word	0x0800b109
 800b0e0:	0800b11f 	.word	0x0800b11f
 800b0e4:	0800b10f 	.word	0x0800b10f
 800b0e8:	0800b11f 	.word	0x0800b11f
 800b0ec:	0800b11f 	.word	0x0800b11f
 800b0f0:	0800b11f 	.word	0x0800b11f
 800b0f4:	0800b117 	.word	0x0800b117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0f8:	f7fd fd3a 	bl	8008b70 <HAL_RCC_GetPCLK1Freq>
 800b0fc:	61b8      	str	r0, [r7, #24]
        break;
 800b0fe:	e013      	b.n	800b128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b100:	f7fd fd4a 	bl	8008b98 <HAL_RCC_GetPCLK2Freq>
 800b104:	61b8      	str	r0, [r7, #24]
        break;
 800b106:	e00f      	b.n	800b128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b108:	4b4b      	ldr	r3, [pc, #300]	; (800b238 <UART_SetConfig+0x4c4>)
 800b10a:	61bb      	str	r3, [r7, #24]
        break;
 800b10c:	e00c      	b.n	800b128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b10e:	f7fd fc5d 	bl	80089cc <HAL_RCC_GetSysClockFreq>
 800b112:	61b8      	str	r0, [r7, #24]
        break;
 800b114:	e008      	b.n	800b128 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b11a:	61bb      	str	r3, [r7, #24]
        break;
 800b11c:	e004      	b.n	800b128 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	77bb      	strb	r3, [r7, #30]
        break;
 800b126:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d074      	beq.n	800b218 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	005a      	lsls	r2, r3, #1
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	441a      	add	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b142:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b0f      	cmp	r3, #15
 800b148:	d916      	bls.n	800b178 <UART_SetConfig+0x404>
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b150:	d212      	bcs.n	800b178 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	b29b      	uxth	r3, r3
 800b156:	f023 030f 	bic.w	r3, r3, #15
 800b15a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	085b      	lsrs	r3, r3, #1
 800b160:	b29b      	uxth	r3, r3
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	b29a      	uxth	r2, r3
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	89fa      	ldrh	r2, [r7, #14]
 800b174:	60da      	str	r2, [r3, #12]
 800b176:	e04f      	b.n	800b218 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	77bb      	strb	r3, [r7, #30]
 800b17c:	e04c      	b.n	800b218 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b17e:	7ffb      	ldrb	r3, [r7, #31]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d828      	bhi.n	800b1d6 <UART_SetConfig+0x462>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <UART_SetConfig+0x418>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1b1 	.word	0x0800b1b1
 800b190:	0800b1b9 	.word	0x0800b1b9
 800b194:	0800b1c1 	.word	0x0800b1c1
 800b198:	0800b1d7 	.word	0x0800b1d7
 800b19c:	0800b1c7 	.word	0x0800b1c7
 800b1a0:	0800b1d7 	.word	0x0800b1d7
 800b1a4:	0800b1d7 	.word	0x0800b1d7
 800b1a8:	0800b1d7 	.word	0x0800b1d7
 800b1ac:	0800b1cf 	.word	0x0800b1cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1b0:	f7fd fcde 	bl	8008b70 <HAL_RCC_GetPCLK1Freq>
 800b1b4:	61b8      	str	r0, [r7, #24]
        break;
 800b1b6:	e013      	b.n	800b1e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1b8:	f7fd fcee 	bl	8008b98 <HAL_RCC_GetPCLK2Freq>
 800b1bc:	61b8      	str	r0, [r7, #24]
        break;
 800b1be:	e00f      	b.n	800b1e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <UART_SetConfig+0x4c4>)
 800b1c2:	61bb      	str	r3, [r7, #24]
        break;
 800b1c4:	e00c      	b.n	800b1e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1c6:	f7fd fc01 	bl	80089cc <HAL_RCC_GetSysClockFreq>
 800b1ca:	61b8      	str	r0, [r7, #24]
        break;
 800b1cc:	e008      	b.n	800b1e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1d2:	61bb      	str	r3, [r7, #24]
        break;
 800b1d4:	e004      	b.n	800b1e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	77bb      	strb	r3, [r7, #30]
        break;
 800b1de:	bf00      	nop
    }

    if (pclk != 0U)
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d018      	beq.n	800b218 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	085a      	lsrs	r2, r3, #1
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	441a      	add	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b0f      	cmp	r3, #15
 800b1fe:	d909      	bls.n	800b214 <UART_SetConfig+0x4a0>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b206:	d205      	bcs.n	800b214 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	e001      	b.n	800b218 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b224:	7fbb      	ldrb	r3, [r7, #30]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40007c00 	.word	0x40007c00
 800b234:	40023800 	.word	0x40023800
 800b238:	00f42400 	.word	0x00f42400

0800b23c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00a      	beq.n	800b2aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	f003 0308 	and.w	r3, r3, #8
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00a      	beq.n	800b2cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	f003 0310 	and.w	r3, r3, #16
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	f003 0320 	and.w	r3, r3, #32
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01a      	beq.n	800b352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	430a      	orrs	r2, r1
 800b330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b33a:	d10a      	bne.n	800b352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00a      	beq.n	800b374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	605a      	str	r2, [r3, #4]
  }
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af02      	add	r7, sp, #8
 800b386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b390:	f7f9 ff96 	bl	80052c0 <HAL_GetTick>
 800b394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0308 	and.w	r3, r3, #8
 800b3a0:	2b08      	cmp	r3, #8
 800b3a2:	d10e      	bne.n	800b3c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f831 	bl	800b41a <UART_WaitOnFlagUntilTimeout>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e027      	b.n	800b412 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d10e      	bne.n	800b3ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f81b 	bl	800b41a <UART_WaitOnFlagUntilTimeout>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e011      	b.n	800b412 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b09c      	sub	sp, #112	; 0x70
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	603b      	str	r3, [r7, #0]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b42a:	e0a7      	b.n	800b57c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b432:	f000 80a3 	beq.w	800b57c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b436:	f7f9 ff43 	bl	80052c0 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b442:	429a      	cmp	r2, r3
 800b444:	d302      	bcc.n	800b44c <UART_WaitOnFlagUntilTimeout+0x32>
 800b446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d13f      	bne.n	800b4cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b460:	667b      	str	r3, [r7, #100]	; 0x64
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b46a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b46c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e6      	bne.n	800b44c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3308      	adds	r3, #8
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f023 0301 	bic.w	r3, r3, #1
 800b494:	663b      	str	r3, [r7, #96]	; 0x60
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3308      	adds	r3, #8
 800b49c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b49e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b4ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e5      	bne.n	800b47e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2220      	movs	r2, #32
 800b4bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e068      	b.n	800b59e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d050      	beq.n	800b57c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e8:	d148      	bne.n	800b57c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b508:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
 800b514:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1e6      	bne.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	613b      	str	r3, [r7, #16]
   return(result);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f023 0301 	bic.w	r3, r3, #1
 800b53c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3308      	adds	r3, #8
 800b544:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b546:	623a      	str	r2, [r7, #32]
 800b548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	69f9      	ldr	r1, [r7, #28]
 800b54c:	6a3a      	ldr	r2, [r7, #32]
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	61bb      	str	r3, [r7, #24]
   return(result);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e5      	bne.n	800b526 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2220      	movs	r2, #32
 800b55e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2220      	movs	r2, #32
 800b564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e010      	b.n	800b59e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	69da      	ldr	r2, [r3, #28]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	4013      	ands	r3, r2
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	429a      	cmp	r2, r3
 800b58a:	bf0c      	ite	eq
 800b58c:	2301      	moveq	r3, #1
 800b58e:	2300      	movne	r3, #0
 800b590:	b2db      	uxtb	r3, r3
 800b592:	461a      	mov	r2, r3
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	429a      	cmp	r2, r3
 800b598:	f43f af48 	beq.w	800b42c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3770      	adds	r7, #112	; 0x70
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b095      	sub	sp, #84	; 0x54
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e6      	bne.n	800b5ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	f023 0301 	bic.w	r3, r3, #1
 800b5f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b600:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e5      	bne.n	800b5e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d118      	bne.n	800b64e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	60bb      	str	r3, [r7, #8]
   return(result);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f023 0310 	bic.w	r3, r3, #16
 800b630:	647b      	str	r3, [r7, #68]	; 0x44
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63a:	61bb      	str	r3, [r7, #24]
 800b63c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6979      	ldr	r1, [r7, #20]
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	613b      	str	r3, [r7, #16]
   return(result);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e6      	bne.n	800b61c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b662:	bf00      	nop
 800b664:	3754      	adds	r7, #84	; 0x54
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f7ff fb51 	bl	800ad34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b088      	sub	sp, #32
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	e853 3f00 	ldrex	r3, [r3]
 800b6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b6:	61fb      	str	r3, [r7, #28]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	61bb      	str	r3, [r7, #24]
 800b6c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	69ba      	ldr	r2, [r7, #24]
 800b6c8:	e841 2300 	strex	r3, r2, [r1]
 800b6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e6      	bne.n	800b6a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fb1d 	bl	800ad20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6e6:	bf00      	nop
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d121      	bne.n	800b746 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <FMC_SDRAM_Init+0xb4>)
 800b708:	4013      	ands	r3, r2
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	6851      	ldr	r1, [r2, #4]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	6892      	ldr	r2, [r2, #8]
 800b712:	4311      	orrs	r1, r2
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	68d2      	ldr	r2, [r2, #12]
 800b718:	4311      	orrs	r1, r2
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	6912      	ldr	r2, [r2, #16]
 800b71e:	4311      	orrs	r1, r2
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	6952      	ldr	r2, [r2, #20]
 800b724:	4311      	orrs	r1, r2
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	6992      	ldr	r2, [r2, #24]
 800b72a:	4311      	orrs	r1, r2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	69d2      	ldr	r2, [r2, #28]
 800b730:	4311      	orrs	r1, r2
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	6a12      	ldr	r2, [r2, #32]
 800b736:	4311      	orrs	r1, r2
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b73c:	430a      	orrs	r2, r1
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e026      	b.n	800b794 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	69d9      	ldr	r1, [r3, #28]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	4319      	orrs	r1, r3
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	430b      	orrs	r3, r1
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <FMC_SDRAM_Init+0xb4>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	6851      	ldr	r1, [r2, #4]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6892      	ldr	r2, [r2, #8]
 800b774:	4311      	orrs	r1, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	68d2      	ldr	r2, [r2, #12]
 800b77a:	4311      	orrs	r1, r2
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	6912      	ldr	r2, [r2, #16]
 800b780:	4311      	orrs	r1, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6952      	ldr	r2, [r2, #20]
 800b786:	4311      	orrs	r1, r2
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	6992      	ldr	r2, [r2, #24]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	ffff8000 	.word	0xffff8000

0800b7a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d128      	bne.n	800b80c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1e59      	subs	r1, r3, #1
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	011b      	lsls	r3, r3, #4
 800b7d0:	4319      	orrs	r1, r3
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	4319      	orrs	r1, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	031b      	lsls	r3, r3, #12
 800b7e4:	4319      	orrs	r1, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	4319      	orrs	r1, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	051b      	lsls	r3, r3, #20
 800b7f8:	4319      	orrs	r1, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	061b      	lsls	r3, r3, #24
 800b802:	430b      	orrs	r3, r1
 800b804:	431a      	orrs	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	609a      	str	r2, [r3, #8]
 800b80a:	e02d      	b.n	800b868 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <FMC_SDRAM_Timing_Init+0xd0>)
 800b812:	4013      	ands	r3, r2
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	68d2      	ldr	r2, [r2, #12]
 800b818:	3a01      	subs	r2, #1
 800b81a:	0311      	lsls	r1, r2, #12
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	6952      	ldr	r2, [r2, #20]
 800b820:	3a01      	subs	r2, #1
 800b822:	0512      	lsls	r2, r2, #20
 800b824:	430a      	orrs	r2, r1
 800b826:	431a      	orrs	r2, r3
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	1e59      	subs	r1, r3, #1
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	3b01      	subs	r3, #1
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	4319      	orrs	r1, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	3b01      	subs	r3, #1
 800b84a:	021b      	lsls	r3, r3, #8
 800b84c:	4319      	orrs	r1, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	3b01      	subs	r3, #1
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4319      	orrs	r1, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	061b      	lsls	r3, r3, #24
 800b860:	430b      	orrs	r3, r1
 800b862:	431a      	orrs	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	ff0f0fff 	.word	0xff0f0fff

0800b87c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	691a      	ldr	r2, [r3, #16]
 800b88c:	4b0c      	ldr	r3, [pc, #48]	; (800b8c0 <FMC_SDRAM_SendCommand+0x44>)
 800b88e:	4013      	ands	r3, r2
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	6811      	ldr	r1, [r2, #0]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	6852      	ldr	r2, [r2, #4]
 800b898:	4311      	orrs	r1, r2
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	6892      	ldr	r2, [r2, #8]
 800b89e:	3a01      	subs	r2, #1
 800b8a0:	0152      	lsls	r2, r2, #5
 800b8a2:	4311      	orrs	r1, r2
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	68d2      	ldr	r2, [r2, #12]
 800b8a8:	0252      	lsls	r2, r2, #9
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	ffc00000 	.word	0xffc00000

0800b8c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695a      	ldr	r2, [r3, #20]
 800b8d2:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	0052      	lsls	r2, r2, #1
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	370c      	adds	r7, #12
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	ffffc001 	.word	0xffffc001

0800b8f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8f4:	b480      	push	{r7}
 800b8f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b8f8:	bf00      	nop
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
	...

0800b904 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90a:	f3ef 8305 	mrs	r3, IPSR
 800b90e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10f      	bne.n	800b936 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b916:	f3ef 8310 	mrs	r3, PRIMASK
 800b91a:	607b      	str	r3, [r7, #4]
  return(result);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b922:	f3ef 8311 	mrs	r3, BASEPRI
 800b926:	603b      	str	r3, [r7, #0]
  return(result);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d007      	beq.n	800b93e <osKernelInitialize+0x3a>
 800b92e:	4b0e      	ldr	r3, [pc, #56]	; (800b968 <osKernelInitialize+0x64>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d103      	bne.n	800b93e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b936:	f06f 0305 	mvn.w	r3, #5
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	e00c      	b.n	800b958 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b93e:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <osKernelInitialize+0x64>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d105      	bne.n	800b952 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b946:	4b08      	ldr	r3, [pc, #32]	; (800b968 <osKernelInitialize+0x64>)
 800b948:	2201      	movs	r2, #1
 800b94a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	e002      	b.n	800b958 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295
 800b956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b958:	68fb      	ldr	r3, [r7, #12]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20004824 	.word	0x20004824

0800b96c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b972:	f3ef 8305 	mrs	r3, IPSR
 800b976:	60bb      	str	r3, [r7, #8]
  return(result);
 800b978:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10f      	bne.n	800b99e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b97e:	f3ef 8310 	mrs	r3, PRIMASK
 800b982:	607b      	str	r3, [r7, #4]
  return(result);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d105      	bne.n	800b996 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b98a:	f3ef 8311 	mrs	r3, BASEPRI
 800b98e:	603b      	str	r3, [r7, #0]
  return(result);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <osKernelStart+0x3a>
 800b996:	4b0f      	ldr	r3, [pc, #60]	; (800b9d4 <osKernelStart+0x68>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d103      	bne.n	800b9a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b99e:	f06f 0305 	mvn.w	r3, #5
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e010      	b.n	800b9c8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <osKernelStart+0x68>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d109      	bne.n	800b9c2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9ae:	f7ff ffa1 	bl	800b8f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9b2:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <osKernelStart+0x68>)
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b9b8:	f001 face 	bl	800cf58 <vTaskStartScheduler>
      stat = osOK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e002      	b.n	800b9c8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20004824 	.word	0x20004824

0800b9d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b090      	sub	sp, #64	; 0x40
 800b9dc:	af04      	add	r7, sp, #16
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e8:	f3ef 8305 	mrs	r3, IPSR
 800b9ec:	61fb      	str	r3, [r7, #28]
  return(result);
 800b9ee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 808f 	bne.w	800bb14 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9fa:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d105      	bne.n	800ba0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba02:	f3ef 8311 	mrs	r3, BASEPRI
 800ba06:	617b      	str	r3, [r7, #20]
  return(result);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <osThreadNew+0x3e>
 800ba0e:	4b44      	ldr	r3, [pc, #272]	; (800bb20 <osThreadNew+0x148>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d07e      	beq.n	800bb14 <osThreadNew+0x13c>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d07b      	beq.n	800bb14 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ba1c:	2380      	movs	r3, #128	; 0x80
 800ba1e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ba20:	2318      	movs	r3, #24
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295
 800ba2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d045      	beq.n	800bac0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <osThreadNew+0x6a>
        name = attr->name;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d008      	beq.n	800ba68 <osThreadNew+0x90>
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	2b38      	cmp	r3, #56	; 0x38
 800ba5a:	d805      	bhi.n	800ba68 <osThreadNew+0x90>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <osThreadNew+0x94>
        return (NULL);
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e054      	b.n	800bb16 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	089b      	lsrs	r3, r3, #2
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00e      	beq.n	800baa2 <osThreadNew+0xca>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	2ba7      	cmp	r3, #167	; 0xa7
 800ba8a:	d90a      	bls.n	800baa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d006      	beq.n	800baa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <osThreadNew+0xca>
        mem = 1;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	623b      	str	r3, [r7, #32]
 800baa0:	e010      	b.n	800bac4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10c      	bne.n	800bac4 <osThreadNew+0xec>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d108      	bne.n	800bac4 <osThreadNew+0xec>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <osThreadNew+0xec>
          mem = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	623b      	str	r3, [r7, #32]
 800babe:	e001      	b.n	800bac4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d110      	bne.n	800baec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bad2:	9202      	str	r2, [sp, #8]
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f001 f843 	bl	800cb6c <xTaskCreateStatic>
 800bae6:	4603      	mov	r3, r0
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	e013      	b.n	800bb14 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d110      	bne.n	800bb14 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	f107 0310 	add.w	r3, r7, #16
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f001 f894 	bl	800cc32 <xTaskCreate>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d001      	beq.n	800bb14 <osThreadNew+0x13c>
          hTask = NULL;
 800bb10:	2300      	movs	r3, #0
 800bb12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb14:	693b      	ldr	r3, [r7, #16]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3730      	adds	r7, #48	; 0x30
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20004824 	.word	0x20004824

0800bb24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb2c:	f3ef 8305 	mrs	r3, IPSR
 800bb30:	613b      	str	r3, [r7, #16]
  return(result);
 800bb32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10f      	bne.n	800bb58 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb38:	f3ef 8310 	mrs	r3, PRIMASK
 800bb3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d105      	bne.n	800bb50 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb44:	f3ef 8311 	mrs	r3, BASEPRI
 800bb48:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d007      	beq.n	800bb60 <osDelay+0x3c>
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <osDelay+0x58>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d103      	bne.n	800bb60 <osDelay+0x3c>
    stat = osErrorISR;
 800bb58:	f06f 0305 	mvn.w	r3, #5
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	e007      	b.n	800bb70 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <osDelay+0x4c>
      vTaskDelay(ticks);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f001 f9be 	bl	800ceec <vTaskDelay>
    }
  }

  return (stat);
 800bb70:	697b      	ldr	r3, [r7, #20]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20004824 	.word	0x20004824

0800bb80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4a07      	ldr	r2, [pc, #28]	; (800bbac <vApplicationGetIdleTaskMemory+0x2c>)
 800bb90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	4a06      	ldr	r2, [pc, #24]	; (800bbb0 <vApplicationGetIdleTaskMemory+0x30>)
 800bb96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2280      	movs	r2, #128	; 0x80
 800bb9c:	601a      	str	r2, [r3, #0]
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	20004828 	.word	0x20004828
 800bbb0:	200048d0 	.word	0x200048d0

0800bbb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4a07      	ldr	r2, [pc, #28]	; (800bbe0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bbc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	4a06      	ldr	r2, [pc, #24]	; (800bbe4 <vApplicationGetTimerTaskMemory+0x30>)
 800bbca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbd2:	601a      	str	r2, [r3, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20004ad0 	.word	0x20004ad0
 800bbe4:	20004b78 	.word	0x20004b78

0800bbe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f103 0208 	add.w	r2, r3, #8
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bc00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f103 0208 	add.w	r2, r3, #8
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f103 0208 	add.w	r2, r3, #8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc36:	bf00      	nop
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	601a      	str	r2, [r3, #0]
}
 800bc7e:	bf00      	nop
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca0:	d103      	bne.n	800bcaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	e00c      	b.n	800bcc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3308      	adds	r3, #8
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e002      	b.n	800bcb8 <vListInsert+0x2e>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d2f6      	bcs.n	800bcb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6892      	ldr	r2, [r2, #8]
 800bd12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6852      	ldr	r2, [r2, #4]
 800bd1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d103      	bne.n	800bd30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689a      	ldr	r2, [r3, #8]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	1e5a      	subs	r2, r3, #1
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10c      	bne.n	800bd7e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	b672      	cpsid	i
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	b662      	cpsie	i
 800bd78:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800bd7e:	f002 fc0d 	bl	800e59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd8e:	fb01 f303 	mul.w	r3, r1, r3
 800bd92:	441a      	add	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	68f9      	ldr	r1, [r7, #12]
 800bdb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdb4:	fb01 f303 	mul.w	r3, r1, r3
 800bdb8:	441a      	add	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	22ff      	movs	r2, #255	; 0xff
 800bdc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	22ff      	movs	r2, #255	; 0xff
 800bdca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d114      	bne.n	800bdfe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01a      	beq.n	800be12 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3310      	adds	r3, #16
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 fb61 	bl	800d4a8 <xTaskRemoveFromEventList>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d012      	beq.n	800be12 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdec:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <xQueueGenericReset+0xd0>)
 800bdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	e009      	b.n	800be12 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3310      	adds	r3, #16
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff fef0 	bl	800bbe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3324      	adds	r3, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff feeb 	bl	800bbe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f002 fbf7 	bl	800e604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be16:	2301      	movs	r3, #1
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08e      	sub	sp, #56	; 0x38
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10c      	bne.n	800be52 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	b672      	cpsid	i
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	b662      	cpsie	i
 800be4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10c      	bne.n	800be72 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	b672      	cpsid	i
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	b662      	cpsie	i
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be6e:	bf00      	nop
 800be70:	e7fe      	b.n	800be70 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <xQueueGenericCreateStatic+0x5a>
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <xQueueGenericCreateStatic+0x5e>
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <xQueueGenericCreateStatic+0x60>
 800be82:	2300      	movs	r3, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10c      	bne.n	800bea2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	b672      	cpsid	i
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	b662      	cpsie	i
 800be9c:	623b      	str	r3, [r7, #32]
}
 800be9e:	bf00      	nop
 800bea0:	e7fe      	b.n	800bea0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <xQueueGenericCreateStatic+0x8a>
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <xQueueGenericCreateStatic+0x8e>
 800beae:	2301      	movs	r3, #1
 800beb0:	e000      	b.n	800beb4 <xQueueGenericCreateStatic+0x90>
 800beb2:	2300      	movs	r3, #0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10c      	bne.n	800bed2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	b672      	cpsid	i
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	b662      	cpsie	i
 800becc:	61fb      	str	r3, [r7, #28]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bed2:	2350      	movs	r3, #80	; 0x50
 800bed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b50      	cmp	r3, #80	; 0x50
 800beda:	d00c      	beq.n	800bef6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	b672      	cpsid	i
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	b662      	cpsie	i
 800bef0:	61bb      	str	r3, [r7, #24]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bef6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00d      	beq.n	800bf1e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	4613      	mov	r3, r2
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f847 	bl	800bfac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3730      	adds	r7, #48	; 0x30
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08a      	sub	sp, #40	; 0x28
 800bf2c:	af02      	add	r7, sp, #8
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10c      	bne.n	800bf56 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	b672      	cpsid	i
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	b662      	cpsie	i
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	e004      	b.n	800bf6c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	fb02 f303 	mul.w	r3, r2, r3
 800bf6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	3350      	adds	r3, #80	; 0x50
 800bf70:	4618      	mov	r0, r3
 800bf72:	f002 fc3f 	bl	800e7f4 <pvPortMalloc>
 800bf76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d011      	beq.n	800bfa2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	3350      	adds	r3, #80	; 0x50
 800bf86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf90:	79fa      	ldrb	r2, [r7, #7]
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	4613      	mov	r3, r2
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f805 	bl	800bfac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfa2:	69bb      	ldr	r3, [r7, #24]
	}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3720      	adds	r7, #32
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d103      	bne.n	800bfc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	69ba      	ldr	r2, [r7, #24]
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	e002      	b.n	800bfce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfda:	2101      	movs	r1, #1
 800bfdc:	69b8      	ldr	r0, [r7, #24]
 800bfde:	f7ff feb7 	bl	800bd50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	78fa      	ldrb	r2, [r7, #3]
 800bfe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08e      	sub	sp, #56	; 0x38
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c002:	2300      	movs	r3, #0
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10c      	bne.n	800c02a <xQueueGenericSend+0x36>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c014:	b672      	cpsid	i
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	b662      	cpsie	i
 800c024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d103      	bne.n	800c038 <xQueueGenericSend+0x44>
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <xQueueGenericSend+0x48>
 800c038:	2301      	movs	r3, #1
 800c03a:	e000      	b.n	800c03e <xQueueGenericSend+0x4a>
 800c03c:	2300      	movs	r3, #0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10c      	bne.n	800c05c <xQueueGenericSend+0x68>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c046:	b672      	cpsid	i
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	b662      	cpsie	i
 800c056:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c058:	bf00      	nop
 800c05a:	e7fe      	b.n	800c05a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d103      	bne.n	800c06a <xQueueGenericSend+0x76>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c066:	2b01      	cmp	r3, #1
 800c068:	d101      	bne.n	800c06e <xQueueGenericSend+0x7a>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e000      	b.n	800c070 <xQueueGenericSend+0x7c>
 800c06e:	2300      	movs	r3, #0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10c      	bne.n	800c08e <xQueueGenericSend+0x9a>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	b672      	cpsid	i
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	b662      	cpsie	i
 800c088:	623b      	str	r3, [r7, #32]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c08e:	f001 fbd5 	bl	800d83c <xTaskGetSchedulerState>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d102      	bne.n	800c09e <xQueueGenericSend+0xaa>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <xQueueGenericSend+0xae>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e000      	b.n	800c0a4 <xQueueGenericSend+0xb0>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10c      	bne.n	800c0c2 <xQueueGenericSend+0xce>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	b672      	cpsid	i
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	b662      	cpsie	i
 800c0bc:	61fb      	str	r3, [r7, #28]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0c2:	f002 fa6b 	bl	800e59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <xQueueGenericSend+0xe4>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d129      	bne.n	800c12c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	68b9      	ldr	r1, [r7, #8]
 800c0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0de:	f000 fbd7 	bl	800c890 <prvCopyDataToQueue>
 800c0e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d010      	beq.n	800c10e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	3324      	adds	r3, #36	; 0x24
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 f9d9 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d013      	beq.n	800c124 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0fc:	4b3f      	ldr	r3, [pc, #252]	; (800c1fc <xQueueGenericSend+0x208>)
 800c0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	e00a      	b.n	800c124 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	2b00      	cmp	r3, #0
 800c112:	d007      	beq.n	800c124 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c114:	4b39      	ldr	r3, [pc, #228]	; (800c1fc <xQueueGenericSend+0x208>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c124:	f002 fa6e 	bl	800e604 <vPortExitCritical>
				return pdPASS;
 800c128:	2301      	movs	r3, #1
 800c12a:	e063      	b.n	800c1f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d103      	bne.n	800c13a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c132:	f002 fa67 	bl	800e604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c136:	2300      	movs	r3, #0
 800c138:	e05c      	b.n	800c1f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	4618      	mov	r0, r3
 800c146:	f001 fa15 	bl	800d574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c14a:	2301      	movs	r3, #1
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c14e:	f002 fa59 	bl	800e604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c152:	f000 ff75 	bl	800d040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c156:	f002 fa21 	bl	800e59c <vPortEnterCritical>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c160:	b25b      	sxtb	r3, r3
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d103      	bne.n	800c170 <xQueueGenericSend+0x17c>
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c176:	b25b      	sxtb	r3, r3
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d103      	bne.n	800c186 <xQueueGenericSend+0x192>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c186:	f002 fa3d 	bl	800e604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c18a:	1d3a      	adds	r2, r7, #4
 800c18c:	f107 0314 	add.w	r3, r7, #20
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f001 fa04 	bl	800d5a0 <xTaskCheckForTimeOut>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d124      	bne.n	800c1e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c19e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a0:	f000 fc6e 	bl	800ca80 <prvIsQueueFull>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d018      	beq.n	800c1dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	3310      	adds	r3, #16
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f001 f924 	bl	800d400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ba:	f000 fbf9 	bl	800c9b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1be:	f000 ff4d 	bl	800d05c <xTaskResumeAll>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f47f af7c 	bne.w	800c0c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c1ca:	4b0c      	ldr	r3, [pc, #48]	; (800c1fc <xQueueGenericSend+0x208>)
 800c1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	e772      	b.n	800c0c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1de:	f000 fbe7 	bl	800c9b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1e2:	f000 ff3b 	bl	800d05c <xTaskResumeAll>
 800c1e6:	e76c      	b.n	800c0c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ea:	f000 fbe1 	bl	800c9b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1ee:	f000 ff35 	bl	800d05c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3738      	adds	r7, #56	; 0x38
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08e      	sub	sp, #56	; 0x38
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	b672      	cpsid	i
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	b662      	cpsie	i
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c22e:	bf00      	nop
 800c230:	e7fe      	b.n	800c230 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d103      	bne.n	800c240 <xQueueGenericSendFromISR+0x40>
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <xQueueGenericSendFromISR+0x44>
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <xQueueGenericSendFromISR+0x46>
 800c244:	2300      	movs	r3, #0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10c      	bne.n	800c264 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	b672      	cpsid	i
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	b662      	cpsie	i
 800c25e:	623b      	str	r3, [r7, #32]
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d103      	bne.n	800c272 <xQueueGenericSendFromISR+0x72>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d101      	bne.n	800c276 <xQueueGenericSendFromISR+0x76>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericSendFromISR+0x78>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10c      	bne.n	800c296 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	b672      	cpsid	i
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	b662      	cpsie	i
 800c290:	61fb      	str	r3, [r7, #28]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c296:	f002 fa69 	bl	800e76c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c29a:	f3ef 8211 	mrs	r2, BASEPRI
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	b672      	cpsid	i
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	b662      	cpsie	i
 800c2b2:	61ba      	str	r2, [r7, #24]
 800c2b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c2b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d302      	bcc.n	800c2cc <xQueueGenericSendFromISR+0xcc>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d12c      	bne.n	800c326 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2dc:	f000 fad8 	bl	800c890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e8:	d112      	bne.n	800c310 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d016      	beq.n	800c320 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	3324      	adds	r3, #36	; 0x24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 f8d6 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00e      	beq.n	800c320 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	e007      	b.n	800c320 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c314:	3301      	adds	r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	b25a      	sxtb	r2, r3
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c320:	2301      	movs	r3, #1
 800c322:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c324:	e001      	b.n	800c32a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c326:	2300      	movs	r3, #0
 800c328:	637b      	str	r3, [r7, #52]	; 0x34
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c334:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3738      	adds	r7, #56	; 0x38
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08e      	sub	sp, #56	; 0x38
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10c      	bne.n	800c36e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	b672      	cpsid	i
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	b662      	cpsie	i
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00c      	beq.n	800c390 <xQueueGiveFromISR+0x50>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	b672      	cpsid	i
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	b662      	cpsie	i
 800c38a:	61fb      	str	r3, [r7, #28]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d103      	bne.n	800c3a0 <xQueueGiveFromISR+0x60>
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <xQueueGiveFromISR+0x64>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <xQueueGiveFromISR+0x66>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10c      	bne.n	800c3c4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	b672      	cpsid	i
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	b662      	cpsie	i
 800c3be:	61bb      	str	r3, [r7, #24]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3c4:	f002 f9d2 	bl	800e76c <vPortValidateInterruptPriority>
	__asm volatile
 800c3c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	b672      	cpsid	i
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	b662      	cpsie	i
 800c3e0:	617a      	str	r2, [r7, #20]
 800c3e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c3e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d22b      	bcs.n	800c450 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c40a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c412:	d112      	bne.n	800c43a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d016      	beq.n	800c44a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	3324      	adds	r3, #36	; 0x24
 800c420:	4618      	mov	r0, r3
 800c422:	f001 f841 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00e      	beq.n	800c44a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00b      	beq.n	800c44a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2201      	movs	r2, #1
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	e007      	b.n	800c44a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c43a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c43e:	3301      	adds	r3, #1
 800c440:	b2db      	uxtb	r3, r3
 800c442:	b25a      	sxtb	r2, r3
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c44a:	2301      	movs	r3, #1
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
 800c44e:	e001      	b.n	800c454 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c450:	2300      	movs	r3, #0
 800c452:	637b      	str	r3, [r7, #52]	; 0x34
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f383 8811 	msr	BASEPRI, r3
}
 800c45e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c462:	4618      	mov	r0, r3
 800c464:	3738      	adds	r7, #56	; 0x38
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08c      	sub	sp, #48	; 0x30
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c478:	2300      	movs	r3, #0
 800c47a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <xQueueReceive+0x34>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48a:	b672      	cpsid	i
 800c48c:	f383 8811 	msr	BASEPRI, r3
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	b662      	cpsie	i
 800c49a:	623b      	str	r3, [r7, #32]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d103      	bne.n	800c4ae <xQueueReceive+0x42>
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <xQueueReceive+0x46>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e000      	b.n	800c4b4 <xQueueReceive+0x48>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10c      	bne.n	800c4d2 <xQueueReceive+0x66>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4bc:	b672      	cpsid	i
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	b662      	cpsie	i
 800c4cc:	61fb      	str	r3, [r7, #28]
}
 800c4ce:	bf00      	nop
 800c4d0:	e7fe      	b.n	800c4d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4d2:	f001 f9b3 	bl	800d83c <xTaskGetSchedulerState>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d102      	bne.n	800c4e2 <xQueueReceive+0x76>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <xQueueReceive+0x7a>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <xQueueReceive+0x7c>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10c      	bne.n	800c506 <xQueueReceive+0x9a>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	b672      	cpsid	i
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	b662      	cpsie	i
 800c500:	61bb      	str	r3, [r7, #24]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c506:	f002 f849 	bl	800e59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	2b00      	cmp	r3, #0
 800c514:	d01f      	beq.n	800c556 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51a:	f000 fa23 	bl	800c964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	1e5a      	subs	r2, r3, #1
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00f      	beq.n	800c54e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	3310      	adds	r3, #16
 800c532:	4618      	mov	r0, r3
 800c534:	f000 ffb8 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c53e:	4b3d      	ldr	r3, [pc, #244]	; (800c634 <xQueueReceive+0x1c8>)
 800c540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c54e:	f002 f859 	bl	800e604 <vPortExitCritical>
				return pdPASS;
 800c552:	2301      	movs	r3, #1
 800c554:	e069      	b.n	800c62a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d103      	bne.n	800c564 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c55c:	f002 f852 	bl	800e604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c560:	2300      	movs	r3, #0
 800c562:	e062      	b.n	800c62a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c56a:	f107 0310 	add.w	r3, r7, #16
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 f800 	bl	800d574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c574:	2301      	movs	r3, #1
 800c576:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c578:	f002 f844 	bl	800e604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c57c:	f000 fd60 	bl	800d040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c580:	f002 f80c 	bl	800e59c <vPortEnterCritical>
 800c584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c58a:	b25b      	sxtb	r3, r3
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d103      	bne.n	800c59a <xQueueReceive+0x12e>
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a0:	b25b      	sxtb	r3, r3
 800c5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a6:	d103      	bne.n	800c5b0 <xQueueReceive+0x144>
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b0:	f002 f828 	bl	800e604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5b4:	1d3a      	adds	r2, r7, #4
 800c5b6:	f107 0310 	add.w	r3, r7, #16
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 ffef 	bl	800d5a0 <xTaskCheckForTimeOut>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d123      	bne.n	800c610 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ca:	f000 fa43 	bl	800ca54 <prvIsQueueEmpty>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d017      	beq.n	800c604 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	3324      	adds	r3, #36	; 0x24
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 ff0f 	bl	800d400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5e4:	f000 f9e4 	bl	800c9b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5e8:	f000 fd38 	bl	800d05c <xTaskResumeAll>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d189      	bne.n	800c506 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c5f2:	4b10      	ldr	r3, [pc, #64]	; (800c634 <xQueueReceive+0x1c8>)
 800c5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	e780      	b.n	800c506 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c606:	f000 f9d3 	bl	800c9b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c60a:	f000 fd27 	bl	800d05c <xTaskResumeAll>
 800c60e:	e77a      	b.n	800c506 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c612:	f000 f9cd 	bl	800c9b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c616:	f000 fd21 	bl	800d05c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c61c:	f000 fa1a 	bl	800ca54 <prvIsQueueEmpty>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	f43f af6f 	beq.w	800c506 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3730      	adds	r7, #48	; 0x30
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08e      	sub	sp, #56	; 0x38
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c642:	2300      	movs	r3, #0
 800c644:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c64a:	2300      	movs	r3, #0
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10c      	bne.n	800c66e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	b672      	cpsid	i
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	b662      	cpsie	i
 800c668:	623b      	str	r3, [r7, #32]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00c      	beq.n	800c690 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	b672      	cpsid	i
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	b662      	cpsie	i
 800c68a:	61fb      	str	r3, [r7, #28]
}
 800c68c:	bf00      	nop
 800c68e:	e7fe      	b.n	800c68e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c690:	f001 f8d4 	bl	800d83c <xTaskGetSchedulerState>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <xQueueSemaphoreTake+0x68>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <xQueueSemaphoreTake+0x6c>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e000      	b.n	800c6a6 <xQueueSemaphoreTake+0x6e>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10c      	bne.n	800c6c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	b672      	cpsid	i
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	b662      	cpsie	i
 800c6be:	61bb      	str	r3, [r7, #24]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6c4:	f001 ff6a 	bl	800e59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d024      	beq.n	800c71e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	1e5a      	subs	r2, r3, #1
 800c6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d104      	bne.n	800c6ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6e4:	f001 fa28 	bl	800db38 <pvTaskIncrementMutexHeldCount>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00f      	beq.n	800c716 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	3310      	adds	r3, #16
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fed4 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d007      	beq.n	800c716 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c706:	4b55      	ldr	r3, [pc, #340]	; (800c85c <xQueueSemaphoreTake+0x224>)
 800c708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c716:	f001 ff75 	bl	800e604 <vPortExitCritical>
				return pdPASS;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e099      	b.n	800c852 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d113      	bne.n	800c74c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00c      	beq.n	800c744 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	b672      	cpsid	i
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	b662      	cpsie	i
 800c73e:	617b      	str	r3, [r7, #20]
}
 800c740:	bf00      	nop
 800c742:	e7fe      	b.n	800c742 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c744:	f001 ff5e 	bl	800e604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c748:	2300      	movs	r3, #0
 800c74a:	e082      	b.n	800c852 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c752:	f107 030c 	add.w	r3, r7, #12
 800c756:	4618      	mov	r0, r3
 800c758:	f000 ff0c 	bl	800d574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c75c:	2301      	movs	r3, #1
 800c75e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c760:	f001 ff50 	bl	800e604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c764:	f000 fc6c 	bl	800d040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c768:	f001 ff18 	bl	800e59c <vPortEnterCritical>
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c772:	b25b      	sxtb	r3, r3
 800c774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c778:	d103      	bne.n	800c782 <xQueueSemaphoreTake+0x14a>
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c788:	b25b      	sxtb	r3, r3
 800c78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78e:	d103      	bne.n	800c798 <xQueueSemaphoreTake+0x160>
 800c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c798:	f001 ff34 	bl	800e604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c79c:	463a      	mov	r2, r7
 800c79e:	f107 030c 	add.w	r3, r7, #12
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 fefb 	bl	800d5a0 <xTaskCheckForTimeOut>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d132      	bne.n	800c816 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7b2:	f000 f94f 	bl	800ca54 <prvIsQueueEmpty>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d026      	beq.n	800c80a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d109      	bne.n	800c7d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c7c4:	f001 feea 	bl	800e59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f001 f853 	bl	800d878 <xTaskPriorityInherit>
 800c7d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c7d4:	f001 ff16 	bl	800e604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	3324      	adds	r3, #36	; 0x24
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 fe0d 	bl	800d400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7e8:	f000 f8e2 	bl	800c9b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7ec:	f000 fc36 	bl	800d05c <xTaskResumeAll>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f47f af66 	bne.w	800c6c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c7f8:	4b18      	ldr	r3, [pc, #96]	; (800c85c <xQueueSemaphoreTake+0x224>)
 800c7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	e75c      	b.n	800c6c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c80a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c80c:	f000 f8d0 	bl	800c9b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c810:	f000 fc24 	bl	800d05c <xTaskResumeAll>
 800c814:	e756      	b.n	800c6c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c818:	f000 f8ca 	bl	800c9b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c81c:	f000 fc1e 	bl	800d05c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c822:	f000 f917 	bl	800ca54 <prvIsQueueEmpty>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f43f af4b 	beq.w	800c6c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00d      	beq.n	800c850 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c834:	f001 feb2 	bl	800e59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c83a:	f000 f811 	bl	800c860 <prvGetDisinheritPriorityAfterTimeout>
 800c83e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c846:	4618      	mov	r0, r3
 800c848:	f001 f8f0 	bl	800da2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c84c:	f001 feda 	bl	800e604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c852:	4618      	mov	r0, r3
 800c854:	3738      	adds	r7, #56	; 0x38
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d006      	beq.n	800c87e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e001      	b.n	800c882 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c882:	68fb      	ldr	r3, [r7, #12]
	}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10d      	bne.n	800c8ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d14d      	bne.n	800c952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f001 f844 	bl	800d948 <xTaskPriorityDisinherit>
 800c8c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	609a      	str	r2, [r3, #8]
 800c8c8:	e043      	b.n	800c952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d119      	bne.n	800c904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6858      	ldr	r0, [r3, #4]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	461a      	mov	r2, r3
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	f002 fbb1 	bl	800f042 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e8:	441a      	add	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d32b      	bcc.n	800c952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	605a      	str	r2, [r3, #4]
 800c902:	e026      	b.n	800c952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68d8      	ldr	r0, [r3, #12]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90c:	461a      	mov	r2, r3
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	f002 fb97 	bl	800f042 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	425b      	negs	r3, r3
 800c91e:	441a      	add	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d207      	bcs.n	800c940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c938:	425b      	negs	r3, r3
 800c93a:	441a      	add	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b02      	cmp	r3, #2
 800c944:	d105      	bne.n	800c952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	3b01      	subs	r3, #1
 800c950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c95a:	697b      	ldr	r3, [r7, #20]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	2b00      	cmp	r3, #0
 800c974:	d018      	beq.n	800c9a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97e:	441a      	add	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d303      	bcc.n	800c998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68d9      	ldr	r1, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f002 fb4d 	bl	800f042 <memcpy>
	}
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9b8:	f001 fdf0 	bl	800e59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c4:	e011      	b.n	800c9ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d012      	beq.n	800c9f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3324      	adds	r3, #36	; 0x24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fd68 	bl	800d4a8 <xTaskRemoveFromEventList>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9de:	f000 fe45 	bl	800d66c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	dce9      	bgt.n	800c9c6 <prvUnlockQueue+0x16>
 800c9f2:	e000      	b.n	800c9f6 <prvUnlockQueue+0x46>
					break;
 800c9f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	22ff      	movs	r2, #255	; 0xff
 800c9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c9fe:	f001 fe01 	bl	800e604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca02:	f001 fdcb 	bl	800e59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca0e:	e011      	b.n	800ca34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d012      	beq.n	800ca3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fd43 	bl	800d4a8 <xTaskRemoveFromEventList>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca28:	f000 fe20 	bl	800d66c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dce9      	bgt.n	800ca10 <prvUnlockQueue+0x60>
 800ca3c:	e000      	b.n	800ca40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	22ff      	movs	r2, #255	; 0xff
 800ca44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca48:	f001 fddc 	bl	800e604 <vPortExitCritical>
}
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca5c:	f001 fd9e 	bl	800e59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	e001      	b.n	800ca72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca72:	f001 fdc7 	bl	800e604 <vPortExitCritical>

	return xReturn;
 800ca76:	68fb      	ldr	r3, [r7, #12]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca88:	f001 fd88 	bl	800e59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d102      	bne.n	800ca9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e001      	b.n	800caa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caa2:	f001 fdaf 	bl	800e604 <vPortExitCritical>

	return xReturn;
 800caa6:	68fb      	ldr	r3, [r7, #12]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	e014      	b.n	800caea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cac0:	4a0f      	ldr	r2, [pc, #60]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10b      	bne.n	800cae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cacc:	490c      	ldr	r1, [pc, #48]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cad6:	4a0a      	ldr	r2, [pc, #40]	; (800cb00 <vQueueAddToRegistry+0x50>)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cae2:	e006      	b.n	800caf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b07      	cmp	r3, #7
 800caee:	d9e7      	bls.n	800cac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20004f78 	.word	0x20004f78

0800cb04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb14:	f001 fd42 	bl	800e59c <vPortEnterCritical>
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb24:	d103      	bne.n	800cb2e <vQueueWaitForMessageRestricted+0x2a>
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb34:	b25b      	sxtb	r3, r3
 800cb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3a:	d103      	bne.n	800cb44 <vQueueWaitForMessageRestricted+0x40>
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb44:	f001 fd5e 	bl	800e604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	3324      	adds	r3, #36	; 0x24
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	68b9      	ldr	r1, [r7, #8]
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 fc77 	bl	800d44c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb5e:	6978      	ldr	r0, [r7, #20]
 800cb60:	f7ff ff26 	bl	800c9b0 <prvUnlockQueue>
	}
 800cb64:	bf00      	nop
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08e      	sub	sp, #56	; 0x38
 800cb70:	af04      	add	r7, sp, #16
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
 800cb78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10c      	bne.n	800cb9a <xTaskCreateStatic+0x2e>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	b672      	cpsid	i
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	b662      	cpsie	i
 800cb94:	623b      	str	r3, [r7, #32]
}
 800cb96:	bf00      	nop
 800cb98:	e7fe      	b.n	800cb98 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10c      	bne.n	800cbba <xTaskCreateStatic+0x4e>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	b672      	cpsid	i
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	b662      	cpsie	i
 800cbb4:	61fb      	str	r3, [r7, #28]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbba:	23a8      	movs	r3, #168	; 0xa8
 800cbbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	2ba8      	cmp	r3, #168	; 0xa8
 800cbc2:	d00c      	beq.n	800cbde <xTaskCreateStatic+0x72>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	b672      	cpsid	i
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	b662      	cpsie	i
 800cbd8:	61bb      	str	r3, [r7, #24]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d01e      	beq.n	800cc24 <xTaskCreateStatic+0xb8>
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d01b      	beq.n	800cc24 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	2202      	movs	r2, #2
 800cbfa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	9302      	str	r3, [sp, #8]
 800cc06:	f107 0314 	add.w	r3, r7, #20
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	68b9      	ldr	r1, [r7, #8]
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f000 f850 	bl	800ccbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc1e:	f000 f8f5 	bl	800ce0c <prvAddNewTaskToReadyList>
 800cc22:	e001      	b.n	800cc28 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc28:	697b      	ldr	r3, [r7, #20]
	}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3728      	adds	r7, #40	; 0x28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b08c      	sub	sp, #48	; 0x30
 800cc36:	af04      	add	r7, sp, #16
 800cc38:	60f8      	str	r0, [r7, #12]
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	603b      	str	r3, [r7, #0]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc42:	88fb      	ldrh	r3, [r7, #6]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4618      	mov	r0, r3
 800cc48:	f001 fdd4 	bl	800e7f4 <pvPortMalloc>
 800cc4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00e      	beq.n	800cc72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc54:	20a8      	movs	r0, #168	; 0xa8
 800cc56:	f001 fdcd 	bl	800e7f4 <pvPortMalloc>
 800cc5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	631a      	str	r2, [r3, #48]	; 0x30
 800cc68:	e005      	b.n	800cc76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc6a:	6978      	ldr	r0, [r7, #20]
 800cc6c:	f001 fe8c 	bl	800e988 <vPortFree>
 800cc70:	e001      	b.n	800cc76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d017      	beq.n	800ccac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc84:	88fa      	ldrh	r2, [r7, #6]
 800cc86:	2300      	movs	r3, #0
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	9302      	str	r3, [sp, #8]
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	68b9      	ldr	r1, [r7, #8]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 f80e 	bl	800ccbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cca0:	69f8      	ldr	r0, [r7, #28]
 800cca2:	f000 f8b3 	bl	800ce0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cca6:	2301      	movs	r3, #1
 800cca8:	61bb      	str	r3, [r7, #24]
 800ccaa:	e002      	b.n	800ccb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
	}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3720      	adds	r7, #32
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	21a5      	movs	r1, #165	; 0xa5
 800ccd6:	f002 f8e2 	bl	800ee9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cce4:	440b      	add	r3, r1
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	f023 0307 	bic.w	r3, r3, #7
 800ccf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00c      	beq.n	800cd18 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	b672      	cpsid	i
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	b662      	cpsie	i
 800cd12:	617b      	str	r3, [r7, #20]
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d01f      	beq.n	800cd5e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	e012      	b.n	800cd4a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	4413      	add	r3, r2
 800cd2a:	7819      	ldrb	r1, [r3, #0]
 800cd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	3334      	adds	r3, #52	; 0x34
 800cd34:	460a      	mov	r2, r1
 800cd36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d006      	beq.n	800cd52 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	3301      	adds	r3, #1
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	2b0f      	cmp	r3, #15
 800cd4e:	d9e9      	bls.n	800cd24 <prvInitialiseNewTask+0x68>
 800cd50:	e000      	b.n	800cd54 <prvInitialiseNewTask+0x98>
			{
				break;
 800cd52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd5c:	e003      	b.n	800cd66 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	2b37      	cmp	r3, #55	; 0x37
 800cd6a:	d901      	bls.n	800cd70 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd6c:	2337      	movs	r3, #55	; 0x37
 800cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe ff4e 	bl	800bc28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	3318      	adds	r3, #24
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe ff49 	bl	800bc28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	3354      	adds	r3, #84	; 0x54
 800cdc0:	224c      	movs	r2, #76	; 0x4c
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f002 f86a 	bl	800ee9e <memset>
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	4a0c      	ldr	r2, [pc, #48]	; (800ce00 <prvInitialiseNewTask+0x144>)
 800cdce:	659a      	str	r2, [r3, #88]	; 0x58
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	4a0c      	ldr	r2, [pc, #48]	; (800ce04 <prvInitialiseNewTask+0x148>)
 800cdd4:	65da      	str	r2, [r3, #92]	; 0x5c
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	4a0b      	ldr	r2, [pc, #44]	; (800ce08 <prvInitialiseNewTask+0x14c>)
 800cdda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	69b8      	ldr	r0, [r7, #24]
 800cde2:	f001 facb 	bl	800e37c <pxPortInitialiseStack>
 800cde6:	4602      	mov	r2, r0
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf8:	bf00      	nop
 800cdfa:	3720      	adds	r7, #32
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20009204 	.word	0x20009204
 800ce04:	2000926c 	.word	0x2000926c
 800ce08:	200092d4 	.word	0x200092d4

0800ce0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce14:	f001 fbc2 	bl	800e59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce18:	4b2d      	ldr	r3, [pc, #180]	; (800ced0 <prvAddNewTaskToReadyList+0xc4>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	4a2c      	ldr	r2, [pc, #176]	; (800ced0 <prvAddNewTaskToReadyList+0xc4>)
 800ce20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce22:	4b2c      	ldr	r3, [pc, #176]	; (800ced4 <prvAddNewTaskToReadyList+0xc8>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d109      	bne.n	800ce3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce2a:	4a2a      	ldr	r2, [pc, #168]	; (800ced4 <prvAddNewTaskToReadyList+0xc8>)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce30:	4b27      	ldr	r3, [pc, #156]	; (800ced0 <prvAddNewTaskToReadyList+0xc4>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d110      	bne.n	800ce5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce38:	f000 fc3c 	bl	800d6b4 <prvInitialiseTaskLists>
 800ce3c:	e00d      	b.n	800ce5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce3e:	4b26      	ldr	r3, [pc, #152]	; (800ced8 <prvAddNewTaskToReadyList+0xcc>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d109      	bne.n	800ce5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce46:	4b23      	ldr	r3, [pc, #140]	; (800ced4 <prvAddNewTaskToReadyList+0xc8>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d802      	bhi.n	800ce5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce54:	4a1f      	ldr	r2, [pc, #124]	; (800ced4 <prvAddNewTaskToReadyList+0xc8>)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce5a:	4b20      	ldr	r3, [pc, #128]	; (800cedc <prvAddNewTaskToReadyList+0xd0>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	4a1e      	ldr	r2, [pc, #120]	; (800cedc <prvAddNewTaskToReadyList+0xd0>)
 800ce62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce64:	4b1d      	ldr	r3, [pc, #116]	; (800cedc <prvAddNewTaskToReadyList+0xd0>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce70:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <prvAddNewTaskToReadyList+0xd4>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d903      	bls.n	800ce80 <prvAddNewTaskToReadyList+0x74>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	4a18      	ldr	r2, [pc, #96]	; (800cee0 <prvAddNewTaskToReadyList+0xd4>)
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce84:	4613      	mov	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4a15      	ldr	r2, [pc, #84]	; (800cee4 <prvAddNewTaskToReadyList+0xd8>)
 800ce8e:	441a      	add	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3304      	adds	r3, #4
 800ce94:	4619      	mov	r1, r3
 800ce96:	4610      	mov	r0, r2
 800ce98:	f7fe fed3 	bl	800bc42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce9c:	f001 fbb2 	bl	800e604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cea0:	4b0d      	ldr	r3, [pc, #52]	; (800ced8 <prvAddNewTaskToReadyList+0xcc>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00e      	beq.n	800cec6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <prvAddNewTaskToReadyList+0xc8>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d207      	bcs.n	800cec6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <prvAddNewTaskToReadyList+0xdc>)
 800ceb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	2000548c 	.word	0x2000548c
 800ced4:	20004fb8 	.word	0x20004fb8
 800ced8:	20005498 	.word	0x20005498
 800cedc:	200054a8 	.word	0x200054a8
 800cee0:	20005494 	.word	0x20005494
 800cee4:	20004fbc 	.word	0x20004fbc
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d019      	beq.n	800cf32 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cefe:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <vTaskDelay+0x64>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00c      	beq.n	800cf20 <vTaskDelay+0x34>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	b672      	cpsid	i
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	b662      	cpsie	i
 800cf1a:	60bb      	str	r3, [r7, #8]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cf20:	f000 f88e 	bl	800d040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf24:	2100      	movs	r1, #0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fe1a 	bl	800db60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf2c:	f000 f896 	bl	800d05c <xTaskResumeAll>
 800cf30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cf38:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <vTaskDelay+0x68>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	200054b4 	.word	0x200054b4
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf66:	463a      	mov	r2, r7
 800cf68:	1d39      	adds	r1, r7, #4
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fe06 	bl	800bb80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	9202      	str	r2, [sp, #8]
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	460a      	mov	r2, r1
 800cf86:	4926      	ldr	r1, [pc, #152]	; (800d020 <vTaskStartScheduler+0xc8>)
 800cf88:	4826      	ldr	r0, [pc, #152]	; (800d024 <vTaskStartScheduler+0xcc>)
 800cf8a:	f7ff fdef 	bl	800cb6c <xTaskCreateStatic>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4a25      	ldr	r2, [pc, #148]	; (800d028 <vTaskStartScheduler+0xd0>)
 800cf92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf94:	4b24      	ldr	r3, [pc, #144]	; (800d028 <vTaskStartScheduler+0xd0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e001      	b.n	800cfa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d102      	bne.n	800cfb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfac:	f000 fe2c 	bl	800dc08 <xTimerCreateTimerTask>
 800cfb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d11d      	bne.n	800cff4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	b672      	cpsid	i
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	b662      	cpsie	i
 800cfcc:	613b      	str	r3, [r7, #16]
}
 800cfce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfd0:	4b16      	ldr	r3, [pc, #88]	; (800d02c <vTaskStartScheduler+0xd4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	3354      	adds	r3, #84	; 0x54
 800cfd6:	4a16      	ldr	r2, [pc, #88]	; (800d030 <vTaskStartScheduler+0xd8>)
 800cfd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfda:	4b16      	ldr	r3, [pc, #88]	; (800d034 <vTaskStartScheduler+0xdc>)
 800cfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <vTaskStartScheduler+0xe0>)
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfe8:	4b14      	ldr	r3, [pc, #80]	; (800d03c <vTaskStartScheduler+0xe4>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfee:	f001 fa57 	bl	800e4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cff2:	e010      	b.n	800d016 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffa:	d10c      	bne.n	800d016 <vTaskStartScheduler+0xbe>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	b672      	cpsid	i
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	b662      	cpsie	i
 800d010:	60fb      	str	r3, [r7, #12]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <vTaskStartScheduler+0xbc>
}
 800d016:	bf00      	nop
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	08010380 	.word	0x08010380
 800d024:	0800d685 	.word	0x0800d685
 800d028:	200054b0 	.word	0x200054b0
 800d02c:	20004fb8 	.word	0x20004fb8
 800d030:	200000a4 	.word	0x200000a4
 800d034:	200054ac 	.word	0x200054ac
 800d038:	20005498 	.word	0x20005498
 800d03c:	20005490 	.word	0x20005490

0800d040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <vTaskSuspendAll+0x18>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3301      	adds	r3, #1
 800d04a:	4a03      	ldr	r2, [pc, #12]	; (800d058 <vTaskSuspendAll+0x18>)
 800d04c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d04e:	bf00      	nop
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	200054b4 	.word	0x200054b4

0800d05c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d066:	2300      	movs	r3, #0
 800d068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d06a:	4b43      	ldr	r3, [pc, #268]	; (800d178 <xTaskResumeAll+0x11c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10c      	bne.n	800d08c <xTaskResumeAll+0x30>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	b672      	cpsid	i
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	b662      	cpsie	i
 800d086:	603b      	str	r3, [r7, #0]
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d08c:	f001 fa86 	bl	800e59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d090:	4b39      	ldr	r3, [pc, #228]	; (800d178 <xTaskResumeAll+0x11c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3b01      	subs	r3, #1
 800d096:	4a38      	ldr	r2, [pc, #224]	; (800d178 <xTaskResumeAll+0x11c>)
 800d098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d09a:	4b37      	ldr	r3, [pc, #220]	; (800d178 <xTaskResumeAll+0x11c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d162      	bne.n	800d168 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0a2:	4b36      	ldr	r3, [pc, #216]	; (800d17c <xTaskResumeAll+0x120>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d05e      	beq.n	800d168 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0aa:	e02f      	b.n	800d10c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ac:	4b34      	ldr	r3, [pc, #208]	; (800d180 <xTaskResumeAll+0x124>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3318      	adds	r3, #24
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fe fe1f 	bl	800bcfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fe1a 	bl	800bcfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4b2d      	ldr	r3, [pc, #180]	; (800d184 <xTaskResumeAll+0x128>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d903      	bls.n	800d0dc <xTaskResumeAll+0x80>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	4a2a      	ldr	r2, [pc, #168]	; (800d184 <xTaskResumeAll+0x128>)
 800d0da:	6013      	str	r3, [r2, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4a27      	ldr	r2, [pc, #156]	; (800d188 <xTaskResumeAll+0x12c>)
 800d0ea:	441a      	add	r2, r3
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4610      	mov	r0, r2
 800d0f4:	f7fe fda5 	bl	800bc42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fc:	4b23      	ldr	r3, [pc, #140]	; (800d18c <xTaskResumeAll+0x130>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	429a      	cmp	r2, r3
 800d104:	d302      	bcc.n	800d10c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d106:	4b22      	ldr	r3, [pc, #136]	; (800d190 <xTaskResumeAll+0x134>)
 800d108:	2201      	movs	r2, #1
 800d10a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d10c:	4b1c      	ldr	r3, [pc, #112]	; (800d180 <xTaskResumeAll+0x124>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1cb      	bne.n	800d0ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d11a:	f000 fb6f 	bl	800d7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d11e:	4b1d      	ldr	r3, [pc, #116]	; (800d194 <xTaskResumeAll+0x138>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d010      	beq.n	800d14c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d12a:	f000 f847 	bl	800d1bc <xTaskIncrementTick>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d134:	4b16      	ldr	r3, [pc, #88]	; (800d190 <xTaskResumeAll+0x134>)
 800d136:	2201      	movs	r2, #1
 800d138:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f1      	bne.n	800d12a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d146:	4b13      	ldr	r3, [pc, #76]	; (800d194 <xTaskResumeAll+0x138>)
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d14c:	4b10      	ldr	r3, [pc, #64]	; (800d190 <xTaskResumeAll+0x134>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d009      	beq.n	800d168 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d154:	2301      	movs	r3, #1
 800d156:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d158:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <xTaskResumeAll+0x13c>)
 800d15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d168:	f001 fa4c 	bl	800e604 <vPortExitCritical>

	return xAlreadyYielded;
 800d16c:	68bb      	ldr	r3, [r7, #8]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	200054b4 	.word	0x200054b4
 800d17c:	2000548c 	.word	0x2000548c
 800d180:	2000544c 	.word	0x2000544c
 800d184:	20005494 	.word	0x20005494
 800d188:	20004fbc 	.word	0x20004fbc
 800d18c:	20004fb8 	.word	0x20004fb8
 800d190:	200054a0 	.word	0x200054a0
 800d194:	2000549c 	.word	0x2000549c
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1a2:	4b05      	ldr	r3, [pc, #20]	; (800d1b8 <xTaskGetTickCount+0x1c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1a8:	687b      	ldr	r3, [r7, #4]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	20005490 	.word	0x20005490

0800d1bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1c6:	4b50      	ldr	r3, [pc, #320]	; (800d308 <xTaskIncrementTick+0x14c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 808b 	bne.w	800d2e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1d0:	4b4e      	ldr	r3, [pc, #312]	; (800d30c <xTaskIncrementTick+0x150>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1d8:	4a4c      	ldr	r2, [pc, #304]	; (800d30c <xTaskIncrementTick+0x150>)
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d122      	bne.n	800d22a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1e4:	4b4a      	ldr	r3, [pc, #296]	; (800d310 <xTaskIncrementTick+0x154>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00c      	beq.n	800d208 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	b672      	cpsid	i
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	b662      	cpsie	i
 800d202:	603b      	str	r3, [r7, #0]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <xTaskIncrementTick+0x4a>
 800d208:	4b41      	ldr	r3, [pc, #260]	; (800d310 <xTaskIncrementTick+0x154>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	4b41      	ldr	r3, [pc, #260]	; (800d314 <xTaskIncrementTick+0x158>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a3f      	ldr	r2, [pc, #252]	; (800d310 <xTaskIncrementTick+0x154>)
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	4a3f      	ldr	r2, [pc, #252]	; (800d314 <xTaskIncrementTick+0x158>)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	4b3e      	ldr	r3, [pc, #248]	; (800d318 <xTaskIncrementTick+0x15c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3301      	adds	r3, #1
 800d222:	4a3d      	ldr	r2, [pc, #244]	; (800d318 <xTaskIncrementTick+0x15c>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	f000 fae9 	bl	800d7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d22a:	4b3c      	ldr	r3, [pc, #240]	; (800d31c <xTaskIncrementTick+0x160>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	429a      	cmp	r2, r3
 800d232:	d349      	bcc.n	800d2c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d234:	4b36      	ldr	r3, [pc, #216]	; (800d310 <xTaskIncrementTick+0x154>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d104      	bne.n	800d248 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d23e:	4b37      	ldr	r3, [pc, #220]	; (800d31c <xTaskIncrementTick+0x160>)
 800d240:	f04f 32ff 	mov.w	r2, #4294967295
 800d244:	601a      	str	r2, [r3, #0]
					break;
 800d246:	e03f      	b.n	800d2c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d248:	4b31      	ldr	r3, [pc, #196]	; (800d310 <xTaskIncrementTick+0x154>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d203      	bcs.n	800d268 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d260:	4a2e      	ldr	r2, [pc, #184]	; (800d31c <xTaskIncrementTick+0x160>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d266:	e02f      	b.n	800d2c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	3304      	adds	r3, #4
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe fd45 	bl	800bcfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d276:	2b00      	cmp	r3, #0
 800d278:	d004      	beq.n	800d284 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3318      	adds	r3, #24
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fd3c 	bl	800bcfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d288:	4b25      	ldr	r3, [pc, #148]	; (800d320 <xTaskIncrementTick+0x164>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d903      	bls.n	800d298 <xTaskIncrementTick+0xdc>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	4a22      	ldr	r2, [pc, #136]	; (800d320 <xTaskIncrementTick+0x164>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4a1f      	ldr	r2, [pc, #124]	; (800d324 <xTaskIncrementTick+0x168>)
 800d2a6:	441a      	add	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	f7fe fcc7 	bl	800bc42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b8:	4b1b      	ldr	r3, [pc, #108]	; (800d328 <xTaskIncrementTick+0x16c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d3b8      	bcc.n	800d234 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2c6:	e7b5      	b.n	800d234 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2c8:	4b17      	ldr	r3, [pc, #92]	; (800d328 <xTaskIncrementTick+0x16c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	4915      	ldr	r1, [pc, #84]	; (800d324 <xTaskIncrementTick+0x168>)
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d907      	bls.n	800d2f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e004      	b.n	800d2f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <xTaskIncrementTick+0x170>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	4a0f      	ldr	r2, [pc, #60]	; (800d32c <xTaskIncrementTick+0x170>)
 800d2ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d2f0:	4b0f      	ldr	r3, [pc, #60]	; (800d330 <xTaskIncrementTick+0x174>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d2fc:	697b      	ldr	r3, [r7, #20]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	200054b4 	.word	0x200054b4
 800d30c:	20005490 	.word	0x20005490
 800d310:	20005444 	.word	0x20005444
 800d314:	20005448 	.word	0x20005448
 800d318:	200054a4 	.word	0x200054a4
 800d31c:	200054ac 	.word	0x200054ac
 800d320:	20005494 	.word	0x20005494
 800d324:	20004fbc 	.word	0x20004fbc
 800d328:	20004fb8 	.word	0x20004fb8
 800d32c:	2000549c 	.word	0x2000549c
 800d330:	200054a0 	.word	0x200054a0

0800d334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d33a:	4b2b      	ldr	r3, [pc, #172]	; (800d3e8 <vTaskSwitchContext+0xb4>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d342:	4b2a      	ldr	r3, [pc, #168]	; (800d3ec <vTaskSwitchContext+0xb8>)
 800d344:	2201      	movs	r2, #1
 800d346:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d348:	e048      	b.n	800d3dc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800d34a:	4b28      	ldr	r3, [pc, #160]	; (800d3ec <vTaskSwitchContext+0xb8>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d350:	4b27      	ldr	r3, [pc, #156]	; (800d3f0 <vTaskSwitchContext+0xbc>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	60fb      	str	r3, [r7, #12]
 800d356:	e012      	b.n	800d37e <vTaskSwitchContext+0x4a>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10c      	bne.n	800d378 <vTaskSwitchContext+0x44>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	607b      	str	r3, [r7, #4]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <vTaskSwitchContext+0x42>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	491d      	ldr	r1, [pc, #116]	; (800d3f4 <vTaskSwitchContext+0xc0>)
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	440b      	add	r3, r1
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0e2      	beq.n	800d358 <vTaskSwitchContext+0x24>
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <vTaskSwitchContext+0xc0>)
 800d39e:	4413      	add	r3, r2
 800d3a0:	60bb      	str	r3, [r7, #8]
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	605a      	str	r2, [r3, #4]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d104      	bne.n	800d3c2 <vTaskSwitchContext+0x8e>
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	605a      	str	r2, [r3, #4]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	4a0b      	ldr	r2, [pc, #44]	; (800d3f8 <vTaskSwitchContext+0xc4>)
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	4a08      	ldr	r2, [pc, #32]	; (800d3f0 <vTaskSwitchContext+0xbc>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3d2:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <vTaskSwitchContext+0xc4>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3354      	adds	r3, #84	; 0x54
 800d3d8:	4a08      	ldr	r2, [pc, #32]	; (800d3fc <vTaskSwitchContext+0xc8>)
 800d3da:	6013      	str	r3, [r2, #0]
}
 800d3dc:	bf00      	nop
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	200054b4 	.word	0x200054b4
 800d3ec:	200054a0 	.word	0x200054a0
 800d3f0:	20005494 	.word	0x20005494
 800d3f4:	20004fbc 	.word	0x20004fbc
 800d3f8:	20004fb8 	.word	0x20004fb8
 800d3fc:	200000a4 	.word	0x200000a4

0800d400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10c      	bne.n	800d42a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	b672      	cpsid	i
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	b662      	cpsie	i
 800d424:	60fb      	str	r3, [r7, #12]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <vTaskPlaceOnEventList+0x48>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3318      	adds	r3, #24
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fe fc29 	bl	800bc8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d438:	2101      	movs	r1, #1
 800d43a:	6838      	ldr	r0, [r7, #0]
 800d43c:	f000 fb90 	bl	800db60 <prvAddCurrentTaskToDelayedList>
}
 800d440:	bf00      	nop
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20004fb8 	.word	0x20004fb8

0800d44c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10c      	bne.n	800d478 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	b672      	cpsid	i
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	b662      	cpsie	i
 800d472:	617b      	str	r3, [r7, #20]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d478:	4b0a      	ldr	r3, [pc, #40]	; (800d4a4 <vTaskPlaceOnEventListRestricted+0x58>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	3318      	adds	r3, #24
 800d47e:	4619      	mov	r1, r3
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7fe fbde 	bl	800bc42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d48c:	f04f 33ff 	mov.w	r3, #4294967295
 800d490:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	68b8      	ldr	r0, [r7, #8]
 800d496:	f000 fb63 	bl	800db60 <prvAddCurrentTaskToDelayedList>
	}
 800d49a:	bf00      	nop
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20004fb8 	.word	0x20004fb8

0800d4a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10c      	bne.n	800d4d8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	b672      	cpsid	i
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	b662      	cpsie	i
 800d4d2:	60fb      	str	r3, [r7, #12]
}
 800d4d4:	bf00      	nop
 800d4d6:	e7fe      	b.n	800d4d6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fe fc0d 	bl	800bcfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4e2:	4b1e      	ldr	r3, [pc, #120]	; (800d55c <xTaskRemoveFromEventList+0xb4>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d11d      	bne.n	800d526 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fc04 	bl	800bcfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f8:	4b19      	ldr	r3, [pc, #100]	; (800d560 <xTaskRemoveFromEventList+0xb8>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d903      	bls.n	800d508 <xTaskRemoveFromEventList+0x60>
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	4a16      	ldr	r2, [pc, #88]	; (800d560 <xTaskRemoveFromEventList+0xb8>)
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50c:	4613      	mov	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4a13      	ldr	r2, [pc, #76]	; (800d564 <xTaskRemoveFromEventList+0xbc>)
 800d516:	441a      	add	r2, r3
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	3304      	adds	r3, #4
 800d51c:	4619      	mov	r1, r3
 800d51e:	4610      	mov	r0, r2
 800d520:	f7fe fb8f 	bl	800bc42 <vListInsertEnd>
 800d524:	e005      	b.n	800d532 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	3318      	adds	r3, #24
 800d52a:	4619      	mov	r1, r3
 800d52c:	480e      	ldr	r0, [pc, #56]	; (800d568 <xTaskRemoveFromEventList+0xc0>)
 800d52e:	f7fe fb88 	bl	800bc42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d536:	4b0d      	ldr	r3, [pc, #52]	; (800d56c <xTaskRemoveFromEventList+0xc4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d905      	bls.n	800d54c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d540:	2301      	movs	r3, #1
 800d542:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d544:	4b0a      	ldr	r3, [pc, #40]	; (800d570 <xTaskRemoveFromEventList+0xc8>)
 800d546:	2201      	movs	r2, #1
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	e001      	b.n	800d550 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d550:	697b      	ldr	r3, [r7, #20]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	200054b4 	.word	0x200054b4
 800d560:	20005494 	.word	0x20005494
 800d564:	20004fbc 	.word	0x20004fbc
 800d568:	2000544c 	.word	0x2000544c
 800d56c:	20004fb8 	.word	0x20004fb8
 800d570:	200054a0 	.word	0x200054a0

0800d574 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d57c:	4b06      	ldr	r3, [pc, #24]	; (800d598 <vTaskInternalSetTimeOutState+0x24>)
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <vTaskInternalSetTimeOutState+0x28>)
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	605a      	str	r2, [r3, #4]
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	200054a4 	.word	0x200054a4
 800d59c:	20005490 	.word	0x20005490

0800d5a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10c      	bne.n	800d5ca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	b672      	cpsid	i
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	b662      	cpsie	i
 800d5c4:	613b      	str	r3, [r7, #16]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10c      	bne.n	800d5ea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	b672      	cpsid	i
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	b662      	cpsie	i
 800d5e4:	60fb      	str	r3, [r7, #12]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d5ea:	f000 ffd7 	bl	800e59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5ee:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <xTaskCheckForTimeOut+0xc4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d102      	bne.n	800d60e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d608:	2300      	movs	r3, #0
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	e023      	b.n	800d656 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b15      	ldr	r3, [pc, #84]	; (800d668 <xTaskCheckForTimeOut+0xc8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d007      	beq.n	800d62a <xTaskCheckForTimeOut+0x8a>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	429a      	cmp	r2, r3
 800d622:	d302      	bcc.n	800d62a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d624:	2301      	movs	r3, #1
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	e015      	b.n	800d656 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	429a      	cmp	r2, r3
 800d632:	d20b      	bcs.n	800d64c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	1ad2      	subs	r2, r2, r3
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ff97 	bl	800d574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d646:	2300      	movs	r3, #0
 800d648:	61fb      	str	r3, [r7, #28]
 800d64a:	e004      	b.n	800d656 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d652:	2301      	movs	r3, #1
 800d654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d656:	f000 ffd5 	bl	800e604 <vPortExitCritical>

	return xReturn;
 800d65a:	69fb      	ldr	r3, [r7, #28]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3720      	adds	r7, #32
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20005490 	.word	0x20005490
 800d668:	200054a4 	.word	0x200054a4

0800d66c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d670:	4b03      	ldr	r3, [pc, #12]	; (800d680 <vTaskMissedYield+0x14>)
 800d672:	2201      	movs	r2, #1
 800d674:	601a      	str	r2, [r3, #0]
}
 800d676:	bf00      	nop
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	200054a0 	.word	0x200054a0

0800d684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d68c:	f000 f852 	bl	800d734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d690:	4b06      	ldr	r3, [pc, #24]	; (800d6ac <prvIdleTask+0x28>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d9f9      	bls.n	800d68c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d698:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <prvIdleTask+0x2c>)
 800d69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6a8:	e7f0      	b.n	800d68c <prvIdleTask+0x8>
 800d6aa:	bf00      	nop
 800d6ac:	20004fbc 	.word	0x20004fbc
 800d6b0:	e000ed04 	.word	0xe000ed04

0800d6b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	e00c      	b.n	800d6da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a12      	ldr	r2, [pc, #72]	; (800d714 <prvInitialiseTaskLists+0x60>)
 800d6cc:	4413      	add	r3, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe fa8a 	bl	800bbe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	607b      	str	r3, [r7, #4]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b37      	cmp	r3, #55	; 0x37
 800d6de:	d9ef      	bls.n	800d6c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6e0:	480d      	ldr	r0, [pc, #52]	; (800d718 <prvInitialiseTaskLists+0x64>)
 800d6e2:	f7fe fa81 	bl	800bbe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6e6:	480d      	ldr	r0, [pc, #52]	; (800d71c <prvInitialiseTaskLists+0x68>)
 800d6e8:	f7fe fa7e 	bl	800bbe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6ec:	480c      	ldr	r0, [pc, #48]	; (800d720 <prvInitialiseTaskLists+0x6c>)
 800d6ee:	f7fe fa7b 	bl	800bbe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6f2:	480c      	ldr	r0, [pc, #48]	; (800d724 <prvInitialiseTaskLists+0x70>)
 800d6f4:	f7fe fa78 	bl	800bbe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6f8:	480b      	ldr	r0, [pc, #44]	; (800d728 <prvInitialiseTaskLists+0x74>)
 800d6fa:	f7fe fa75 	bl	800bbe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6fe:	4b0b      	ldr	r3, [pc, #44]	; (800d72c <prvInitialiseTaskLists+0x78>)
 800d700:	4a05      	ldr	r2, [pc, #20]	; (800d718 <prvInitialiseTaskLists+0x64>)
 800d702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d704:	4b0a      	ldr	r3, [pc, #40]	; (800d730 <prvInitialiseTaskLists+0x7c>)
 800d706:	4a05      	ldr	r2, [pc, #20]	; (800d71c <prvInitialiseTaskLists+0x68>)
 800d708:	601a      	str	r2, [r3, #0]
}
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	20004fbc 	.word	0x20004fbc
 800d718:	2000541c 	.word	0x2000541c
 800d71c:	20005430 	.word	0x20005430
 800d720:	2000544c 	.word	0x2000544c
 800d724:	20005460 	.word	0x20005460
 800d728:	20005478 	.word	0x20005478
 800d72c:	20005444 	.word	0x20005444
 800d730:	20005448 	.word	0x20005448

0800d734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d73a:	e019      	b.n	800d770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d73c:	f000 ff2e 	bl	800e59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d740:	4b10      	ldr	r3, [pc, #64]	; (800d784 <prvCheckTasksWaitingTermination+0x50>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fad5 	bl	800bcfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d752:	4b0d      	ldr	r3, [pc, #52]	; (800d788 <prvCheckTasksWaitingTermination+0x54>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	3b01      	subs	r3, #1
 800d758:	4a0b      	ldr	r2, [pc, #44]	; (800d788 <prvCheckTasksWaitingTermination+0x54>)
 800d75a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d75c:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <prvCheckTasksWaitingTermination+0x58>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3b01      	subs	r3, #1
 800d762:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <prvCheckTasksWaitingTermination+0x58>)
 800d764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d766:	f000 ff4d 	bl	800e604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f810 	bl	800d790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d770:	4b06      	ldr	r3, [pc, #24]	; (800d78c <prvCheckTasksWaitingTermination+0x58>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1e1      	bne.n	800d73c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20005460 	.word	0x20005460
 800d788:	2000548c 	.word	0x2000548c
 800d78c:	20005474 	.word	0x20005474

0800d790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3354      	adds	r3, #84	; 0x54
 800d79c:	4618      	mov	r0, r3
 800d79e:	f001 fb97 	bl	800eed0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d108      	bne.n	800d7be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f001 f8e9 	bl	800e988 <vPortFree>
				vPortFree( pxTCB );
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f001 f8e6 	bl	800e988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7bc:	e01a      	b.n	800d7f4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d103      	bne.n	800d7d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 f8dd 	bl	800e988 <vPortFree>
	}
 800d7ce:	e011      	b.n	800d7f4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	d00c      	beq.n	800d7f4 <prvDeleteTCB+0x64>
	__asm volatile
 800d7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7de:	b672      	cpsid	i
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	b662      	cpsie	i
 800d7ee:	60fb      	str	r3, [r7, #12]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <prvDeleteTCB+0x62>
	}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d802:	4b0c      	ldr	r3, [pc, #48]	; (800d834 <prvResetNextTaskUnblockTime+0x38>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d104      	bne.n	800d816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d80c:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <prvResetNextTaskUnblockTime+0x3c>)
 800d80e:	f04f 32ff 	mov.w	r2, #4294967295
 800d812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d814:	e008      	b.n	800d828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d816:	4b07      	ldr	r3, [pc, #28]	; (800d834 <prvResetNextTaskUnblockTime+0x38>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	4a04      	ldr	r2, [pc, #16]	; (800d838 <prvResetNextTaskUnblockTime+0x3c>)
 800d826:	6013      	str	r3, [r2, #0]
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr
 800d834:	20005444 	.word	0x20005444
 800d838:	200054ac 	.word	0x200054ac

0800d83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d842:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <xTaskGetSchedulerState+0x34>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d84a:	2301      	movs	r3, #1
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	e008      	b.n	800d862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d850:	4b08      	ldr	r3, [pc, #32]	; (800d874 <xTaskGetSchedulerState+0x38>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d102      	bne.n	800d85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d858:	2302      	movs	r3, #2
 800d85a:	607b      	str	r3, [r7, #4]
 800d85c:	e001      	b.n	800d862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d85e:	2300      	movs	r3, #0
 800d860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d862:	687b      	ldr	r3, [r7, #4]
	}
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	20005498 	.word	0x20005498
 800d874:	200054b4 	.word	0x200054b4

0800d878 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d051      	beq.n	800d932 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	4b2a      	ldr	r3, [pc, #168]	; (800d93c <xTaskPriorityInherit+0xc4>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d898:	429a      	cmp	r2, r3
 800d89a:	d241      	bcs.n	800d920 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	db06      	blt.n	800d8b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a4:	4b25      	ldr	r3, [pc, #148]	; (800d93c <xTaskPriorityInherit+0xc4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	6959      	ldr	r1, [r3, #20]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4a1f      	ldr	r2, [pc, #124]	; (800d940 <xTaskPriorityInherit+0xc8>)
 800d8c4:	4413      	add	r3, r2
 800d8c6:	4299      	cmp	r1, r3
 800d8c8:	d122      	bne.n	800d910 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe fa14 	bl	800bcfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8d4:	4b19      	ldr	r3, [pc, #100]	; (800d93c <xTaskPriorityInherit+0xc4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e2:	4b18      	ldr	r3, [pc, #96]	; (800d944 <xTaskPriorityInherit+0xcc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d903      	bls.n	800d8f2 <xTaskPriorityInherit+0x7a>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ee:	4a15      	ldr	r2, [pc, #84]	; (800d944 <xTaskPriorityInherit+0xcc>)
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4a10      	ldr	r2, [pc, #64]	; (800d940 <xTaskPriorityInherit+0xc8>)
 800d900:	441a      	add	r2, r3
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	3304      	adds	r3, #4
 800d906:	4619      	mov	r1, r3
 800d908:	4610      	mov	r0, r2
 800d90a:	f7fe f99a 	bl	800bc42 <vListInsertEnd>
 800d90e:	e004      	b.n	800d91a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d910:	4b0a      	ldr	r3, [pc, #40]	; (800d93c <xTaskPriorityInherit+0xc4>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	60fb      	str	r3, [r7, #12]
 800d91e:	e008      	b.n	800d932 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <xTaskPriorityInherit+0xc4>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d201      	bcs.n	800d932 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d92e:	2301      	movs	r3, #1
 800d930:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d932:	68fb      	ldr	r3, [r7, #12]
	}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	20004fb8 	.word	0x20004fb8
 800d940:	20004fbc 	.word	0x20004fbc
 800d944:	20005494 	.word	0x20005494

0800d948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d954:	2300      	movs	r3, #0
 800d956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d05a      	beq.n	800da14 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d95e:	4b30      	ldr	r3, [pc, #192]	; (800da20 <xTaskPriorityDisinherit+0xd8>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	429a      	cmp	r2, r3
 800d966:	d00c      	beq.n	800d982 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96c:	b672      	cpsid	i
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	b662      	cpsie	i
 800d97c:	60fb      	str	r3, [r7, #12]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d986:	2b00      	cmp	r3, #0
 800d988:	d10c      	bne.n	800d9a4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	b672      	cpsid	i
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	b662      	cpsie	i
 800d99e:	60bb      	str	r3, [r7, #8]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a8:	1e5a      	subs	r2, r3, #1
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d02c      	beq.n	800da14 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d128      	bne.n	800da14 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe f998 	bl	800bcfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <xTaskPriorityDisinherit+0xdc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d903      	bls.n	800d9f4 <xTaskPriorityDisinherit+0xac>
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	4a0c      	ldr	r2, [pc, #48]	; (800da24 <xTaskPriorityDisinherit+0xdc>)
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4a09      	ldr	r2, [pc, #36]	; (800da28 <xTaskPriorityDisinherit+0xe0>)
 800da02:	441a      	add	r2, r3
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe f919 	bl	800bc42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da10:	2301      	movs	r3, #1
 800da12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da14:	697b      	ldr	r3, [r7, #20]
	}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20004fb8 	.word	0x20004fb8
 800da24:	20005494 	.word	0x20005494
 800da28:	20004fbc 	.word	0x20004fbc

0800da2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b088      	sub	sp, #32
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da3a:	2301      	movs	r3, #1
 800da3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d06e      	beq.n	800db22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10c      	bne.n	800da66 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	b672      	cpsid	i
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	b662      	cpsie	i
 800da60:	60fb      	str	r3, [r7, #12]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d902      	bls.n	800da76 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	61fb      	str	r3, [r7, #28]
 800da74:	e002      	b.n	800da7c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	69fa      	ldr	r2, [r7, #28]
 800da82:	429a      	cmp	r2, r3
 800da84:	d04d      	beq.n	800db22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da8a:	697a      	ldr	r2, [r7, #20]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d148      	bne.n	800db22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da90:	4b26      	ldr	r3, [pc, #152]	; (800db2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	69ba      	ldr	r2, [r7, #24]
 800da96:	429a      	cmp	r2, r3
 800da98:	d10c      	bne.n	800dab4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	b672      	cpsid	i
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	b662      	cpsie	i
 800daae:	60bb      	str	r3, [r7, #8]
}
 800dab0:	bf00      	nop
 800dab2:	e7fe      	b.n	800dab2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	69fa      	ldr	r2, [r7, #28]
 800dabe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	db04      	blt.n	800dad2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	6959      	ldr	r1, [r3, #20]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	4613      	mov	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4a13      	ldr	r2, [pc, #76]	; (800db30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dae2:	4413      	add	r3, r2
 800dae4:	4299      	cmp	r1, r3
 800dae6:	d11c      	bne.n	800db22 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	3304      	adds	r3, #4
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe f905 	bl	800bcfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf6:	4b0f      	ldr	r3, [pc, #60]	; (800db34 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d903      	bls.n	800db06 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db02:	4a0c      	ldr	r2, [pc, #48]	; (800db34 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0a:	4613      	mov	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4a07      	ldr	r2, [pc, #28]	; (800db30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800db14:	441a      	add	r2, r3
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	3304      	adds	r3, #4
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f7fe f890 	bl	800bc42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db22:	bf00      	nop
 800db24:	3720      	adds	r7, #32
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20004fb8 	.word	0x20004fb8
 800db30:	20004fbc 	.word	0x20004fbc
 800db34:	20005494 	.word	0x20005494

0800db38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db38:	b480      	push	{r7}
 800db3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db3c:	4b07      	ldr	r3, [pc, #28]	; (800db5c <pvTaskIncrementMutexHeldCount+0x24>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d004      	beq.n	800db4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db44:	4b05      	ldr	r3, [pc, #20]	; (800db5c <pvTaskIncrementMutexHeldCount+0x24>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db4a:	3201      	adds	r2, #1
 800db4c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800db4e:	4b03      	ldr	r3, [pc, #12]	; (800db5c <pvTaskIncrementMutexHeldCount+0x24>)
 800db50:	681b      	ldr	r3, [r3, #0]
	}
 800db52:	4618      	mov	r0, r3
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	20004fb8 	.word	0x20004fb8

0800db60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db6a:	4b21      	ldr	r3, [pc, #132]	; (800dbf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db70:	4b20      	ldr	r3, [pc, #128]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3304      	adds	r3, #4
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe f8c0 	bl	800bcfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db82:	d10a      	bne.n	800db9a <prvAddCurrentTaskToDelayedList+0x3a>
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d007      	beq.n	800db9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db8a:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3304      	adds	r3, #4
 800db90:	4619      	mov	r1, r3
 800db92:	4819      	ldr	r0, [pc, #100]	; (800dbf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800db94:	f7fe f855 	bl	800bc42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db98:	e026      	b.n	800dbe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4413      	add	r3, r2
 800dba0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dba2:	4b14      	ldr	r3, [pc, #80]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d209      	bcs.n	800dbc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbb2:	4b12      	ldr	r3, [pc, #72]	; (800dbfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3304      	adds	r3, #4
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	f7fe f863 	bl	800bc8a <vListInsert>
}
 800dbc4:	e010      	b.n	800dbe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc6:	4b0e      	ldr	r3, [pc, #56]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	f7fe f859 	bl	800bc8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d202      	bcs.n	800dbe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dbe2:	4a08      	ldr	r2, [pc, #32]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6013      	str	r3, [r2, #0]
}
 800dbe8:	bf00      	nop
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20005490 	.word	0x20005490
 800dbf4:	20004fb8 	.word	0x20004fb8
 800dbf8:	20005478 	.word	0x20005478
 800dbfc:	20005448 	.word	0x20005448
 800dc00:	20005444 	.word	0x20005444
 800dc04:	200054ac 	.word	0x200054ac

0800dc08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08a      	sub	sp, #40	; 0x28
 800dc0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc12:	f000 fb73 	bl	800e2fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc16:	4b1d      	ldr	r3, [pc, #116]	; (800dc8c <xTimerCreateTimerTask+0x84>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d021      	beq.n	800dc62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc26:	1d3a      	adds	r2, r7, #4
 800dc28:	f107 0108 	add.w	r1, r7, #8
 800dc2c:	f107 030c 	add.w	r3, r7, #12
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fd ffbf 	bl	800bbb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	9202      	str	r2, [sp, #8]
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	2302      	movs	r3, #2
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	2300      	movs	r3, #0
 800dc46:	460a      	mov	r2, r1
 800dc48:	4911      	ldr	r1, [pc, #68]	; (800dc90 <xTimerCreateTimerTask+0x88>)
 800dc4a:	4812      	ldr	r0, [pc, #72]	; (800dc94 <xTimerCreateTimerTask+0x8c>)
 800dc4c:	f7fe ff8e 	bl	800cb6c <xTaskCreateStatic>
 800dc50:	4603      	mov	r3, r0
 800dc52:	4a11      	ldr	r2, [pc, #68]	; (800dc98 <xTimerCreateTimerTask+0x90>)
 800dc54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc56:	4b10      	ldr	r3, [pc, #64]	; (800dc98 <xTimerCreateTimerTask+0x90>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d001      	beq.n	800dc62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10c      	bne.n	800dc82 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	b672      	cpsid	i
 800dc6e:	f383 8811 	msr	BASEPRI, r3
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	b662      	cpsie	i
 800dc7c:	613b      	str	r3, [r7, #16]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dc82:	697b      	ldr	r3, [r7, #20]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	200054e8 	.word	0x200054e8
 800dc90:	08010388 	.word	0x08010388
 800dc94:	0800de95 	.word	0x0800de95
 800dc98:	200054ec 	.word	0x200054ec

0800dc9c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
 800dca8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dcaa:	202c      	movs	r0, #44	; 0x2c
 800dcac:	f000 fda2 	bl	800e7f4 <pvPortMalloc>
 800dcb0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00d      	beq.n	800dcd4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	68b9      	ldr	r1, [r7, #8]
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f805 	bl	800dcde <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dcd4:	697b      	ldr	r3, [r7, #20]
	}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b086      	sub	sp, #24
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	607a      	str	r2, [r7, #4]
 800dcea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10c      	bne.n	800dd0c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	b672      	cpsid	i
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	b662      	cpsie	i
 800dd06:	617b      	str	r3, [r7, #20]
}
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01e      	beq.n	800dd50 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dd12:	f000 faf3 	bl	800e2fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2a:	6a3a      	ldr	r2, [r7, #32]
 800dd2c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	3304      	adds	r3, #4
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd ff78 	bl	800bc28 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd44:	f043 0304 	orr.w	r3, r3, #4
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dd50:	bf00      	nop
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	; 0x28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10c      	bne.n	800dd8a <xTimerGenericCommand+0x32>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	b672      	cpsid	i
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	b662      	cpsie	i
 800dd84:	623b      	str	r3, [r7, #32]
}
 800dd86:	bf00      	nop
 800dd88:	e7fe      	b.n	800dd88 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd8a:	4b1a      	ldr	r3, [pc, #104]	; (800ddf4 <xTimerGenericCommand+0x9c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d02a      	beq.n	800dde8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b05      	cmp	r3, #5
 800dda2:	dc18      	bgt.n	800ddd6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dda4:	f7ff fd4a 	bl	800d83c <xTaskGetSchedulerState>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d109      	bne.n	800ddc2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddae:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <xTimerGenericCommand+0x9c>)
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f107 0110 	add.w	r1, r7, #16
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddba:	f7fe f91b 	bl	800bff4 <xQueueGenericSend>
 800ddbe:	6278      	str	r0, [r7, #36]	; 0x24
 800ddc0:	e012      	b.n	800dde8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddc2:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <xTimerGenericCommand+0x9c>)
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f107 0110 	add.w	r1, r7, #16
 800ddca:	2300      	movs	r3, #0
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f7fe f911 	bl	800bff4 <xQueueGenericSend>
 800ddd2:	6278      	str	r0, [r7, #36]	; 0x24
 800ddd4:	e008      	b.n	800dde8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddd6:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <xTimerGenericCommand+0x9c>)
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f107 0110 	add.w	r1, r7, #16
 800ddde:	2300      	movs	r3, #0
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	f7fe fa0d 	bl	800c200 <xQueueGenericSendFromISR>
 800dde6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3728      	adds	r7, #40	; 0x28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	200054e8 	.word	0x200054e8

0800ddf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de02:	4b23      	ldr	r3, [pc, #140]	; (800de90 <prvProcessExpiredTimer+0x98>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	3304      	adds	r3, #4
 800de10:	4618      	mov	r0, r3
 800de12:	f7fd ff73 	bl	800bcfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b00      	cmp	r3, #0
 800de22:	d024      	beq.n	800de6e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	699a      	ldr	r2, [r3, #24]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	18d1      	adds	r1, r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	6978      	ldr	r0, [r7, #20]
 800de32:	f000 f8d3 	bl	800dfdc <prvInsertTimerInActiveList>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d021      	beq.n	800de80 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de3c:	2300      	movs	r3, #0
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2300      	movs	r3, #0
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	2100      	movs	r1, #0
 800de46:	6978      	ldr	r0, [r7, #20]
 800de48:	f7ff ff86 	bl	800dd58 <xTimerGenericCommand>
 800de4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d115      	bne.n	800de80 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	b672      	cpsid	i
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	b662      	cpsie	i
 800de68:	60fb      	str	r3, [r7, #12]
}
 800de6a:	bf00      	nop
 800de6c:	e7fe      	b.n	800de6c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de74:	f023 0301 	bic.w	r3, r3, #1
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	6978      	ldr	r0, [r7, #20]
 800de86:	4798      	blx	r3
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	200054e0 	.word	0x200054e0

0800de94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f857 	bl	800df54 <prvGetNextExpireTime>
 800dea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4619      	mov	r1, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f803 	bl	800deb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800deb2:	f000 f8d5 	bl	800e060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deb6:	e7f1      	b.n	800de9c <prvTimerTask+0x8>

0800deb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dec2:	f7ff f8bd 	bl	800d040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f866 	bl	800df9c <prvSampleTimeNow>
 800ded0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d130      	bne.n	800df3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d10a      	bne.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d806      	bhi.n	800def4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dee6:	f7ff f8b9 	bl	800d05c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deea:	68f9      	ldr	r1, [r7, #12]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ff83 	bl	800ddf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800def2:	e024      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d008      	beq.n	800df0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800defa:	4b13      	ldr	r3, [pc, #76]	; (800df48 <prvProcessTimerOrBlockTask+0x90>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <prvProcessTimerOrBlockTask+0x50>
 800df04:	2301      	movs	r3, #1
 800df06:	e000      	b.n	800df0a <prvProcessTimerOrBlockTask+0x52>
 800df08:	2300      	movs	r3, #0
 800df0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df0c:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <prvProcessTimerOrBlockTask+0x94>)
 800df0e:	6818      	ldr	r0, [r3, #0]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	4619      	mov	r1, r3
 800df1a:	f7fe fdf3 	bl	800cb04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df1e:	f7ff f89d 	bl	800d05c <xTaskResumeAll>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df28:	4b09      	ldr	r3, [pc, #36]	; (800df50 <prvProcessTimerOrBlockTask+0x98>)
 800df2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2e:	601a      	str	r2, [r3, #0]
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	f3bf 8f6f 	isb	sy
}
 800df38:	e001      	b.n	800df3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df3a:	f7ff f88f 	bl	800d05c <xTaskResumeAll>
}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	200054e4 	.word	0x200054e4
 800df4c:	200054e8 	.word	0x200054e8
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <prvGetNextExpireTime+0x16>
 800df66:	2201      	movs	r2, #1
 800df68:	e000      	b.n	800df6c <prvGetNextExpireTime+0x18>
 800df6a:	2200      	movs	r2, #0
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d105      	bne.n	800df84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df78:	4b07      	ldr	r3, [pc, #28]	; (800df98 <prvGetNextExpireTime+0x44>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e001      	b.n	800df88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df88:	68fb      	ldr	r3, [r7, #12]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	200054e0 	.word	0x200054e0

0800df9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfa4:	f7ff f8fa 	bl	800d19c <xTaskGetTickCount>
 800dfa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d205      	bcs.n	800dfc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfb4:	f000 f93c 	bl	800e230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	e002      	b.n	800dfc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfc6:	4a04      	ldr	r2, [pc, #16]	; (800dfd8 <prvSampleTimeNow+0x3c>)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	200054f0 	.word	0x200054f0

0800dfdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d812      	bhi.n	800e028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	1ad2      	subs	r2, r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d302      	bcc.n	800e016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	e01b      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e016:	4b10      	ldr	r3, [pc, #64]	; (800e058 <prvInsertTimerInActiveList+0x7c>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fd fe32 	bl	800bc8a <vListInsert>
 800e026:	e012      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d206      	bcs.n	800e03e <prvInsertTimerInActiveList+0x62>
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d302      	bcc.n	800e03e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	617b      	str	r3, [r7, #20]
 800e03c:	e007      	b.n	800e04e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e03e:	4b07      	ldr	r3, [pc, #28]	; (800e05c <prvInsertTimerInActiveList+0x80>)
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3304      	adds	r3, #4
 800e046:	4619      	mov	r1, r3
 800e048:	4610      	mov	r0, r2
 800e04a:	f7fd fe1e 	bl	800bc8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e04e:	697b      	ldr	r3, [r7, #20]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	200054e4 	.word	0x200054e4
 800e05c:	200054e0 	.word	0x200054e0

0800e060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e066:	e0d0      	b.n	800e20a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da1a      	bge.n	800e0a4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e06e:	1d3b      	adds	r3, r7, #4
 800e070:	3304      	adds	r3, #4
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10c      	bne.n	800e094 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	b672      	cpsid	i
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	b662      	cpsie	i
 800e08e:	61fb      	str	r3, [r7, #28]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09a:	6850      	ldr	r0, [r2, #4]
 800e09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09e:	6892      	ldr	r2, [r2, #8]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f2c0 80af 	blt.w	800e20a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fd fe1d 	bl	800bcfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff ff69 	bl	800df9c <prvSampleTimeNow>
 800e0ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	f200 809a 	bhi.w	800e208 <prvProcessReceivedCommands+0x1a8>
 800e0d4:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <prvProcessReceivedCommands+0x7c>)
 800e0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0da:	bf00      	nop
 800e0dc:	0800e105 	.word	0x0800e105
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e105 	.word	0x0800e105
 800e0e8:	0800e17d 	.word	0x0800e17d
 800e0ec:	0800e191 	.word	0x0800e191
 800e0f0:	0800e1df 	.word	0x0800e1df
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e105 	.word	0x0800e105
 800e0fc:	0800e17d 	.word	0x0800e17d
 800e100:	0800e191 	.word	0x0800e191
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e10a:	f043 0301 	orr.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	18d1      	adds	r1, r2, r3
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e124:	f7ff ff5a 	bl	800dfdc <prvInsertTimerInActiveList>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d06d      	beq.n	800e20a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d062      	beq.n	800e20a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	441a      	add	r2, r3
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	2100      	movs	r1, #0
 800e154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e156:	f7ff fdff 	bl	800dd58 <xTimerGenericCommand>
 800e15a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d153      	bne.n	800e20a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	b672      	cpsid	i
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	b662      	cpsie	i
 800e176:	61bb      	str	r3, [r7, #24]
}
 800e178:	bf00      	nop
 800e17a:	e7fe      	b.n	800e17a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e182:	f023 0301 	bic.w	r3, r3, #1
 800e186:	b2da      	uxtb	r2, r3
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e18e:	e03c      	b.n	800e20a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e196:	f043 0301 	orr.w	r3, r3, #1
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10c      	bne.n	800e1ca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	b672      	cpsid	i
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	b662      	cpsie	i
 800e1c4:	617b      	str	r3, [r7, #20]
}
 800e1c6:	bf00      	nop
 800e1c8:	e7fe      	b.n	800e1c8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	699a      	ldr	r2, [r3, #24]
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d0:	18d1      	adds	r1, r2, r3
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1d8:	f7ff ff00 	bl	800dfdc <prvInsertTimerInActiveList>
					break;
 800e1dc:	e015      	b.n	800e20a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1e4:	f003 0302 	and.w	r3, r3, #2
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d103      	bne.n	800e1f4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800e1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1ee:	f000 fbcb 	bl	800e988 <vPortFree>
 800e1f2:	e00a      	b.n	800e20a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1fa:	f023 0301 	bic.w	r3, r3, #1
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e206:	e000      	b.n	800e20a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800e208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e20a:	4b08      	ldr	r3, [pc, #32]	; (800e22c <prvProcessReceivedCommands+0x1cc>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	1d39      	adds	r1, r7, #4
 800e210:	2200      	movs	r2, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe f92a 	bl	800c46c <xQueueReceive>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f47f af24 	bne.w	800e068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e220:	bf00      	nop
 800e222:	bf00      	nop
 800e224:	3730      	adds	r7, #48	; 0x30
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	200054e8 	.word	0x200054e8

0800e230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e236:	e04a      	b.n	800e2ce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e238:	4b2e      	ldr	r3, [pc, #184]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e242:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3304      	adds	r3, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f7fd fd53 	bl	800bcfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d030      	beq.n	800e2ce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	4413      	add	r3, r2
 800e274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d90e      	bls.n	800e29c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e28a:	4b1a      	ldr	r3, [pc, #104]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3304      	adds	r3, #4
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7fd fcf8 	bl	800bc8a <vListInsert>
 800e29a:	e018      	b.n	800e2ce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e29c:	2300      	movs	r3, #0
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7ff fd56 	bl	800dd58 <xTimerGenericCommand>
 800e2ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10c      	bne.n	800e2ce <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b8:	b672      	cpsid	i
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	b662      	cpsie	i
 800e2c8:	603b      	str	r3, [r7, #0]
}
 800e2ca:	bf00      	nop
 800e2cc:	e7fe      	b.n	800e2cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2ce:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1af      	bne.n	800e238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2d8:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2de:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <prvSwitchTimerLists+0xc8>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a04      	ldr	r2, [pc, #16]	; (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2e6:	4a04      	ldr	r2, [pc, #16]	; (800e2f8 <prvSwitchTimerLists+0xc8>)
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	6013      	str	r3, [r2, #0]
}
 800e2ec:	bf00      	nop
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	200054e0 	.word	0x200054e0
 800e2f8:	200054e4 	.word	0x200054e4

0800e2fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e302:	f000 f94b 	bl	800e59c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e306:	4b15      	ldr	r3, [pc, #84]	; (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d120      	bne.n	800e350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e30e:	4814      	ldr	r0, [pc, #80]	; (800e360 <prvCheckForValidListAndQueue+0x64>)
 800e310:	f7fd fc6a 	bl	800bbe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e314:	4813      	ldr	r0, [pc, #76]	; (800e364 <prvCheckForValidListAndQueue+0x68>)
 800e316:	f7fd fc67 	bl	800bbe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e31a:	4b13      	ldr	r3, [pc, #76]	; (800e368 <prvCheckForValidListAndQueue+0x6c>)
 800e31c:	4a10      	ldr	r2, [pc, #64]	; (800e360 <prvCheckForValidListAndQueue+0x64>)
 800e31e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e320:	4b12      	ldr	r3, [pc, #72]	; (800e36c <prvCheckForValidListAndQueue+0x70>)
 800e322:	4a10      	ldr	r2, [pc, #64]	; (800e364 <prvCheckForValidListAndQueue+0x68>)
 800e324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e326:	2300      	movs	r3, #0
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	4b11      	ldr	r3, [pc, #68]	; (800e370 <prvCheckForValidListAndQueue+0x74>)
 800e32c:	4a11      	ldr	r2, [pc, #68]	; (800e374 <prvCheckForValidListAndQueue+0x78>)
 800e32e:	2110      	movs	r1, #16
 800e330:	200a      	movs	r0, #10
 800e332:	f7fd fd77 	bl	800be24 <xQueueGenericCreateStatic>
 800e336:	4603      	mov	r3, r0
 800e338:	4a08      	ldr	r2, [pc, #32]	; (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e33a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e33c:	4b07      	ldr	r3, [pc, #28]	; (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d005      	beq.n	800e350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	490b      	ldr	r1, [pc, #44]	; (800e378 <prvCheckForValidListAndQueue+0x7c>)
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fbb0 	bl	800cab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e350:	f000 f958 	bl	800e604 <vPortExitCritical>
}
 800e354:	bf00      	nop
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	200054e8 	.word	0x200054e8
 800e360:	200054b8 	.word	0x200054b8
 800e364:	200054cc 	.word	0x200054cc
 800e368:	200054e0 	.word	0x200054e0
 800e36c:	200054e4 	.word	0x200054e4
 800e370:	20005594 	.word	0x20005594
 800e374:	200054f4 	.word	0x200054f4
 800e378:	08010390 	.word	0x08010390

0800e37c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	3b04      	subs	r3, #4
 800e38c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3b04      	subs	r3, #4
 800e39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f023 0201 	bic.w	r2, r3, #1
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3b04      	subs	r3, #4
 800e3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3ac:	4a0c      	ldr	r2, [pc, #48]	; (800e3e0 <pxPortInitialiseStack+0x64>)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b14      	subs	r3, #20
 800e3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3b04      	subs	r3, #4
 800e3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f06f 0202 	mvn.w	r2, #2
 800e3ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3b20      	subs	r3, #32
 800e3d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	0800e3e5 	.word	0x0800e3e5

0800e3e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3ee:	4b14      	ldr	r3, [pc, #80]	; (800e440 <prvTaskExitError+0x5c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f6:	d00c      	beq.n	800e412 <prvTaskExitError+0x2e>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	b672      	cpsid	i
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	b662      	cpsie	i
 800e40c:	60fb      	str	r3, [r7, #12]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <prvTaskExitError+0x2c>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	b672      	cpsid	i
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	b662      	cpsie	i
 800e426:	60bb      	str	r3, [r7, #8]
}
 800e428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e42a:	bf00      	nop
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0fc      	beq.n	800e42c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	20000048 	.word	0x20000048
	...

0800e450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e450:	4b07      	ldr	r3, [pc, #28]	; (800e470 <pxCurrentTCBConst2>)
 800e452:	6819      	ldr	r1, [r3, #0]
 800e454:	6808      	ldr	r0, [r1, #0]
 800e456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45a:	f380 8809 	msr	PSP, r0
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f380 8811 	msr	BASEPRI, r0
 800e46a:	4770      	bx	lr
 800e46c:	f3af 8000 	nop.w

0800e470 <pxCurrentTCBConst2>:
 800e470:	20004fb8 	.word	0x20004fb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop

0800e478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e478:	4808      	ldr	r0, [pc, #32]	; (800e49c <prvPortStartFirstTask+0x24>)
 800e47a:	6800      	ldr	r0, [r0, #0]
 800e47c:	6800      	ldr	r0, [r0, #0]
 800e47e:	f380 8808 	msr	MSP, r0
 800e482:	f04f 0000 	mov.w	r0, #0
 800e486:	f380 8814 	msr	CONTROL, r0
 800e48a:	b662      	cpsie	i
 800e48c:	b661      	cpsie	f
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	df00      	svc	0
 800e498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e49a:	bf00      	nop
 800e49c:	e000ed08 	.word	0xe000ed08

0800e4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4a6:	4b37      	ldr	r3, [pc, #220]	; (800e584 <xPortStartScheduler+0xe4>)
 800e4a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	22ff      	movs	r2, #255	; 0xff
 800e4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	4b2f      	ldr	r3, [pc, #188]	; (800e588 <xPortStartScheduler+0xe8>)
 800e4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4ce:	4b2f      	ldr	r3, [pc, #188]	; (800e58c <xPortStartScheduler+0xec>)
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4d4:	e009      	b.n	800e4ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e4d6:	4b2d      	ldr	r3, [pc, #180]	; (800e58c <xPortStartScheduler+0xec>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	4a2b      	ldr	r2, [pc, #172]	; (800e58c <xPortStartScheduler+0xec>)
 800e4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4ea:	78fb      	ldrb	r3, [r7, #3]
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f2:	2b80      	cmp	r3, #128	; 0x80
 800e4f4:	d0ef      	beq.n	800e4d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4f6:	4b25      	ldr	r3, [pc, #148]	; (800e58c <xPortStartScheduler+0xec>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f1c3 0307 	rsb	r3, r3, #7
 800e4fe:	2b04      	cmp	r3, #4
 800e500:	d00c      	beq.n	800e51c <xPortStartScheduler+0x7c>
	__asm volatile
 800e502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e506:	b672      	cpsid	i
 800e508:	f383 8811 	msr	BASEPRI, r3
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	b662      	cpsie	i
 800e516:	60bb      	str	r3, [r7, #8]
}
 800e518:	bf00      	nop
 800e51a:	e7fe      	b.n	800e51a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e51c:	4b1b      	ldr	r3, [pc, #108]	; (800e58c <xPortStartScheduler+0xec>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	021b      	lsls	r3, r3, #8
 800e522:	4a1a      	ldr	r2, [pc, #104]	; (800e58c <xPortStartScheduler+0xec>)
 800e524:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e526:	4b19      	ldr	r3, [pc, #100]	; (800e58c <xPortStartScheduler+0xec>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <xPortStartScheduler+0xec>)
 800e530:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	b2da      	uxtb	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e53a:	4b15      	ldr	r3, [pc, #84]	; (800e590 <xPortStartScheduler+0xf0>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a14      	ldr	r2, [pc, #80]	; (800e590 <xPortStartScheduler+0xf0>)
 800e540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e544:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e546:	4b12      	ldr	r3, [pc, #72]	; (800e590 <xPortStartScheduler+0xf0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a11      	ldr	r2, [pc, #68]	; (800e590 <xPortStartScheduler+0xf0>)
 800e54c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e550:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e552:	f000 f8dd 	bl	800e710 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e556:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <xPortStartScheduler+0xf4>)
 800e558:	2200      	movs	r2, #0
 800e55a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e55c:	f000 f8fc 	bl	800e758 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e560:	4b0d      	ldr	r3, [pc, #52]	; (800e598 <xPortStartScheduler+0xf8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a0c      	ldr	r2, [pc, #48]	; (800e598 <xPortStartScheduler+0xf8>)
 800e566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e56a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e56c:	f7ff ff84 	bl	800e478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e570:	f7fe fee0 	bl	800d334 <vTaskSwitchContext>
	prvTaskExitError();
 800e574:	f7ff ff36 	bl	800e3e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	e000e400 	.word	0xe000e400
 800e588:	200055e4 	.word	0x200055e4
 800e58c:	200055e8 	.word	0x200055e8
 800e590:	e000ed20 	.word	0xe000ed20
 800e594:	20000048 	.word	0x20000048
 800e598:	e000ef34 	.word	0xe000ef34

0800e59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	b672      	cpsid	i
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	b662      	cpsie	i
 800e5b6:	607b      	str	r3, [r7, #4]
}
 800e5b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5ba:	4b10      	ldr	r3, [pc, #64]	; (800e5fc <vPortEnterCritical+0x60>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	4a0e      	ldr	r2, [pc, #56]	; (800e5fc <vPortEnterCritical+0x60>)
 800e5c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5c4:	4b0d      	ldr	r3, [pc, #52]	; (800e5fc <vPortEnterCritical+0x60>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d111      	bne.n	800e5f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5cc:	4b0c      	ldr	r3, [pc, #48]	; (800e600 <vPortEnterCritical+0x64>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00c      	beq.n	800e5f0 <vPortEnterCritical+0x54>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	b672      	cpsid	i
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	b662      	cpsie	i
 800e5ea:	603b      	str	r3, [r7, #0]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <vPortEnterCritical+0x52>
	}
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20000048 	.word	0x20000048
 800e600:	e000ed04 	.word	0xe000ed04

0800e604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e60a:	4b13      	ldr	r3, [pc, #76]	; (800e658 <vPortExitCritical+0x54>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10c      	bne.n	800e62c <vPortExitCritical+0x28>
	__asm volatile
 800e612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e616:	b672      	cpsid	i
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	b662      	cpsie	i
 800e626:	607b      	str	r3, [r7, #4]
}
 800e628:	bf00      	nop
 800e62a:	e7fe      	b.n	800e62a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <vPortExitCritical+0x54>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	3b01      	subs	r3, #1
 800e632:	4a09      	ldr	r2, [pc, #36]	; (800e658 <vPortExitCritical+0x54>)
 800e634:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e636:	4b08      	ldr	r3, [pc, #32]	; (800e658 <vPortExitCritical+0x54>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d105      	bne.n	800e64a <vPortExitCritical+0x46>
 800e63e:	2300      	movs	r3, #0
 800e640:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	f383 8811 	msr	BASEPRI, r3
}
 800e648:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e64a:	bf00      	nop
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	20000048 	.word	0x20000048
 800e65c:	00000000 	.word	0x00000000

0800e660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e660:	f3ef 8009 	mrs	r0, PSP
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	4b15      	ldr	r3, [pc, #84]	; (800e6c0 <pxCurrentTCBConst>)
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	f01e 0f10 	tst.w	lr, #16
 800e670:	bf08      	it	eq
 800e672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67a:	6010      	str	r0, [r2, #0]
 800e67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e684:	b672      	cpsid	i
 800e686:	f380 8811 	msr	BASEPRI, r0
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	b662      	cpsie	i
 800e694:	f7fe fe4e 	bl	800d334 <vTaskSwitchContext>
 800e698:	f04f 0000 	mov.w	r0, #0
 800e69c:	f380 8811 	msr	BASEPRI, r0
 800e6a0:	bc09      	pop	{r0, r3}
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	6808      	ldr	r0, [r1, #0]
 800e6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6aa:	f01e 0f10 	tst.w	lr, #16
 800e6ae:	bf08      	it	eq
 800e6b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6b4:	f380 8809 	msr	PSP, r0
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop

0800e6c0 <pxCurrentTCBConst>:
 800e6c0:	20004fb8 	.word	0x20004fb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop

0800e6c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	b672      	cpsid	i
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	b662      	cpsie	i
 800e6e2:	607b      	str	r3, [r7, #4]
}
 800e6e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6e6:	f7fe fd69 	bl	800d1bc <xTaskIncrementTick>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6f0:	4b06      	ldr	r3, [pc, #24]	; (800e70c <SysTick_Handler+0x44>)
 800e6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	f383 8811 	msr	BASEPRI, r3
}
 800e702:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e704:	bf00      	nop
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	e000ed04 	.word	0xe000ed04

0800e710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e710:	b480      	push	{r7}
 800e712:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e714:	4b0b      	ldr	r3, [pc, #44]	; (800e744 <vPortSetupTimerInterrupt+0x34>)
 800e716:	2200      	movs	r2, #0
 800e718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e71a:	4b0b      	ldr	r3, [pc, #44]	; (800e748 <vPortSetupTimerInterrupt+0x38>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <vPortSetupTimerInterrupt+0x3c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a0a      	ldr	r2, [pc, #40]	; (800e750 <vPortSetupTimerInterrupt+0x40>)
 800e726:	fba2 2303 	umull	r2, r3, r2, r3
 800e72a:	099b      	lsrs	r3, r3, #6
 800e72c:	4a09      	ldr	r2, [pc, #36]	; (800e754 <vPortSetupTimerInterrupt+0x44>)
 800e72e:	3b01      	subs	r3, #1
 800e730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e732:	4b04      	ldr	r3, [pc, #16]	; (800e744 <vPortSetupTimerInterrupt+0x34>)
 800e734:	2207      	movs	r2, #7
 800e736:	601a      	str	r2, [r3, #0]
}
 800e738:	bf00      	nop
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	e000e010 	.word	0xe000e010
 800e748:	e000e018 	.word	0xe000e018
 800e74c:	2000003c 	.word	0x2000003c
 800e750:	10624dd3 	.word	0x10624dd3
 800e754:	e000e014 	.word	0xe000e014

0800e758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e758:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e768 <vPortEnableVFP+0x10>
 800e75c:	6801      	ldr	r1, [r0, #0]
 800e75e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e762:	6001      	str	r1, [r0, #0]
 800e764:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e766:	bf00      	nop
 800e768:	e000ed88 	.word	0xe000ed88

0800e76c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e772:	f3ef 8305 	mrs	r3, IPSR
 800e776:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b0f      	cmp	r3, #15
 800e77c:	d916      	bls.n	800e7ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e77e:	4a19      	ldr	r2, [pc, #100]	; (800e7e4 <vPortValidateInterruptPriority+0x78>)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	4413      	add	r3, r2
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e788:	4b17      	ldr	r3, [pc, #92]	; (800e7e8 <vPortValidateInterruptPriority+0x7c>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	7afa      	ldrb	r2, [r7, #11]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d20c      	bcs.n	800e7ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e796:	b672      	cpsid	i
 800e798:	f383 8811 	msr	BASEPRI, r3
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	b662      	cpsie	i
 800e7a6:	607b      	str	r3, [r7, #4]
}
 800e7a8:	bf00      	nop
 800e7aa:	e7fe      	b.n	800e7aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <vPortValidateInterruptPriority+0x80>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7b4:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <vPortValidateInterruptPriority+0x84>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d90c      	bls.n	800e7d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	b672      	cpsid	i
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	b662      	cpsie	i
 800e7d0:	603b      	str	r3, [r7, #0]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <vPortValidateInterruptPriority+0x68>
	}
 800e7d6:	bf00      	nop
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	e000e3f0 	.word	0xe000e3f0
 800e7e8:	200055e4 	.word	0x200055e4
 800e7ec:	e000ed0c 	.word	0xe000ed0c
 800e7f0:	200055e8 	.word	0x200055e8

0800e7f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b08a      	sub	sp, #40	; 0x28
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e800:	f7fe fc1e 	bl	800d040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e804:	4b5b      	ldr	r3, [pc, #364]	; (800e974 <pvPortMalloc+0x180>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d101      	bne.n	800e810 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e80c:	f000 f91a 	bl	800ea44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e810:	4b59      	ldr	r3, [pc, #356]	; (800e978 <pvPortMalloc+0x184>)
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4013      	ands	r3, r2
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f040 8092 	bne.w	800e942 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d01f      	beq.n	800e864 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e824:	2208      	movs	r2, #8
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4413      	add	r3, r2
 800e82a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	2b00      	cmp	r3, #0
 800e834:	d016      	beq.n	800e864 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f023 0307 	bic.w	r3, r3, #7
 800e83c:	3308      	adds	r3, #8
 800e83e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f003 0307 	and.w	r3, r3, #7
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00c      	beq.n	800e864 <pvPortMalloc+0x70>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84e:	b672      	cpsid	i
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	b662      	cpsie	i
 800e85e:	617b      	str	r3, [r7, #20]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d06b      	beq.n	800e942 <pvPortMalloc+0x14e>
 800e86a:	4b44      	ldr	r3, [pc, #272]	; (800e97c <pvPortMalloc+0x188>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d866      	bhi.n	800e942 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e874:	4b42      	ldr	r3, [pc, #264]	; (800e980 <pvPortMalloc+0x18c>)
 800e876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e878:	4b41      	ldr	r3, [pc, #260]	; (800e980 <pvPortMalloc+0x18c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e87e:	e004      	b.n	800e88a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d903      	bls.n	800e89c <pvPortMalloc+0xa8>
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1f1      	bne.n	800e880 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e89c:	4b35      	ldr	r3, [pc, #212]	; (800e974 <pvPortMalloc+0x180>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d04d      	beq.n	800e942 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	4413      	add	r3, r2
 800e8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	2308      	movs	r3, #8
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d921      	bls.n	800e90c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	f003 0307 	and.w	r3, r3, #7
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00c      	beq.n	800e8f4 <pvPortMalloc+0x100>
	__asm volatile
 800e8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8de:	b672      	cpsid	i
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	b662      	cpsie	i
 800e8ee:	613b      	str	r3, [r7, #16]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	1ad2      	subs	r2, r2, r3
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e906:	69b8      	ldr	r0, [r7, #24]
 800e908:	f000 f8fe 	bl	800eb08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e90c:	4b1b      	ldr	r3, [pc, #108]	; (800e97c <pvPortMalloc+0x188>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	4a19      	ldr	r2, [pc, #100]	; (800e97c <pvPortMalloc+0x188>)
 800e918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e91a:	4b18      	ldr	r3, [pc, #96]	; (800e97c <pvPortMalloc+0x188>)
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	4b19      	ldr	r3, [pc, #100]	; (800e984 <pvPortMalloc+0x190>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d203      	bcs.n	800e92e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e926:	4b15      	ldr	r3, [pc, #84]	; (800e97c <pvPortMalloc+0x188>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a16      	ldr	r2, [pc, #88]	; (800e984 <pvPortMalloc+0x190>)
 800e92c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	4b11      	ldr	r3, [pc, #68]	; (800e978 <pvPortMalloc+0x184>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	431a      	orrs	r2, r3
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e942:	f7fe fb8b 	bl	800d05c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	f003 0307 	and.w	r3, r3, #7
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00c      	beq.n	800e96a <pvPortMalloc+0x176>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	b672      	cpsid	i
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	b662      	cpsie	i
 800e964:	60fb      	str	r3, [r7, #12]
}
 800e966:	bf00      	nop
 800e968:	e7fe      	b.n	800e968 <pvPortMalloc+0x174>
	return pvReturn;
 800e96a:	69fb      	ldr	r3, [r7, #28]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3728      	adds	r7, #40	; 0x28
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	200091f4 	.word	0x200091f4
 800e978:	20009200 	.word	0x20009200
 800e97c:	200091f8 	.word	0x200091f8
 800e980:	200091ec 	.word	0x200091ec
 800e984:	200091fc 	.word	0x200091fc

0800e988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d04c      	beq.n	800ea34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e99a:	2308      	movs	r3, #8
 800e99c:	425b      	negs	r3, r3
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	4b23      	ldr	r3, [pc, #140]	; (800ea3c <vPortFree+0xb4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10c      	bne.n	800e9d0 <vPortFree+0x48>
	__asm volatile
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	b672      	cpsid	i
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	b662      	cpsie	i
 800e9ca:	60fb      	str	r3, [r7, #12]
}
 800e9cc:	bf00      	nop
 800e9ce:	e7fe      	b.n	800e9ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00c      	beq.n	800e9f2 <vPortFree+0x6a>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	b672      	cpsid	i
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	b662      	cpsie	i
 800e9ec:	60bb      	str	r3, [r7, #8]
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <vPortFree+0xb4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d019      	beq.n	800ea34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d115      	bne.n	800ea34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <vPortFree+0xb4>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	43db      	mvns	r3, r3
 800ea12:	401a      	ands	r2, r3
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea18:	f7fe fb12 	bl	800d040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <vPortFree+0xb8>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4413      	add	r3, r2
 800ea26:	4a06      	ldr	r2, [pc, #24]	; (800ea40 <vPortFree+0xb8>)
 800ea28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea2a:	6938      	ldr	r0, [r7, #16]
 800ea2c:	f000 f86c 	bl	800eb08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ea30:	f7fe fb14 	bl	800d05c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea34:	bf00      	nop
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20009200 	.word	0x20009200
 800ea40:	200091f8 	.word	0x200091f8

0800ea44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea50:	4b27      	ldr	r3, [pc, #156]	; (800eaf0 <prvHeapInit+0xac>)
 800ea52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f003 0307 	and.w	r3, r3, #7
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00c      	beq.n	800ea78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3307      	adds	r3, #7
 800ea62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f023 0307 	bic.w	r3, r3, #7
 800ea6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	4a1f      	ldr	r2, [pc, #124]	; (800eaf0 <prvHeapInit+0xac>)
 800ea74:	4413      	add	r3, r2
 800ea76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea7c:	4a1d      	ldr	r2, [pc, #116]	; (800eaf4 <prvHeapInit+0xb0>)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea82:	4b1c      	ldr	r3, [pc, #112]	; (800eaf4 <prvHeapInit+0xb0>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea90:	2208      	movs	r2, #8
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	1a9b      	subs	r3, r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f023 0307 	bic.w	r3, r3, #7
 800ea9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a15      	ldr	r2, [pc, #84]	; (800eaf8 <prvHeapInit+0xb4>)
 800eaa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eaa6:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <prvHeapInit+0xb4>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eaae:	4b12      	ldr	r3, [pc, #72]	; (800eaf8 <prvHeapInit+0xb4>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eac4:	4b0c      	ldr	r3, [pc, #48]	; (800eaf8 <prvHeapInit+0xb4>)
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	4a0a      	ldr	r2, [pc, #40]	; (800eafc <prvHeapInit+0xb8>)
 800ead2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	4a09      	ldr	r2, [pc, #36]	; (800eb00 <prvHeapInit+0xbc>)
 800eada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eadc:	4b09      	ldr	r3, [pc, #36]	; (800eb04 <prvHeapInit+0xc0>)
 800eade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eae2:	601a      	str	r2, [r3, #0]
}
 800eae4:	bf00      	nop
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	200055ec 	.word	0x200055ec
 800eaf4:	200091ec 	.word	0x200091ec
 800eaf8:	200091f4 	.word	0x200091f4
 800eafc:	200091fc 	.word	0x200091fc
 800eb00:	200091f8 	.word	0x200091f8
 800eb04:	20009200 	.word	0x20009200

0800eb08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb10:	4b28      	ldr	r3, [pc, #160]	; (800ebb4 <prvInsertBlockIntoFreeList+0xac>)
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	e002      	b.n	800eb1c <prvInsertBlockIntoFreeList+0x14>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d8f7      	bhi.n	800eb16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	4413      	add	r3, r2
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d108      	bne.n	800eb4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	441a      	add	r2, r3
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	441a      	add	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d118      	bne.n	800eb90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	4b15      	ldr	r3, [pc, #84]	; (800ebb8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d00d      	beq.n	800eb86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	441a      	add	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	e008      	b.n	800eb98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb86:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	601a      	str	r2, [r3, #0]
 800eb8e:	e003      	b.n	800eb98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d002      	beq.n	800eba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eba6:	bf00      	nop
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	200091ec 	.word	0x200091ec
 800ebb8:	200091f4 	.word	0x200091f4

0800ebbc <srand>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4b10      	ldr	r3, [pc, #64]	; (800ec00 <srand+0x44>)
 800ebc0:	681d      	ldr	r5, [r3, #0]
 800ebc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	b9b3      	cbnz	r3, 800ebf6 <srand+0x3a>
 800ebc8:	2018      	movs	r0, #24
 800ebca:	f000 fab3 	bl	800f134 <malloc>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	6328      	str	r0, [r5, #48]	; 0x30
 800ebd2:	b920      	cbnz	r0, 800ebde <srand+0x22>
 800ebd4:	4b0b      	ldr	r3, [pc, #44]	; (800ec04 <srand+0x48>)
 800ebd6:	480c      	ldr	r0, [pc, #48]	; (800ec08 <srand+0x4c>)
 800ebd8:	2146      	movs	r1, #70	; 0x46
 800ebda:	f000 fa41 	bl	800f060 <__assert_func>
 800ebde:	490b      	ldr	r1, [pc, #44]	; (800ec0c <srand+0x50>)
 800ebe0:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <srand+0x54>)
 800ebe2:	e9c0 1300 	strd	r1, r3, [r0]
 800ebe6:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <srand+0x58>)
 800ebe8:	6083      	str	r3, [r0, #8]
 800ebea:	230b      	movs	r3, #11
 800ebec:	8183      	strh	r3, [r0, #12]
 800ebee:	2100      	movs	r1, #0
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ebf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	611c      	str	r4, [r3, #16]
 800ebfc:	615a      	str	r2, [r3, #20]
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	200000a4 	.word	0x200000a4
 800ec04:	080f67f0 	.word	0x080f67f0
 800ec08:	080f6807 	.word	0x080f6807
 800ec0c:	abcd330e 	.word	0xabcd330e
 800ec10:	e66d1234 	.word	0xe66d1234
 800ec14:	0005deec 	.word	0x0005deec

0800ec18 <rand>:
 800ec18:	4b16      	ldr	r3, [pc, #88]	; (800ec74 <rand+0x5c>)
 800ec1a:	b510      	push	{r4, lr}
 800ec1c:	681c      	ldr	r4, [r3, #0]
 800ec1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ec20:	b9b3      	cbnz	r3, 800ec50 <rand+0x38>
 800ec22:	2018      	movs	r0, #24
 800ec24:	f000 fa86 	bl	800f134 <malloc>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	6320      	str	r0, [r4, #48]	; 0x30
 800ec2c:	b920      	cbnz	r0, 800ec38 <rand+0x20>
 800ec2e:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <rand+0x60>)
 800ec30:	4812      	ldr	r0, [pc, #72]	; (800ec7c <rand+0x64>)
 800ec32:	2152      	movs	r1, #82	; 0x52
 800ec34:	f000 fa14 	bl	800f060 <__assert_func>
 800ec38:	4911      	ldr	r1, [pc, #68]	; (800ec80 <rand+0x68>)
 800ec3a:	4b12      	ldr	r3, [pc, #72]	; (800ec84 <rand+0x6c>)
 800ec3c:	e9c0 1300 	strd	r1, r3, [r0]
 800ec40:	4b11      	ldr	r3, [pc, #68]	; (800ec88 <rand+0x70>)
 800ec42:	6083      	str	r3, [r0, #8]
 800ec44:	230b      	movs	r3, #11
 800ec46:	8183      	strh	r3, [r0, #12]
 800ec48:	2100      	movs	r1, #0
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ec50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ec52:	480e      	ldr	r0, [pc, #56]	; (800ec8c <rand+0x74>)
 800ec54:	690b      	ldr	r3, [r1, #16]
 800ec56:	694c      	ldr	r4, [r1, #20]
 800ec58:	4a0d      	ldr	r2, [pc, #52]	; (800ec90 <rand+0x78>)
 800ec5a:	4358      	muls	r0, r3
 800ec5c:	fb02 0004 	mla	r0, r2, r4, r0
 800ec60:	fba3 3202 	umull	r3, r2, r3, r2
 800ec64:	3301      	adds	r3, #1
 800ec66:	eb40 0002 	adc.w	r0, r0, r2
 800ec6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ec6e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ec72:	bd10      	pop	{r4, pc}
 800ec74:	200000a4 	.word	0x200000a4
 800ec78:	080f67f0 	.word	0x080f67f0
 800ec7c:	080f6807 	.word	0x080f6807
 800ec80:	abcd330e 	.word	0xabcd330e
 800ec84:	e66d1234 	.word	0xe66d1234
 800ec88:	0005deec 	.word	0x0005deec
 800ec8c:	5851f42d 	.word	0x5851f42d
 800ec90:	4c957f2d 	.word	0x4c957f2d

0800ec94 <std>:
 800ec94:	2300      	movs	r3, #0
 800ec96:	b510      	push	{r4, lr}
 800ec98:	4604      	mov	r4, r0
 800ec9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eca2:	6083      	str	r3, [r0, #8]
 800eca4:	8181      	strh	r1, [r0, #12]
 800eca6:	6643      	str	r3, [r0, #100]	; 0x64
 800eca8:	81c2      	strh	r2, [r0, #14]
 800ecaa:	6183      	str	r3, [r0, #24]
 800ecac:	4619      	mov	r1, r3
 800ecae:	2208      	movs	r2, #8
 800ecb0:	305c      	adds	r0, #92	; 0x5c
 800ecb2:	f000 f8f4 	bl	800ee9e <memset>
 800ecb6:	4b0d      	ldr	r3, [pc, #52]	; (800ecec <std+0x58>)
 800ecb8:	6263      	str	r3, [r4, #36]	; 0x24
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <std+0x5c>)
 800ecbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	; (800ecf4 <std+0x60>)
 800ecc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecc2:	4b0d      	ldr	r3, [pc, #52]	; (800ecf8 <std+0x64>)
 800ecc4:	6323      	str	r3, [r4, #48]	; 0x30
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <std+0x68>)
 800ecc8:	6224      	str	r4, [r4, #32]
 800ecca:	429c      	cmp	r4, r3
 800eccc:	d006      	beq.n	800ecdc <std+0x48>
 800ecce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ecd2:	4294      	cmp	r4, r2
 800ecd4:	d002      	beq.n	800ecdc <std+0x48>
 800ecd6:	33d0      	adds	r3, #208	; 0xd0
 800ecd8:	429c      	cmp	r4, r3
 800ecda:	d105      	bne.n	800ece8 <std+0x54>
 800ecdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ece0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece4:	f000 b9aa 	b.w	800f03c <__retarget_lock_init_recursive>
 800ece8:	bd10      	pop	{r4, pc}
 800ecea:	bf00      	nop
 800ecec:	0800ee19 	.word	0x0800ee19
 800ecf0:	0800ee3b 	.word	0x0800ee3b
 800ecf4:	0800ee73 	.word	0x0800ee73
 800ecf8:	0800ee97 	.word	0x0800ee97
 800ecfc:	20009204 	.word	0x20009204

0800ed00 <stdio_exit_handler>:
 800ed00:	4a02      	ldr	r2, [pc, #8]	; (800ed0c <stdio_exit_handler+0xc>)
 800ed02:	4903      	ldr	r1, [pc, #12]	; (800ed10 <stdio_exit_handler+0x10>)
 800ed04:	4803      	ldr	r0, [pc, #12]	; (800ed14 <stdio_exit_handler+0x14>)
 800ed06:	f000 b869 	b.w	800eddc <_fwalk_sglue>
 800ed0a:	bf00      	nop
 800ed0c:	2000004c 	.word	0x2000004c
 800ed10:	0800f3a9 	.word	0x0800f3a9
 800ed14:	20000058 	.word	0x20000058

0800ed18 <cleanup_stdio>:
 800ed18:	6841      	ldr	r1, [r0, #4]
 800ed1a:	4b0c      	ldr	r3, [pc, #48]	; (800ed4c <cleanup_stdio+0x34>)
 800ed1c:	4299      	cmp	r1, r3
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	4604      	mov	r4, r0
 800ed22:	d001      	beq.n	800ed28 <cleanup_stdio+0x10>
 800ed24:	f000 fb40 	bl	800f3a8 <_fflush_r>
 800ed28:	68a1      	ldr	r1, [r4, #8]
 800ed2a:	4b09      	ldr	r3, [pc, #36]	; (800ed50 <cleanup_stdio+0x38>)
 800ed2c:	4299      	cmp	r1, r3
 800ed2e:	d002      	beq.n	800ed36 <cleanup_stdio+0x1e>
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fb39 	bl	800f3a8 <_fflush_r>
 800ed36:	68e1      	ldr	r1, [r4, #12]
 800ed38:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <cleanup_stdio+0x3c>)
 800ed3a:	4299      	cmp	r1, r3
 800ed3c:	d004      	beq.n	800ed48 <cleanup_stdio+0x30>
 800ed3e:	4620      	mov	r0, r4
 800ed40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed44:	f000 bb30 	b.w	800f3a8 <_fflush_r>
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20009204 	.word	0x20009204
 800ed50:	2000926c 	.word	0x2000926c
 800ed54:	200092d4 	.word	0x200092d4

0800ed58 <global_stdio_init.part.0>:
 800ed58:	b510      	push	{r4, lr}
 800ed5a:	4b0b      	ldr	r3, [pc, #44]	; (800ed88 <global_stdio_init.part.0+0x30>)
 800ed5c:	4c0b      	ldr	r4, [pc, #44]	; (800ed8c <global_stdio_init.part.0+0x34>)
 800ed5e:	4a0c      	ldr	r2, [pc, #48]	; (800ed90 <global_stdio_init.part.0+0x38>)
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	4620      	mov	r0, r4
 800ed64:	2200      	movs	r2, #0
 800ed66:	2104      	movs	r1, #4
 800ed68:	f7ff ff94 	bl	800ec94 <std>
 800ed6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ed70:	2201      	movs	r2, #1
 800ed72:	2109      	movs	r1, #9
 800ed74:	f7ff ff8e 	bl	800ec94 <std>
 800ed78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed82:	2112      	movs	r1, #18
 800ed84:	f7ff bf86 	b.w	800ec94 <std>
 800ed88:	2000933c 	.word	0x2000933c
 800ed8c:	20009204 	.word	0x20009204
 800ed90:	0800ed01 	.word	0x0800ed01

0800ed94 <__sfp_lock_acquire>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__sfp_lock_acquire+0x8>)
 800ed96:	f000 b952 	b.w	800f03e <__retarget_lock_acquire_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	20009345 	.word	0x20009345

0800eda0 <__sfp_lock_release>:
 800eda0:	4801      	ldr	r0, [pc, #4]	; (800eda8 <__sfp_lock_release+0x8>)
 800eda2:	f000 b94d 	b.w	800f040 <__retarget_lock_release_recursive>
 800eda6:	bf00      	nop
 800eda8:	20009345 	.word	0x20009345

0800edac <__sinit>:
 800edac:	b510      	push	{r4, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	f7ff fff0 	bl	800ed94 <__sfp_lock_acquire>
 800edb4:	6a23      	ldr	r3, [r4, #32]
 800edb6:	b11b      	cbz	r3, 800edc0 <__sinit+0x14>
 800edb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edbc:	f7ff bff0 	b.w	800eda0 <__sfp_lock_release>
 800edc0:	4b04      	ldr	r3, [pc, #16]	; (800edd4 <__sinit+0x28>)
 800edc2:	6223      	str	r3, [r4, #32]
 800edc4:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <__sinit+0x2c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f5      	bne.n	800edb8 <__sinit+0xc>
 800edcc:	f7ff ffc4 	bl	800ed58 <global_stdio_init.part.0>
 800edd0:	e7f2      	b.n	800edb8 <__sinit+0xc>
 800edd2:	bf00      	nop
 800edd4:	0800ed19 	.word	0x0800ed19
 800edd8:	2000933c 	.word	0x2000933c

0800eddc <_fwalk_sglue>:
 800eddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede0:	4607      	mov	r7, r0
 800ede2:	4688      	mov	r8, r1
 800ede4:	4614      	mov	r4, r2
 800ede6:	2600      	movs	r6, #0
 800ede8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edec:	f1b9 0901 	subs.w	r9, r9, #1
 800edf0:	d505      	bpl.n	800edfe <_fwalk_sglue+0x22>
 800edf2:	6824      	ldr	r4, [r4, #0]
 800edf4:	2c00      	cmp	r4, #0
 800edf6:	d1f7      	bne.n	800ede8 <_fwalk_sglue+0xc>
 800edf8:	4630      	mov	r0, r6
 800edfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d907      	bls.n	800ee14 <_fwalk_sglue+0x38>
 800ee04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	d003      	beq.n	800ee14 <_fwalk_sglue+0x38>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4638      	mov	r0, r7
 800ee10:	47c0      	blx	r8
 800ee12:	4306      	orrs	r6, r0
 800ee14:	3568      	adds	r5, #104	; 0x68
 800ee16:	e7e9      	b.n	800edec <_fwalk_sglue+0x10>

0800ee18 <__sread>:
 800ee18:	b510      	push	{r4, lr}
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee20:	f000 f8be 	bl	800efa0 <_read_r>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	bfab      	itete	ge
 800ee28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee2c:	181b      	addge	r3, r3, r0
 800ee2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee32:	bfac      	ite	ge
 800ee34:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee36:	81a3      	strhlt	r3, [r4, #12]
 800ee38:	bd10      	pop	{r4, pc}

0800ee3a <__swrite>:
 800ee3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee3e:	461f      	mov	r7, r3
 800ee40:	898b      	ldrh	r3, [r1, #12]
 800ee42:	05db      	lsls	r3, r3, #23
 800ee44:	4605      	mov	r5, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	4616      	mov	r6, r2
 800ee4a:	d505      	bpl.n	800ee58 <__swrite+0x1e>
 800ee4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee50:	2302      	movs	r3, #2
 800ee52:	2200      	movs	r2, #0
 800ee54:	f000 f892 	bl	800ef7c <_lseek_r>
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee62:	81a3      	strh	r3, [r4, #12]
 800ee64:	4632      	mov	r2, r6
 800ee66:	463b      	mov	r3, r7
 800ee68:	4628      	mov	r0, r5
 800ee6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	f000 b8a9 	b.w	800efc4 <_write_r>

0800ee72 <__sseek>:
 800ee72:	b510      	push	{r4, lr}
 800ee74:	460c      	mov	r4, r1
 800ee76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee7a:	f000 f87f 	bl	800ef7c <_lseek_r>
 800ee7e:	1c43      	adds	r3, r0, #1
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	bf15      	itete	ne
 800ee84:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee8e:	81a3      	strheq	r3, [r4, #12]
 800ee90:	bf18      	it	ne
 800ee92:	81a3      	strhne	r3, [r4, #12]
 800ee94:	bd10      	pop	{r4, pc}

0800ee96 <__sclose>:
 800ee96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee9a:	f000 b809 	b.w	800eeb0 <_close_r>

0800ee9e <memset>:
 800ee9e:	4402      	add	r2, r0
 800eea0:	4603      	mov	r3, r0
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d100      	bne.n	800eea8 <memset+0xa>
 800eea6:	4770      	bx	lr
 800eea8:	f803 1b01 	strb.w	r1, [r3], #1
 800eeac:	e7f9      	b.n	800eea2 <memset+0x4>
	...

0800eeb0 <_close_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d06      	ldr	r5, [pc, #24]	; (800eecc <_close_r+0x1c>)
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4608      	mov	r0, r1
 800eeba:	602b      	str	r3, [r5, #0]
 800eebc:	f7f5 fdcd 	bl	8004a5a <_close>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_close_r+0x1a>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_close_r+0x1a>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	20009340 	.word	0x20009340

0800eed0 <_reclaim_reent>:
 800eed0:	4b29      	ldr	r3, [pc, #164]	; (800ef78 <_reclaim_reent+0xa8>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4283      	cmp	r3, r0
 800eed6:	b570      	push	{r4, r5, r6, lr}
 800eed8:	4604      	mov	r4, r0
 800eeda:	d04b      	beq.n	800ef74 <_reclaim_reent+0xa4>
 800eedc:	69c3      	ldr	r3, [r0, #28]
 800eede:	b143      	cbz	r3, 800eef2 <_reclaim_reent+0x22>
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d144      	bne.n	800ef70 <_reclaim_reent+0xa0>
 800eee6:	69e3      	ldr	r3, [r4, #28]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	b111      	cbz	r1, 800eef2 <_reclaim_reent+0x22>
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 f8d5 	bl	800f09c <_free_r>
 800eef2:	6961      	ldr	r1, [r4, #20]
 800eef4:	b111      	cbz	r1, 800eefc <_reclaim_reent+0x2c>
 800eef6:	4620      	mov	r0, r4
 800eef8:	f000 f8d0 	bl	800f09c <_free_r>
 800eefc:	69e1      	ldr	r1, [r4, #28]
 800eefe:	b111      	cbz	r1, 800ef06 <_reclaim_reent+0x36>
 800ef00:	4620      	mov	r0, r4
 800ef02:	f000 f8cb 	bl	800f09c <_free_r>
 800ef06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ef08:	b111      	cbz	r1, 800ef10 <_reclaim_reent+0x40>
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 f8c6 	bl	800f09c <_free_r>
 800ef10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef12:	b111      	cbz	r1, 800ef1a <_reclaim_reent+0x4a>
 800ef14:	4620      	mov	r0, r4
 800ef16:	f000 f8c1 	bl	800f09c <_free_r>
 800ef1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef1c:	b111      	cbz	r1, 800ef24 <_reclaim_reent+0x54>
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 f8bc 	bl	800f09c <_free_r>
 800ef24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef26:	b111      	cbz	r1, 800ef2e <_reclaim_reent+0x5e>
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 f8b7 	bl	800f09c <_free_r>
 800ef2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef30:	b111      	cbz	r1, 800ef38 <_reclaim_reent+0x68>
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 f8b2 	bl	800f09c <_free_r>
 800ef38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ef3a:	b111      	cbz	r1, 800ef42 <_reclaim_reent+0x72>
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f000 f8ad 	bl	800f09c <_free_r>
 800ef42:	6a23      	ldr	r3, [r4, #32]
 800ef44:	b1b3      	cbz	r3, 800ef74 <_reclaim_reent+0xa4>
 800ef46:	4620      	mov	r0, r4
 800ef48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef4c:	4718      	bx	r3
 800ef4e:	5949      	ldr	r1, [r1, r5]
 800ef50:	b941      	cbnz	r1, 800ef64 <_reclaim_reent+0x94>
 800ef52:	3504      	adds	r5, #4
 800ef54:	69e3      	ldr	r3, [r4, #28]
 800ef56:	2d80      	cmp	r5, #128	; 0x80
 800ef58:	68d9      	ldr	r1, [r3, #12]
 800ef5a:	d1f8      	bne.n	800ef4e <_reclaim_reent+0x7e>
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f000 f89d 	bl	800f09c <_free_r>
 800ef62:	e7c0      	b.n	800eee6 <_reclaim_reent+0x16>
 800ef64:	680e      	ldr	r6, [r1, #0]
 800ef66:	4620      	mov	r0, r4
 800ef68:	f000 f898 	bl	800f09c <_free_r>
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	e7ef      	b.n	800ef50 <_reclaim_reent+0x80>
 800ef70:	2500      	movs	r5, #0
 800ef72:	e7ef      	b.n	800ef54 <_reclaim_reent+0x84>
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
 800ef76:	bf00      	nop
 800ef78:	200000a4 	.word	0x200000a4

0800ef7c <_lseek_r>:
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	4d07      	ldr	r5, [pc, #28]	; (800ef9c <_lseek_r+0x20>)
 800ef80:	4604      	mov	r4, r0
 800ef82:	4608      	mov	r0, r1
 800ef84:	4611      	mov	r1, r2
 800ef86:	2200      	movs	r2, #0
 800ef88:	602a      	str	r2, [r5, #0]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	f7f5 fd8c 	bl	8004aa8 <_lseek>
 800ef90:	1c43      	adds	r3, r0, #1
 800ef92:	d102      	bne.n	800ef9a <_lseek_r+0x1e>
 800ef94:	682b      	ldr	r3, [r5, #0]
 800ef96:	b103      	cbz	r3, 800ef9a <_lseek_r+0x1e>
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	bd38      	pop	{r3, r4, r5, pc}
 800ef9c:	20009340 	.word	0x20009340

0800efa0 <_read_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4d07      	ldr	r5, [pc, #28]	; (800efc0 <_read_r+0x20>)
 800efa4:	4604      	mov	r4, r0
 800efa6:	4608      	mov	r0, r1
 800efa8:	4611      	mov	r1, r2
 800efaa:	2200      	movs	r2, #0
 800efac:	602a      	str	r2, [r5, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	f7f5 fd1a 	bl	80049e8 <_read>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d102      	bne.n	800efbe <_read_r+0x1e>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	b103      	cbz	r3, 800efbe <_read_r+0x1e>
 800efbc:	6023      	str	r3, [r4, #0]
 800efbe:	bd38      	pop	{r3, r4, r5, pc}
 800efc0:	20009340 	.word	0x20009340

0800efc4 <_write_r>:
 800efc4:	b538      	push	{r3, r4, r5, lr}
 800efc6:	4d07      	ldr	r5, [pc, #28]	; (800efe4 <_write_r+0x20>)
 800efc8:	4604      	mov	r4, r0
 800efca:	4608      	mov	r0, r1
 800efcc:	4611      	mov	r1, r2
 800efce:	2200      	movs	r2, #0
 800efd0:	602a      	str	r2, [r5, #0]
 800efd2:	461a      	mov	r2, r3
 800efd4:	f7f5 fd25 	bl	8004a22 <_write>
 800efd8:	1c43      	adds	r3, r0, #1
 800efda:	d102      	bne.n	800efe2 <_write_r+0x1e>
 800efdc:	682b      	ldr	r3, [r5, #0]
 800efde:	b103      	cbz	r3, 800efe2 <_write_r+0x1e>
 800efe0:	6023      	str	r3, [r4, #0]
 800efe2:	bd38      	pop	{r3, r4, r5, pc}
 800efe4:	20009340 	.word	0x20009340

0800efe8 <__errno>:
 800efe8:	4b01      	ldr	r3, [pc, #4]	; (800eff0 <__errno+0x8>)
 800efea:	6818      	ldr	r0, [r3, #0]
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	200000a4 	.word	0x200000a4

0800eff4 <__libc_init_array>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	4d0d      	ldr	r5, [pc, #52]	; (800f02c <__libc_init_array+0x38>)
 800eff8:	4c0d      	ldr	r4, [pc, #52]	; (800f030 <__libc_init_array+0x3c>)
 800effa:	1b64      	subs	r4, r4, r5
 800effc:	10a4      	asrs	r4, r4, #2
 800effe:	2600      	movs	r6, #0
 800f000:	42a6      	cmp	r6, r4
 800f002:	d109      	bne.n	800f018 <__libc_init_array+0x24>
 800f004:	4d0b      	ldr	r5, [pc, #44]	; (800f034 <__libc_init_array+0x40>)
 800f006:	4c0c      	ldr	r4, [pc, #48]	; (800f038 <__libc_init_array+0x44>)
 800f008:	f001 f978 	bl	80102fc <_init>
 800f00c:	1b64      	subs	r4, r4, r5
 800f00e:	10a4      	asrs	r4, r4, #2
 800f010:	2600      	movs	r6, #0
 800f012:	42a6      	cmp	r6, r4
 800f014:	d105      	bne.n	800f022 <__libc_init_array+0x2e>
 800f016:	bd70      	pop	{r4, r5, r6, pc}
 800f018:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01c:	4798      	blx	r3
 800f01e:	3601      	adds	r6, #1
 800f020:	e7ee      	b.n	800f000 <__libc_init_array+0xc>
 800f022:	f855 3b04 	ldr.w	r3, [r5], #4
 800f026:	4798      	blx	r3
 800f028:	3601      	adds	r6, #1
 800f02a:	e7f2      	b.n	800f012 <__libc_init_array+0x1e>
 800f02c:	080f8190 	.word	0x080f8190
 800f030:	080f8190 	.word	0x080f8190
 800f034:	080f8190 	.word	0x080f8190
 800f038:	080f8194 	.word	0x080f8194

0800f03c <__retarget_lock_init_recursive>:
 800f03c:	4770      	bx	lr

0800f03e <__retarget_lock_acquire_recursive>:
 800f03e:	4770      	bx	lr

0800f040 <__retarget_lock_release_recursive>:
 800f040:	4770      	bx	lr

0800f042 <memcpy>:
 800f042:	440a      	add	r2, r1
 800f044:	4291      	cmp	r1, r2
 800f046:	f100 33ff 	add.w	r3, r0, #4294967295
 800f04a:	d100      	bne.n	800f04e <memcpy+0xc>
 800f04c:	4770      	bx	lr
 800f04e:	b510      	push	{r4, lr}
 800f050:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f054:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f058:	4291      	cmp	r1, r2
 800f05a:	d1f9      	bne.n	800f050 <memcpy+0xe>
 800f05c:	bd10      	pop	{r4, pc}
	...

0800f060 <__assert_func>:
 800f060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f062:	4614      	mov	r4, r2
 800f064:	461a      	mov	r2, r3
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <__assert_func+0x2c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4605      	mov	r5, r0
 800f06c:	68d8      	ldr	r0, [r3, #12]
 800f06e:	b14c      	cbz	r4, 800f084 <__assert_func+0x24>
 800f070:	4b07      	ldr	r3, [pc, #28]	; (800f090 <__assert_func+0x30>)
 800f072:	9100      	str	r1, [sp, #0]
 800f074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f078:	4906      	ldr	r1, [pc, #24]	; (800f094 <__assert_func+0x34>)
 800f07a:	462b      	mov	r3, r5
 800f07c:	f000 f9bc 	bl	800f3f8 <fiprintf>
 800f080:	f000 f9dc 	bl	800f43c <abort>
 800f084:	4b04      	ldr	r3, [pc, #16]	; (800f098 <__assert_func+0x38>)
 800f086:	461c      	mov	r4, r3
 800f088:	e7f3      	b.n	800f072 <__assert_func+0x12>
 800f08a:	bf00      	nop
 800f08c:	200000a4 	.word	0x200000a4
 800f090:	080f685f 	.word	0x080f685f
 800f094:	080f686c 	.word	0x080f686c
 800f098:	080f689a 	.word	0x080f689a

0800f09c <_free_r>:
 800f09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f09e:	2900      	cmp	r1, #0
 800f0a0:	d044      	beq.n	800f12c <_free_r+0x90>
 800f0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0a6:	9001      	str	r0, [sp, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f0ae:	bfb8      	it	lt
 800f0b0:	18e4      	addlt	r4, r4, r3
 800f0b2:	f000 f8e7 	bl	800f284 <__malloc_lock>
 800f0b6:	4a1e      	ldr	r2, [pc, #120]	; (800f130 <_free_r+0x94>)
 800f0b8:	9801      	ldr	r0, [sp, #4]
 800f0ba:	6813      	ldr	r3, [r2, #0]
 800f0bc:	b933      	cbnz	r3, 800f0cc <_free_r+0x30>
 800f0be:	6063      	str	r3, [r4, #4]
 800f0c0:	6014      	str	r4, [r2, #0]
 800f0c2:	b003      	add	sp, #12
 800f0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0c8:	f000 b8e2 	b.w	800f290 <__malloc_unlock>
 800f0cc:	42a3      	cmp	r3, r4
 800f0ce:	d908      	bls.n	800f0e2 <_free_r+0x46>
 800f0d0:	6825      	ldr	r5, [r4, #0]
 800f0d2:	1961      	adds	r1, r4, r5
 800f0d4:	428b      	cmp	r3, r1
 800f0d6:	bf01      	itttt	eq
 800f0d8:	6819      	ldreq	r1, [r3, #0]
 800f0da:	685b      	ldreq	r3, [r3, #4]
 800f0dc:	1949      	addeq	r1, r1, r5
 800f0de:	6021      	streq	r1, [r4, #0]
 800f0e0:	e7ed      	b.n	800f0be <_free_r+0x22>
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	b10b      	cbz	r3, 800f0ec <_free_r+0x50>
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	d9fa      	bls.n	800f0e2 <_free_r+0x46>
 800f0ec:	6811      	ldr	r1, [r2, #0]
 800f0ee:	1855      	adds	r5, r2, r1
 800f0f0:	42a5      	cmp	r5, r4
 800f0f2:	d10b      	bne.n	800f10c <_free_r+0x70>
 800f0f4:	6824      	ldr	r4, [r4, #0]
 800f0f6:	4421      	add	r1, r4
 800f0f8:	1854      	adds	r4, r2, r1
 800f0fa:	42a3      	cmp	r3, r4
 800f0fc:	6011      	str	r1, [r2, #0]
 800f0fe:	d1e0      	bne.n	800f0c2 <_free_r+0x26>
 800f100:	681c      	ldr	r4, [r3, #0]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	6053      	str	r3, [r2, #4]
 800f106:	440c      	add	r4, r1
 800f108:	6014      	str	r4, [r2, #0]
 800f10a:	e7da      	b.n	800f0c2 <_free_r+0x26>
 800f10c:	d902      	bls.n	800f114 <_free_r+0x78>
 800f10e:	230c      	movs	r3, #12
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	e7d6      	b.n	800f0c2 <_free_r+0x26>
 800f114:	6825      	ldr	r5, [r4, #0]
 800f116:	1961      	adds	r1, r4, r5
 800f118:	428b      	cmp	r3, r1
 800f11a:	bf04      	itt	eq
 800f11c:	6819      	ldreq	r1, [r3, #0]
 800f11e:	685b      	ldreq	r3, [r3, #4]
 800f120:	6063      	str	r3, [r4, #4]
 800f122:	bf04      	itt	eq
 800f124:	1949      	addeq	r1, r1, r5
 800f126:	6021      	streq	r1, [r4, #0]
 800f128:	6054      	str	r4, [r2, #4]
 800f12a:	e7ca      	b.n	800f0c2 <_free_r+0x26>
 800f12c:	b003      	add	sp, #12
 800f12e:	bd30      	pop	{r4, r5, pc}
 800f130:	20009348 	.word	0x20009348

0800f134 <malloc>:
 800f134:	4b02      	ldr	r3, [pc, #8]	; (800f140 <malloc+0xc>)
 800f136:	4601      	mov	r1, r0
 800f138:	6818      	ldr	r0, [r3, #0]
 800f13a:	f000 b823 	b.w	800f184 <_malloc_r>
 800f13e:	bf00      	nop
 800f140:	200000a4 	.word	0x200000a4

0800f144 <sbrk_aligned>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	4e0e      	ldr	r6, [pc, #56]	; (800f180 <sbrk_aligned+0x3c>)
 800f148:	460c      	mov	r4, r1
 800f14a:	6831      	ldr	r1, [r6, #0]
 800f14c:	4605      	mov	r5, r0
 800f14e:	b911      	cbnz	r1, 800f156 <sbrk_aligned+0x12>
 800f150:	f000 f964 	bl	800f41c <_sbrk_r>
 800f154:	6030      	str	r0, [r6, #0]
 800f156:	4621      	mov	r1, r4
 800f158:	4628      	mov	r0, r5
 800f15a:	f000 f95f 	bl	800f41c <_sbrk_r>
 800f15e:	1c43      	adds	r3, r0, #1
 800f160:	d00a      	beq.n	800f178 <sbrk_aligned+0x34>
 800f162:	1cc4      	adds	r4, r0, #3
 800f164:	f024 0403 	bic.w	r4, r4, #3
 800f168:	42a0      	cmp	r0, r4
 800f16a:	d007      	beq.n	800f17c <sbrk_aligned+0x38>
 800f16c:	1a21      	subs	r1, r4, r0
 800f16e:	4628      	mov	r0, r5
 800f170:	f000 f954 	bl	800f41c <_sbrk_r>
 800f174:	3001      	adds	r0, #1
 800f176:	d101      	bne.n	800f17c <sbrk_aligned+0x38>
 800f178:	f04f 34ff 	mov.w	r4, #4294967295
 800f17c:	4620      	mov	r0, r4
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
 800f180:	2000934c 	.word	0x2000934c

0800f184 <_malloc_r>:
 800f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f188:	1ccd      	adds	r5, r1, #3
 800f18a:	f025 0503 	bic.w	r5, r5, #3
 800f18e:	3508      	adds	r5, #8
 800f190:	2d0c      	cmp	r5, #12
 800f192:	bf38      	it	cc
 800f194:	250c      	movcc	r5, #12
 800f196:	2d00      	cmp	r5, #0
 800f198:	4607      	mov	r7, r0
 800f19a:	db01      	blt.n	800f1a0 <_malloc_r+0x1c>
 800f19c:	42a9      	cmp	r1, r5
 800f19e:	d905      	bls.n	800f1ac <_malloc_r+0x28>
 800f1a0:	230c      	movs	r3, #12
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	2600      	movs	r6, #0
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f280 <_malloc_r+0xfc>
 800f1b0:	f000 f868 	bl	800f284 <__malloc_lock>
 800f1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	bb5c      	cbnz	r4, 800f214 <_malloc_r+0x90>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4638      	mov	r0, r7
 800f1c0:	f7ff ffc0 	bl	800f144 <sbrk_aligned>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	d155      	bne.n	800f276 <_malloc_r+0xf2>
 800f1ca:	f8d8 4000 	ldr.w	r4, [r8]
 800f1ce:	4626      	mov	r6, r4
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	d145      	bne.n	800f260 <_malloc_r+0xdc>
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	d048      	beq.n	800f26a <_malloc_r+0xe6>
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4638      	mov	r0, r7
 800f1de:	eb04 0903 	add.w	r9, r4, r3
 800f1e2:	f000 f91b 	bl	800f41c <_sbrk_r>
 800f1e6:	4581      	cmp	r9, r0
 800f1e8:	d13f      	bne.n	800f26a <_malloc_r+0xe6>
 800f1ea:	6821      	ldr	r1, [r4, #0]
 800f1ec:	1a6d      	subs	r5, r5, r1
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	f7ff ffa7 	bl	800f144 <sbrk_aligned>
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	d037      	beq.n	800f26a <_malloc_r+0xe6>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	442b      	add	r3, r5
 800f1fe:	6023      	str	r3, [r4, #0]
 800f200:	f8d8 3000 	ldr.w	r3, [r8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d038      	beq.n	800f27a <_malloc_r+0xf6>
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	42a2      	cmp	r2, r4
 800f20c:	d12b      	bne.n	800f266 <_malloc_r+0xe2>
 800f20e:	2200      	movs	r2, #0
 800f210:	605a      	str	r2, [r3, #4]
 800f212:	e00f      	b.n	800f234 <_malloc_r+0xb0>
 800f214:	6822      	ldr	r2, [r4, #0]
 800f216:	1b52      	subs	r2, r2, r5
 800f218:	d41f      	bmi.n	800f25a <_malloc_r+0xd6>
 800f21a:	2a0b      	cmp	r2, #11
 800f21c:	d917      	bls.n	800f24e <_malloc_r+0xca>
 800f21e:	1961      	adds	r1, r4, r5
 800f220:	42a3      	cmp	r3, r4
 800f222:	6025      	str	r5, [r4, #0]
 800f224:	bf18      	it	ne
 800f226:	6059      	strne	r1, [r3, #4]
 800f228:	6863      	ldr	r3, [r4, #4]
 800f22a:	bf08      	it	eq
 800f22c:	f8c8 1000 	streq.w	r1, [r8]
 800f230:	5162      	str	r2, [r4, r5]
 800f232:	604b      	str	r3, [r1, #4]
 800f234:	4638      	mov	r0, r7
 800f236:	f104 060b 	add.w	r6, r4, #11
 800f23a:	f000 f829 	bl	800f290 <__malloc_unlock>
 800f23e:	f026 0607 	bic.w	r6, r6, #7
 800f242:	1d23      	adds	r3, r4, #4
 800f244:	1af2      	subs	r2, r6, r3
 800f246:	d0ae      	beq.n	800f1a6 <_malloc_r+0x22>
 800f248:	1b9b      	subs	r3, r3, r6
 800f24a:	50a3      	str	r3, [r4, r2]
 800f24c:	e7ab      	b.n	800f1a6 <_malloc_r+0x22>
 800f24e:	42a3      	cmp	r3, r4
 800f250:	6862      	ldr	r2, [r4, #4]
 800f252:	d1dd      	bne.n	800f210 <_malloc_r+0x8c>
 800f254:	f8c8 2000 	str.w	r2, [r8]
 800f258:	e7ec      	b.n	800f234 <_malloc_r+0xb0>
 800f25a:	4623      	mov	r3, r4
 800f25c:	6864      	ldr	r4, [r4, #4]
 800f25e:	e7ac      	b.n	800f1ba <_malloc_r+0x36>
 800f260:	4634      	mov	r4, r6
 800f262:	6876      	ldr	r6, [r6, #4]
 800f264:	e7b4      	b.n	800f1d0 <_malloc_r+0x4c>
 800f266:	4613      	mov	r3, r2
 800f268:	e7cc      	b.n	800f204 <_malloc_r+0x80>
 800f26a:	230c      	movs	r3, #12
 800f26c:	603b      	str	r3, [r7, #0]
 800f26e:	4638      	mov	r0, r7
 800f270:	f000 f80e 	bl	800f290 <__malloc_unlock>
 800f274:	e797      	b.n	800f1a6 <_malloc_r+0x22>
 800f276:	6025      	str	r5, [r4, #0]
 800f278:	e7dc      	b.n	800f234 <_malloc_r+0xb0>
 800f27a:	605b      	str	r3, [r3, #4]
 800f27c:	deff      	udf	#255	; 0xff
 800f27e:	bf00      	nop
 800f280:	20009348 	.word	0x20009348

0800f284 <__malloc_lock>:
 800f284:	4801      	ldr	r0, [pc, #4]	; (800f28c <__malloc_lock+0x8>)
 800f286:	f7ff beda 	b.w	800f03e <__retarget_lock_acquire_recursive>
 800f28a:	bf00      	nop
 800f28c:	20009344 	.word	0x20009344

0800f290 <__malloc_unlock>:
 800f290:	4801      	ldr	r0, [pc, #4]	; (800f298 <__malloc_unlock+0x8>)
 800f292:	f7ff bed5 	b.w	800f040 <__retarget_lock_release_recursive>
 800f296:	bf00      	nop
 800f298:	20009344 	.word	0x20009344

0800f29c <__sflush_r>:
 800f29c:	898a      	ldrh	r2, [r1, #12]
 800f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a2:	4605      	mov	r5, r0
 800f2a4:	0710      	lsls	r0, r2, #28
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	d458      	bmi.n	800f35c <__sflush_r+0xc0>
 800f2aa:	684b      	ldr	r3, [r1, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dc05      	bgt.n	800f2bc <__sflush_r+0x20>
 800f2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dc02      	bgt.n	800f2bc <__sflush_r+0x20>
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2be:	2e00      	cmp	r6, #0
 800f2c0:	d0f9      	beq.n	800f2b6 <__sflush_r+0x1a>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2c8:	682f      	ldr	r7, [r5, #0]
 800f2ca:	6a21      	ldr	r1, [r4, #32]
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	d032      	beq.n	800f336 <__sflush_r+0x9a>
 800f2d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	075a      	lsls	r2, r3, #29
 800f2d6:	d505      	bpl.n	800f2e4 <__sflush_r+0x48>
 800f2d8:	6863      	ldr	r3, [r4, #4]
 800f2da:	1ac0      	subs	r0, r0, r3
 800f2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2de:	b10b      	cbz	r3, 800f2e4 <__sflush_r+0x48>
 800f2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2e2:	1ac0      	subs	r0, r0, r3
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ea:	6a21      	ldr	r1, [r4, #32]
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	47b0      	blx	r6
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	d106      	bne.n	800f304 <__sflush_r+0x68>
 800f2f6:	6829      	ldr	r1, [r5, #0]
 800f2f8:	291d      	cmp	r1, #29
 800f2fa:	d82b      	bhi.n	800f354 <__sflush_r+0xb8>
 800f2fc:	4a29      	ldr	r2, [pc, #164]	; (800f3a4 <__sflush_r+0x108>)
 800f2fe:	410a      	asrs	r2, r1
 800f300:	07d6      	lsls	r6, r2, #31
 800f302:	d427      	bmi.n	800f354 <__sflush_r+0xb8>
 800f304:	2200      	movs	r2, #0
 800f306:	6062      	str	r2, [r4, #4]
 800f308:	04d9      	lsls	r1, r3, #19
 800f30a:	6922      	ldr	r2, [r4, #16]
 800f30c:	6022      	str	r2, [r4, #0]
 800f30e:	d504      	bpl.n	800f31a <__sflush_r+0x7e>
 800f310:	1c42      	adds	r2, r0, #1
 800f312:	d101      	bne.n	800f318 <__sflush_r+0x7c>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	b903      	cbnz	r3, 800f31a <__sflush_r+0x7e>
 800f318:	6560      	str	r0, [r4, #84]	; 0x54
 800f31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f31c:	602f      	str	r7, [r5, #0]
 800f31e:	2900      	cmp	r1, #0
 800f320:	d0c9      	beq.n	800f2b6 <__sflush_r+0x1a>
 800f322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f326:	4299      	cmp	r1, r3
 800f328:	d002      	beq.n	800f330 <__sflush_r+0x94>
 800f32a:	4628      	mov	r0, r5
 800f32c:	f7ff feb6 	bl	800f09c <_free_r>
 800f330:	2000      	movs	r0, #0
 800f332:	6360      	str	r0, [r4, #52]	; 0x34
 800f334:	e7c0      	b.n	800f2b8 <__sflush_r+0x1c>
 800f336:	2301      	movs	r3, #1
 800f338:	4628      	mov	r0, r5
 800f33a:	47b0      	blx	r6
 800f33c:	1c41      	adds	r1, r0, #1
 800f33e:	d1c8      	bne.n	800f2d2 <__sflush_r+0x36>
 800f340:	682b      	ldr	r3, [r5, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d0c5      	beq.n	800f2d2 <__sflush_r+0x36>
 800f346:	2b1d      	cmp	r3, #29
 800f348:	d001      	beq.n	800f34e <__sflush_r+0xb2>
 800f34a:	2b16      	cmp	r3, #22
 800f34c:	d101      	bne.n	800f352 <__sflush_r+0xb6>
 800f34e:	602f      	str	r7, [r5, #0]
 800f350:	e7b1      	b.n	800f2b6 <__sflush_r+0x1a>
 800f352:	89a3      	ldrh	r3, [r4, #12]
 800f354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f358:	81a3      	strh	r3, [r4, #12]
 800f35a:	e7ad      	b.n	800f2b8 <__sflush_r+0x1c>
 800f35c:	690f      	ldr	r7, [r1, #16]
 800f35e:	2f00      	cmp	r7, #0
 800f360:	d0a9      	beq.n	800f2b6 <__sflush_r+0x1a>
 800f362:	0793      	lsls	r3, r2, #30
 800f364:	680e      	ldr	r6, [r1, #0]
 800f366:	bf08      	it	eq
 800f368:	694b      	ldreq	r3, [r1, #20]
 800f36a:	600f      	str	r7, [r1, #0]
 800f36c:	bf18      	it	ne
 800f36e:	2300      	movne	r3, #0
 800f370:	eba6 0807 	sub.w	r8, r6, r7
 800f374:	608b      	str	r3, [r1, #8]
 800f376:	f1b8 0f00 	cmp.w	r8, #0
 800f37a:	dd9c      	ble.n	800f2b6 <__sflush_r+0x1a>
 800f37c:	6a21      	ldr	r1, [r4, #32]
 800f37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f380:	4643      	mov	r3, r8
 800f382:	463a      	mov	r2, r7
 800f384:	4628      	mov	r0, r5
 800f386:	47b0      	blx	r6
 800f388:	2800      	cmp	r0, #0
 800f38a:	dc06      	bgt.n	800f39a <__sflush_r+0xfe>
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f392:	81a3      	strh	r3, [r4, #12]
 800f394:	f04f 30ff 	mov.w	r0, #4294967295
 800f398:	e78e      	b.n	800f2b8 <__sflush_r+0x1c>
 800f39a:	4407      	add	r7, r0
 800f39c:	eba8 0800 	sub.w	r8, r8, r0
 800f3a0:	e7e9      	b.n	800f376 <__sflush_r+0xda>
 800f3a2:	bf00      	nop
 800f3a4:	dfbffffe 	.word	0xdfbffffe

0800f3a8 <_fflush_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	690b      	ldr	r3, [r1, #16]
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	b913      	cbnz	r3, 800f3b8 <_fflush_r+0x10>
 800f3b2:	2500      	movs	r5, #0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	b118      	cbz	r0, 800f3c2 <_fflush_r+0x1a>
 800f3ba:	6a03      	ldr	r3, [r0, #32]
 800f3bc:	b90b      	cbnz	r3, 800f3c2 <_fflush_r+0x1a>
 800f3be:	f7ff fcf5 	bl	800edac <__sinit>
 800f3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0f3      	beq.n	800f3b2 <_fflush_r+0xa>
 800f3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3cc:	07d0      	lsls	r0, r2, #31
 800f3ce:	d404      	bmi.n	800f3da <_fflush_r+0x32>
 800f3d0:	0599      	lsls	r1, r3, #22
 800f3d2:	d402      	bmi.n	800f3da <_fflush_r+0x32>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3d6:	f7ff fe32 	bl	800f03e <__retarget_lock_acquire_recursive>
 800f3da:	4628      	mov	r0, r5
 800f3dc:	4621      	mov	r1, r4
 800f3de:	f7ff ff5d 	bl	800f29c <__sflush_r>
 800f3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3e4:	07da      	lsls	r2, r3, #31
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	d4e4      	bmi.n	800f3b4 <_fflush_r+0xc>
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	059b      	lsls	r3, r3, #22
 800f3ee:	d4e1      	bmi.n	800f3b4 <_fflush_r+0xc>
 800f3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3f2:	f7ff fe25 	bl	800f040 <__retarget_lock_release_recursive>
 800f3f6:	e7dd      	b.n	800f3b4 <_fflush_r+0xc>

0800f3f8 <fiprintf>:
 800f3f8:	b40e      	push	{r1, r2, r3}
 800f3fa:	b503      	push	{r0, r1, lr}
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	ab03      	add	r3, sp, #12
 800f400:	4805      	ldr	r0, [pc, #20]	; (800f418 <fiprintf+0x20>)
 800f402:	f853 2b04 	ldr.w	r2, [r3], #4
 800f406:	6800      	ldr	r0, [r0, #0]
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	f000 f847 	bl	800f49c <_vfiprintf_r>
 800f40e:	b002      	add	sp, #8
 800f410:	f85d eb04 	ldr.w	lr, [sp], #4
 800f414:	b003      	add	sp, #12
 800f416:	4770      	bx	lr
 800f418:	200000a4 	.word	0x200000a4

0800f41c <_sbrk_r>:
 800f41c:	b538      	push	{r3, r4, r5, lr}
 800f41e:	4d06      	ldr	r5, [pc, #24]	; (800f438 <_sbrk_r+0x1c>)
 800f420:	2300      	movs	r3, #0
 800f422:	4604      	mov	r4, r0
 800f424:	4608      	mov	r0, r1
 800f426:	602b      	str	r3, [r5, #0]
 800f428:	f000 ff5a 	bl	80102e0 <_sbrk>
 800f42c:	1c43      	adds	r3, r0, #1
 800f42e:	d102      	bne.n	800f436 <_sbrk_r+0x1a>
 800f430:	682b      	ldr	r3, [r5, #0]
 800f432:	b103      	cbz	r3, 800f436 <_sbrk_r+0x1a>
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	bd38      	pop	{r3, r4, r5, pc}
 800f438:	20009340 	.word	0x20009340

0800f43c <abort>:
 800f43c:	b508      	push	{r3, lr}
 800f43e:	2006      	movs	r0, #6
 800f440:	f000 fb94 	bl	800fb6c <raise>
 800f444:	2001      	movs	r0, #1
 800f446:	f7f5 fac5 	bl	80049d4 <_exit>

0800f44a <__sfputc_r>:
 800f44a:	6893      	ldr	r3, [r2, #8]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	2b00      	cmp	r3, #0
 800f450:	b410      	push	{r4}
 800f452:	6093      	str	r3, [r2, #8]
 800f454:	da08      	bge.n	800f468 <__sfputc_r+0x1e>
 800f456:	6994      	ldr	r4, [r2, #24]
 800f458:	42a3      	cmp	r3, r4
 800f45a:	db01      	blt.n	800f460 <__sfputc_r+0x16>
 800f45c:	290a      	cmp	r1, #10
 800f45e:	d103      	bne.n	800f468 <__sfputc_r+0x1e>
 800f460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f464:	f000 bac4 	b.w	800f9f0 <__swbuf_r>
 800f468:	6813      	ldr	r3, [r2, #0]
 800f46a:	1c58      	adds	r0, r3, #1
 800f46c:	6010      	str	r0, [r2, #0]
 800f46e:	7019      	strb	r1, [r3, #0]
 800f470:	4608      	mov	r0, r1
 800f472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <__sfputs_r>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	4606      	mov	r6, r0
 800f47c:	460f      	mov	r7, r1
 800f47e:	4614      	mov	r4, r2
 800f480:	18d5      	adds	r5, r2, r3
 800f482:	42ac      	cmp	r4, r5
 800f484:	d101      	bne.n	800f48a <__sfputs_r+0x12>
 800f486:	2000      	movs	r0, #0
 800f488:	e007      	b.n	800f49a <__sfputs_r+0x22>
 800f48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f48e:	463a      	mov	r2, r7
 800f490:	4630      	mov	r0, r6
 800f492:	f7ff ffda 	bl	800f44a <__sfputc_r>
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	d1f3      	bne.n	800f482 <__sfputs_r+0xa>
 800f49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f49c <_vfiprintf_r>:
 800f49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a0:	460d      	mov	r5, r1
 800f4a2:	b09d      	sub	sp, #116	; 0x74
 800f4a4:	4614      	mov	r4, r2
 800f4a6:	4698      	mov	r8, r3
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	b118      	cbz	r0, 800f4b4 <_vfiprintf_r+0x18>
 800f4ac:	6a03      	ldr	r3, [r0, #32]
 800f4ae:	b90b      	cbnz	r3, 800f4b4 <_vfiprintf_r+0x18>
 800f4b0:	f7ff fc7c 	bl	800edac <__sinit>
 800f4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4b6:	07d9      	lsls	r1, r3, #31
 800f4b8:	d405      	bmi.n	800f4c6 <_vfiprintf_r+0x2a>
 800f4ba:	89ab      	ldrh	r3, [r5, #12]
 800f4bc:	059a      	lsls	r2, r3, #22
 800f4be:	d402      	bmi.n	800f4c6 <_vfiprintf_r+0x2a>
 800f4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4c2:	f7ff fdbc 	bl	800f03e <__retarget_lock_acquire_recursive>
 800f4c6:	89ab      	ldrh	r3, [r5, #12]
 800f4c8:	071b      	lsls	r3, r3, #28
 800f4ca:	d501      	bpl.n	800f4d0 <_vfiprintf_r+0x34>
 800f4cc:	692b      	ldr	r3, [r5, #16]
 800f4ce:	b99b      	cbnz	r3, 800f4f8 <_vfiprintf_r+0x5c>
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f000 faca 	bl	800fa6c <__swsetup_r>
 800f4d8:	b170      	cbz	r0, 800f4f8 <_vfiprintf_r+0x5c>
 800f4da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4dc:	07dc      	lsls	r4, r3, #31
 800f4de:	d504      	bpl.n	800f4ea <_vfiprintf_r+0x4e>
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e4:	b01d      	add	sp, #116	; 0x74
 800f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ea:	89ab      	ldrh	r3, [r5, #12]
 800f4ec:	0598      	lsls	r0, r3, #22
 800f4ee:	d4f7      	bmi.n	800f4e0 <_vfiprintf_r+0x44>
 800f4f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4f2:	f7ff fda5 	bl	800f040 <__retarget_lock_release_recursive>
 800f4f6:	e7f3      	b.n	800f4e0 <_vfiprintf_r+0x44>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fc:	2320      	movs	r3, #32
 800f4fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f502:	f8cd 800c 	str.w	r8, [sp, #12]
 800f506:	2330      	movs	r3, #48	; 0x30
 800f508:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f6bc <_vfiprintf_r+0x220>
 800f50c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f510:	f04f 0901 	mov.w	r9, #1
 800f514:	4623      	mov	r3, r4
 800f516:	469a      	mov	sl, r3
 800f518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f51c:	b10a      	cbz	r2, 800f522 <_vfiprintf_r+0x86>
 800f51e:	2a25      	cmp	r2, #37	; 0x25
 800f520:	d1f9      	bne.n	800f516 <_vfiprintf_r+0x7a>
 800f522:	ebba 0b04 	subs.w	fp, sl, r4
 800f526:	d00b      	beq.n	800f540 <_vfiprintf_r+0xa4>
 800f528:	465b      	mov	r3, fp
 800f52a:	4622      	mov	r2, r4
 800f52c:	4629      	mov	r1, r5
 800f52e:	4630      	mov	r0, r6
 800f530:	f7ff ffa2 	bl	800f478 <__sfputs_r>
 800f534:	3001      	adds	r0, #1
 800f536:	f000 80a9 	beq.w	800f68c <_vfiprintf_r+0x1f0>
 800f53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f53c:	445a      	add	r2, fp
 800f53e:	9209      	str	r2, [sp, #36]	; 0x24
 800f540:	f89a 3000 	ldrb.w	r3, [sl]
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 80a1 	beq.w	800f68c <_vfiprintf_r+0x1f0>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f04f 32ff 	mov.w	r2, #4294967295
 800f550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f554:	f10a 0a01 	add.w	sl, sl, #1
 800f558:	9304      	str	r3, [sp, #16]
 800f55a:	9307      	str	r3, [sp, #28]
 800f55c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f560:	931a      	str	r3, [sp, #104]	; 0x68
 800f562:	4654      	mov	r4, sl
 800f564:	2205      	movs	r2, #5
 800f566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56a:	4854      	ldr	r0, [pc, #336]	; (800f6bc <_vfiprintf_r+0x220>)
 800f56c:	f7f0 fe68 	bl	8000240 <memchr>
 800f570:	9a04      	ldr	r2, [sp, #16]
 800f572:	b9d8      	cbnz	r0, 800f5ac <_vfiprintf_r+0x110>
 800f574:	06d1      	lsls	r1, r2, #27
 800f576:	bf44      	itt	mi
 800f578:	2320      	movmi	r3, #32
 800f57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f57e:	0713      	lsls	r3, r2, #28
 800f580:	bf44      	itt	mi
 800f582:	232b      	movmi	r3, #43	; 0x2b
 800f584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f588:	f89a 3000 	ldrb.w	r3, [sl]
 800f58c:	2b2a      	cmp	r3, #42	; 0x2a
 800f58e:	d015      	beq.n	800f5bc <_vfiprintf_r+0x120>
 800f590:	9a07      	ldr	r2, [sp, #28]
 800f592:	4654      	mov	r4, sl
 800f594:	2000      	movs	r0, #0
 800f596:	f04f 0c0a 	mov.w	ip, #10
 800f59a:	4621      	mov	r1, r4
 800f59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5a0:	3b30      	subs	r3, #48	; 0x30
 800f5a2:	2b09      	cmp	r3, #9
 800f5a4:	d94d      	bls.n	800f642 <_vfiprintf_r+0x1a6>
 800f5a6:	b1b0      	cbz	r0, 800f5d6 <_vfiprintf_r+0x13a>
 800f5a8:	9207      	str	r2, [sp, #28]
 800f5aa:	e014      	b.n	800f5d6 <_vfiprintf_r+0x13a>
 800f5ac:	eba0 0308 	sub.w	r3, r0, r8
 800f5b0:	fa09 f303 	lsl.w	r3, r9, r3
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	9304      	str	r3, [sp, #16]
 800f5b8:	46a2      	mov	sl, r4
 800f5ba:	e7d2      	b.n	800f562 <_vfiprintf_r+0xc6>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	1d19      	adds	r1, r3, #4
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	9103      	str	r1, [sp, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	bfbb      	ittet	lt
 800f5c8:	425b      	neglt	r3, r3
 800f5ca:	f042 0202 	orrlt.w	r2, r2, #2
 800f5ce:	9307      	strge	r3, [sp, #28]
 800f5d0:	9307      	strlt	r3, [sp, #28]
 800f5d2:	bfb8      	it	lt
 800f5d4:	9204      	strlt	r2, [sp, #16]
 800f5d6:	7823      	ldrb	r3, [r4, #0]
 800f5d8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5da:	d10c      	bne.n	800f5f6 <_vfiprintf_r+0x15a>
 800f5dc:	7863      	ldrb	r3, [r4, #1]
 800f5de:	2b2a      	cmp	r3, #42	; 0x2a
 800f5e0:	d134      	bne.n	800f64c <_vfiprintf_r+0x1b0>
 800f5e2:	9b03      	ldr	r3, [sp, #12]
 800f5e4:	1d1a      	adds	r2, r3, #4
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	9203      	str	r2, [sp, #12]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	bfb8      	it	lt
 800f5ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5f2:	3402      	adds	r4, #2
 800f5f4:	9305      	str	r3, [sp, #20]
 800f5f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f6cc <_vfiprintf_r+0x230>
 800f5fa:	7821      	ldrb	r1, [r4, #0]
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	4650      	mov	r0, sl
 800f600:	f7f0 fe1e 	bl	8000240 <memchr>
 800f604:	b138      	cbz	r0, 800f616 <_vfiprintf_r+0x17a>
 800f606:	9b04      	ldr	r3, [sp, #16]
 800f608:	eba0 000a 	sub.w	r0, r0, sl
 800f60c:	2240      	movs	r2, #64	; 0x40
 800f60e:	4082      	lsls	r2, r0
 800f610:	4313      	orrs	r3, r2
 800f612:	3401      	adds	r4, #1
 800f614:	9304      	str	r3, [sp, #16]
 800f616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f61a:	4829      	ldr	r0, [pc, #164]	; (800f6c0 <_vfiprintf_r+0x224>)
 800f61c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f620:	2206      	movs	r2, #6
 800f622:	f7f0 fe0d 	bl	8000240 <memchr>
 800f626:	2800      	cmp	r0, #0
 800f628:	d03f      	beq.n	800f6aa <_vfiprintf_r+0x20e>
 800f62a:	4b26      	ldr	r3, [pc, #152]	; (800f6c4 <_vfiprintf_r+0x228>)
 800f62c:	bb1b      	cbnz	r3, 800f676 <_vfiprintf_r+0x1da>
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	3307      	adds	r3, #7
 800f632:	f023 0307 	bic.w	r3, r3, #7
 800f636:	3308      	adds	r3, #8
 800f638:	9303      	str	r3, [sp, #12]
 800f63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f63c:	443b      	add	r3, r7
 800f63e:	9309      	str	r3, [sp, #36]	; 0x24
 800f640:	e768      	b.n	800f514 <_vfiprintf_r+0x78>
 800f642:	fb0c 3202 	mla	r2, ip, r2, r3
 800f646:	460c      	mov	r4, r1
 800f648:	2001      	movs	r0, #1
 800f64a:	e7a6      	b.n	800f59a <_vfiprintf_r+0xfe>
 800f64c:	2300      	movs	r3, #0
 800f64e:	3401      	adds	r4, #1
 800f650:	9305      	str	r3, [sp, #20]
 800f652:	4619      	mov	r1, r3
 800f654:	f04f 0c0a 	mov.w	ip, #10
 800f658:	4620      	mov	r0, r4
 800f65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f65e:	3a30      	subs	r2, #48	; 0x30
 800f660:	2a09      	cmp	r2, #9
 800f662:	d903      	bls.n	800f66c <_vfiprintf_r+0x1d0>
 800f664:	2b00      	cmp	r3, #0
 800f666:	d0c6      	beq.n	800f5f6 <_vfiprintf_r+0x15a>
 800f668:	9105      	str	r1, [sp, #20]
 800f66a:	e7c4      	b.n	800f5f6 <_vfiprintf_r+0x15a>
 800f66c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f670:	4604      	mov	r4, r0
 800f672:	2301      	movs	r3, #1
 800f674:	e7f0      	b.n	800f658 <_vfiprintf_r+0x1bc>
 800f676:	ab03      	add	r3, sp, #12
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	462a      	mov	r2, r5
 800f67c:	4b12      	ldr	r3, [pc, #72]	; (800f6c8 <_vfiprintf_r+0x22c>)
 800f67e:	a904      	add	r1, sp, #16
 800f680:	4630      	mov	r0, r6
 800f682:	f3af 8000 	nop.w
 800f686:	4607      	mov	r7, r0
 800f688:	1c78      	adds	r0, r7, #1
 800f68a:	d1d6      	bne.n	800f63a <_vfiprintf_r+0x19e>
 800f68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f68e:	07d9      	lsls	r1, r3, #31
 800f690:	d405      	bmi.n	800f69e <_vfiprintf_r+0x202>
 800f692:	89ab      	ldrh	r3, [r5, #12]
 800f694:	059a      	lsls	r2, r3, #22
 800f696:	d402      	bmi.n	800f69e <_vfiprintf_r+0x202>
 800f698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f69a:	f7ff fcd1 	bl	800f040 <__retarget_lock_release_recursive>
 800f69e:	89ab      	ldrh	r3, [r5, #12]
 800f6a0:	065b      	lsls	r3, r3, #25
 800f6a2:	f53f af1d 	bmi.w	800f4e0 <_vfiprintf_r+0x44>
 800f6a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6a8:	e71c      	b.n	800f4e4 <_vfiprintf_r+0x48>
 800f6aa:	ab03      	add	r3, sp, #12
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	462a      	mov	r2, r5
 800f6b0:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <_vfiprintf_r+0x22c>)
 800f6b2:	a904      	add	r1, sp, #16
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f000 f879 	bl	800f7ac <_printf_i>
 800f6ba:	e7e4      	b.n	800f686 <_vfiprintf_r+0x1ea>
 800f6bc:	080f689b 	.word	0x080f689b
 800f6c0:	080f68a5 	.word	0x080f68a5
 800f6c4:	00000000 	.word	0x00000000
 800f6c8:	0800f479 	.word	0x0800f479
 800f6cc:	080f68a1 	.word	0x080f68a1

0800f6d0 <_printf_common>:
 800f6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d4:	4616      	mov	r6, r2
 800f6d6:	4699      	mov	r9, r3
 800f6d8:	688a      	ldr	r2, [r1, #8]
 800f6da:	690b      	ldr	r3, [r1, #16]
 800f6dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	bfb8      	it	lt
 800f6e4:	4613      	movlt	r3, r2
 800f6e6:	6033      	str	r3, [r6, #0]
 800f6e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6ec:	4607      	mov	r7, r0
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	b10a      	cbz	r2, 800f6f6 <_printf_common+0x26>
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	6033      	str	r3, [r6, #0]
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	0699      	lsls	r1, r3, #26
 800f6fa:	bf42      	ittt	mi
 800f6fc:	6833      	ldrmi	r3, [r6, #0]
 800f6fe:	3302      	addmi	r3, #2
 800f700:	6033      	strmi	r3, [r6, #0]
 800f702:	6825      	ldr	r5, [r4, #0]
 800f704:	f015 0506 	ands.w	r5, r5, #6
 800f708:	d106      	bne.n	800f718 <_printf_common+0x48>
 800f70a:	f104 0a19 	add.w	sl, r4, #25
 800f70e:	68e3      	ldr	r3, [r4, #12]
 800f710:	6832      	ldr	r2, [r6, #0]
 800f712:	1a9b      	subs	r3, r3, r2
 800f714:	42ab      	cmp	r3, r5
 800f716:	dc26      	bgt.n	800f766 <_printf_common+0x96>
 800f718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f71c:	1e13      	subs	r3, r2, #0
 800f71e:	6822      	ldr	r2, [r4, #0]
 800f720:	bf18      	it	ne
 800f722:	2301      	movne	r3, #1
 800f724:	0692      	lsls	r2, r2, #26
 800f726:	d42b      	bmi.n	800f780 <_printf_common+0xb0>
 800f728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f72c:	4649      	mov	r1, r9
 800f72e:	4638      	mov	r0, r7
 800f730:	47c0      	blx	r8
 800f732:	3001      	adds	r0, #1
 800f734:	d01e      	beq.n	800f774 <_printf_common+0xa4>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	6922      	ldr	r2, [r4, #16]
 800f73a:	f003 0306 	and.w	r3, r3, #6
 800f73e:	2b04      	cmp	r3, #4
 800f740:	bf02      	ittt	eq
 800f742:	68e5      	ldreq	r5, [r4, #12]
 800f744:	6833      	ldreq	r3, [r6, #0]
 800f746:	1aed      	subeq	r5, r5, r3
 800f748:	68a3      	ldr	r3, [r4, #8]
 800f74a:	bf0c      	ite	eq
 800f74c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f750:	2500      	movne	r5, #0
 800f752:	4293      	cmp	r3, r2
 800f754:	bfc4      	itt	gt
 800f756:	1a9b      	subgt	r3, r3, r2
 800f758:	18ed      	addgt	r5, r5, r3
 800f75a:	2600      	movs	r6, #0
 800f75c:	341a      	adds	r4, #26
 800f75e:	42b5      	cmp	r5, r6
 800f760:	d11a      	bne.n	800f798 <_printf_common+0xc8>
 800f762:	2000      	movs	r0, #0
 800f764:	e008      	b.n	800f778 <_printf_common+0xa8>
 800f766:	2301      	movs	r3, #1
 800f768:	4652      	mov	r2, sl
 800f76a:	4649      	mov	r1, r9
 800f76c:	4638      	mov	r0, r7
 800f76e:	47c0      	blx	r8
 800f770:	3001      	adds	r0, #1
 800f772:	d103      	bne.n	800f77c <_printf_common+0xac>
 800f774:	f04f 30ff 	mov.w	r0, #4294967295
 800f778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77c:	3501      	adds	r5, #1
 800f77e:	e7c6      	b.n	800f70e <_printf_common+0x3e>
 800f780:	18e1      	adds	r1, r4, r3
 800f782:	1c5a      	adds	r2, r3, #1
 800f784:	2030      	movs	r0, #48	; 0x30
 800f786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f78a:	4422      	add	r2, r4
 800f78c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f794:	3302      	adds	r3, #2
 800f796:	e7c7      	b.n	800f728 <_printf_common+0x58>
 800f798:	2301      	movs	r3, #1
 800f79a:	4622      	mov	r2, r4
 800f79c:	4649      	mov	r1, r9
 800f79e:	4638      	mov	r0, r7
 800f7a0:	47c0      	blx	r8
 800f7a2:	3001      	adds	r0, #1
 800f7a4:	d0e6      	beq.n	800f774 <_printf_common+0xa4>
 800f7a6:	3601      	adds	r6, #1
 800f7a8:	e7d9      	b.n	800f75e <_printf_common+0x8e>
	...

0800f7ac <_printf_i>:
 800f7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7b0:	7e0f      	ldrb	r7, [r1, #24]
 800f7b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7b4:	2f78      	cmp	r7, #120	; 0x78
 800f7b6:	4691      	mov	r9, r2
 800f7b8:	4680      	mov	r8, r0
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	469a      	mov	sl, r3
 800f7be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7c2:	d807      	bhi.n	800f7d4 <_printf_i+0x28>
 800f7c4:	2f62      	cmp	r7, #98	; 0x62
 800f7c6:	d80a      	bhi.n	800f7de <_printf_i+0x32>
 800f7c8:	2f00      	cmp	r7, #0
 800f7ca:	f000 80d4 	beq.w	800f976 <_printf_i+0x1ca>
 800f7ce:	2f58      	cmp	r7, #88	; 0x58
 800f7d0:	f000 80c0 	beq.w	800f954 <_printf_i+0x1a8>
 800f7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7dc:	e03a      	b.n	800f854 <_printf_i+0xa8>
 800f7de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7e2:	2b15      	cmp	r3, #21
 800f7e4:	d8f6      	bhi.n	800f7d4 <_printf_i+0x28>
 800f7e6:	a101      	add	r1, pc, #4	; (adr r1, 800f7ec <_printf_i+0x40>)
 800f7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7ec:	0800f845 	.word	0x0800f845
 800f7f0:	0800f859 	.word	0x0800f859
 800f7f4:	0800f7d5 	.word	0x0800f7d5
 800f7f8:	0800f7d5 	.word	0x0800f7d5
 800f7fc:	0800f7d5 	.word	0x0800f7d5
 800f800:	0800f7d5 	.word	0x0800f7d5
 800f804:	0800f859 	.word	0x0800f859
 800f808:	0800f7d5 	.word	0x0800f7d5
 800f80c:	0800f7d5 	.word	0x0800f7d5
 800f810:	0800f7d5 	.word	0x0800f7d5
 800f814:	0800f7d5 	.word	0x0800f7d5
 800f818:	0800f95d 	.word	0x0800f95d
 800f81c:	0800f885 	.word	0x0800f885
 800f820:	0800f917 	.word	0x0800f917
 800f824:	0800f7d5 	.word	0x0800f7d5
 800f828:	0800f7d5 	.word	0x0800f7d5
 800f82c:	0800f97f 	.word	0x0800f97f
 800f830:	0800f7d5 	.word	0x0800f7d5
 800f834:	0800f885 	.word	0x0800f885
 800f838:	0800f7d5 	.word	0x0800f7d5
 800f83c:	0800f7d5 	.word	0x0800f7d5
 800f840:	0800f91f 	.word	0x0800f91f
 800f844:	682b      	ldr	r3, [r5, #0]
 800f846:	1d1a      	adds	r2, r3, #4
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	602a      	str	r2, [r5, #0]
 800f84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f854:	2301      	movs	r3, #1
 800f856:	e09f      	b.n	800f998 <_printf_i+0x1ec>
 800f858:	6820      	ldr	r0, [r4, #0]
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	0607      	lsls	r7, r0, #24
 800f85e:	f103 0104 	add.w	r1, r3, #4
 800f862:	6029      	str	r1, [r5, #0]
 800f864:	d501      	bpl.n	800f86a <_printf_i+0xbe>
 800f866:	681e      	ldr	r6, [r3, #0]
 800f868:	e003      	b.n	800f872 <_printf_i+0xc6>
 800f86a:	0646      	lsls	r6, r0, #25
 800f86c:	d5fb      	bpl.n	800f866 <_printf_i+0xba>
 800f86e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f872:	2e00      	cmp	r6, #0
 800f874:	da03      	bge.n	800f87e <_printf_i+0xd2>
 800f876:	232d      	movs	r3, #45	; 0x2d
 800f878:	4276      	negs	r6, r6
 800f87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f87e:	485a      	ldr	r0, [pc, #360]	; (800f9e8 <_printf_i+0x23c>)
 800f880:	230a      	movs	r3, #10
 800f882:	e012      	b.n	800f8aa <_printf_i+0xfe>
 800f884:	682b      	ldr	r3, [r5, #0]
 800f886:	6820      	ldr	r0, [r4, #0]
 800f888:	1d19      	adds	r1, r3, #4
 800f88a:	6029      	str	r1, [r5, #0]
 800f88c:	0605      	lsls	r5, r0, #24
 800f88e:	d501      	bpl.n	800f894 <_printf_i+0xe8>
 800f890:	681e      	ldr	r6, [r3, #0]
 800f892:	e002      	b.n	800f89a <_printf_i+0xee>
 800f894:	0641      	lsls	r1, r0, #25
 800f896:	d5fb      	bpl.n	800f890 <_printf_i+0xe4>
 800f898:	881e      	ldrh	r6, [r3, #0]
 800f89a:	4853      	ldr	r0, [pc, #332]	; (800f9e8 <_printf_i+0x23c>)
 800f89c:	2f6f      	cmp	r7, #111	; 0x6f
 800f89e:	bf0c      	ite	eq
 800f8a0:	2308      	moveq	r3, #8
 800f8a2:	230a      	movne	r3, #10
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8aa:	6865      	ldr	r5, [r4, #4]
 800f8ac:	60a5      	str	r5, [r4, #8]
 800f8ae:	2d00      	cmp	r5, #0
 800f8b0:	bfa2      	ittt	ge
 800f8b2:	6821      	ldrge	r1, [r4, #0]
 800f8b4:	f021 0104 	bicge.w	r1, r1, #4
 800f8b8:	6021      	strge	r1, [r4, #0]
 800f8ba:	b90e      	cbnz	r6, 800f8c0 <_printf_i+0x114>
 800f8bc:	2d00      	cmp	r5, #0
 800f8be:	d04b      	beq.n	800f958 <_printf_i+0x1ac>
 800f8c0:	4615      	mov	r5, r2
 800f8c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8c6:	fb03 6711 	mls	r7, r3, r1, r6
 800f8ca:	5dc7      	ldrb	r7, [r0, r7]
 800f8cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8d0:	4637      	mov	r7, r6
 800f8d2:	42bb      	cmp	r3, r7
 800f8d4:	460e      	mov	r6, r1
 800f8d6:	d9f4      	bls.n	800f8c2 <_printf_i+0x116>
 800f8d8:	2b08      	cmp	r3, #8
 800f8da:	d10b      	bne.n	800f8f4 <_printf_i+0x148>
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	07de      	lsls	r6, r3, #31
 800f8e0:	d508      	bpl.n	800f8f4 <_printf_i+0x148>
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	6861      	ldr	r1, [r4, #4]
 800f8e6:	4299      	cmp	r1, r3
 800f8e8:	bfde      	ittt	le
 800f8ea:	2330      	movle	r3, #48	; 0x30
 800f8ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f8f4:	1b52      	subs	r2, r2, r5
 800f8f6:	6122      	str	r2, [r4, #16]
 800f8f8:	f8cd a000 	str.w	sl, [sp]
 800f8fc:	464b      	mov	r3, r9
 800f8fe:	aa03      	add	r2, sp, #12
 800f900:	4621      	mov	r1, r4
 800f902:	4640      	mov	r0, r8
 800f904:	f7ff fee4 	bl	800f6d0 <_printf_common>
 800f908:	3001      	adds	r0, #1
 800f90a:	d14a      	bne.n	800f9a2 <_printf_i+0x1f6>
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	b004      	add	sp, #16
 800f912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	f043 0320 	orr.w	r3, r3, #32
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	4833      	ldr	r0, [pc, #204]	; (800f9ec <_printf_i+0x240>)
 800f920:	2778      	movs	r7, #120	; 0x78
 800f922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f926:	6823      	ldr	r3, [r4, #0]
 800f928:	6829      	ldr	r1, [r5, #0]
 800f92a:	061f      	lsls	r7, r3, #24
 800f92c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f930:	d402      	bmi.n	800f938 <_printf_i+0x18c>
 800f932:	065f      	lsls	r7, r3, #25
 800f934:	bf48      	it	mi
 800f936:	b2b6      	uxthmi	r6, r6
 800f938:	07df      	lsls	r7, r3, #31
 800f93a:	bf48      	it	mi
 800f93c:	f043 0320 	orrmi.w	r3, r3, #32
 800f940:	6029      	str	r1, [r5, #0]
 800f942:	bf48      	it	mi
 800f944:	6023      	strmi	r3, [r4, #0]
 800f946:	b91e      	cbnz	r6, 800f950 <_printf_i+0x1a4>
 800f948:	6823      	ldr	r3, [r4, #0]
 800f94a:	f023 0320 	bic.w	r3, r3, #32
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	2310      	movs	r3, #16
 800f952:	e7a7      	b.n	800f8a4 <_printf_i+0xf8>
 800f954:	4824      	ldr	r0, [pc, #144]	; (800f9e8 <_printf_i+0x23c>)
 800f956:	e7e4      	b.n	800f922 <_printf_i+0x176>
 800f958:	4615      	mov	r5, r2
 800f95a:	e7bd      	b.n	800f8d8 <_printf_i+0x12c>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	6826      	ldr	r6, [r4, #0]
 800f960:	6961      	ldr	r1, [r4, #20]
 800f962:	1d18      	adds	r0, r3, #4
 800f964:	6028      	str	r0, [r5, #0]
 800f966:	0635      	lsls	r5, r6, #24
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	d501      	bpl.n	800f970 <_printf_i+0x1c4>
 800f96c:	6019      	str	r1, [r3, #0]
 800f96e:	e002      	b.n	800f976 <_printf_i+0x1ca>
 800f970:	0670      	lsls	r0, r6, #25
 800f972:	d5fb      	bpl.n	800f96c <_printf_i+0x1c0>
 800f974:	8019      	strh	r1, [r3, #0]
 800f976:	2300      	movs	r3, #0
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	4615      	mov	r5, r2
 800f97c:	e7bc      	b.n	800f8f8 <_printf_i+0x14c>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	602a      	str	r2, [r5, #0]
 800f984:	681d      	ldr	r5, [r3, #0]
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	2100      	movs	r1, #0
 800f98a:	4628      	mov	r0, r5
 800f98c:	f7f0 fc58 	bl	8000240 <memchr>
 800f990:	b108      	cbz	r0, 800f996 <_printf_i+0x1ea>
 800f992:	1b40      	subs	r0, r0, r5
 800f994:	6060      	str	r0, [r4, #4]
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	2300      	movs	r3, #0
 800f99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9a0:	e7aa      	b.n	800f8f8 <_printf_i+0x14c>
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	462a      	mov	r2, r5
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	47d0      	blx	sl
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d0ad      	beq.n	800f90c <_printf_i+0x160>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	079b      	lsls	r3, r3, #30
 800f9b4:	d413      	bmi.n	800f9de <_printf_i+0x232>
 800f9b6:	68e0      	ldr	r0, [r4, #12]
 800f9b8:	9b03      	ldr	r3, [sp, #12]
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	bfb8      	it	lt
 800f9be:	4618      	movlt	r0, r3
 800f9c0:	e7a6      	b.n	800f910 <_printf_i+0x164>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4632      	mov	r2, r6
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	4640      	mov	r0, r8
 800f9ca:	47d0      	blx	sl
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	d09d      	beq.n	800f90c <_printf_i+0x160>
 800f9d0:	3501      	adds	r5, #1
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	9903      	ldr	r1, [sp, #12]
 800f9d6:	1a5b      	subs	r3, r3, r1
 800f9d8:	42ab      	cmp	r3, r5
 800f9da:	dcf2      	bgt.n	800f9c2 <_printf_i+0x216>
 800f9dc:	e7eb      	b.n	800f9b6 <_printf_i+0x20a>
 800f9de:	2500      	movs	r5, #0
 800f9e0:	f104 0619 	add.w	r6, r4, #25
 800f9e4:	e7f5      	b.n	800f9d2 <_printf_i+0x226>
 800f9e6:	bf00      	nop
 800f9e8:	080f68ac 	.word	0x080f68ac
 800f9ec:	080f68bd 	.word	0x080f68bd

0800f9f0 <__swbuf_r>:
 800f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f2:	460e      	mov	r6, r1
 800f9f4:	4614      	mov	r4, r2
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	b118      	cbz	r0, 800fa02 <__swbuf_r+0x12>
 800f9fa:	6a03      	ldr	r3, [r0, #32]
 800f9fc:	b90b      	cbnz	r3, 800fa02 <__swbuf_r+0x12>
 800f9fe:	f7ff f9d5 	bl	800edac <__sinit>
 800fa02:	69a3      	ldr	r3, [r4, #24]
 800fa04:	60a3      	str	r3, [r4, #8]
 800fa06:	89a3      	ldrh	r3, [r4, #12]
 800fa08:	071a      	lsls	r2, r3, #28
 800fa0a:	d525      	bpl.n	800fa58 <__swbuf_r+0x68>
 800fa0c:	6923      	ldr	r3, [r4, #16]
 800fa0e:	b31b      	cbz	r3, 800fa58 <__swbuf_r+0x68>
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	6922      	ldr	r2, [r4, #16]
 800fa14:	1a98      	subs	r0, r3, r2
 800fa16:	6963      	ldr	r3, [r4, #20]
 800fa18:	b2f6      	uxtb	r6, r6
 800fa1a:	4283      	cmp	r3, r0
 800fa1c:	4637      	mov	r7, r6
 800fa1e:	dc04      	bgt.n	800fa2a <__swbuf_r+0x3a>
 800fa20:	4621      	mov	r1, r4
 800fa22:	4628      	mov	r0, r5
 800fa24:	f7ff fcc0 	bl	800f3a8 <_fflush_r>
 800fa28:	b9e0      	cbnz	r0, 800fa64 <__swbuf_r+0x74>
 800fa2a:	68a3      	ldr	r3, [r4, #8]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	60a3      	str	r3, [r4, #8]
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	6022      	str	r2, [r4, #0]
 800fa36:	701e      	strb	r6, [r3, #0]
 800fa38:	6962      	ldr	r2, [r4, #20]
 800fa3a:	1c43      	adds	r3, r0, #1
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d004      	beq.n	800fa4a <__swbuf_r+0x5a>
 800fa40:	89a3      	ldrh	r3, [r4, #12]
 800fa42:	07db      	lsls	r3, r3, #31
 800fa44:	d506      	bpl.n	800fa54 <__swbuf_r+0x64>
 800fa46:	2e0a      	cmp	r6, #10
 800fa48:	d104      	bne.n	800fa54 <__swbuf_r+0x64>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f7ff fcab 	bl	800f3a8 <_fflush_r>
 800fa52:	b938      	cbnz	r0, 800fa64 <__swbuf_r+0x74>
 800fa54:	4638      	mov	r0, r7
 800fa56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f000 f806 	bl	800fa6c <__swsetup_r>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d0d5      	beq.n	800fa10 <__swbuf_r+0x20>
 800fa64:	f04f 37ff 	mov.w	r7, #4294967295
 800fa68:	e7f4      	b.n	800fa54 <__swbuf_r+0x64>
	...

0800fa6c <__swsetup_r>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4b2a      	ldr	r3, [pc, #168]	; (800fb18 <__swsetup_r+0xac>)
 800fa70:	4605      	mov	r5, r0
 800fa72:	6818      	ldr	r0, [r3, #0]
 800fa74:	460c      	mov	r4, r1
 800fa76:	b118      	cbz	r0, 800fa80 <__swsetup_r+0x14>
 800fa78:	6a03      	ldr	r3, [r0, #32]
 800fa7a:	b90b      	cbnz	r3, 800fa80 <__swsetup_r+0x14>
 800fa7c:	f7ff f996 	bl	800edac <__sinit>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa86:	0718      	lsls	r0, r3, #28
 800fa88:	d422      	bmi.n	800fad0 <__swsetup_r+0x64>
 800fa8a:	06d9      	lsls	r1, r3, #27
 800fa8c:	d407      	bmi.n	800fa9e <__swsetup_r+0x32>
 800fa8e:	2309      	movs	r3, #9
 800fa90:	602b      	str	r3, [r5, #0]
 800fa92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa96:	81a3      	strh	r3, [r4, #12]
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	e034      	b.n	800fb08 <__swsetup_r+0x9c>
 800fa9e:	0758      	lsls	r0, r3, #29
 800faa0:	d512      	bpl.n	800fac8 <__swsetup_r+0x5c>
 800faa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faa4:	b141      	cbz	r1, 800fab8 <__swsetup_r+0x4c>
 800faa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faaa:	4299      	cmp	r1, r3
 800faac:	d002      	beq.n	800fab4 <__swsetup_r+0x48>
 800faae:	4628      	mov	r0, r5
 800fab0:	f7ff faf4 	bl	800f09c <_free_r>
 800fab4:	2300      	movs	r3, #0
 800fab6:	6363      	str	r3, [r4, #52]	; 0x34
 800fab8:	89a3      	ldrh	r3, [r4, #12]
 800faba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fabe:	81a3      	strh	r3, [r4, #12]
 800fac0:	2300      	movs	r3, #0
 800fac2:	6063      	str	r3, [r4, #4]
 800fac4:	6923      	ldr	r3, [r4, #16]
 800fac6:	6023      	str	r3, [r4, #0]
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f043 0308 	orr.w	r3, r3, #8
 800face:	81a3      	strh	r3, [r4, #12]
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	b94b      	cbnz	r3, 800fae8 <__swsetup_r+0x7c>
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fade:	d003      	beq.n	800fae8 <__swsetup_r+0x7c>
 800fae0:	4621      	mov	r1, r4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 f884 	bl	800fbf0 <__smakebuf_r>
 800fae8:	89a0      	ldrh	r0, [r4, #12]
 800faea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faee:	f010 0301 	ands.w	r3, r0, #1
 800faf2:	d00a      	beq.n	800fb0a <__swsetup_r+0x9e>
 800faf4:	2300      	movs	r3, #0
 800faf6:	60a3      	str	r3, [r4, #8]
 800faf8:	6963      	ldr	r3, [r4, #20]
 800fafa:	425b      	negs	r3, r3
 800fafc:	61a3      	str	r3, [r4, #24]
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	b943      	cbnz	r3, 800fb14 <__swsetup_r+0xa8>
 800fb02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb06:	d1c4      	bne.n	800fa92 <__swsetup_r+0x26>
 800fb08:	bd38      	pop	{r3, r4, r5, pc}
 800fb0a:	0781      	lsls	r1, r0, #30
 800fb0c:	bf58      	it	pl
 800fb0e:	6963      	ldrpl	r3, [r4, #20]
 800fb10:	60a3      	str	r3, [r4, #8]
 800fb12:	e7f4      	b.n	800fafe <__swsetup_r+0x92>
 800fb14:	2000      	movs	r0, #0
 800fb16:	e7f7      	b.n	800fb08 <__swsetup_r+0x9c>
 800fb18:	200000a4 	.word	0x200000a4

0800fb1c <_raise_r>:
 800fb1c:	291f      	cmp	r1, #31
 800fb1e:	b538      	push	{r3, r4, r5, lr}
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	d904      	bls.n	800fb30 <_raise_r+0x14>
 800fb26:	2316      	movs	r3, #22
 800fb28:	6003      	str	r3, [r0, #0]
 800fb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fb32:	b112      	cbz	r2, 800fb3a <_raise_r+0x1e>
 800fb34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb38:	b94b      	cbnz	r3, 800fb4e <_raise_r+0x32>
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f000 f830 	bl	800fba0 <_getpid_r>
 800fb40:	462a      	mov	r2, r5
 800fb42:	4601      	mov	r1, r0
 800fb44:	4620      	mov	r0, r4
 800fb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb4a:	f000 b817 	b.w	800fb7c <_kill_r>
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d00a      	beq.n	800fb68 <_raise_r+0x4c>
 800fb52:	1c59      	adds	r1, r3, #1
 800fb54:	d103      	bne.n	800fb5e <_raise_r+0x42>
 800fb56:	2316      	movs	r3, #22
 800fb58:	6003      	str	r3, [r0, #0]
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	e7e7      	b.n	800fb2e <_raise_r+0x12>
 800fb5e:	2400      	movs	r4, #0
 800fb60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb64:	4628      	mov	r0, r5
 800fb66:	4798      	blx	r3
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7e0      	b.n	800fb2e <_raise_r+0x12>

0800fb6c <raise>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <raise+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f7ff bfd3 	b.w	800fb1c <_raise_r>
 800fb76:	bf00      	nop
 800fb78:	200000a4 	.word	0x200000a4

0800fb7c <_kill_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d07      	ldr	r5, [pc, #28]	; (800fb9c <_kill_r+0x20>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4604      	mov	r4, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	4611      	mov	r1, r2
 800fb88:	602b      	str	r3, [r5, #0]
 800fb8a:	f7f4 ff13 	bl	80049b4 <_kill>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d102      	bne.n	800fb98 <_kill_r+0x1c>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	b103      	cbz	r3, 800fb98 <_kill_r+0x1c>
 800fb96:	6023      	str	r3, [r4, #0]
 800fb98:	bd38      	pop	{r3, r4, r5, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20009340 	.word	0x20009340

0800fba0 <_getpid_r>:
 800fba0:	f7f4 bf00 	b.w	80049a4 <_getpid>

0800fba4 <__swhatbuf_r>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	460c      	mov	r4, r1
 800fba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbac:	2900      	cmp	r1, #0
 800fbae:	b096      	sub	sp, #88	; 0x58
 800fbb0:	4615      	mov	r5, r2
 800fbb2:	461e      	mov	r6, r3
 800fbb4:	da0d      	bge.n	800fbd2 <__swhatbuf_r+0x2e>
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	bf0c      	ite	eq
 800fbc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fbc6:	2340      	movne	r3, #64	; 0x40
 800fbc8:	2000      	movs	r0, #0
 800fbca:	6031      	str	r1, [r6, #0]
 800fbcc:	602b      	str	r3, [r5, #0]
 800fbce:	b016      	add	sp, #88	; 0x58
 800fbd0:	bd70      	pop	{r4, r5, r6, pc}
 800fbd2:	466a      	mov	r2, sp
 800fbd4:	f000 f848 	bl	800fc68 <_fstat_r>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	dbec      	blt.n	800fbb6 <__swhatbuf_r+0x12>
 800fbdc:	9901      	ldr	r1, [sp, #4]
 800fbde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fbe2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fbe6:	4259      	negs	r1, r3
 800fbe8:	4159      	adcs	r1, r3
 800fbea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbee:	e7eb      	b.n	800fbc8 <__swhatbuf_r+0x24>

0800fbf0 <__smakebuf_r>:
 800fbf0:	898b      	ldrh	r3, [r1, #12]
 800fbf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbf4:	079d      	lsls	r5, r3, #30
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	d507      	bpl.n	800fc0c <__smakebuf_r+0x1c>
 800fbfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	6123      	str	r3, [r4, #16]
 800fc04:	2301      	movs	r3, #1
 800fc06:	6163      	str	r3, [r4, #20]
 800fc08:	b002      	add	sp, #8
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	ab01      	add	r3, sp, #4
 800fc0e:	466a      	mov	r2, sp
 800fc10:	f7ff ffc8 	bl	800fba4 <__swhatbuf_r>
 800fc14:	9900      	ldr	r1, [sp, #0]
 800fc16:	4605      	mov	r5, r0
 800fc18:	4630      	mov	r0, r6
 800fc1a:	f7ff fab3 	bl	800f184 <_malloc_r>
 800fc1e:	b948      	cbnz	r0, 800fc34 <__smakebuf_r+0x44>
 800fc20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc24:	059a      	lsls	r2, r3, #22
 800fc26:	d4ef      	bmi.n	800fc08 <__smakebuf_r+0x18>
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	f043 0302 	orr.w	r3, r3, #2
 800fc30:	81a3      	strh	r3, [r4, #12]
 800fc32:	e7e3      	b.n	800fbfc <__smakebuf_r+0xc>
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	6020      	str	r0, [r4, #0]
 800fc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc3c:	81a3      	strh	r3, [r4, #12]
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	6163      	str	r3, [r4, #20]
 800fc42:	9b01      	ldr	r3, [sp, #4]
 800fc44:	6120      	str	r0, [r4, #16]
 800fc46:	b15b      	cbz	r3, 800fc60 <__smakebuf_r+0x70>
 800fc48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f000 f81d 	bl	800fc8c <_isatty_r>
 800fc52:	b128      	cbz	r0, 800fc60 <__smakebuf_r+0x70>
 800fc54:	89a3      	ldrh	r3, [r4, #12]
 800fc56:	f023 0303 	bic.w	r3, r3, #3
 800fc5a:	f043 0301 	orr.w	r3, r3, #1
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	89a3      	ldrh	r3, [r4, #12]
 800fc62:	431d      	orrs	r5, r3
 800fc64:	81a5      	strh	r5, [r4, #12]
 800fc66:	e7cf      	b.n	800fc08 <__smakebuf_r+0x18>

0800fc68 <_fstat_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	4d07      	ldr	r5, [pc, #28]	; (800fc88 <_fstat_r+0x20>)
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4604      	mov	r4, r0
 800fc70:	4608      	mov	r0, r1
 800fc72:	4611      	mov	r1, r2
 800fc74:	602b      	str	r3, [r5, #0]
 800fc76:	f7f4 fefc 	bl	8004a72 <_fstat>
 800fc7a:	1c43      	adds	r3, r0, #1
 800fc7c:	d102      	bne.n	800fc84 <_fstat_r+0x1c>
 800fc7e:	682b      	ldr	r3, [r5, #0]
 800fc80:	b103      	cbz	r3, 800fc84 <_fstat_r+0x1c>
 800fc82:	6023      	str	r3, [r4, #0]
 800fc84:	bd38      	pop	{r3, r4, r5, pc}
 800fc86:	bf00      	nop
 800fc88:	20009340 	.word	0x20009340

0800fc8c <_isatty_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d06      	ldr	r5, [pc, #24]	; (800fca8 <_isatty_r+0x1c>)
 800fc90:	2300      	movs	r3, #0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4608      	mov	r0, r1
 800fc96:	602b      	str	r3, [r5, #0]
 800fc98:	f7f4 fefb 	bl	8004a92 <_isatty>
 800fc9c:	1c43      	adds	r3, r0, #1
 800fc9e:	d102      	bne.n	800fca6 <_isatty_r+0x1a>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	b103      	cbz	r3, 800fca6 <_isatty_r+0x1a>
 800fca4:	6023      	str	r3, [r4, #0]
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	20009340 	.word	0x20009340
 800fcac:	00000000 	.word	0x00000000

0800fcb0 <sqrt>:
 800fcb0:	b508      	push	{r3, lr}
 800fcb2:	ed2d 8b04 	vpush	{d8-d9}
 800fcb6:	eeb0 8b40 	vmov.f64	d8, d0
 800fcba:	f000 fa9d 	bl	80101f8 <__ieee754_sqrt>
 800fcbe:	eeb4 8b48 	vcmp.f64	d8, d8
 800fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc6:	d60c      	bvs.n	800fce2 <sqrt+0x32>
 800fcc8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800fce8 <sqrt+0x38>
 800fccc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800fcd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd4:	d505      	bpl.n	800fce2 <sqrt+0x32>
 800fcd6:	f7ff f987 	bl	800efe8 <__errno>
 800fcda:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800fcde:	2321      	movs	r3, #33	; 0x21
 800fce0:	6003      	str	r3, [r0, #0]
 800fce2:	ecbd 8b04 	vpop	{d8-d9}
 800fce6:	bd08      	pop	{r3, pc}
	...

0800fcf0 <checkint>:
 800fcf0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fcf4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	b570      	push	{r4, r5, r6, lr}
 800fcfc:	dd2a      	ble.n	800fd54 <checkint+0x64>
 800fcfe:	f240 4333 	movw	r3, #1075	; 0x433
 800fd02:	429a      	cmp	r2, r3
 800fd04:	dc24      	bgt.n	800fd50 <checkint+0x60>
 800fd06:	1a9b      	subs	r3, r3, r2
 800fd08:	f1a3 0620 	sub.w	r6, r3, #32
 800fd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd10:	fa02 f403 	lsl.w	r4, r2, r3
 800fd14:	fa02 f606 	lsl.w	r6, r2, r6
 800fd18:	f1c3 0520 	rsb	r5, r3, #32
 800fd1c:	fa22 f505 	lsr.w	r5, r2, r5
 800fd20:	4334      	orrs	r4, r6
 800fd22:	432c      	orrs	r4, r5
 800fd24:	409a      	lsls	r2, r3
 800fd26:	ea20 0202 	bic.w	r2, r0, r2
 800fd2a:	ea21 0404 	bic.w	r4, r1, r4
 800fd2e:	4322      	orrs	r2, r4
 800fd30:	f1a3 0420 	sub.w	r4, r3, #32
 800fd34:	f1c3 0220 	rsb	r2, r3, #32
 800fd38:	d10c      	bne.n	800fd54 <checkint+0x64>
 800fd3a:	40d8      	lsrs	r0, r3
 800fd3c:	fa01 f302 	lsl.w	r3, r1, r2
 800fd40:	4318      	orrs	r0, r3
 800fd42:	40e1      	lsrs	r1, r4
 800fd44:	4308      	orrs	r0, r1
 800fd46:	f000 0001 	and.w	r0, r0, #1
 800fd4a:	f1d0 0002 	rsbs	r0, r0, #2
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	2002      	movs	r0, #2
 800fd52:	e7fc      	b.n	800fd4e <checkint+0x5e>
 800fd54:	2000      	movs	r0, #0
 800fd56:	e7fa      	b.n	800fd4e <checkint+0x5e>

0800fd58 <pow>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	ee10 4a90 	vmov	r4, s1
 800fd60:	ed2d 8b0a 	vpush	{d8-d12}
 800fd64:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800fd68:	ee11 aa90 	vmov	sl, s3
 800fd6c:	f108 32ff 	add.w	r2, r8, #4294967295
 800fd70:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800fd74:	429a      	cmp	r2, r3
 800fd76:	ee10 5a10 	vmov	r5, s0
 800fd7a:	ee11 0a10 	vmov	r0, s2
 800fd7e:	b087      	sub	sp, #28
 800fd80:	46c4      	mov	ip, r8
 800fd82:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800fd86:	d806      	bhi.n	800fd96 <pow+0x3e>
 800fd88:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800fd8c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800fd90:	2b7f      	cmp	r3, #127	; 0x7f
 800fd92:	f240 8156 	bls.w	8010042 <pow+0x2ea>
 800fd96:	1802      	adds	r2, r0, r0
 800fd98:	eb4a 010a 	adc.w	r1, sl, sl
 800fd9c:	f06f 0b01 	mvn.w	fp, #1
 800fda0:	1e57      	subs	r7, r2, #1
 800fda2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800fda6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800fdaa:	45bb      	cmp	fp, r7
 800fdac:	eb7e 0303 	sbcs.w	r3, lr, r3
 800fdb0:	d242      	bcs.n	800fe38 <pow+0xe0>
 800fdb2:	ea52 0301 	orrs.w	r3, r2, r1
 800fdb6:	f04f 0300 	mov.w	r3, #0
 800fdba:	d10c      	bne.n	800fdd6 <pow+0x7e>
 800fdbc:	196d      	adds	r5, r5, r5
 800fdbe:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800fdc2:	4164      	adcs	r4, r4
 800fdc4:	42ab      	cmp	r3, r5
 800fdc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fdca:	41a3      	sbcs	r3, r4
 800fdcc:	f0c0 808f 	bcc.w	800feee <pow+0x196>
 800fdd0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fdd4:	e02b      	b.n	800fe2e <pow+0xd6>
 800fdd6:	4ed4      	ldr	r6, [pc, #848]	; (8010128 <pow+0x3d0>)
 800fdd8:	42b4      	cmp	r4, r6
 800fdda:	bf08      	it	eq
 800fddc:	429d      	cmpeq	r5, r3
 800fdde:	d109      	bne.n	800fdf4 <pow+0x9c>
 800fde0:	1800      	adds	r0, r0, r0
 800fde2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800fde6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800fdea:	4283      	cmp	r3, r0
 800fdec:	4bcf      	ldr	r3, [pc, #828]	; (801012c <pow+0x3d4>)
 800fdee:	eb73 030a 	sbcs.w	r3, r3, sl
 800fdf2:	e7eb      	b.n	800fdcc <pow+0x74>
 800fdf4:	196d      	adds	r5, r5, r5
 800fdf6:	48ce      	ldr	r0, [pc, #824]	; (8010130 <pow+0x3d8>)
 800fdf8:	4164      	adcs	r4, r4
 800fdfa:	42ab      	cmp	r3, r5
 800fdfc:	eb70 0604 	sbcs.w	r6, r0, r4
 800fe00:	d375      	bcc.n	800feee <pow+0x196>
 800fe02:	4281      	cmp	r1, r0
 800fe04:	bf08      	it	eq
 800fe06:	429a      	cmpeq	r2, r3
 800fe08:	d171      	bne.n	800feee <pow+0x196>
 800fe0a:	4aca      	ldr	r2, [pc, #808]	; (8010134 <pow+0x3dc>)
 800fe0c:	4294      	cmp	r4, r2
 800fe0e:	bf08      	it	eq
 800fe10:	429d      	cmpeq	r5, r3
 800fe12:	d0dd      	beq.n	800fdd0 <pow+0x78>
 800fe14:	4294      	cmp	r4, r2
 800fe16:	ea6f 0a0a 	mvn.w	sl, sl
 800fe1a:	bf34      	ite	cc
 800fe1c:	2400      	movcc	r4, #0
 800fe1e:	2401      	movcs	r4, #1
 800fe20:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800fe24:	4554      	cmp	r4, sl
 800fe26:	f040 81dc 	bne.w	80101e2 <pow+0x48a>
 800fe2a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800fe2e:	b007      	add	sp, #28
 800fe30:	ecbd 8b0a 	vpop	{d8-d12}
 800fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe38:	196f      	adds	r7, r5, r5
 800fe3a:	eb44 0904 	adc.w	r9, r4, r4
 800fe3e:	1e7a      	subs	r2, r7, #1
 800fe40:	f169 0300 	sbc.w	r3, r9, #0
 800fe44:	4593      	cmp	fp, r2
 800fe46:	eb7e 0303 	sbcs.w	r3, lr, r3
 800fe4a:	d225      	bcs.n	800fe98 <pow+0x140>
 800fe4c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800fe50:	2c00      	cmp	r4, #0
 800fe52:	da13      	bge.n	800fe7c <pow+0x124>
 800fe54:	4651      	mov	r1, sl
 800fe56:	f7ff ff4b 	bl	800fcf0 <checkint>
 800fe5a:	2801      	cmp	r0, #1
 800fe5c:	d10e      	bne.n	800fe7c <pow+0x124>
 800fe5e:	eeb1 0b40 	vneg.f64	d0, d0
 800fe62:	ea57 0909 	orrs.w	r9, r7, r9
 800fe66:	d10b      	bne.n	800fe80 <pow+0x128>
 800fe68:	f1ba 0f00 	cmp.w	sl, #0
 800fe6c:	dadf      	bge.n	800fe2e <pow+0xd6>
 800fe6e:	b007      	add	sp, #28
 800fe70:	ecbd 8b0a 	vpop	{d8-d12}
 800fe74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe78:	f000 b9ee 	b.w	8010258 <__math_divzero>
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	e7f0      	b.n	800fe62 <pow+0x10a>
 800fe80:	f1ba 0f00 	cmp.w	sl, #0
 800fe84:	dad3      	bge.n	800fe2e <pow+0xd6>
 800fe86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fe8a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800fe8e:	ed8d 7b00 	vstr	d7, [sp]
 800fe92:	ed9d 0b00 	vldr	d0, [sp]
 800fe96:	e7ca      	b.n	800fe2e <pow+0xd6>
 800fe98:	2c00      	cmp	r4, #0
 800fe9a:	da2b      	bge.n	800fef4 <pow+0x19c>
 800fe9c:	4651      	mov	r1, sl
 800fe9e:	f7ff ff27 	bl	800fcf0 <checkint>
 800fea2:	b930      	cbnz	r0, 800feb2 <pow+0x15a>
 800fea4:	b007      	add	sp, #28
 800fea6:	ecbd 8b0a 	vpop	{d8-d12}
 800feaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feae:	f000 b9eb 	b.w	8010288 <__math_invalid>
 800feb2:	1e41      	subs	r1, r0, #1
 800feb4:	4248      	negs	r0, r1
 800feb6:	4148      	adcs	r0, r1
 800feb8:	0480      	lsls	r0, r0, #18
 800feba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800febe:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800fec2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800fec6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800feca:	2b7f      	cmp	r3, #127	; 0x7f
 800fecc:	d92d      	bls.n	800ff2a <pow+0x1d2>
 800fece:	4b96      	ldr	r3, [pc, #600]	; (8010128 <pow+0x3d0>)
 800fed0:	2000      	movs	r0, #0
 800fed2:	429c      	cmp	r4, r3
 800fed4:	bf08      	it	eq
 800fed6:	4285      	cmpeq	r5, r0
 800fed8:	f43f af7a 	beq.w	800fdd0 <pow+0x78>
 800fedc:	f240 31bd 	movw	r1, #957	; 0x3bd
 800fee0:	428a      	cmp	r2, r1
 800fee2:	d80c      	bhi.n	800fefe <pow+0x1a6>
 800fee4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fee8:	42a8      	cmp	r0, r5
 800feea:	41a3      	sbcs	r3, r4
 800feec:	d204      	bcs.n	800fef8 <pow+0x1a0>
 800feee:	ee31 0b00 	vadd.f64	d0, d1, d0
 800fef2:	e79c      	b.n	800fe2e <pow+0xd6>
 800fef4:	2000      	movs	r0, #0
 800fef6:	e7e4      	b.n	800fec2 <pow+0x16a>
 800fef8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fefc:	e797      	b.n	800fe2e <pow+0xd6>
 800fefe:	2d01      	cmp	r5, #1
 800ff00:	eb74 0303 	sbcs.w	r3, r4, r3
 800ff04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ff08:	bf34      	ite	cc
 800ff0a:	2301      	movcc	r3, #1
 800ff0c:	2300      	movcs	r3, #0
 800ff0e:	4296      	cmp	r6, r2
 800ff10:	bf8c      	ite	hi
 800ff12:	2600      	movhi	r6, #0
 800ff14:	2601      	movls	r6, #1
 800ff16:	42b3      	cmp	r3, r6
 800ff18:	f000 809b 	beq.w	8010052 <pow+0x2fa>
 800ff1c:	b007      	add	sp, #28
 800ff1e:	ecbd 8b0a 	vpop	{d8-d12}
 800ff22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff26:	f000 b98f 	b.w	8010248 <__math_oflow>
 800ff2a:	f1bc 0f00 	cmp.w	ip, #0
 800ff2e:	d10b      	bne.n	800ff48 <pow+0x1f0>
 800ff30:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8010118 <pow+0x3c0>
 800ff34:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ff38:	ec53 2b17 	vmov	r2, r3, d7
 800ff3c:	ee17 5a10 	vmov	r5, s14
 800ff40:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ff44:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800ff48:	4b7b      	ldr	r3, [pc, #492]	; (8010138 <pow+0x3e0>)
 800ff4a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ff4e:	4423      	add	r3, r4
 800ff50:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800ff54:	1519      	asrs	r1, r3, #20
 800ff56:	0d1b      	lsrs	r3, r3, #20
 800ff58:	051b      	lsls	r3, r3, #20
 800ff5a:	1ae7      	subs	r7, r4, r3
 800ff5c:	4b77      	ldr	r3, [pc, #476]	; (801013c <pow+0x3e4>)
 800ff5e:	ee03 1a10 	vmov	s6, r1
 800ff62:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800ff66:	1e2e      	subs	r6, r5, #0
 800ff68:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800ff6c:	ec47 6b15 	vmov	d5, r6, r7
 800ff70:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800ff74:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ff78:	ed93 7b00 	vldr	d7, [r3]
 800ff7c:	ed93 5b02 	vldr	d5, [r3, #8]
 800ff80:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ff84:	eea3 2b07 	vfma.f64	d2, d3, d7
 800ff88:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800ff8c:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ff90:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ff94:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ff98:	ed93 5b04 	vldr	d5, [r3, #16]
 800ff9c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ffa0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ffa4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ffa8:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ffac:	ee34 8b00 	vadd.f64	d8, d4, d0
 800ffb0:	eeb0 9b40 	vmov.f64	d9, d0
 800ffb4:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ffb8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800ffbc:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ffc0:	ed93 5b06 	vldr	d5, [r3, #24]
 800ffc4:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ffc8:	ee37 7b09 	vadd.f64	d7, d7, d9
 800ffcc:	ed93 4b08 	vldr	d4, [r3, #32]
 800ffd0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800ffd4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800ffd8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ffdc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800ffe0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800ffe4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ffe8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800ffec:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800fff0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800fff4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fff8:	eeab 7b05 	vfma.f64	d7, d11, d5
 800fffc:	ee38 4b07 	vadd.f64	d4, d8, d7
 8010000:	ee21 6b04 	vmul.f64	d6, d1, d4
 8010004:	ee16 3a90 	vmov	r3, s13
 8010008:	eeb0 5b46 	vmov.f64	d5, d6
 801000c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010010:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010014:	18b2      	adds	r2, r6, r2
 8010016:	2a3e      	cmp	r2, #62	; 0x3e
 8010018:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801001c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8010020:	ee38 8b07 	vadd.f64	d8, d8, d7
 8010024:	eea1 5b08 	vfma.f64	d5, d1, d8
 8010028:	d91b      	bls.n	8010062 <pow+0x30a>
 801002a:	2a00      	cmp	r2, #0
 801002c:	da0b      	bge.n	8010046 <pow+0x2ee>
 801002e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010032:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010036:	2800      	cmp	r0, #0
 8010038:	f43f aef9 	beq.w	800fe2e <pow+0xd6>
 801003c:	eeb1 0b40 	vneg.f64	d0, d0
 8010040:	e6f5      	b.n	800fe2e <pow+0xd6>
 8010042:	2000      	movs	r0, #0
 8010044:	e780      	b.n	800ff48 <pow+0x1f0>
 8010046:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801004a:	d909      	bls.n	8010060 <pow+0x308>
 801004c:	2b00      	cmp	r3, #0
 801004e:	f6bf af65 	bge.w	800ff1c <pow+0x1c4>
 8010052:	b007      	add	sp, #28
 8010054:	ecbd 8b0a 	vpop	{d8-d12}
 8010058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	f000 b8ec 	b.w	8010238 <__math_uflow>
 8010060:	2600      	movs	r6, #0
 8010062:	4937      	ldr	r1, [pc, #220]	; (8010140 <pow+0x3e8>)
 8010064:	ed91 4b02 	vldr	d4, [r1, #8]
 8010068:	ed91 3b00 	vldr	d3, [r1]
 801006c:	eeb0 7b44 	vmov.f64	d7, d4
 8010070:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010074:	ee17 5a10 	vmov	r5, s14
 8010078:	ee37 7b44 	vsub.f64	d7, d7, d4
 801007c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010080:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010084:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010088:	ed91 4b06 	vldr	d4, [r1, #24]
 801008c:	18dc      	adds	r4, r3, r3
 801008e:	f104 030f 	add.w	r3, r4, #15
 8010092:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010096:	eea7 6b04 	vfma.f64	d6, d7, d4
 801009a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801009e:	ee35 5b06 	vadd.f64	d5, d5, d6
 80100a2:	ee25 6b05 	vmul.f64	d6, d5, d5
 80100a6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80100aa:	ed91 4b08 	vldr	d4, [r1, #32]
 80100ae:	ee35 7b07 	vadd.f64	d7, d5, d7
 80100b2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80100b6:	eea5 4b03 	vfma.f64	d4, d5, d3
 80100ba:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 80100be:	eea6 7b04 	vfma.f64	d7, d6, d4
 80100c2:	ee26 6b06 	vmul.f64	d6, d6, d6
 80100c6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80100ca:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80100ce:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80100d2:	eea5 4b03 	vfma.f64	d4, d5, d3
 80100d6:	1940      	adds	r0, r0, r5
 80100d8:	2700      	movs	r7, #0
 80100da:	eb17 020c 	adds.w	r2, r7, ip
 80100de:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80100e2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80100e6:	2e00      	cmp	r6, #0
 80100e8:	d176      	bne.n	80101d8 <pow+0x480>
 80100ea:	42bd      	cmp	r5, r7
 80100ec:	db2a      	blt.n	8010144 <pow+0x3ec>
 80100ee:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80100f2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80100f6:	4610      	mov	r0, r2
 80100f8:	ec41 0b10 	vmov	d0, r0, r1
 80100fc:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010100:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010120 <pow+0x3c8>
 8010104:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010108:	b007      	add	sp, #28
 801010a:	ecbd 8b0a 	vpop	{d8-d12}
 801010e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010112:	f000 b8d1 	b.w	80102b8 <__math_check_oflow>
 8010116:	bf00      	nop
 8010118:	00000000 	.word	0x00000000
 801011c:	43300000 	.word	0x43300000
 8010120:	00000000 	.word	0x00000000
 8010124:	7f000000 	.word	0x7f000000
 8010128:	3ff00000 	.word	0x3ff00000
 801012c:	fff00000 	.word	0xfff00000
 8010130:	ffe00000 	.word	0xffe00000
 8010134:	7fe00000 	.word	0x7fe00000
 8010138:	c0196aab 	.word	0xc0196aab
 801013c:	080f68d0 	.word	0x080f68d0
 8010140:	080f7918 	.word	0x080f7918
 8010144:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010148:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801014c:	4610      	mov	r0, r2
 801014e:	ec41 0b15 	vmov	d5, r0, r1
 8010152:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8010156:	ee27 6b05 	vmul.f64	d6, d7, d5
 801015a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801015e:	eeb0 4bc7 	vabs.f64	d4, d7
 8010162:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8010166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80101e8 <pow+0x490>
 801016e:	d52a      	bpl.n	80101c6 <pow+0x46e>
 8010170:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010174:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010180:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8010184:	bf58      	it	pl
 8010186:	eeb0 4b43 	vmovpl.f64	d4, d3
 801018a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801018e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8010192:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010196:	ee36 6b05 	vadd.f64	d6, d6, d5
 801019a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801019e:	ee36 7b44 	vsub.f64	d7, d6, d4
 80101a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101aa:	d104      	bne.n	80101b6 <pow+0x45e>
 80101ac:	4632      	mov	r2, r6
 80101ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80101b2:	ec43 2b17 	vmov	d7, r2, r3
 80101b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 80101be:	ee26 6b00 	vmul.f64	d6, d6, d0
 80101c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80101c6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80101ca:	b007      	add	sp, #28
 80101cc:	ecbd 8b0a 	vpop	{d8-d12}
 80101d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	f000 b867 	b.w	80102a6 <__math_check_uflow>
 80101d8:	ec43 2b10 	vmov	d0, r2, r3
 80101dc:	eea7 0b00 	vfma.f64	d0, d7, d0
 80101e0:	e625      	b.n	800fe2e <pow+0xd6>
 80101e2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80101f0 <pow+0x498>
 80101e6:	e622      	b.n	800fe2e <pow+0xd6>
 80101e8:	00000000 	.word	0x00000000
 80101ec:	00100000 	.word	0x00100000
	...

080101f8 <__ieee754_sqrt>:
 80101f8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80101fc:	4770      	bx	lr

080101fe <with_errno>:
 80101fe:	b513      	push	{r0, r1, r4, lr}
 8010200:	4604      	mov	r4, r0
 8010202:	ed8d 0b00 	vstr	d0, [sp]
 8010206:	f7fe feef 	bl	800efe8 <__errno>
 801020a:	ed9d 0b00 	vldr	d0, [sp]
 801020e:	6004      	str	r4, [r0, #0]
 8010210:	b002      	add	sp, #8
 8010212:	bd10      	pop	{r4, pc}

08010214 <xflow>:
 8010214:	b082      	sub	sp, #8
 8010216:	b158      	cbz	r0, 8010230 <xflow+0x1c>
 8010218:	eeb1 7b40 	vneg.f64	d7, d0
 801021c:	ed8d 7b00 	vstr	d7, [sp]
 8010220:	ed9d 7b00 	vldr	d7, [sp]
 8010224:	2022      	movs	r0, #34	; 0x22
 8010226:	ee20 0b07 	vmul.f64	d0, d0, d7
 801022a:	b002      	add	sp, #8
 801022c:	f7ff bfe7 	b.w	80101fe <with_errno>
 8010230:	eeb0 7b40 	vmov.f64	d7, d0
 8010234:	e7f2      	b.n	801021c <xflow+0x8>
	...

08010238 <__math_uflow>:
 8010238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010240 <__math_uflow+0x8>
 801023c:	f7ff bfea 	b.w	8010214 <xflow>
 8010240:	00000000 	.word	0x00000000
 8010244:	10000000 	.word	0x10000000

08010248 <__math_oflow>:
 8010248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010250 <__math_oflow+0x8>
 801024c:	f7ff bfe2 	b.w	8010214 <xflow>
 8010250:	00000000 	.word	0x00000000
 8010254:	70000000 	.word	0x70000000

08010258 <__math_divzero>:
 8010258:	b082      	sub	sp, #8
 801025a:	2800      	cmp	r0, #0
 801025c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010260:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010264:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010268:	ed8d 7b00 	vstr	d7, [sp]
 801026c:	ed9d 0b00 	vldr	d0, [sp]
 8010270:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010280 <__math_divzero+0x28>
 8010274:	2022      	movs	r0, #34	; 0x22
 8010276:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801027a:	b002      	add	sp, #8
 801027c:	f7ff bfbf 	b.w	80101fe <with_errno>
	...

08010288 <__math_invalid>:
 8010288:	eeb0 7b40 	vmov.f64	d7, d0
 801028c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010294:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010298:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801029c:	d602      	bvs.n	80102a4 <__math_invalid+0x1c>
 801029e:	2021      	movs	r0, #33	; 0x21
 80102a0:	f7ff bfad 	b.w	80101fe <with_errno>
 80102a4:	4770      	bx	lr

080102a6 <__math_check_uflow>:
 80102a6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80102aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ae:	d102      	bne.n	80102b6 <__math_check_uflow+0x10>
 80102b0:	2022      	movs	r0, #34	; 0x22
 80102b2:	f7ff bfa4 	b.w	80101fe <with_errno>
 80102b6:	4770      	bx	lr

080102b8 <__math_check_oflow>:
 80102b8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80102d8 <__math_check_oflow+0x20>
 80102bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80102c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80102c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c8:	dd02      	ble.n	80102d0 <__math_check_oflow+0x18>
 80102ca:	2022      	movs	r0, #34	; 0x22
 80102cc:	f7ff bf97 	b.w	80101fe <with_errno>
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	f3af 8000 	nop.w
 80102d8:	ffffffff 	.word	0xffffffff
 80102dc:	7fefffff 	.word	0x7fefffff

080102e0 <_sbrk>:
 80102e0:	4a04      	ldr	r2, [pc, #16]	; (80102f4 <_sbrk+0x14>)
 80102e2:	6811      	ldr	r1, [r2, #0]
 80102e4:	4603      	mov	r3, r0
 80102e6:	b909      	cbnz	r1, 80102ec <_sbrk+0xc>
 80102e8:	4903      	ldr	r1, [pc, #12]	; (80102f8 <_sbrk+0x18>)
 80102ea:	6011      	str	r1, [r2, #0]
 80102ec:	6810      	ldr	r0, [r2, #0]
 80102ee:	4403      	add	r3, r0
 80102f0:	6013      	str	r3, [r2, #0]
 80102f2:	4770      	bx	lr
 80102f4:	20009350 	.word	0x20009350
 80102f8:	20009358 	.word	0x20009358

080102fc <_init>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	bf00      	nop
 8010300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010302:	bc08      	pop	{r3}
 8010304:	469e      	mov	lr, r3
 8010306:	4770      	bx	lr

08010308 <_fini>:
 8010308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030a:	bf00      	nop
 801030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801030e:	bc08      	pop	{r3}
 8010310:	469e      	mov	lr, r3
 8010312:	4770      	bx	lr
